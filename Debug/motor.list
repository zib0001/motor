
motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecd8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  0800ed98  0800ed98  0001ed98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f614  0800f614  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800f614  0800f614  0001f614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f61c  0800f61c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f61c  0800f61c  0001f61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f620  0800f620  0001f620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800f624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b2c  20000210  0800f834  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d3c  0800f834  00021d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189cb  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003586  00000000  00000000  00038c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003c190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043c0  00000000  00000000  0003e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016855  00000000  00000000  00042c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000906cb  00000000  00000000  000594bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9b88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fdc  00000000  00000000  000e9bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000210 	.word	0x20000210
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ed80 	.word	0x0800ed80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000214 	.word	0x20000214
 8000104:	0800ed80 	.word	0x0800ed80

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fdf3 	bl	8002028 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fd43 	bl	8001ed8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fde5 	bl	8002028 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fddb 	bl	8002028 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd6b 	bl	8001f5c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd61 	bl	8001f5c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb59 	bl	8000b68 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fae5 	bl	8000a90 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb4b 	bl	8000b68 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb41 	bl	8000b68 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 faf1 	bl	8000adc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fae7 	bl	8000adc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f8bc 	bl	80006c8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	; 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 fde5 	bl	8001198 <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	; 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fc31 	bl	8000e3c <__aeabi_fsub>
 80005da:	f000 fddd 	bl	8001198 <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fb93 	bl	8002d28 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f001 ffdc 	bl	80025c8 <__aeabi_dsub>
 8000610:	f002 fb8a 	bl	8002d28 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__aeabi_d2lz>:
 8000624:	b570      	push	{r4, r5, r6, lr}
 8000626:	0005      	movs	r5, r0
 8000628:	000c      	movs	r4, r1
 800062a:	2200      	movs	r2, #0
 800062c:	2300      	movs	r3, #0
 800062e:	0028      	movs	r0, r5
 8000630:	0021      	movs	r1, r4
 8000632:	f7ff ff11 	bl	8000458 <__aeabi_dcmplt>
 8000636:	2800      	cmp	r0, #0
 8000638:	d108      	bne.n	800064c <__aeabi_d2lz+0x28>
 800063a:	0028      	movs	r0, r5
 800063c:	0021      	movs	r1, r4
 800063e:	f000 f80f 	bl	8000660 <__aeabi_d2ulz>
 8000642:	0002      	movs	r2, r0
 8000644:	000b      	movs	r3, r1
 8000646:	0010      	movs	r0, r2
 8000648:	0019      	movs	r1, r3
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	061b      	lsls	r3, r3, #24
 8000650:	18e1      	adds	r1, r4, r3
 8000652:	0028      	movs	r0, r5
 8000654:	f000 f804 	bl	8000660 <__aeabi_d2ulz>
 8000658:	2300      	movs	r3, #0
 800065a:	4242      	negs	r2, r0
 800065c:	418b      	sbcs	r3, r1
 800065e:	e7f2      	b.n	8000646 <__aeabi_d2lz+0x22>

08000660 <__aeabi_d2ulz>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	2200      	movs	r2, #0
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <__aeabi_d2ulz+0x34>)
 8000666:	000d      	movs	r5, r1
 8000668:	0004      	movs	r4, r0
 800066a:	f001 fd41 	bl	80020f0 <__aeabi_dmul>
 800066e:	f7ff ffbb 	bl	80005e8 <__aeabi_d2uiz>
 8000672:	0006      	movs	r6, r0
 8000674:	f002 fbbe 	bl	8002df4 <__aeabi_ui2d>
 8000678:	2200      	movs	r2, #0
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <__aeabi_d2ulz+0x38>)
 800067c:	f001 fd38 	bl	80020f0 <__aeabi_dmul>
 8000680:	0002      	movs	r2, r0
 8000682:	000b      	movs	r3, r1
 8000684:	0020      	movs	r0, r4
 8000686:	0029      	movs	r1, r5
 8000688:	f001 ff9e 	bl	80025c8 <__aeabi_dsub>
 800068c:	f7ff ffac 	bl	80005e8 <__aeabi_d2uiz>
 8000690:	0031      	movs	r1, r6
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	3df00000 	.word	0x3df00000
 8000698:	41f00000 	.word	0x41f00000

0800069c <__aeabi_l2d>:
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	0006      	movs	r6, r0
 80006a0:	0008      	movs	r0, r1
 80006a2:	f002 fb77 	bl	8002d94 <__aeabi_i2d>
 80006a6:	2200      	movs	r2, #0
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <__aeabi_l2d+0x28>)
 80006aa:	f001 fd21 	bl	80020f0 <__aeabi_dmul>
 80006ae:	000d      	movs	r5, r1
 80006b0:	0004      	movs	r4, r0
 80006b2:	0030      	movs	r0, r6
 80006b4:	f002 fb9e 	bl	8002df4 <__aeabi_ui2d>
 80006b8:	002b      	movs	r3, r5
 80006ba:	0022      	movs	r2, r4
 80006bc:	f000 fdda 	bl	8001274 <__aeabi_dadd>
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	41f00000 	.word	0x41f00000

080006c8 <__udivmoddi4>:
 80006c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ca:	4657      	mov	r7, sl
 80006cc:	464e      	mov	r6, r9
 80006ce:	4645      	mov	r5, r8
 80006d0:	46de      	mov	lr, fp
 80006d2:	b5e0      	push	{r5, r6, r7, lr}
 80006d4:	0004      	movs	r4, r0
 80006d6:	000d      	movs	r5, r1
 80006d8:	4692      	mov	sl, r2
 80006da:	4699      	mov	r9, r3
 80006dc:	b083      	sub	sp, #12
 80006de:	428b      	cmp	r3, r1
 80006e0:	d830      	bhi.n	8000744 <__udivmoddi4+0x7c>
 80006e2:	d02d      	beq.n	8000740 <__udivmoddi4+0x78>
 80006e4:	4649      	mov	r1, r9
 80006e6:	4650      	mov	r0, sl
 80006e8:	f002 fc50 	bl	8002f8c <__clzdi2>
 80006ec:	0029      	movs	r1, r5
 80006ee:	0006      	movs	r6, r0
 80006f0:	0020      	movs	r0, r4
 80006f2:	f002 fc4b 	bl	8002f8c <__clzdi2>
 80006f6:	1a33      	subs	r3, r6, r0
 80006f8:	4698      	mov	r8, r3
 80006fa:	3b20      	subs	r3, #32
 80006fc:	469b      	mov	fp, r3
 80006fe:	d433      	bmi.n	8000768 <__udivmoddi4+0xa0>
 8000700:	465a      	mov	r2, fp
 8000702:	4653      	mov	r3, sl
 8000704:	4093      	lsls	r3, r2
 8000706:	4642      	mov	r2, r8
 8000708:	001f      	movs	r7, r3
 800070a:	4653      	mov	r3, sl
 800070c:	4093      	lsls	r3, r2
 800070e:	001e      	movs	r6, r3
 8000710:	42af      	cmp	r7, r5
 8000712:	d83a      	bhi.n	800078a <__udivmoddi4+0xc2>
 8000714:	42af      	cmp	r7, r5
 8000716:	d100      	bne.n	800071a <__udivmoddi4+0x52>
 8000718:	e078      	b.n	800080c <__udivmoddi4+0x144>
 800071a:	465b      	mov	r3, fp
 800071c:	1ba4      	subs	r4, r4, r6
 800071e:	41bd      	sbcs	r5, r7
 8000720:	2b00      	cmp	r3, #0
 8000722:	da00      	bge.n	8000726 <__udivmoddi4+0x5e>
 8000724:	e075      	b.n	8000812 <__udivmoddi4+0x14a>
 8000726:	2200      	movs	r2, #0
 8000728:	2300      	movs	r3, #0
 800072a:	9200      	str	r2, [sp, #0]
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	2301      	movs	r3, #1
 8000730:	465a      	mov	r2, fp
 8000732:	4093      	lsls	r3, r2
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	2301      	movs	r3, #1
 8000738:	4642      	mov	r2, r8
 800073a:	4093      	lsls	r3, r2
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	e028      	b.n	8000792 <__udivmoddi4+0xca>
 8000740:	4282      	cmp	r2, r0
 8000742:	d9cf      	bls.n	80006e4 <__udivmoddi4+0x1c>
 8000744:	2200      	movs	r2, #0
 8000746:	2300      	movs	r3, #0
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <__udivmoddi4+0x8e>
 8000752:	601c      	str	r4, [r3, #0]
 8000754:	605d      	str	r5, [r3, #4]
 8000756:	9800      	ldr	r0, [sp, #0]
 8000758:	9901      	ldr	r1, [sp, #4]
 800075a:	b003      	add	sp, #12
 800075c:	bcf0      	pop	{r4, r5, r6, r7}
 800075e:	46bb      	mov	fp, r7
 8000760:	46b2      	mov	sl, r6
 8000762:	46a9      	mov	r9, r5
 8000764:	46a0      	mov	r8, r4
 8000766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000768:	4642      	mov	r2, r8
 800076a:	2320      	movs	r3, #32
 800076c:	1a9b      	subs	r3, r3, r2
 800076e:	4652      	mov	r2, sl
 8000770:	40da      	lsrs	r2, r3
 8000772:	4641      	mov	r1, r8
 8000774:	0013      	movs	r3, r2
 8000776:	464a      	mov	r2, r9
 8000778:	408a      	lsls	r2, r1
 800077a:	0017      	movs	r7, r2
 800077c:	4642      	mov	r2, r8
 800077e:	431f      	orrs	r7, r3
 8000780:	4653      	mov	r3, sl
 8000782:	4093      	lsls	r3, r2
 8000784:	001e      	movs	r6, r3
 8000786:	42af      	cmp	r7, r5
 8000788:	d9c4      	bls.n	8000714 <__udivmoddi4+0x4c>
 800078a:	2200      	movs	r2, #0
 800078c:	2300      	movs	r3, #0
 800078e:	9200      	str	r2, [sp, #0]
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	4643      	mov	r3, r8
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0d9      	beq.n	800074c <__udivmoddi4+0x84>
 8000798:	07fb      	lsls	r3, r7, #31
 800079a:	0872      	lsrs	r2, r6, #1
 800079c:	431a      	orrs	r2, r3
 800079e:	4646      	mov	r6, r8
 80007a0:	087b      	lsrs	r3, r7, #1
 80007a2:	e00e      	b.n	80007c2 <__udivmoddi4+0xfa>
 80007a4:	42ab      	cmp	r3, r5
 80007a6:	d101      	bne.n	80007ac <__udivmoddi4+0xe4>
 80007a8:	42a2      	cmp	r2, r4
 80007aa:	d80c      	bhi.n	80007c6 <__udivmoddi4+0xfe>
 80007ac:	1aa4      	subs	r4, r4, r2
 80007ae:	419d      	sbcs	r5, r3
 80007b0:	2001      	movs	r0, #1
 80007b2:	1924      	adds	r4, r4, r4
 80007b4:	416d      	adcs	r5, r5
 80007b6:	2100      	movs	r1, #0
 80007b8:	3e01      	subs	r6, #1
 80007ba:	1824      	adds	r4, r4, r0
 80007bc:	414d      	adcs	r5, r1
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d006      	beq.n	80007d0 <__udivmoddi4+0x108>
 80007c2:	42ab      	cmp	r3, r5
 80007c4:	d9ee      	bls.n	80007a4 <__udivmoddi4+0xdc>
 80007c6:	3e01      	subs	r6, #1
 80007c8:	1924      	adds	r4, r4, r4
 80007ca:	416d      	adcs	r5, r5
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d1f8      	bne.n	80007c2 <__udivmoddi4+0xfa>
 80007d0:	9800      	ldr	r0, [sp, #0]
 80007d2:	9901      	ldr	r1, [sp, #4]
 80007d4:	465b      	mov	r3, fp
 80007d6:	1900      	adds	r0, r0, r4
 80007d8:	4169      	adcs	r1, r5
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db24      	blt.n	8000828 <__udivmoddi4+0x160>
 80007de:	002b      	movs	r3, r5
 80007e0:	465a      	mov	r2, fp
 80007e2:	4644      	mov	r4, r8
 80007e4:	40d3      	lsrs	r3, r2
 80007e6:	002a      	movs	r2, r5
 80007e8:	40e2      	lsrs	r2, r4
 80007ea:	001c      	movs	r4, r3
 80007ec:	465b      	mov	r3, fp
 80007ee:	0015      	movs	r5, r2
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db2a      	blt.n	800084a <__udivmoddi4+0x182>
 80007f4:	0026      	movs	r6, r4
 80007f6:	409e      	lsls	r6, r3
 80007f8:	0033      	movs	r3, r6
 80007fa:	0026      	movs	r6, r4
 80007fc:	4647      	mov	r7, r8
 80007fe:	40be      	lsls	r6, r7
 8000800:	0032      	movs	r2, r6
 8000802:	1a80      	subs	r0, r0, r2
 8000804:	4199      	sbcs	r1, r3
 8000806:	9000      	str	r0, [sp, #0]
 8000808:	9101      	str	r1, [sp, #4]
 800080a:	e79f      	b.n	800074c <__udivmoddi4+0x84>
 800080c:	42a3      	cmp	r3, r4
 800080e:	d8bc      	bhi.n	800078a <__udivmoddi4+0xc2>
 8000810:	e783      	b.n	800071a <__udivmoddi4+0x52>
 8000812:	4642      	mov	r2, r8
 8000814:	2320      	movs	r3, #32
 8000816:	2100      	movs	r1, #0
 8000818:	1a9b      	subs	r3, r3, r2
 800081a:	2200      	movs	r2, #0
 800081c:	9100      	str	r1, [sp, #0]
 800081e:	9201      	str	r2, [sp, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	40da      	lsrs	r2, r3
 8000824:	9201      	str	r2, [sp, #4]
 8000826:	e786      	b.n	8000736 <__udivmoddi4+0x6e>
 8000828:	4642      	mov	r2, r8
 800082a:	2320      	movs	r3, #32
 800082c:	1a9b      	subs	r3, r3, r2
 800082e:	002a      	movs	r2, r5
 8000830:	4646      	mov	r6, r8
 8000832:	409a      	lsls	r2, r3
 8000834:	0023      	movs	r3, r4
 8000836:	40f3      	lsrs	r3, r6
 8000838:	4644      	mov	r4, r8
 800083a:	4313      	orrs	r3, r2
 800083c:	002a      	movs	r2, r5
 800083e:	40e2      	lsrs	r2, r4
 8000840:	001c      	movs	r4, r3
 8000842:	465b      	mov	r3, fp
 8000844:	0015      	movs	r5, r2
 8000846:	2b00      	cmp	r3, #0
 8000848:	dad4      	bge.n	80007f4 <__udivmoddi4+0x12c>
 800084a:	4642      	mov	r2, r8
 800084c:	002f      	movs	r7, r5
 800084e:	2320      	movs	r3, #32
 8000850:	0026      	movs	r6, r4
 8000852:	4097      	lsls	r7, r2
 8000854:	1a9b      	subs	r3, r3, r2
 8000856:	40de      	lsrs	r6, r3
 8000858:	003b      	movs	r3, r7
 800085a:	4333      	orrs	r3, r6
 800085c:	e7cd      	b.n	80007fa <__udivmoddi4+0x132>
 800085e:	46c0      	nop			; (mov r8, r8)

08000860 <__aeabi_fdiv>:
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	464f      	mov	r7, r9
 8000864:	4646      	mov	r6, r8
 8000866:	46d6      	mov	lr, sl
 8000868:	0245      	lsls	r5, r0, #9
 800086a:	b5c0      	push	{r6, r7, lr}
 800086c:	0047      	lsls	r7, r0, #1
 800086e:	1c0c      	adds	r4, r1, #0
 8000870:	0a6d      	lsrs	r5, r5, #9
 8000872:	0e3f      	lsrs	r7, r7, #24
 8000874:	0fc6      	lsrs	r6, r0, #31
 8000876:	2f00      	cmp	r7, #0
 8000878:	d100      	bne.n	800087c <__aeabi_fdiv+0x1c>
 800087a:	e070      	b.n	800095e <__aeabi_fdiv+0xfe>
 800087c:	2fff      	cmp	r7, #255	; 0xff
 800087e:	d100      	bne.n	8000882 <__aeabi_fdiv+0x22>
 8000880:	e075      	b.n	800096e <__aeabi_fdiv+0x10e>
 8000882:	00eb      	lsls	r3, r5, #3
 8000884:	2580      	movs	r5, #128	; 0x80
 8000886:	04ed      	lsls	r5, r5, #19
 8000888:	431d      	orrs	r5, r3
 800088a:	2300      	movs	r3, #0
 800088c:	4699      	mov	r9, r3
 800088e:	469a      	mov	sl, r3
 8000890:	3f7f      	subs	r7, #127	; 0x7f
 8000892:	0260      	lsls	r0, r4, #9
 8000894:	0a43      	lsrs	r3, r0, #9
 8000896:	4698      	mov	r8, r3
 8000898:	0063      	lsls	r3, r4, #1
 800089a:	0e1b      	lsrs	r3, r3, #24
 800089c:	0fe4      	lsrs	r4, r4, #31
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d04e      	beq.n	8000940 <__aeabi_fdiv+0xe0>
 80008a2:	2bff      	cmp	r3, #255	; 0xff
 80008a4:	d046      	beq.n	8000934 <__aeabi_fdiv+0xd4>
 80008a6:	4642      	mov	r2, r8
 80008a8:	00d0      	lsls	r0, r2, #3
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	04d2      	lsls	r2, r2, #19
 80008ae:	4302      	orrs	r2, r0
 80008b0:	4690      	mov	r8, r2
 80008b2:	2200      	movs	r2, #0
 80008b4:	3b7f      	subs	r3, #127	; 0x7f
 80008b6:	0031      	movs	r1, r6
 80008b8:	1aff      	subs	r7, r7, r3
 80008ba:	464b      	mov	r3, r9
 80008bc:	4061      	eors	r1, r4
 80008be:	b2c9      	uxtb	r1, r1
 80008c0:	4313      	orrs	r3, r2
 80008c2:	2b0f      	cmp	r3, #15
 80008c4:	d900      	bls.n	80008c8 <__aeabi_fdiv+0x68>
 80008c6:	e0b5      	b.n	8000a34 <__aeabi_fdiv+0x1d4>
 80008c8:	486e      	ldr	r0, [pc, #440]	; (8000a84 <__aeabi_fdiv+0x224>)
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	58c3      	ldr	r3, [r0, r3]
 80008ce:	469f      	mov	pc, r3
 80008d0:	2300      	movs	r3, #0
 80008d2:	4698      	mov	r8, r3
 80008d4:	0026      	movs	r6, r4
 80008d6:	4645      	mov	r5, r8
 80008d8:	4692      	mov	sl, r2
 80008da:	4653      	mov	r3, sl
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d100      	bne.n	80008e2 <__aeabi_fdiv+0x82>
 80008e0:	e089      	b.n	80009f6 <__aeabi_fdiv+0x196>
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fdiv+0x88>
 80008e6:	e09e      	b.n	8000a26 <__aeabi_fdiv+0x1c6>
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d018      	beq.n	800091e <__aeabi_fdiv+0xbe>
 80008ec:	003b      	movs	r3, r7
 80008ee:	337f      	adds	r3, #127	; 0x7f
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	dd69      	ble.n	80009c8 <__aeabi_fdiv+0x168>
 80008f4:	076a      	lsls	r2, r5, #29
 80008f6:	d004      	beq.n	8000902 <__aeabi_fdiv+0xa2>
 80008f8:	220f      	movs	r2, #15
 80008fa:	402a      	ands	r2, r5
 80008fc:	2a04      	cmp	r2, #4
 80008fe:	d000      	beq.n	8000902 <__aeabi_fdiv+0xa2>
 8000900:	3504      	adds	r5, #4
 8000902:	012a      	lsls	r2, r5, #4
 8000904:	d503      	bpl.n	800090e <__aeabi_fdiv+0xae>
 8000906:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <__aeabi_fdiv+0x228>)
 8000908:	401d      	ands	r5, r3
 800090a:	003b      	movs	r3, r7
 800090c:	3380      	adds	r3, #128	; 0x80
 800090e:	2bfe      	cmp	r3, #254	; 0xfe
 8000910:	dd00      	ble.n	8000914 <__aeabi_fdiv+0xb4>
 8000912:	e070      	b.n	80009f6 <__aeabi_fdiv+0x196>
 8000914:	01ad      	lsls	r5, r5, #6
 8000916:	0a6d      	lsrs	r5, r5, #9
 8000918:	b2d8      	uxtb	r0, r3
 800091a:	e002      	b.n	8000922 <__aeabi_fdiv+0xc2>
 800091c:	000e      	movs	r6, r1
 800091e:	2000      	movs	r0, #0
 8000920:	2500      	movs	r5, #0
 8000922:	05c0      	lsls	r0, r0, #23
 8000924:	4328      	orrs	r0, r5
 8000926:	07f6      	lsls	r6, r6, #31
 8000928:	4330      	orrs	r0, r6
 800092a:	bce0      	pop	{r5, r6, r7}
 800092c:	46ba      	mov	sl, r7
 800092e:	46b1      	mov	r9, r6
 8000930:	46a8      	mov	r8, r5
 8000932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000934:	4643      	mov	r3, r8
 8000936:	2b00      	cmp	r3, #0
 8000938:	d13f      	bne.n	80009ba <__aeabi_fdiv+0x15a>
 800093a:	2202      	movs	r2, #2
 800093c:	3fff      	subs	r7, #255	; 0xff
 800093e:	e003      	b.n	8000948 <__aeabi_fdiv+0xe8>
 8000940:	4643      	mov	r3, r8
 8000942:	2b00      	cmp	r3, #0
 8000944:	d12d      	bne.n	80009a2 <__aeabi_fdiv+0x142>
 8000946:	2201      	movs	r2, #1
 8000948:	0031      	movs	r1, r6
 800094a:	464b      	mov	r3, r9
 800094c:	4061      	eors	r1, r4
 800094e:	b2c9      	uxtb	r1, r1
 8000950:	4313      	orrs	r3, r2
 8000952:	2b0f      	cmp	r3, #15
 8000954:	d834      	bhi.n	80009c0 <__aeabi_fdiv+0x160>
 8000956:	484d      	ldr	r0, [pc, #308]	; (8000a8c <__aeabi_fdiv+0x22c>)
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	58c3      	ldr	r3, [r0, r3]
 800095c:	469f      	mov	pc, r3
 800095e:	2d00      	cmp	r5, #0
 8000960:	d113      	bne.n	800098a <__aeabi_fdiv+0x12a>
 8000962:	2304      	movs	r3, #4
 8000964:	4699      	mov	r9, r3
 8000966:	3b03      	subs	r3, #3
 8000968:	2700      	movs	r7, #0
 800096a:	469a      	mov	sl, r3
 800096c:	e791      	b.n	8000892 <__aeabi_fdiv+0x32>
 800096e:	2d00      	cmp	r5, #0
 8000970:	d105      	bne.n	800097e <__aeabi_fdiv+0x11e>
 8000972:	2308      	movs	r3, #8
 8000974:	4699      	mov	r9, r3
 8000976:	3b06      	subs	r3, #6
 8000978:	27ff      	movs	r7, #255	; 0xff
 800097a:	469a      	mov	sl, r3
 800097c:	e789      	b.n	8000892 <__aeabi_fdiv+0x32>
 800097e:	230c      	movs	r3, #12
 8000980:	4699      	mov	r9, r3
 8000982:	3b09      	subs	r3, #9
 8000984:	27ff      	movs	r7, #255	; 0xff
 8000986:	469a      	mov	sl, r3
 8000988:	e783      	b.n	8000892 <__aeabi_fdiv+0x32>
 800098a:	0028      	movs	r0, r5
 800098c:	f002 fae0 	bl	8002f50 <__clzsi2>
 8000990:	2776      	movs	r7, #118	; 0x76
 8000992:	1f43      	subs	r3, r0, #5
 8000994:	409d      	lsls	r5, r3
 8000996:	2300      	movs	r3, #0
 8000998:	427f      	negs	r7, r7
 800099a:	4699      	mov	r9, r3
 800099c:	469a      	mov	sl, r3
 800099e:	1a3f      	subs	r7, r7, r0
 80009a0:	e777      	b.n	8000892 <__aeabi_fdiv+0x32>
 80009a2:	4640      	mov	r0, r8
 80009a4:	f002 fad4 	bl	8002f50 <__clzsi2>
 80009a8:	4642      	mov	r2, r8
 80009aa:	1f43      	subs	r3, r0, #5
 80009ac:	409a      	lsls	r2, r3
 80009ae:	2376      	movs	r3, #118	; 0x76
 80009b0:	425b      	negs	r3, r3
 80009b2:	4690      	mov	r8, r2
 80009b4:	1a1b      	subs	r3, r3, r0
 80009b6:	2200      	movs	r2, #0
 80009b8:	e77d      	b.n	80008b6 <__aeabi_fdiv+0x56>
 80009ba:	23ff      	movs	r3, #255	; 0xff
 80009bc:	2203      	movs	r2, #3
 80009be:	e77a      	b.n	80008b6 <__aeabi_fdiv+0x56>
 80009c0:	000e      	movs	r6, r1
 80009c2:	20ff      	movs	r0, #255	; 0xff
 80009c4:	2500      	movs	r5, #0
 80009c6:	e7ac      	b.n	8000922 <__aeabi_fdiv+0xc2>
 80009c8:	2001      	movs	r0, #1
 80009ca:	1ac0      	subs	r0, r0, r3
 80009cc:	281b      	cmp	r0, #27
 80009ce:	dca6      	bgt.n	800091e <__aeabi_fdiv+0xbe>
 80009d0:	379e      	adds	r7, #158	; 0x9e
 80009d2:	002a      	movs	r2, r5
 80009d4:	40bd      	lsls	r5, r7
 80009d6:	40c2      	lsrs	r2, r0
 80009d8:	1e6b      	subs	r3, r5, #1
 80009da:	419d      	sbcs	r5, r3
 80009dc:	4315      	orrs	r5, r2
 80009de:	076b      	lsls	r3, r5, #29
 80009e0:	d004      	beq.n	80009ec <__aeabi_fdiv+0x18c>
 80009e2:	230f      	movs	r3, #15
 80009e4:	402b      	ands	r3, r5
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d000      	beq.n	80009ec <__aeabi_fdiv+0x18c>
 80009ea:	3504      	adds	r5, #4
 80009ec:	016b      	lsls	r3, r5, #5
 80009ee:	d544      	bpl.n	8000a7a <__aeabi_fdiv+0x21a>
 80009f0:	2001      	movs	r0, #1
 80009f2:	2500      	movs	r5, #0
 80009f4:	e795      	b.n	8000922 <__aeabi_fdiv+0xc2>
 80009f6:	20ff      	movs	r0, #255	; 0xff
 80009f8:	2500      	movs	r5, #0
 80009fa:	e792      	b.n	8000922 <__aeabi_fdiv+0xc2>
 80009fc:	2580      	movs	r5, #128	; 0x80
 80009fe:	2600      	movs	r6, #0
 8000a00:	20ff      	movs	r0, #255	; 0xff
 8000a02:	03ed      	lsls	r5, r5, #15
 8000a04:	e78d      	b.n	8000922 <__aeabi_fdiv+0xc2>
 8000a06:	2300      	movs	r3, #0
 8000a08:	4698      	mov	r8, r3
 8000a0a:	2080      	movs	r0, #128	; 0x80
 8000a0c:	03c0      	lsls	r0, r0, #15
 8000a0e:	4205      	tst	r5, r0
 8000a10:	d009      	beq.n	8000a26 <__aeabi_fdiv+0x1c6>
 8000a12:	4643      	mov	r3, r8
 8000a14:	4203      	tst	r3, r0
 8000a16:	d106      	bne.n	8000a26 <__aeabi_fdiv+0x1c6>
 8000a18:	4645      	mov	r5, r8
 8000a1a:	4305      	orrs	r5, r0
 8000a1c:	026d      	lsls	r5, r5, #9
 8000a1e:	0026      	movs	r6, r4
 8000a20:	20ff      	movs	r0, #255	; 0xff
 8000a22:	0a6d      	lsrs	r5, r5, #9
 8000a24:	e77d      	b.n	8000922 <__aeabi_fdiv+0xc2>
 8000a26:	2080      	movs	r0, #128	; 0x80
 8000a28:	03c0      	lsls	r0, r0, #15
 8000a2a:	4305      	orrs	r5, r0
 8000a2c:	026d      	lsls	r5, r5, #9
 8000a2e:	20ff      	movs	r0, #255	; 0xff
 8000a30:	0a6d      	lsrs	r5, r5, #9
 8000a32:	e776      	b.n	8000922 <__aeabi_fdiv+0xc2>
 8000a34:	4642      	mov	r2, r8
 8000a36:	016b      	lsls	r3, r5, #5
 8000a38:	0150      	lsls	r0, r2, #5
 8000a3a:	4283      	cmp	r3, r0
 8000a3c:	d219      	bcs.n	8000a72 <__aeabi_fdiv+0x212>
 8000a3e:	221b      	movs	r2, #27
 8000a40:	2500      	movs	r5, #0
 8000a42:	3f01      	subs	r7, #1
 8000a44:	2601      	movs	r6, #1
 8000a46:	001c      	movs	r4, r3
 8000a48:	006d      	lsls	r5, r5, #1
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2c00      	cmp	r4, #0
 8000a4e:	db01      	blt.n	8000a54 <__aeabi_fdiv+0x1f4>
 8000a50:	4298      	cmp	r0, r3
 8000a52:	d801      	bhi.n	8000a58 <__aeabi_fdiv+0x1f8>
 8000a54:	1a1b      	subs	r3, r3, r0
 8000a56:	4335      	orrs	r5, r6
 8000a58:	3a01      	subs	r2, #1
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d1f3      	bne.n	8000a46 <__aeabi_fdiv+0x1e6>
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	4193      	sbcs	r3, r2
 8000a62:	431d      	orrs	r5, r3
 8000a64:	003b      	movs	r3, r7
 8000a66:	337f      	adds	r3, #127	; 0x7f
 8000a68:	000e      	movs	r6, r1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_fdiv+0x210>
 8000a6e:	e741      	b.n	80008f4 <__aeabi_fdiv+0x94>
 8000a70:	e7aa      	b.n	80009c8 <__aeabi_fdiv+0x168>
 8000a72:	221a      	movs	r2, #26
 8000a74:	2501      	movs	r5, #1
 8000a76:	1a1b      	subs	r3, r3, r0
 8000a78:	e7e4      	b.n	8000a44 <__aeabi_fdiv+0x1e4>
 8000a7a:	01ad      	lsls	r5, r5, #6
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	0a6d      	lsrs	r5, r5, #9
 8000a80:	e74f      	b.n	8000922 <__aeabi_fdiv+0xc2>
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	0800eef8 	.word	0x0800eef8
 8000a88:	f7ffffff 	.word	0xf7ffffff
 8000a8c:	0800ef38 	.word	0x0800ef38

08000a90 <__eqsf2>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	0042      	lsls	r2, r0, #1
 8000a94:	0245      	lsls	r5, r0, #9
 8000a96:	024e      	lsls	r6, r1, #9
 8000a98:	004c      	lsls	r4, r1, #1
 8000a9a:	0fc3      	lsrs	r3, r0, #31
 8000a9c:	0a6d      	lsrs	r5, r5, #9
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	0e12      	lsrs	r2, r2, #24
 8000aa2:	0a76      	lsrs	r6, r6, #9
 8000aa4:	0e24      	lsrs	r4, r4, #24
 8000aa6:	0fc9      	lsrs	r1, r1, #31
 8000aa8:	2aff      	cmp	r2, #255	; 0xff
 8000aaa:	d006      	beq.n	8000aba <__eqsf2+0x2a>
 8000aac:	2cff      	cmp	r4, #255	; 0xff
 8000aae:	d003      	beq.n	8000ab8 <__eqsf2+0x28>
 8000ab0:	42a2      	cmp	r2, r4
 8000ab2:	d101      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ab4:	42b5      	cmp	r5, r6
 8000ab6:	d006      	beq.n	8000ac6 <__eqsf2+0x36>
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	d1fc      	bne.n	8000ab8 <__eqsf2+0x28>
 8000abe:	2cff      	cmp	r4, #255	; 0xff
 8000ac0:	d1fa      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d1f8      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d006      	beq.n	8000ad8 <__eqsf2+0x48>
 8000aca:	2001      	movs	r0, #1
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d1f3      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ad0:	0028      	movs	r0, r5
 8000ad2:	1e43      	subs	r3, r0, #1
 8000ad4:	4198      	sbcs	r0, r3
 8000ad6:	e7ef      	b.n	8000ab8 <__eqsf2+0x28>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	e7ed      	b.n	8000ab8 <__eqsf2+0x28>

08000adc <__gesf2>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	0042      	lsls	r2, r0, #1
 8000ae0:	0245      	lsls	r5, r0, #9
 8000ae2:	024e      	lsls	r6, r1, #9
 8000ae4:	004c      	lsls	r4, r1, #1
 8000ae6:	0fc3      	lsrs	r3, r0, #31
 8000ae8:	0a6d      	lsrs	r5, r5, #9
 8000aea:	0e12      	lsrs	r2, r2, #24
 8000aec:	0a76      	lsrs	r6, r6, #9
 8000aee:	0e24      	lsrs	r4, r4, #24
 8000af0:	0fc8      	lsrs	r0, r1, #31
 8000af2:	2aff      	cmp	r2, #255	; 0xff
 8000af4:	d01b      	beq.n	8000b2e <__gesf2+0x52>
 8000af6:	2cff      	cmp	r4, #255	; 0xff
 8000af8:	d00e      	beq.n	8000b18 <__gesf2+0x3c>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d11b      	bne.n	8000b36 <__gesf2+0x5a>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d101      	bne.n	8000b06 <__gesf2+0x2a>
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d01c      	beq.n	8000b40 <__gesf2+0x64>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d00c      	beq.n	8000b24 <__gesf2+0x48>
 8000b0a:	4283      	cmp	r3, r0
 8000b0c:	d01c      	beq.n	8000b48 <__gesf2+0x6c>
 8000b0e:	2102      	movs	r1, #2
 8000b10:	1e58      	subs	r0, r3, #1
 8000b12:	4008      	ands	r0, r1
 8000b14:	3801      	subs	r0, #1
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	2e00      	cmp	r6, #0
 8000b1a:	d122      	bne.n	8000b62 <__gesf2+0x86>
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d1f4      	bne.n	8000b0a <__gesf2+0x2e>
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d1f2      	bne.n	8000b0a <__gesf2+0x2e>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d1f6      	bne.n	8000b16 <__gesf2+0x3a>
 8000b28:	2001      	movs	r0, #1
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	e7f3      	b.n	8000b16 <__gesf2+0x3a>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d117      	bne.n	8000b62 <__gesf2+0x86>
 8000b32:	2cff      	cmp	r4, #255	; 0xff
 8000b34:	d0f0      	beq.n	8000b18 <__gesf2+0x3c>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d1e7      	bne.n	8000b0a <__gesf2+0x2e>
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d1e5      	bne.n	8000b0a <__gesf2+0x2e>
 8000b3e:	e7e6      	b.n	8000b0e <__gesf2+0x32>
 8000b40:	2000      	movs	r0, #0
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d0e7      	beq.n	8000b16 <__gesf2+0x3a>
 8000b46:	e7e2      	b.n	8000b0e <__gesf2+0x32>
 8000b48:	42a2      	cmp	r2, r4
 8000b4a:	dc05      	bgt.n	8000b58 <__gesf2+0x7c>
 8000b4c:	dbea      	blt.n	8000b24 <__gesf2+0x48>
 8000b4e:	42b5      	cmp	r5, r6
 8000b50:	d802      	bhi.n	8000b58 <__gesf2+0x7c>
 8000b52:	d3e7      	bcc.n	8000b24 <__gesf2+0x48>
 8000b54:	2000      	movs	r0, #0
 8000b56:	e7de      	b.n	8000b16 <__gesf2+0x3a>
 8000b58:	4243      	negs	r3, r0
 8000b5a:	4158      	adcs	r0, r3
 8000b5c:	0040      	lsls	r0, r0, #1
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7d9      	b.n	8000b16 <__gesf2+0x3a>
 8000b62:	2002      	movs	r0, #2
 8000b64:	4240      	negs	r0, r0
 8000b66:	e7d6      	b.n	8000b16 <__gesf2+0x3a>

08000b68 <__lesf2>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	0042      	lsls	r2, r0, #1
 8000b6c:	0245      	lsls	r5, r0, #9
 8000b6e:	024e      	lsls	r6, r1, #9
 8000b70:	004c      	lsls	r4, r1, #1
 8000b72:	0fc3      	lsrs	r3, r0, #31
 8000b74:	0a6d      	lsrs	r5, r5, #9
 8000b76:	0e12      	lsrs	r2, r2, #24
 8000b78:	0a76      	lsrs	r6, r6, #9
 8000b7a:	0e24      	lsrs	r4, r4, #24
 8000b7c:	0fc8      	lsrs	r0, r1, #31
 8000b7e:	2aff      	cmp	r2, #255	; 0xff
 8000b80:	d00b      	beq.n	8000b9a <__lesf2+0x32>
 8000b82:	2cff      	cmp	r4, #255	; 0xff
 8000b84:	d00d      	beq.n	8000ba2 <__lesf2+0x3a>
 8000b86:	2a00      	cmp	r2, #0
 8000b88:	d11f      	bne.n	8000bca <__lesf2+0x62>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d116      	bne.n	8000bbc <__lesf2+0x54>
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d114      	bne.n	8000bbc <__lesf2+0x54>
 8000b92:	2000      	movs	r0, #0
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d010      	beq.n	8000bba <__lesf2+0x52>
 8000b98:	e009      	b.n	8000bae <__lesf2+0x46>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d10c      	bne.n	8000bb8 <__lesf2+0x50>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d113      	bne.n	8000bca <__lesf2+0x62>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d108      	bne.n	8000bb8 <__lesf2+0x50>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d008      	beq.n	8000bbc <__lesf2+0x54>
 8000baa:	4283      	cmp	r3, r0
 8000bac:	d012      	beq.n	8000bd4 <__lesf2+0x6c>
 8000bae:	2102      	movs	r1, #2
 8000bb0:	1e58      	subs	r0, r3, #1
 8000bb2:	4008      	ands	r0, r1
 8000bb4:	3801      	subs	r0, #1
 8000bb6:	e000      	b.n	8000bba <__lesf2+0x52>
 8000bb8:	2002      	movs	r0, #2
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d1f4      	bne.n	8000baa <__lesf2+0x42>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d1fa      	bne.n	8000bba <__lesf2+0x52>
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	e7f7      	b.n	8000bba <__lesf2+0x52>
 8000bca:	2c00      	cmp	r4, #0
 8000bcc:	d1ed      	bne.n	8000baa <__lesf2+0x42>
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d1eb      	bne.n	8000baa <__lesf2+0x42>
 8000bd2:	e7ec      	b.n	8000bae <__lesf2+0x46>
 8000bd4:	42a2      	cmp	r2, r4
 8000bd6:	dc05      	bgt.n	8000be4 <__lesf2+0x7c>
 8000bd8:	dbf2      	blt.n	8000bc0 <__lesf2+0x58>
 8000bda:	42b5      	cmp	r5, r6
 8000bdc:	d802      	bhi.n	8000be4 <__lesf2+0x7c>
 8000bde:	d3ef      	bcc.n	8000bc0 <__lesf2+0x58>
 8000be0:	2000      	movs	r0, #0
 8000be2:	e7ea      	b.n	8000bba <__lesf2+0x52>
 8000be4:	4243      	negs	r3, r0
 8000be6:	4158      	adcs	r0, r3
 8000be8:	0040      	lsls	r0, r0, #1
 8000bea:	3801      	subs	r0, #1
 8000bec:	e7e5      	b.n	8000bba <__lesf2+0x52>
 8000bee:	46c0      	nop			; (mov r8, r8)

08000bf0 <__aeabi_fmul>:
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf2:	464f      	mov	r7, r9
 8000bf4:	4646      	mov	r6, r8
 8000bf6:	46d6      	mov	lr, sl
 8000bf8:	0244      	lsls	r4, r0, #9
 8000bfa:	0045      	lsls	r5, r0, #1
 8000bfc:	b5c0      	push	{r6, r7, lr}
 8000bfe:	0a64      	lsrs	r4, r4, #9
 8000c00:	1c0f      	adds	r7, r1, #0
 8000c02:	0e2d      	lsrs	r5, r5, #24
 8000c04:	0fc6      	lsrs	r6, r0, #31
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d100      	bne.n	8000c0c <__aeabi_fmul+0x1c>
 8000c0a:	e08d      	b.n	8000d28 <__aeabi_fmul+0x138>
 8000c0c:	2dff      	cmp	r5, #255	; 0xff
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fmul+0x22>
 8000c10:	e092      	b.n	8000d38 <__aeabi_fmul+0x148>
 8000c12:	2300      	movs	r3, #0
 8000c14:	2080      	movs	r0, #128	; 0x80
 8000c16:	4699      	mov	r9, r3
 8000c18:	469a      	mov	sl, r3
 8000c1a:	00e4      	lsls	r4, r4, #3
 8000c1c:	04c0      	lsls	r0, r0, #19
 8000c1e:	4304      	orrs	r4, r0
 8000c20:	3d7f      	subs	r5, #127	; 0x7f
 8000c22:	0278      	lsls	r0, r7, #9
 8000c24:	0a43      	lsrs	r3, r0, #9
 8000c26:	4698      	mov	r8, r3
 8000c28:	007b      	lsls	r3, r7, #1
 8000c2a:	0e1b      	lsrs	r3, r3, #24
 8000c2c:	0fff      	lsrs	r7, r7, #31
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_fmul+0x44>
 8000c32:	e070      	b.n	8000d16 <__aeabi_fmul+0x126>
 8000c34:	2bff      	cmp	r3, #255	; 0xff
 8000c36:	d100      	bne.n	8000c3a <__aeabi_fmul+0x4a>
 8000c38:	e086      	b.n	8000d48 <__aeabi_fmul+0x158>
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	00d0      	lsls	r0, r2, #3
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	3b7f      	subs	r3, #127	; 0x7f
 8000c42:	18ed      	adds	r5, r5, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	04d2      	lsls	r2, r2, #19
 8000c48:	4302      	orrs	r2, r0
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	469c      	mov	ip, r3
 8000c4e:	0031      	movs	r1, r6
 8000c50:	464b      	mov	r3, r9
 8000c52:	4079      	eors	r1, r7
 8000c54:	1c68      	adds	r0, r5, #1
 8000c56:	2b0f      	cmp	r3, #15
 8000c58:	d81c      	bhi.n	8000c94 <__aeabi_fmul+0xa4>
 8000c5a:	4a76      	ldr	r2, [pc, #472]	; (8000e34 <__aeabi_fmul+0x244>)
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	58d3      	ldr	r3, [r2, r3]
 8000c60:	469f      	mov	pc, r3
 8000c62:	0039      	movs	r1, r7
 8000c64:	4644      	mov	r4, r8
 8000c66:	46e2      	mov	sl, ip
 8000c68:	4653      	mov	r3, sl
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d00f      	beq.n	8000c8e <__aeabi_fmul+0x9e>
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d100      	bne.n	8000c74 <__aeabi_fmul+0x84>
 8000c72:	e0d7      	b.n	8000e24 <__aeabi_fmul+0x234>
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d137      	bne.n	8000ce8 <__aeabi_fmul+0xf8>
 8000c78:	2000      	movs	r0, #0
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	05c0      	lsls	r0, r0, #23
 8000c7e:	4320      	orrs	r0, r4
 8000c80:	07c9      	lsls	r1, r1, #31
 8000c82:	4308      	orrs	r0, r1
 8000c84:	bce0      	pop	{r5, r6, r7}
 8000c86:	46ba      	mov	sl, r7
 8000c88:	46b1      	mov	r9, r6
 8000c8a:	46a8      	mov	r8, r5
 8000c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8e:	20ff      	movs	r0, #255	; 0xff
 8000c90:	2400      	movs	r4, #0
 8000c92:	e7f3      	b.n	8000c7c <__aeabi_fmul+0x8c>
 8000c94:	0c26      	lsrs	r6, r4, #16
 8000c96:	0424      	lsls	r4, r4, #16
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	4644      	mov	r4, r8
 8000c9c:	0424      	lsls	r4, r4, #16
 8000c9e:	0c24      	lsrs	r4, r4, #16
 8000ca0:	4643      	mov	r3, r8
 8000ca2:	0027      	movs	r7, r4
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	4357      	muls	r7, r2
 8000ca8:	4374      	muls	r4, r6
 8000caa:	435a      	muls	r2, r3
 8000cac:	435e      	muls	r6, r3
 8000cae:	1912      	adds	r2, r2, r4
 8000cb0:	0c3b      	lsrs	r3, r7, #16
 8000cb2:	189b      	adds	r3, r3, r2
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	d903      	bls.n	8000cc0 <__aeabi_fmul+0xd0>
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	0252      	lsls	r2, r2, #9
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	4466      	add	r6, ip
 8000cc0:	043f      	lsls	r7, r7, #16
 8000cc2:	041a      	lsls	r2, r3, #16
 8000cc4:	0c3f      	lsrs	r7, r7, #16
 8000cc6:	19d2      	adds	r2, r2, r7
 8000cc8:	0194      	lsls	r4, r2, #6
 8000cca:	1e67      	subs	r7, r4, #1
 8000ccc:	41bc      	sbcs	r4, r7
 8000cce:	0c1b      	lsrs	r3, r3, #16
 8000cd0:	0e92      	lsrs	r2, r2, #26
 8000cd2:	199b      	adds	r3, r3, r6
 8000cd4:	4314      	orrs	r4, r2
 8000cd6:	019b      	lsls	r3, r3, #6
 8000cd8:	431c      	orrs	r4, r3
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	d400      	bmi.n	8000ce0 <__aeabi_fmul+0xf0>
 8000cde:	e09b      	b.n	8000e18 <__aeabi_fmul+0x228>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	0862      	lsrs	r2, r4, #1
 8000ce4:	401c      	ands	r4, r3
 8000ce6:	4314      	orrs	r4, r2
 8000ce8:	0002      	movs	r2, r0
 8000cea:	327f      	adds	r2, #127	; 0x7f
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	dd64      	ble.n	8000dba <__aeabi_fmul+0x1ca>
 8000cf0:	0763      	lsls	r3, r4, #29
 8000cf2:	d004      	beq.n	8000cfe <__aeabi_fmul+0x10e>
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	4023      	ands	r3, r4
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_fmul+0x10e>
 8000cfc:	3404      	adds	r4, #4
 8000cfe:	0123      	lsls	r3, r4, #4
 8000d00:	d503      	bpl.n	8000d0a <__aeabi_fmul+0x11a>
 8000d02:	0002      	movs	r2, r0
 8000d04:	4b4c      	ldr	r3, [pc, #304]	; (8000e38 <__aeabi_fmul+0x248>)
 8000d06:	3280      	adds	r2, #128	; 0x80
 8000d08:	401c      	ands	r4, r3
 8000d0a:	2afe      	cmp	r2, #254	; 0xfe
 8000d0c:	dcbf      	bgt.n	8000c8e <__aeabi_fmul+0x9e>
 8000d0e:	01a4      	lsls	r4, r4, #6
 8000d10:	0a64      	lsrs	r4, r4, #9
 8000d12:	b2d0      	uxtb	r0, r2
 8000d14:	e7b2      	b.n	8000c7c <__aeabi_fmul+0x8c>
 8000d16:	4643      	mov	r3, r8
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d13d      	bne.n	8000d98 <__aeabi_fmul+0x1a8>
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	3301      	adds	r3, #1
 8000d20:	431a      	orrs	r2, r3
 8000d22:	4691      	mov	r9, r2
 8000d24:	469c      	mov	ip, r3
 8000d26:	e792      	b.n	8000c4e <__aeabi_fmul+0x5e>
 8000d28:	2c00      	cmp	r4, #0
 8000d2a:	d129      	bne.n	8000d80 <__aeabi_fmul+0x190>
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	4699      	mov	r9, r3
 8000d30:	3b03      	subs	r3, #3
 8000d32:	2500      	movs	r5, #0
 8000d34:	469a      	mov	sl, r3
 8000d36:	e774      	b.n	8000c22 <__aeabi_fmul+0x32>
 8000d38:	2c00      	cmp	r4, #0
 8000d3a:	d11b      	bne.n	8000d74 <__aeabi_fmul+0x184>
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	4699      	mov	r9, r3
 8000d40:	3b06      	subs	r3, #6
 8000d42:	25ff      	movs	r5, #255	; 0xff
 8000d44:	469a      	mov	sl, r3
 8000d46:	e76c      	b.n	8000c22 <__aeabi_fmul+0x32>
 8000d48:	4643      	mov	r3, r8
 8000d4a:	35ff      	adds	r5, #255	; 0xff
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10b      	bne.n	8000d68 <__aeabi_fmul+0x178>
 8000d50:	2302      	movs	r3, #2
 8000d52:	464a      	mov	r2, r9
 8000d54:	431a      	orrs	r2, r3
 8000d56:	4691      	mov	r9, r2
 8000d58:	469c      	mov	ip, r3
 8000d5a:	e778      	b.n	8000c4e <__aeabi_fmul+0x5e>
 8000d5c:	4653      	mov	r3, sl
 8000d5e:	0031      	movs	r1, r6
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d000      	beq.n	8000d66 <__aeabi_fmul+0x176>
 8000d64:	e783      	b.n	8000c6e <__aeabi_fmul+0x7e>
 8000d66:	e792      	b.n	8000c8e <__aeabi_fmul+0x9e>
 8000d68:	2303      	movs	r3, #3
 8000d6a:	464a      	mov	r2, r9
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	4691      	mov	r9, r2
 8000d70:	469c      	mov	ip, r3
 8000d72:	e76c      	b.n	8000c4e <__aeabi_fmul+0x5e>
 8000d74:	230c      	movs	r3, #12
 8000d76:	4699      	mov	r9, r3
 8000d78:	3b09      	subs	r3, #9
 8000d7a:	25ff      	movs	r5, #255	; 0xff
 8000d7c:	469a      	mov	sl, r3
 8000d7e:	e750      	b.n	8000c22 <__aeabi_fmul+0x32>
 8000d80:	0020      	movs	r0, r4
 8000d82:	f002 f8e5 	bl	8002f50 <__clzsi2>
 8000d86:	2576      	movs	r5, #118	; 0x76
 8000d88:	1f43      	subs	r3, r0, #5
 8000d8a:	409c      	lsls	r4, r3
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	426d      	negs	r5, r5
 8000d90:	4699      	mov	r9, r3
 8000d92:	469a      	mov	sl, r3
 8000d94:	1a2d      	subs	r5, r5, r0
 8000d96:	e744      	b.n	8000c22 <__aeabi_fmul+0x32>
 8000d98:	4640      	mov	r0, r8
 8000d9a:	f002 f8d9 	bl	8002f50 <__clzsi2>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	1f43      	subs	r3, r0, #5
 8000da2:	409a      	lsls	r2, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	1a2d      	subs	r5, r5, r0
 8000da8:	4690      	mov	r8, r2
 8000daa:	469c      	mov	ip, r3
 8000dac:	3d76      	subs	r5, #118	; 0x76
 8000dae:	e74e      	b.n	8000c4e <__aeabi_fmul+0x5e>
 8000db0:	2480      	movs	r4, #128	; 0x80
 8000db2:	2100      	movs	r1, #0
 8000db4:	20ff      	movs	r0, #255	; 0xff
 8000db6:	03e4      	lsls	r4, r4, #15
 8000db8:	e760      	b.n	8000c7c <__aeabi_fmul+0x8c>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	2b1b      	cmp	r3, #27
 8000dc0:	dd00      	ble.n	8000dc4 <__aeabi_fmul+0x1d4>
 8000dc2:	e759      	b.n	8000c78 <__aeabi_fmul+0x88>
 8000dc4:	0022      	movs	r2, r4
 8000dc6:	309e      	adds	r0, #158	; 0x9e
 8000dc8:	40da      	lsrs	r2, r3
 8000dca:	4084      	lsls	r4, r0
 8000dcc:	0013      	movs	r3, r2
 8000dce:	1e62      	subs	r2, r4, #1
 8000dd0:	4194      	sbcs	r4, r2
 8000dd2:	431c      	orrs	r4, r3
 8000dd4:	0763      	lsls	r3, r4, #29
 8000dd6:	d004      	beq.n	8000de2 <__aeabi_fmul+0x1f2>
 8000dd8:	230f      	movs	r3, #15
 8000dda:	4023      	ands	r3, r4
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d000      	beq.n	8000de2 <__aeabi_fmul+0x1f2>
 8000de0:	3404      	adds	r4, #4
 8000de2:	0163      	lsls	r3, r4, #5
 8000de4:	d51a      	bpl.n	8000e1c <__aeabi_fmul+0x22c>
 8000de6:	2001      	movs	r0, #1
 8000de8:	2400      	movs	r4, #0
 8000dea:	e747      	b.n	8000c7c <__aeabi_fmul+0x8c>
 8000dec:	2080      	movs	r0, #128	; 0x80
 8000dee:	03c0      	lsls	r0, r0, #15
 8000df0:	4204      	tst	r4, r0
 8000df2:	d009      	beq.n	8000e08 <__aeabi_fmul+0x218>
 8000df4:	4643      	mov	r3, r8
 8000df6:	4203      	tst	r3, r0
 8000df8:	d106      	bne.n	8000e08 <__aeabi_fmul+0x218>
 8000dfa:	4644      	mov	r4, r8
 8000dfc:	4304      	orrs	r4, r0
 8000dfe:	0264      	lsls	r4, r4, #9
 8000e00:	0039      	movs	r1, r7
 8000e02:	20ff      	movs	r0, #255	; 0xff
 8000e04:	0a64      	lsrs	r4, r4, #9
 8000e06:	e739      	b.n	8000c7c <__aeabi_fmul+0x8c>
 8000e08:	2080      	movs	r0, #128	; 0x80
 8000e0a:	03c0      	lsls	r0, r0, #15
 8000e0c:	4304      	orrs	r4, r0
 8000e0e:	0264      	lsls	r4, r4, #9
 8000e10:	0031      	movs	r1, r6
 8000e12:	20ff      	movs	r0, #255	; 0xff
 8000e14:	0a64      	lsrs	r4, r4, #9
 8000e16:	e731      	b.n	8000c7c <__aeabi_fmul+0x8c>
 8000e18:	0028      	movs	r0, r5
 8000e1a:	e765      	b.n	8000ce8 <__aeabi_fmul+0xf8>
 8000e1c:	01a4      	lsls	r4, r4, #6
 8000e1e:	2000      	movs	r0, #0
 8000e20:	0a64      	lsrs	r4, r4, #9
 8000e22:	e72b      	b.n	8000c7c <__aeabi_fmul+0x8c>
 8000e24:	2080      	movs	r0, #128	; 0x80
 8000e26:	03c0      	lsls	r0, r0, #15
 8000e28:	4304      	orrs	r4, r0
 8000e2a:	0264      	lsls	r4, r4, #9
 8000e2c:	20ff      	movs	r0, #255	; 0xff
 8000e2e:	0a64      	lsrs	r4, r4, #9
 8000e30:	e724      	b.n	8000c7c <__aeabi_fmul+0x8c>
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	0800ef78 	.word	0x0800ef78
 8000e38:	f7ffffff 	.word	0xf7ffffff

08000e3c <__aeabi_fsub>:
 8000e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3e:	46ce      	mov	lr, r9
 8000e40:	4647      	mov	r7, r8
 8000e42:	0243      	lsls	r3, r0, #9
 8000e44:	0a5b      	lsrs	r3, r3, #9
 8000e46:	024e      	lsls	r6, r1, #9
 8000e48:	00da      	lsls	r2, r3, #3
 8000e4a:	4694      	mov	ip, r2
 8000e4c:	0a72      	lsrs	r2, r6, #9
 8000e4e:	4691      	mov	r9, r2
 8000e50:	0045      	lsls	r5, r0, #1
 8000e52:	004a      	lsls	r2, r1, #1
 8000e54:	b580      	push	{r7, lr}
 8000e56:	0e2d      	lsrs	r5, r5, #24
 8000e58:	001f      	movs	r7, r3
 8000e5a:	0fc4      	lsrs	r4, r0, #31
 8000e5c:	0e12      	lsrs	r2, r2, #24
 8000e5e:	0fc9      	lsrs	r1, r1, #31
 8000e60:	09b6      	lsrs	r6, r6, #6
 8000e62:	2aff      	cmp	r2, #255	; 0xff
 8000e64:	d05b      	beq.n	8000f1e <__aeabi_fsub+0xe2>
 8000e66:	2001      	movs	r0, #1
 8000e68:	4041      	eors	r1, r0
 8000e6a:	428c      	cmp	r4, r1
 8000e6c:	d039      	beq.n	8000ee2 <__aeabi_fsub+0xa6>
 8000e6e:	1aa8      	subs	r0, r5, r2
 8000e70:	2800      	cmp	r0, #0
 8000e72:	dd5a      	ble.n	8000f2a <__aeabi_fsub+0xee>
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d06a      	beq.n	8000f4e <__aeabi_fsub+0x112>
 8000e78:	2dff      	cmp	r5, #255	; 0xff
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_fsub+0x42>
 8000e7c:	e0d9      	b.n	8001032 <__aeabi_fsub+0x1f6>
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	04d2      	lsls	r2, r2, #19
 8000e82:	4316      	orrs	r6, r2
 8000e84:	281b      	cmp	r0, #27
 8000e86:	dc00      	bgt.n	8000e8a <__aeabi_fsub+0x4e>
 8000e88:	e0e9      	b.n	800105e <__aeabi_fsub+0x222>
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	4663      	mov	r3, ip
 8000e8e:	1a18      	subs	r0, r3, r0
 8000e90:	0143      	lsls	r3, r0, #5
 8000e92:	d400      	bmi.n	8000e96 <__aeabi_fsub+0x5a>
 8000e94:	e0b4      	b.n	8001000 <__aeabi_fsub+0x1c4>
 8000e96:	0180      	lsls	r0, r0, #6
 8000e98:	0987      	lsrs	r7, r0, #6
 8000e9a:	0038      	movs	r0, r7
 8000e9c:	f002 f858 	bl	8002f50 <__clzsi2>
 8000ea0:	3805      	subs	r0, #5
 8000ea2:	4087      	lsls	r7, r0
 8000ea4:	4285      	cmp	r5, r0
 8000ea6:	dc00      	bgt.n	8000eaa <__aeabi_fsub+0x6e>
 8000ea8:	e0cc      	b.n	8001044 <__aeabi_fsub+0x208>
 8000eaa:	1a2d      	subs	r5, r5, r0
 8000eac:	48b5      	ldr	r0, [pc, #724]	; (8001184 <__aeabi_fsub+0x348>)
 8000eae:	4038      	ands	r0, r7
 8000eb0:	0743      	lsls	r3, r0, #29
 8000eb2:	d004      	beq.n	8000ebe <__aeabi_fsub+0x82>
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	4003      	ands	r3, r0
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d000      	beq.n	8000ebe <__aeabi_fsub+0x82>
 8000ebc:	3004      	adds	r0, #4
 8000ebe:	0143      	lsls	r3, r0, #5
 8000ec0:	d400      	bmi.n	8000ec4 <__aeabi_fsub+0x88>
 8000ec2:	e0a0      	b.n	8001006 <__aeabi_fsub+0x1ca>
 8000ec4:	1c6a      	adds	r2, r5, #1
 8000ec6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fsub+0x90>
 8000eca:	e08d      	b.n	8000fe8 <__aeabi_fsub+0x1ac>
 8000ecc:	0180      	lsls	r0, r0, #6
 8000ece:	0a47      	lsrs	r7, r0, #9
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	05d0      	lsls	r0, r2, #23
 8000ed4:	4338      	orrs	r0, r7
 8000ed6:	07e4      	lsls	r4, r4, #31
 8000ed8:	4320      	orrs	r0, r4
 8000eda:	bcc0      	pop	{r6, r7}
 8000edc:	46b9      	mov	r9, r7
 8000ede:	46b0      	mov	r8, r6
 8000ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ee2:	1aa8      	subs	r0, r5, r2
 8000ee4:	4680      	mov	r8, r0
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	dd45      	ble.n	8000f76 <__aeabi_fsub+0x13a>
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d070      	beq.n	8000fd0 <__aeabi_fsub+0x194>
 8000eee:	2dff      	cmp	r5, #255	; 0xff
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_fsub+0xb8>
 8000ef2:	e09e      	b.n	8001032 <__aeabi_fsub+0x1f6>
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	04db      	lsls	r3, r3, #19
 8000ef8:	431e      	orrs	r6, r3
 8000efa:	4643      	mov	r3, r8
 8000efc:	2b1b      	cmp	r3, #27
 8000efe:	dc00      	bgt.n	8000f02 <__aeabi_fsub+0xc6>
 8000f00:	e0d2      	b.n	80010a8 <__aeabi_fsub+0x26c>
 8000f02:	2001      	movs	r0, #1
 8000f04:	4460      	add	r0, ip
 8000f06:	0143      	lsls	r3, r0, #5
 8000f08:	d57a      	bpl.n	8001000 <__aeabi_fsub+0x1c4>
 8000f0a:	3501      	adds	r5, #1
 8000f0c:	2dff      	cmp	r5, #255	; 0xff
 8000f0e:	d06b      	beq.n	8000fe8 <__aeabi_fsub+0x1ac>
 8000f10:	2301      	movs	r3, #1
 8000f12:	4a9d      	ldr	r2, [pc, #628]	; (8001188 <__aeabi_fsub+0x34c>)
 8000f14:	4003      	ands	r3, r0
 8000f16:	0840      	lsrs	r0, r0, #1
 8000f18:	4010      	ands	r0, r2
 8000f1a:	4318      	orrs	r0, r3
 8000f1c:	e7c8      	b.n	8000eb0 <__aeabi_fsub+0x74>
 8000f1e:	2e00      	cmp	r6, #0
 8000f20:	d020      	beq.n	8000f64 <__aeabi_fsub+0x128>
 8000f22:	428c      	cmp	r4, r1
 8000f24:	d023      	beq.n	8000f6e <__aeabi_fsub+0x132>
 8000f26:	0028      	movs	r0, r5
 8000f28:	38ff      	subs	r0, #255	; 0xff
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d039      	beq.n	8000fa2 <__aeabi_fsub+0x166>
 8000f2e:	1b57      	subs	r7, r2, r5
 8000f30:	2d00      	cmp	r5, #0
 8000f32:	d000      	beq.n	8000f36 <__aeabi_fsub+0xfa>
 8000f34:	e09d      	b.n	8001072 <__aeabi_fsub+0x236>
 8000f36:	4663      	mov	r3, ip
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x102>
 8000f3c:	e0db      	b.n	80010f6 <__aeabi_fsub+0x2ba>
 8000f3e:	1e7b      	subs	r3, r7, #1
 8000f40:	2f01      	cmp	r7, #1
 8000f42:	d100      	bne.n	8000f46 <__aeabi_fsub+0x10a>
 8000f44:	e10d      	b.n	8001162 <__aeabi_fsub+0x326>
 8000f46:	2fff      	cmp	r7, #255	; 0xff
 8000f48:	d071      	beq.n	800102e <__aeabi_fsub+0x1f2>
 8000f4a:	001f      	movs	r7, r3
 8000f4c:	e098      	b.n	8001080 <__aeabi_fsub+0x244>
 8000f4e:	2e00      	cmp	r6, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x118>
 8000f52:	e0a7      	b.n	80010a4 <__aeabi_fsub+0x268>
 8000f54:	1e42      	subs	r2, r0, #1
 8000f56:	2801      	cmp	r0, #1
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x120>
 8000f5a:	e0e6      	b.n	800112a <__aeabi_fsub+0x2ee>
 8000f5c:	28ff      	cmp	r0, #255	; 0xff
 8000f5e:	d068      	beq.n	8001032 <__aeabi_fsub+0x1f6>
 8000f60:	0010      	movs	r0, r2
 8000f62:	e78f      	b.n	8000e84 <__aeabi_fsub+0x48>
 8000f64:	2001      	movs	r0, #1
 8000f66:	4041      	eors	r1, r0
 8000f68:	42a1      	cmp	r1, r4
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_fsub+0x132>
 8000f6c:	e77f      	b.n	8000e6e <__aeabi_fsub+0x32>
 8000f6e:	20ff      	movs	r0, #255	; 0xff
 8000f70:	4240      	negs	r0, r0
 8000f72:	4680      	mov	r8, r0
 8000f74:	44a8      	add	r8, r5
 8000f76:	4640      	mov	r0, r8
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	d038      	beq.n	8000fee <__aeabi_fsub+0x1b2>
 8000f7c:	1b51      	subs	r1, r2, r5
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_fsub+0x148>
 8000f82:	e0ae      	b.n	80010e2 <__aeabi_fsub+0x2a6>
 8000f84:	2aff      	cmp	r2, #255	; 0xff
 8000f86:	d100      	bne.n	8000f8a <__aeabi_fsub+0x14e>
 8000f88:	e0df      	b.n	800114a <__aeabi_fsub+0x30e>
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	4660      	mov	r0, ip
 8000f8e:	04db      	lsls	r3, r3, #19
 8000f90:	4318      	orrs	r0, r3
 8000f92:	4684      	mov	ip, r0
 8000f94:	291b      	cmp	r1, #27
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_fsub+0x15e>
 8000f98:	e0d9      	b.n	800114e <__aeabi_fsub+0x312>
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	0015      	movs	r5, r2
 8000f9e:	1980      	adds	r0, r0, r6
 8000fa0:	e7b1      	b.n	8000f06 <__aeabi_fsub+0xca>
 8000fa2:	20fe      	movs	r0, #254	; 0xfe
 8000fa4:	1c6a      	adds	r2, r5, #1
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d171      	bne.n	800108e <__aeabi_fsub+0x252>
 8000faa:	2d00      	cmp	r5, #0
 8000fac:	d000      	beq.n	8000fb0 <__aeabi_fsub+0x174>
 8000fae:	e0a6      	b.n	80010fe <__aeabi_fsub+0x2c2>
 8000fb0:	4663      	mov	r3, ip
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0x17c>
 8000fb6:	e0d9      	b.n	800116c <__aeabi_fsub+0x330>
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2e00      	cmp	r6, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_fsub+0x184>
 8000fbe:	e788      	b.n	8000ed2 <__aeabi_fsub+0x96>
 8000fc0:	1b98      	subs	r0, r3, r6
 8000fc2:	0143      	lsls	r3, r0, #5
 8000fc4:	d400      	bmi.n	8000fc8 <__aeabi_fsub+0x18c>
 8000fc6:	e0e1      	b.n	800118c <__aeabi_fsub+0x350>
 8000fc8:	4663      	mov	r3, ip
 8000fca:	000c      	movs	r4, r1
 8000fcc:	1af0      	subs	r0, r6, r3
 8000fce:	e76f      	b.n	8000eb0 <__aeabi_fsub+0x74>
 8000fd0:	2e00      	cmp	r6, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x19a>
 8000fd4:	e0b7      	b.n	8001146 <__aeabi_fsub+0x30a>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	3a01      	subs	r2, #1
 8000fda:	2801      	cmp	r0, #1
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_fsub+0x1a4>
 8000fde:	e09c      	b.n	800111a <__aeabi_fsub+0x2de>
 8000fe0:	28ff      	cmp	r0, #255	; 0xff
 8000fe2:	d026      	beq.n	8001032 <__aeabi_fsub+0x1f6>
 8000fe4:	4690      	mov	r8, r2
 8000fe6:	e788      	b.n	8000efa <__aeabi_fsub+0xbe>
 8000fe8:	22ff      	movs	r2, #255	; 0xff
 8000fea:	2700      	movs	r7, #0
 8000fec:	e771      	b.n	8000ed2 <__aeabi_fsub+0x96>
 8000fee:	20fe      	movs	r0, #254	; 0xfe
 8000ff0:	1c6a      	adds	r2, r5, #1
 8000ff2:	4210      	tst	r0, r2
 8000ff4:	d064      	beq.n	80010c0 <__aeabi_fsub+0x284>
 8000ff6:	2aff      	cmp	r2, #255	; 0xff
 8000ff8:	d0f6      	beq.n	8000fe8 <__aeabi_fsub+0x1ac>
 8000ffa:	0015      	movs	r5, r2
 8000ffc:	4466      	add	r6, ip
 8000ffe:	0870      	lsrs	r0, r6, #1
 8001000:	0743      	lsls	r3, r0, #29
 8001002:	d000      	beq.n	8001006 <__aeabi_fsub+0x1ca>
 8001004:	e756      	b.n	8000eb4 <__aeabi_fsub+0x78>
 8001006:	08c3      	lsrs	r3, r0, #3
 8001008:	2dff      	cmp	r5, #255	; 0xff
 800100a:	d012      	beq.n	8001032 <__aeabi_fsub+0x1f6>
 800100c:	025b      	lsls	r3, r3, #9
 800100e:	0a5f      	lsrs	r7, r3, #9
 8001010:	b2ea      	uxtb	r2, r5
 8001012:	e75e      	b.n	8000ed2 <__aeabi_fsub+0x96>
 8001014:	4662      	mov	r2, ip
 8001016:	2a00      	cmp	r2, #0
 8001018:	d100      	bne.n	800101c <__aeabi_fsub+0x1e0>
 800101a:	e096      	b.n	800114a <__aeabi_fsub+0x30e>
 800101c:	2e00      	cmp	r6, #0
 800101e:	d008      	beq.n	8001032 <__aeabi_fsub+0x1f6>
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	03d2      	lsls	r2, r2, #15
 8001024:	4213      	tst	r3, r2
 8001026:	d004      	beq.n	8001032 <__aeabi_fsub+0x1f6>
 8001028:	4648      	mov	r0, r9
 800102a:	4210      	tst	r0, r2
 800102c:	d101      	bne.n	8001032 <__aeabi_fsub+0x1f6>
 800102e:	000c      	movs	r4, r1
 8001030:	464b      	mov	r3, r9
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0d8      	beq.n	8000fe8 <__aeabi_fsub+0x1ac>
 8001036:	2780      	movs	r7, #128	; 0x80
 8001038:	03ff      	lsls	r7, r7, #15
 800103a:	431f      	orrs	r7, r3
 800103c:	027f      	lsls	r7, r7, #9
 800103e:	22ff      	movs	r2, #255	; 0xff
 8001040:	0a7f      	lsrs	r7, r7, #9
 8001042:	e746      	b.n	8000ed2 <__aeabi_fsub+0x96>
 8001044:	2320      	movs	r3, #32
 8001046:	003a      	movs	r2, r7
 8001048:	1b45      	subs	r5, r0, r5
 800104a:	0038      	movs	r0, r7
 800104c:	3501      	adds	r5, #1
 800104e:	40ea      	lsrs	r2, r5
 8001050:	1b5d      	subs	r5, r3, r5
 8001052:	40a8      	lsls	r0, r5
 8001054:	1e43      	subs	r3, r0, #1
 8001056:	4198      	sbcs	r0, r3
 8001058:	2500      	movs	r5, #0
 800105a:	4310      	orrs	r0, r2
 800105c:	e728      	b.n	8000eb0 <__aeabi_fsub+0x74>
 800105e:	2320      	movs	r3, #32
 8001060:	1a1b      	subs	r3, r3, r0
 8001062:	0032      	movs	r2, r6
 8001064:	409e      	lsls	r6, r3
 8001066:	40c2      	lsrs	r2, r0
 8001068:	0030      	movs	r0, r6
 800106a:	1e43      	subs	r3, r0, #1
 800106c:	4198      	sbcs	r0, r3
 800106e:	4310      	orrs	r0, r2
 8001070:	e70c      	b.n	8000e8c <__aeabi_fsub+0x50>
 8001072:	2aff      	cmp	r2, #255	; 0xff
 8001074:	d0db      	beq.n	800102e <__aeabi_fsub+0x1f2>
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	4660      	mov	r0, ip
 800107a:	04db      	lsls	r3, r3, #19
 800107c:	4318      	orrs	r0, r3
 800107e:	4684      	mov	ip, r0
 8001080:	2f1b      	cmp	r7, #27
 8001082:	dd56      	ble.n	8001132 <__aeabi_fsub+0x2f6>
 8001084:	2001      	movs	r0, #1
 8001086:	000c      	movs	r4, r1
 8001088:	0015      	movs	r5, r2
 800108a:	1a30      	subs	r0, r6, r0
 800108c:	e700      	b.n	8000e90 <__aeabi_fsub+0x54>
 800108e:	4663      	mov	r3, ip
 8001090:	1b9f      	subs	r7, r3, r6
 8001092:	017b      	lsls	r3, r7, #5
 8001094:	d43d      	bmi.n	8001112 <__aeabi_fsub+0x2d6>
 8001096:	2f00      	cmp	r7, #0
 8001098:	d000      	beq.n	800109c <__aeabi_fsub+0x260>
 800109a:	e6fe      	b.n	8000e9a <__aeabi_fsub+0x5e>
 800109c:	2400      	movs	r4, #0
 800109e:	2200      	movs	r2, #0
 80010a0:	2700      	movs	r7, #0
 80010a2:	e716      	b.n	8000ed2 <__aeabi_fsub+0x96>
 80010a4:	0005      	movs	r5, r0
 80010a6:	e7af      	b.n	8001008 <__aeabi_fsub+0x1cc>
 80010a8:	0032      	movs	r2, r6
 80010aa:	4643      	mov	r3, r8
 80010ac:	4641      	mov	r1, r8
 80010ae:	40da      	lsrs	r2, r3
 80010b0:	2320      	movs	r3, #32
 80010b2:	1a5b      	subs	r3, r3, r1
 80010b4:	409e      	lsls	r6, r3
 80010b6:	0030      	movs	r0, r6
 80010b8:	1e43      	subs	r3, r0, #1
 80010ba:	4198      	sbcs	r0, r3
 80010bc:	4310      	orrs	r0, r2
 80010be:	e721      	b.n	8000f04 <__aeabi_fsub+0xc8>
 80010c0:	2d00      	cmp	r5, #0
 80010c2:	d1a7      	bne.n	8001014 <__aeabi_fsub+0x1d8>
 80010c4:	4663      	mov	r3, ip
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d059      	beq.n	800117e <__aeabi_fsub+0x342>
 80010ca:	2200      	movs	r2, #0
 80010cc:	2e00      	cmp	r6, #0
 80010ce:	d100      	bne.n	80010d2 <__aeabi_fsub+0x296>
 80010d0:	e6ff      	b.n	8000ed2 <__aeabi_fsub+0x96>
 80010d2:	0030      	movs	r0, r6
 80010d4:	4460      	add	r0, ip
 80010d6:	0143      	lsls	r3, r0, #5
 80010d8:	d592      	bpl.n	8001000 <__aeabi_fsub+0x1c4>
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <__aeabi_fsub+0x348>)
 80010dc:	3501      	adds	r5, #1
 80010de:	4018      	ands	r0, r3
 80010e0:	e78e      	b.n	8001000 <__aeabi_fsub+0x1c4>
 80010e2:	4663      	mov	r3, ip
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d047      	beq.n	8001178 <__aeabi_fsub+0x33c>
 80010e8:	1e4b      	subs	r3, r1, #1
 80010ea:	2901      	cmp	r1, #1
 80010ec:	d015      	beq.n	800111a <__aeabi_fsub+0x2de>
 80010ee:	29ff      	cmp	r1, #255	; 0xff
 80010f0:	d02b      	beq.n	800114a <__aeabi_fsub+0x30e>
 80010f2:	0019      	movs	r1, r3
 80010f4:	e74e      	b.n	8000f94 <__aeabi_fsub+0x158>
 80010f6:	000c      	movs	r4, r1
 80010f8:	464b      	mov	r3, r9
 80010fa:	003d      	movs	r5, r7
 80010fc:	e784      	b.n	8001008 <__aeabi_fsub+0x1cc>
 80010fe:	4662      	mov	r2, ip
 8001100:	2a00      	cmp	r2, #0
 8001102:	d18b      	bne.n	800101c <__aeabi_fsub+0x1e0>
 8001104:	2e00      	cmp	r6, #0
 8001106:	d192      	bne.n	800102e <__aeabi_fsub+0x1f2>
 8001108:	2780      	movs	r7, #128	; 0x80
 800110a:	2400      	movs	r4, #0
 800110c:	22ff      	movs	r2, #255	; 0xff
 800110e:	03ff      	lsls	r7, r7, #15
 8001110:	e6df      	b.n	8000ed2 <__aeabi_fsub+0x96>
 8001112:	4663      	mov	r3, ip
 8001114:	000c      	movs	r4, r1
 8001116:	1af7      	subs	r7, r6, r3
 8001118:	e6bf      	b.n	8000e9a <__aeabi_fsub+0x5e>
 800111a:	0030      	movs	r0, r6
 800111c:	4460      	add	r0, ip
 800111e:	2501      	movs	r5, #1
 8001120:	0143      	lsls	r3, r0, #5
 8001122:	d400      	bmi.n	8001126 <__aeabi_fsub+0x2ea>
 8001124:	e76c      	b.n	8001000 <__aeabi_fsub+0x1c4>
 8001126:	2502      	movs	r5, #2
 8001128:	e6f2      	b.n	8000f10 <__aeabi_fsub+0xd4>
 800112a:	4663      	mov	r3, ip
 800112c:	2501      	movs	r5, #1
 800112e:	1b98      	subs	r0, r3, r6
 8001130:	e6ae      	b.n	8000e90 <__aeabi_fsub+0x54>
 8001132:	2320      	movs	r3, #32
 8001134:	4664      	mov	r4, ip
 8001136:	4660      	mov	r0, ip
 8001138:	40fc      	lsrs	r4, r7
 800113a:	1bdf      	subs	r7, r3, r7
 800113c:	40b8      	lsls	r0, r7
 800113e:	1e43      	subs	r3, r0, #1
 8001140:	4198      	sbcs	r0, r3
 8001142:	4320      	orrs	r0, r4
 8001144:	e79f      	b.n	8001086 <__aeabi_fsub+0x24a>
 8001146:	0005      	movs	r5, r0
 8001148:	e75e      	b.n	8001008 <__aeabi_fsub+0x1cc>
 800114a:	464b      	mov	r3, r9
 800114c:	e771      	b.n	8001032 <__aeabi_fsub+0x1f6>
 800114e:	2320      	movs	r3, #32
 8001150:	4665      	mov	r5, ip
 8001152:	4660      	mov	r0, ip
 8001154:	40cd      	lsrs	r5, r1
 8001156:	1a59      	subs	r1, r3, r1
 8001158:	4088      	lsls	r0, r1
 800115a:	1e43      	subs	r3, r0, #1
 800115c:	4198      	sbcs	r0, r3
 800115e:	4328      	orrs	r0, r5
 8001160:	e71c      	b.n	8000f9c <__aeabi_fsub+0x160>
 8001162:	4663      	mov	r3, ip
 8001164:	000c      	movs	r4, r1
 8001166:	2501      	movs	r5, #1
 8001168:	1af0      	subs	r0, r6, r3
 800116a:	e691      	b.n	8000e90 <__aeabi_fsub+0x54>
 800116c:	2e00      	cmp	r6, #0
 800116e:	d095      	beq.n	800109c <__aeabi_fsub+0x260>
 8001170:	000c      	movs	r4, r1
 8001172:	464f      	mov	r7, r9
 8001174:	2200      	movs	r2, #0
 8001176:	e6ac      	b.n	8000ed2 <__aeabi_fsub+0x96>
 8001178:	464b      	mov	r3, r9
 800117a:	000d      	movs	r5, r1
 800117c:	e744      	b.n	8001008 <__aeabi_fsub+0x1cc>
 800117e:	464f      	mov	r7, r9
 8001180:	2200      	movs	r2, #0
 8001182:	e6a6      	b.n	8000ed2 <__aeabi_fsub+0x96>
 8001184:	fbffffff 	.word	0xfbffffff
 8001188:	7dffffff 	.word	0x7dffffff
 800118c:	2800      	cmp	r0, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_fsub+0x356>
 8001190:	e736      	b.n	8001000 <__aeabi_fsub+0x1c4>
 8001192:	2400      	movs	r4, #0
 8001194:	2700      	movs	r7, #0
 8001196:	e69c      	b.n	8000ed2 <__aeabi_fsub+0x96>

08001198 <__aeabi_f2iz>:
 8001198:	0241      	lsls	r1, r0, #9
 800119a:	0042      	lsls	r2, r0, #1
 800119c:	0fc3      	lsrs	r3, r0, #31
 800119e:	0a49      	lsrs	r1, r1, #9
 80011a0:	2000      	movs	r0, #0
 80011a2:	0e12      	lsrs	r2, r2, #24
 80011a4:	2a7e      	cmp	r2, #126	; 0x7e
 80011a6:	dd03      	ble.n	80011b0 <__aeabi_f2iz+0x18>
 80011a8:	2a9d      	cmp	r2, #157	; 0x9d
 80011aa:	dd02      	ble.n	80011b2 <__aeabi_f2iz+0x1a>
 80011ac:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <__aeabi_f2iz+0x3c>)
 80011ae:	1898      	adds	r0, r3, r2
 80011b0:	4770      	bx	lr
 80011b2:	2080      	movs	r0, #128	; 0x80
 80011b4:	0400      	lsls	r0, r0, #16
 80011b6:	4301      	orrs	r1, r0
 80011b8:	2a95      	cmp	r2, #149	; 0x95
 80011ba:	dc07      	bgt.n	80011cc <__aeabi_f2iz+0x34>
 80011bc:	2096      	movs	r0, #150	; 0x96
 80011be:	1a82      	subs	r2, r0, r2
 80011c0:	40d1      	lsrs	r1, r2
 80011c2:	4248      	negs	r0, r1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f3      	bne.n	80011b0 <__aeabi_f2iz+0x18>
 80011c8:	0008      	movs	r0, r1
 80011ca:	e7f1      	b.n	80011b0 <__aeabi_f2iz+0x18>
 80011cc:	3a96      	subs	r2, #150	; 0x96
 80011ce:	4091      	lsls	r1, r2
 80011d0:	e7f7      	b.n	80011c2 <__aeabi_f2iz+0x2a>
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	7fffffff 	.word	0x7fffffff

080011d8 <__aeabi_i2f>:
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	2800      	cmp	r0, #0
 80011dc:	d013      	beq.n	8001206 <__aeabi_i2f+0x2e>
 80011de:	17c3      	asrs	r3, r0, #31
 80011e0:	18c6      	adds	r6, r0, r3
 80011e2:	405e      	eors	r6, r3
 80011e4:	0fc4      	lsrs	r4, r0, #31
 80011e6:	0030      	movs	r0, r6
 80011e8:	f001 feb2 	bl	8002f50 <__clzsi2>
 80011ec:	239e      	movs	r3, #158	; 0x9e
 80011ee:	0005      	movs	r5, r0
 80011f0:	1a1b      	subs	r3, r3, r0
 80011f2:	2b96      	cmp	r3, #150	; 0x96
 80011f4:	dc0f      	bgt.n	8001216 <__aeabi_i2f+0x3e>
 80011f6:	2808      	cmp	r0, #8
 80011f8:	dd01      	ble.n	80011fe <__aeabi_i2f+0x26>
 80011fa:	3d08      	subs	r5, #8
 80011fc:	40ae      	lsls	r6, r5
 80011fe:	0276      	lsls	r6, r6, #9
 8001200:	0a76      	lsrs	r6, r6, #9
 8001202:	b2d8      	uxtb	r0, r3
 8001204:	e002      	b.n	800120c <__aeabi_i2f+0x34>
 8001206:	2400      	movs	r4, #0
 8001208:	2000      	movs	r0, #0
 800120a:	2600      	movs	r6, #0
 800120c:	05c0      	lsls	r0, r0, #23
 800120e:	4330      	orrs	r0, r6
 8001210:	07e4      	lsls	r4, r4, #31
 8001212:	4320      	orrs	r0, r4
 8001214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001216:	2b99      	cmp	r3, #153	; 0x99
 8001218:	dd0c      	ble.n	8001234 <__aeabi_i2f+0x5c>
 800121a:	2205      	movs	r2, #5
 800121c:	0031      	movs	r1, r6
 800121e:	1a12      	subs	r2, r2, r0
 8001220:	40d1      	lsrs	r1, r2
 8001222:	000a      	movs	r2, r1
 8001224:	0001      	movs	r1, r0
 8001226:	0030      	movs	r0, r6
 8001228:	311b      	adds	r1, #27
 800122a:	4088      	lsls	r0, r1
 800122c:	1e41      	subs	r1, r0, #1
 800122e:	4188      	sbcs	r0, r1
 8001230:	4302      	orrs	r2, r0
 8001232:	0016      	movs	r6, r2
 8001234:	2d05      	cmp	r5, #5
 8001236:	dc12      	bgt.n	800125e <__aeabi_i2f+0x86>
 8001238:	0031      	movs	r1, r6
 800123a:	4f0d      	ldr	r7, [pc, #52]	; (8001270 <__aeabi_i2f+0x98>)
 800123c:	4039      	ands	r1, r7
 800123e:	0772      	lsls	r2, r6, #29
 8001240:	d009      	beq.n	8001256 <__aeabi_i2f+0x7e>
 8001242:	200f      	movs	r0, #15
 8001244:	4030      	ands	r0, r6
 8001246:	2804      	cmp	r0, #4
 8001248:	d005      	beq.n	8001256 <__aeabi_i2f+0x7e>
 800124a:	3104      	adds	r1, #4
 800124c:	014a      	lsls	r2, r1, #5
 800124e:	d502      	bpl.n	8001256 <__aeabi_i2f+0x7e>
 8001250:	239f      	movs	r3, #159	; 0x9f
 8001252:	4039      	ands	r1, r7
 8001254:	1b5b      	subs	r3, r3, r5
 8001256:	0189      	lsls	r1, r1, #6
 8001258:	0a4e      	lsrs	r6, r1, #9
 800125a:	b2d8      	uxtb	r0, r3
 800125c:	e7d6      	b.n	800120c <__aeabi_i2f+0x34>
 800125e:	1f6a      	subs	r2, r5, #5
 8001260:	4096      	lsls	r6, r2
 8001262:	0031      	movs	r1, r6
 8001264:	4f02      	ldr	r7, [pc, #8]	; (8001270 <__aeabi_i2f+0x98>)
 8001266:	4039      	ands	r1, r7
 8001268:	0772      	lsls	r2, r6, #29
 800126a:	d0f4      	beq.n	8001256 <__aeabi_i2f+0x7e>
 800126c:	e7e9      	b.n	8001242 <__aeabi_i2f+0x6a>
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	fbffffff 	.word	0xfbffffff

08001274 <__aeabi_dadd>:
 8001274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001276:	464f      	mov	r7, r9
 8001278:	4646      	mov	r6, r8
 800127a:	46d6      	mov	lr, sl
 800127c:	000d      	movs	r5, r1
 800127e:	0004      	movs	r4, r0
 8001280:	b5c0      	push	{r6, r7, lr}
 8001282:	001f      	movs	r7, r3
 8001284:	0011      	movs	r1, r2
 8001286:	0328      	lsls	r0, r5, #12
 8001288:	0f62      	lsrs	r2, r4, #29
 800128a:	0a40      	lsrs	r0, r0, #9
 800128c:	4310      	orrs	r0, r2
 800128e:	007a      	lsls	r2, r7, #1
 8001290:	0d52      	lsrs	r2, r2, #21
 8001292:	00e3      	lsls	r3, r4, #3
 8001294:	033c      	lsls	r4, r7, #12
 8001296:	4691      	mov	r9, r2
 8001298:	0a64      	lsrs	r4, r4, #9
 800129a:	0ffa      	lsrs	r2, r7, #31
 800129c:	0f4f      	lsrs	r7, r1, #29
 800129e:	006e      	lsls	r6, r5, #1
 80012a0:	4327      	orrs	r7, r4
 80012a2:	4692      	mov	sl, r2
 80012a4:	46b8      	mov	r8, r7
 80012a6:	0d76      	lsrs	r6, r6, #21
 80012a8:	0fed      	lsrs	r5, r5, #31
 80012aa:	00c9      	lsls	r1, r1, #3
 80012ac:	4295      	cmp	r5, r2
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dadd+0x3e>
 80012b0:	e099      	b.n	80013e6 <__aeabi_dadd+0x172>
 80012b2:	464c      	mov	r4, r9
 80012b4:	1b34      	subs	r4, r6, r4
 80012b6:	46a4      	mov	ip, r4
 80012b8:	2c00      	cmp	r4, #0
 80012ba:	dc00      	bgt.n	80012be <__aeabi_dadd+0x4a>
 80012bc:	e07c      	b.n	80013b8 <__aeabi_dadd+0x144>
 80012be:	464a      	mov	r2, r9
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0x52>
 80012c4:	e0b8      	b.n	8001438 <__aeabi_dadd+0x1c4>
 80012c6:	4ac5      	ldr	r2, [pc, #788]	; (80015dc <__aeabi_dadd+0x368>)
 80012c8:	4296      	cmp	r6, r2
 80012ca:	d100      	bne.n	80012ce <__aeabi_dadd+0x5a>
 80012cc:	e11c      	b.n	8001508 <__aeabi_dadd+0x294>
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	003c      	movs	r4, r7
 80012d2:	0412      	lsls	r2, r2, #16
 80012d4:	4314      	orrs	r4, r2
 80012d6:	46a0      	mov	r8, r4
 80012d8:	4662      	mov	r2, ip
 80012da:	2a38      	cmp	r2, #56	; 0x38
 80012dc:	dd00      	ble.n	80012e0 <__aeabi_dadd+0x6c>
 80012de:	e161      	b.n	80015a4 <__aeabi_dadd+0x330>
 80012e0:	2a1f      	cmp	r2, #31
 80012e2:	dd00      	ble.n	80012e6 <__aeabi_dadd+0x72>
 80012e4:	e1cc      	b.n	8001680 <__aeabi_dadd+0x40c>
 80012e6:	4664      	mov	r4, ip
 80012e8:	2220      	movs	r2, #32
 80012ea:	1b12      	subs	r2, r2, r4
 80012ec:	4644      	mov	r4, r8
 80012ee:	4094      	lsls	r4, r2
 80012f0:	000f      	movs	r7, r1
 80012f2:	46a1      	mov	r9, r4
 80012f4:	4664      	mov	r4, ip
 80012f6:	4091      	lsls	r1, r2
 80012f8:	40e7      	lsrs	r7, r4
 80012fa:	464c      	mov	r4, r9
 80012fc:	1e4a      	subs	r2, r1, #1
 80012fe:	4191      	sbcs	r1, r2
 8001300:	433c      	orrs	r4, r7
 8001302:	4642      	mov	r2, r8
 8001304:	4321      	orrs	r1, r4
 8001306:	4664      	mov	r4, ip
 8001308:	40e2      	lsrs	r2, r4
 800130a:	1a80      	subs	r0, r0, r2
 800130c:	1a5c      	subs	r4, r3, r1
 800130e:	42a3      	cmp	r3, r4
 8001310:	419b      	sbcs	r3, r3
 8001312:	425f      	negs	r7, r3
 8001314:	1bc7      	subs	r7, r0, r7
 8001316:	023b      	lsls	r3, r7, #8
 8001318:	d400      	bmi.n	800131c <__aeabi_dadd+0xa8>
 800131a:	e0d0      	b.n	80014be <__aeabi_dadd+0x24a>
 800131c:	027f      	lsls	r7, r7, #9
 800131e:	0a7f      	lsrs	r7, r7, #9
 8001320:	2f00      	cmp	r7, #0
 8001322:	d100      	bne.n	8001326 <__aeabi_dadd+0xb2>
 8001324:	e0ff      	b.n	8001526 <__aeabi_dadd+0x2b2>
 8001326:	0038      	movs	r0, r7
 8001328:	f001 fe12 	bl	8002f50 <__clzsi2>
 800132c:	0001      	movs	r1, r0
 800132e:	3908      	subs	r1, #8
 8001330:	2320      	movs	r3, #32
 8001332:	0022      	movs	r2, r4
 8001334:	1a5b      	subs	r3, r3, r1
 8001336:	408f      	lsls	r7, r1
 8001338:	40da      	lsrs	r2, r3
 800133a:	408c      	lsls	r4, r1
 800133c:	4317      	orrs	r7, r2
 800133e:	42b1      	cmp	r1, r6
 8001340:	da00      	bge.n	8001344 <__aeabi_dadd+0xd0>
 8001342:	e0ff      	b.n	8001544 <__aeabi_dadd+0x2d0>
 8001344:	1b89      	subs	r1, r1, r6
 8001346:	1c4b      	adds	r3, r1, #1
 8001348:	2b1f      	cmp	r3, #31
 800134a:	dd00      	ble.n	800134e <__aeabi_dadd+0xda>
 800134c:	e0a8      	b.n	80014a0 <__aeabi_dadd+0x22c>
 800134e:	2220      	movs	r2, #32
 8001350:	0039      	movs	r1, r7
 8001352:	1ad2      	subs	r2, r2, r3
 8001354:	0020      	movs	r0, r4
 8001356:	4094      	lsls	r4, r2
 8001358:	4091      	lsls	r1, r2
 800135a:	40d8      	lsrs	r0, r3
 800135c:	1e62      	subs	r2, r4, #1
 800135e:	4194      	sbcs	r4, r2
 8001360:	40df      	lsrs	r7, r3
 8001362:	2600      	movs	r6, #0
 8001364:	4301      	orrs	r1, r0
 8001366:	430c      	orrs	r4, r1
 8001368:	0763      	lsls	r3, r4, #29
 800136a:	d009      	beq.n	8001380 <__aeabi_dadd+0x10c>
 800136c:	230f      	movs	r3, #15
 800136e:	4023      	ands	r3, r4
 8001370:	2b04      	cmp	r3, #4
 8001372:	d005      	beq.n	8001380 <__aeabi_dadd+0x10c>
 8001374:	1d23      	adds	r3, r4, #4
 8001376:	42a3      	cmp	r3, r4
 8001378:	41a4      	sbcs	r4, r4
 800137a:	4264      	negs	r4, r4
 800137c:	193f      	adds	r7, r7, r4
 800137e:	001c      	movs	r4, r3
 8001380:	023b      	lsls	r3, r7, #8
 8001382:	d400      	bmi.n	8001386 <__aeabi_dadd+0x112>
 8001384:	e09e      	b.n	80014c4 <__aeabi_dadd+0x250>
 8001386:	4b95      	ldr	r3, [pc, #596]	; (80015dc <__aeabi_dadd+0x368>)
 8001388:	3601      	adds	r6, #1
 800138a:	429e      	cmp	r6, r3
 800138c:	d100      	bne.n	8001390 <__aeabi_dadd+0x11c>
 800138e:	e0b7      	b.n	8001500 <__aeabi_dadd+0x28c>
 8001390:	4a93      	ldr	r2, [pc, #588]	; (80015e0 <__aeabi_dadd+0x36c>)
 8001392:	08e4      	lsrs	r4, r4, #3
 8001394:	4017      	ands	r7, r2
 8001396:	077b      	lsls	r3, r7, #29
 8001398:	0571      	lsls	r1, r6, #21
 800139a:	027f      	lsls	r7, r7, #9
 800139c:	4323      	orrs	r3, r4
 800139e:	0b3f      	lsrs	r7, r7, #12
 80013a0:	0d4a      	lsrs	r2, r1, #21
 80013a2:	0512      	lsls	r2, r2, #20
 80013a4:	433a      	orrs	r2, r7
 80013a6:	07ed      	lsls	r5, r5, #31
 80013a8:	432a      	orrs	r2, r5
 80013aa:	0018      	movs	r0, r3
 80013ac:	0011      	movs	r1, r2
 80013ae:	bce0      	pop	{r5, r6, r7}
 80013b0:	46ba      	mov	sl, r7
 80013b2:	46b1      	mov	r9, r6
 80013b4:	46a8      	mov	r8, r5
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d04b      	beq.n	8001454 <__aeabi_dadd+0x1e0>
 80013bc:	464c      	mov	r4, r9
 80013be:	1ba4      	subs	r4, r4, r6
 80013c0:	46a4      	mov	ip, r4
 80013c2:	2e00      	cmp	r6, #0
 80013c4:	d000      	beq.n	80013c8 <__aeabi_dadd+0x154>
 80013c6:	e123      	b.n	8001610 <__aeabi_dadd+0x39c>
 80013c8:	0004      	movs	r4, r0
 80013ca:	431c      	orrs	r4, r3
 80013cc:	d100      	bne.n	80013d0 <__aeabi_dadd+0x15c>
 80013ce:	e1af      	b.n	8001730 <__aeabi_dadd+0x4bc>
 80013d0:	4662      	mov	r2, ip
 80013d2:	1e54      	subs	r4, r2, #1
 80013d4:	2a01      	cmp	r2, #1
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x166>
 80013d8:	e215      	b.n	8001806 <__aeabi_dadd+0x592>
 80013da:	4d80      	ldr	r5, [pc, #512]	; (80015dc <__aeabi_dadd+0x368>)
 80013dc:	45ac      	cmp	ip, r5
 80013de:	d100      	bne.n	80013e2 <__aeabi_dadd+0x16e>
 80013e0:	e1c8      	b.n	8001774 <__aeabi_dadd+0x500>
 80013e2:	46a4      	mov	ip, r4
 80013e4:	e11b      	b.n	800161e <__aeabi_dadd+0x3aa>
 80013e6:	464a      	mov	r2, r9
 80013e8:	1ab2      	subs	r2, r6, r2
 80013ea:	4694      	mov	ip, r2
 80013ec:	2a00      	cmp	r2, #0
 80013ee:	dc00      	bgt.n	80013f2 <__aeabi_dadd+0x17e>
 80013f0:	e0ac      	b.n	800154c <__aeabi_dadd+0x2d8>
 80013f2:	464a      	mov	r2, r9
 80013f4:	2a00      	cmp	r2, #0
 80013f6:	d043      	beq.n	8001480 <__aeabi_dadd+0x20c>
 80013f8:	4a78      	ldr	r2, [pc, #480]	; (80015dc <__aeabi_dadd+0x368>)
 80013fa:	4296      	cmp	r6, r2
 80013fc:	d100      	bne.n	8001400 <__aeabi_dadd+0x18c>
 80013fe:	e1af      	b.n	8001760 <__aeabi_dadd+0x4ec>
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	003c      	movs	r4, r7
 8001404:	0412      	lsls	r2, r2, #16
 8001406:	4314      	orrs	r4, r2
 8001408:	46a0      	mov	r8, r4
 800140a:	4662      	mov	r2, ip
 800140c:	2a38      	cmp	r2, #56	; 0x38
 800140e:	dc67      	bgt.n	80014e0 <__aeabi_dadd+0x26c>
 8001410:	2a1f      	cmp	r2, #31
 8001412:	dc00      	bgt.n	8001416 <__aeabi_dadd+0x1a2>
 8001414:	e15f      	b.n	80016d6 <__aeabi_dadd+0x462>
 8001416:	4647      	mov	r7, r8
 8001418:	3a20      	subs	r2, #32
 800141a:	40d7      	lsrs	r7, r2
 800141c:	4662      	mov	r2, ip
 800141e:	2a20      	cmp	r2, #32
 8001420:	d005      	beq.n	800142e <__aeabi_dadd+0x1ba>
 8001422:	4664      	mov	r4, ip
 8001424:	2240      	movs	r2, #64	; 0x40
 8001426:	1b12      	subs	r2, r2, r4
 8001428:	4644      	mov	r4, r8
 800142a:	4094      	lsls	r4, r2
 800142c:	4321      	orrs	r1, r4
 800142e:	1e4a      	subs	r2, r1, #1
 8001430:	4191      	sbcs	r1, r2
 8001432:	000c      	movs	r4, r1
 8001434:	433c      	orrs	r4, r7
 8001436:	e057      	b.n	80014e8 <__aeabi_dadd+0x274>
 8001438:	003a      	movs	r2, r7
 800143a:	430a      	orrs	r2, r1
 800143c:	d100      	bne.n	8001440 <__aeabi_dadd+0x1cc>
 800143e:	e105      	b.n	800164c <__aeabi_dadd+0x3d8>
 8001440:	0022      	movs	r2, r4
 8001442:	3a01      	subs	r2, #1
 8001444:	2c01      	cmp	r4, #1
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x1d6>
 8001448:	e182      	b.n	8001750 <__aeabi_dadd+0x4dc>
 800144a:	4c64      	ldr	r4, [pc, #400]	; (80015dc <__aeabi_dadd+0x368>)
 800144c:	45a4      	cmp	ip, r4
 800144e:	d05b      	beq.n	8001508 <__aeabi_dadd+0x294>
 8001450:	4694      	mov	ip, r2
 8001452:	e741      	b.n	80012d8 <__aeabi_dadd+0x64>
 8001454:	4c63      	ldr	r4, [pc, #396]	; (80015e4 <__aeabi_dadd+0x370>)
 8001456:	1c77      	adds	r7, r6, #1
 8001458:	4227      	tst	r7, r4
 800145a:	d000      	beq.n	800145e <__aeabi_dadd+0x1ea>
 800145c:	e0c4      	b.n	80015e8 <__aeabi_dadd+0x374>
 800145e:	0004      	movs	r4, r0
 8001460:	431c      	orrs	r4, r3
 8001462:	2e00      	cmp	r6, #0
 8001464:	d000      	beq.n	8001468 <__aeabi_dadd+0x1f4>
 8001466:	e169      	b.n	800173c <__aeabi_dadd+0x4c8>
 8001468:	2c00      	cmp	r4, #0
 800146a:	d100      	bne.n	800146e <__aeabi_dadd+0x1fa>
 800146c:	e1bf      	b.n	80017ee <__aeabi_dadd+0x57a>
 800146e:	4644      	mov	r4, r8
 8001470:	430c      	orrs	r4, r1
 8001472:	d000      	beq.n	8001476 <__aeabi_dadd+0x202>
 8001474:	e1d0      	b.n	8001818 <__aeabi_dadd+0x5a4>
 8001476:	0742      	lsls	r2, r0, #29
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	4313      	orrs	r3, r2
 800147c:	08c0      	lsrs	r0, r0, #3
 800147e:	e029      	b.n	80014d4 <__aeabi_dadd+0x260>
 8001480:	003a      	movs	r2, r7
 8001482:	430a      	orrs	r2, r1
 8001484:	d100      	bne.n	8001488 <__aeabi_dadd+0x214>
 8001486:	e170      	b.n	800176a <__aeabi_dadd+0x4f6>
 8001488:	4662      	mov	r2, ip
 800148a:	4664      	mov	r4, ip
 800148c:	3a01      	subs	r2, #1
 800148e:	2c01      	cmp	r4, #1
 8001490:	d100      	bne.n	8001494 <__aeabi_dadd+0x220>
 8001492:	e0e0      	b.n	8001656 <__aeabi_dadd+0x3e2>
 8001494:	4c51      	ldr	r4, [pc, #324]	; (80015dc <__aeabi_dadd+0x368>)
 8001496:	45a4      	cmp	ip, r4
 8001498:	d100      	bne.n	800149c <__aeabi_dadd+0x228>
 800149a:	e161      	b.n	8001760 <__aeabi_dadd+0x4ec>
 800149c:	4694      	mov	ip, r2
 800149e:	e7b4      	b.n	800140a <__aeabi_dadd+0x196>
 80014a0:	003a      	movs	r2, r7
 80014a2:	391f      	subs	r1, #31
 80014a4:	40ca      	lsrs	r2, r1
 80014a6:	0011      	movs	r1, r2
 80014a8:	2b20      	cmp	r3, #32
 80014aa:	d003      	beq.n	80014b4 <__aeabi_dadd+0x240>
 80014ac:	2240      	movs	r2, #64	; 0x40
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	409f      	lsls	r7, r3
 80014b2:	433c      	orrs	r4, r7
 80014b4:	1e63      	subs	r3, r4, #1
 80014b6:	419c      	sbcs	r4, r3
 80014b8:	2700      	movs	r7, #0
 80014ba:	2600      	movs	r6, #0
 80014bc:	430c      	orrs	r4, r1
 80014be:	0763      	lsls	r3, r4, #29
 80014c0:	d000      	beq.n	80014c4 <__aeabi_dadd+0x250>
 80014c2:	e753      	b.n	800136c <__aeabi_dadd+0xf8>
 80014c4:	46b4      	mov	ip, r6
 80014c6:	08e4      	lsrs	r4, r4, #3
 80014c8:	077b      	lsls	r3, r7, #29
 80014ca:	4323      	orrs	r3, r4
 80014cc:	08f8      	lsrs	r0, r7, #3
 80014ce:	4a43      	ldr	r2, [pc, #268]	; (80015dc <__aeabi_dadd+0x368>)
 80014d0:	4594      	cmp	ip, r2
 80014d2:	d01d      	beq.n	8001510 <__aeabi_dadd+0x29c>
 80014d4:	4662      	mov	r2, ip
 80014d6:	0307      	lsls	r7, r0, #12
 80014d8:	0552      	lsls	r2, r2, #21
 80014da:	0b3f      	lsrs	r7, r7, #12
 80014dc:	0d52      	lsrs	r2, r2, #21
 80014de:	e760      	b.n	80013a2 <__aeabi_dadd+0x12e>
 80014e0:	4644      	mov	r4, r8
 80014e2:	430c      	orrs	r4, r1
 80014e4:	1e62      	subs	r2, r4, #1
 80014e6:	4194      	sbcs	r4, r2
 80014e8:	18e4      	adds	r4, r4, r3
 80014ea:	429c      	cmp	r4, r3
 80014ec:	419b      	sbcs	r3, r3
 80014ee:	425f      	negs	r7, r3
 80014f0:	183f      	adds	r7, r7, r0
 80014f2:	023b      	lsls	r3, r7, #8
 80014f4:	d5e3      	bpl.n	80014be <__aeabi_dadd+0x24a>
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <__aeabi_dadd+0x368>)
 80014f8:	3601      	adds	r6, #1
 80014fa:	429e      	cmp	r6, r3
 80014fc:	d000      	beq.n	8001500 <__aeabi_dadd+0x28c>
 80014fe:	e0b5      	b.n	800166c <__aeabi_dadd+0x3f8>
 8001500:	0032      	movs	r2, r6
 8001502:	2700      	movs	r7, #0
 8001504:	2300      	movs	r3, #0
 8001506:	e74c      	b.n	80013a2 <__aeabi_dadd+0x12e>
 8001508:	0742      	lsls	r2, r0, #29
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	4313      	orrs	r3, r2
 800150e:	08c0      	lsrs	r0, r0, #3
 8001510:	001a      	movs	r2, r3
 8001512:	4302      	orrs	r2, r0
 8001514:	d100      	bne.n	8001518 <__aeabi_dadd+0x2a4>
 8001516:	e1e1      	b.n	80018dc <__aeabi_dadd+0x668>
 8001518:	2780      	movs	r7, #128	; 0x80
 800151a:	033f      	lsls	r7, r7, #12
 800151c:	4307      	orrs	r7, r0
 800151e:	033f      	lsls	r7, r7, #12
 8001520:	4a2e      	ldr	r2, [pc, #184]	; (80015dc <__aeabi_dadd+0x368>)
 8001522:	0b3f      	lsrs	r7, r7, #12
 8001524:	e73d      	b.n	80013a2 <__aeabi_dadd+0x12e>
 8001526:	0020      	movs	r0, r4
 8001528:	f001 fd12 	bl	8002f50 <__clzsi2>
 800152c:	0001      	movs	r1, r0
 800152e:	3118      	adds	r1, #24
 8001530:	291f      	cmp	r1, #31
 8001532:	dc00      	bgt.n	8001536 <__aeabi_dadd+0x2c2>
 8001534:	e6fc      	b.n	8001330 <__aeabi_dadd+0xbc>
 8001536:	3808      	subs	r0, #8
 8001538:	4084      	lsls	r4, r0
 800153a:	0027      	movs	r7, r4
 800153c:	2400      	movs	r4, #0
 800153e:	42b1      	cmp	r1, r6
 8001540:	db00      	blt.n	8001544 <__aeabi_dadd+0x2d0>
 8001542:	e6ff      	b.n	8001344 <__aeabi_dadd+0xd0>
 8001544:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <__aeabi_dadd+0x36c>)
 8001546:	1a76      	subs	r6, r6, r1
 8001548:	4017      	ands	r7, r2
 800154a:	e70d      	b.n	8001368 <__aeabi_dadd+0xf4>
 800154c:	2a00      	cmp	r2, #0
 800154e:	d02f      	beq.n	80015b0 <__aeabi_dadd+0x33c>
 8001550:	464a      	mov	r2, r9
 8001552:	1b92      	subs	r2, r2, r6
 8001554:	4694      	mov	ip, r2
 8001556:	2e00      	cmp	r6, #0
 8001558:	d100      	bne.n	800155c <__aeabi_dadd+0x2e8>
 800155a:	e0ad      	b.n	80016b8 <__aeabi_dadd+0x444>
 800155c:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <__aeabi_dadd+0x368>)
 800155e:	4591      	cmp	r9, r2
 8001560:	d100      	bne.n	8001564 <__aeabi_dadd+0x2f0>
 8001562:	e10f      	b.n	8001784 <__aeabi_dadd+0x510>
 8001564:	2280      	movs	r2, #128	; 0x80
 8001566:	0412      	lsls	r2, r2, #16
 8001568:	4310      	orrs	r0, r2
 800156a:	4662      	mov	r2, ip
 800156c:	2a38      	cmp	r2, #56	; 0x38
 800156e:	dd00      	ble.n	8001572 <__aeabi_dadd+0x2fe>
 8001570:	e10f      	b.n	8001792 <__aeabi_dadd+0x51e>
 8001572:	2a1f      	cmp	r2, #31
 8001574:	dd00      	ble.n	8001578 <__aeabi_dadd+0x304>
 8001576:	e180      	b.n	800187a <__aeabi_dadd+0x606>
 8001578:	4664      	mov	r4, ip
 800157a:	2220      	movs	r2, #32
 800157c:	001e      	movs	r6, r3
 800157e:	1b12      	subs	r2, r2, r4
 8001580:	4667      	mov	r7, ip
 8001582:	0004      	movs	r4, r0
 8001584:	4093      	lsls	r3, r2
 8001586:	4094      	lsls	r4, r2
 8001588:	40fe      	lsrs	r6, r7
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	4193      	sbcs	r3, r2
 800158e:	40f8      	lsrs	r0, r7
 8001590:	4334      	orrs	r4, r6
 8001592:	431c      	orrs	r4, r3
 8001594:	4480      	add	r8, r0
 8001596:	1864      	adds	r4, r4, r1
 8001598:	428c      	cmp	r4, r1
 800159a:	41bf      	sbcs	r7, r7
 800159c:	427f      	negs	r7, r7
 800159e:	464e      	mov	r6, r9
 80015a0:	4447      	add	r7, r8
 80015a2:	e7a6      	b.n	80014f2 <__aeabi_dadd+0x27e>
 80015a4:	4642      	mov	r2, r8
 80015a6:	430a      	orrs	r2, r1
 80015a8:	0011      	movs	r1, r2
 80015aa:	1e4a      	subs	r2, r1, #1
 80015ac:	4191      	sbcs	r1, r2
 80015ae:	e6ad      	b.n	800130c <__aeabi_dadd+0x98>
 80015b0:	4c0c      	ldr	r4, [pc, #48]	; (80015e4 <__aeabi_dadd+0x370>)
 80015b2:	1c72      	adds	r2, r6, #1
 80015b4:	4222      	tst	r2, r4
 80015b6:	d000      	beq.n	80015ba <__aeabi_dadd+0x346>
 80015b8:	e0a1      	b.n	80016fe <__aeabi_dadd+0x48a>
 80015ba:	0002      	movs	r2, r0
 80015bc:	431a      	orrs	r2, r3
 80015be:	2e00      	cmp	r6, #0
 80015c0:	d000      	beq.n	80015c4 <__aeabi_dadd+0x350>
 80015c2:	e0fa      	b.n	80017ba <__aeabi_dadd+0x546>
 80015c4:	2a00      	cmp	r2, #0
 80015c6:	d100      	bne.n	80015ca <__aeabi_dadd+0x356>
 80015c8:	e145      	b.n	8001856 <__aeabi_dadd+0x5e2>
 80015ca:	003a      	movs	r2, r7
 80015cc:	430a      	orrs	r2, r1
 80015ce:	d000      	beq.n	80015d2 <__aeabi_dadd+0x35e>
 80015d0:	e146      	b.n	8001860 <__aeabi_dadd+0x5ec>
 80015d2:	0742      	lsls	r2, r0, #29
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	08c0      	lsrs	r0, r0, #3
 80015da:	e77b      	b.n	80014d4 <__aeabi_dadd+0x260>
 80015dc:	000007ff 	.word	0x000007ff
 80015e0:	ff7fffff 	.word	0xff7fffff
 80015e4:	000007fe 	.word	0x000007fe
 80015e8:	4647      	mov	r7, r8
 80015ea:	1a5c      	subs	r4, r3, r1
 80015ec:	1bc2      	subs	r2, r0, r7
 80015ee:	42a3      	cmp	r3, r4
 80015f0:	41bf      	sbcs	r7, r7
 80015f2:	427f      	negs	r7, r7
 80015f4:	46b9      	mov	r9, r7
 80015f6:	0017      	movs	r7, r2
 80015f8:	464a      	mov	r2, r9
 80015fa:	1abf      	subs	r7, r7, r2
 80015fc:	023a      	lsls	r2, r7, #8
 80015fe:	d500      	bpl.n	8001602 <__aeabi_dadd+0x38e>
 8001600:	e08d      	b.n	800171e <__aeabi_dadd+0x4aa>
 8001602:	0023      	movs	r3, r4
 8001604:	433b      	orrs	r3, r7
 8001606:	d000      	beq.n	800160a <__aeabi_dadd+0x396>
 8001608:	e68a      	b.n	8001320 <__aeabi_dadd+0xac>
 800160a:	2000      	movs	r0, #0
 800160c:	2500      	movs	r5, #0
 800160e:	e761      	b.n	80014d4 <__aeabi_dadd+0x260>
 8001610:	4cb4      	ldr	r4, [pc, #720]	; (80018e4 <__aeabi_dadd+0x670>)
 8001612:	45a1      	cmp	r9, r4
 8001614:	d100      	bne.n	8001618 <__aeabi_dadd+0x3a4>
 8001616:	e0ad      	b.n	8001774 <__aeabi_dadd+0x500>
 8001618:	2480      	movs	r4, #128	; 0x80
 800161a:	0424      	lsls	r4, r4, #16
 800161c:	4320      	orrs	r0, r4
 800161e:	4664      	mov	r4, ip
 8001620:	2c38      	cmp	r4, #56	; 0x38
 8001622:	dc3d      	bgt.n	80016a0 <__aeabi_dadd+0x42c>
 8001624:	4662      	mov	r2, ip
 8001626:	2c1f      	cmp	r4, #31
 8001628:	dd00      	ble.n	800162c <__aeabi_dadd+0x3b8>
 800162a:	e0b7      	b.n	800179c <__aeabi_dadd+0x528>
 800162c:	2520      	movs	r5, #32
 800162e:	001e      	movs	r6, r3
 8001630:	1b2d      	subs	r5, r5, r4
 8001632:	0004      	movs	r4, r0
 8001634:	40ab      	lsls	r3, r5
 8001636:	40ac      	lsls	r4, r5
 8001638:	40d6      	lsrs	r6, r2
 800163a:	40d0      	lsrs	r0, r2
 800163c:	4642      	mov	r2, r8
 800163e:	1e5d      	subs	r5, r3, #1
 8001640:	41ab      	sbcs	r3, r5
 8001642:	4334      	orrs	r4, r6
 8001644:	1a12      	subs	r2, r2, r0
 8001646:	4690      	mov	r8, r2
 8001648:	4323      	orrs	r3, r4
 800164a:	e02c      	b.n	80016a6 <__aeabi_dadd+0x432>
 800164c:	0742      	lsls	r2, r0, #29
 800164e:	08db      	lsrs	r3, r3, #3
 8001650:	4313      	orrs	r3, r2
 8001652:	08c0      	lsrs	r0, r0, #3
 8001654:	e73b      	b.n	80014ce <__aeabi_dadd+0x25a>
 8001656:	185c      	adds	r4, r3, r1
 8001658:	429c      	cmp	r4, r3
 800165a:	419b      	sbcs	r3, r3
 800165c:	4440      	add	r0, r8
 800165e:	425b      	negs	r3, r3
 8001660:	18c7      	adds	r7, r0, r3
 8001662:	2601      	movs	r6, #1
 8001664:	023b      	lsls	r3, r7, #8
 8001666:	d400      	bmi.n	800166a <__aeabi_dadd+0x3f6>
 8001668:	e729      	b.n	80014be <__aeabi_dadd+0x24a>
 800166a:	2602      	movs	r6, #2
 800166c:	4a9e      	ldr	r2, [pc, #632]	; (80018e8 <__aeabi_dadd+0x674>)
 800166e:	0863      	lsrs	r3, r4, #1
 8001670:	4017      	ands	r7, r2
 8001672:	2201      	movs	r2, #1
 8001674:	4014      	ands	r4, r2
 8001676:	431c      	orrs	r4, r3
 8001678:	07fb      	lsls	r3, r7, #31
 800167a:	431c      	orrs	r4, r3
 800167c:	087f      	lsrs	r7, r7, #1
 800167e:	e673      	b.n	8001368 <__aeabi_dadd+0xf4>
 8001680:	4644      	mov	r4, r8
 8001682:	3a20      	subs	r2, #32
 8001684:	40d4      	lsrs	r4, r2
 8001686:	4662      	mov	r2, ip
 8001688:	2a20      	cmp	r2, #32
 800168a:	d005      	beq.n	8001698 <__aeabi_dadd+0x424>
 800168c:	4667      	mov	r7, ip
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	1bd2      	subs	r2, r2, r7
 8001692:	4647      	mov	r7, r8
 8001694:	4097      	lsls	r7, r2
 8001696:	4339      	orrs	r1, r7
 8001698:	1e4a      	subs	r2, r1, #1
 800169a:	4191      	sbcs	r1, r2
 800169c:	4321      	orrs	r1, r4
 800169e:	e635      	b.n	800130c <__aeabi_dadd+0x98>
 80016a0:	4303      	orrs	r3, r0
 80016a2:	1e58      	subs	r0, r3, #1
 80016a4:	4183      	sbcs	r3, r0
 80016a6:	1acc      	subs	r4, r1, r3
 80016a8:	42a1      	cmp	r1, r4
 80016aa:	41bf      	sbcs	r7, r7
 80016ac:	4643      	mov	r3, r8
 80016ae:	427f      	negs	r7, r7
 80016b0:	4655      	mov	r5, sl
 80016b2:	464e      	mov	r6, r9
 80016b4:	1bdf      	subs	r7, r3, r7
 80016b6:	e62e      	b.n	8001316 <__aeabi_dadd+0xa2>
 80016b8:	0002      	movs	r2, r0
 80016ba:	431a      	orrs	r2, r3
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dadd+0x44c>
 80016be:	e0bd      	b.n	800183c <__aeabi_dadd+0x5c8>
 80016c0:	4662      	mov	r2, ip
 80016c2:	4664      	mov	r4, ip
 80016c4:	3a01      	subs	r2, #1
 80016c6:	2c01      	cmp	r4, #1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x458>
 80016ca:	e0e5      	b.n	8001898 <__aeabi_dadd+0x624>
 80016cc:	4c85      	ldr	r4, [pc, #532]	; (80018e4 <__aeabi_dadd+0x670>)
 80016ce:	45a4      	cmp	ip, r4
 80016d0:	d058      	beq.n	8001784 <__aeabi_dadd+0x510>
 80016d2:	4694      	mov	ip, r2
 80016d4:	e749      	b.n	800156a <__aeabi_dadd+0x2f6>
 80016d6:	4664      	mov	r4, ip
 80016d8:	2220      	movs	r2, #32
 80016da:	1b12      	subs	r2, r2, r4
 80016dc:	4644      	mov	r4, r8
 80016de:	4094      	lsls	r4, r2
 80016e0:	000f      	movs	r7, r1
 80016e2:	46a1      	mov	r9, r4
 80016e4:	4664      	mov	r4, ip
 80016e6:	4091      	lsls	r1, r2
 80016e8:	40e7      	lsrs	r7, r4
 80016ea:	464c      	mov	r4, r9
 80016ec:	1e4a      	subs	r2, r1, #1
 80016ee:	4191      	sbcs	r1, r2
 80016f0:	433c      	orrs	r4, r7
 80016f2:	4642      	mov	r2, r8
 80016f4:	430c      	orrs	r4, r1
 80016f6:	4661      	mov	r1, ip
 80016f8:	40ca      	lsrs	r2, r1
 80016fa:	1880      	adds	r0, r0, r2
 80016fc:	e6f4      	b.n	80014e8 <__aeabi_dadd+0x274>
 80016fe:	4c79      	ldr	r4, [pc, #484]	; (80018e4 <__aeabi_dadd+0x670>)
 8001700:	42a2      	cmp	r2, r4
 8001702:	d100      	bne.n	8001706 <__aeabi_dadd+0x492>
 8001704:	e6fd      	b.n	8001502 <__aeabi_dadd+0x28e>
 8001706:	1859      	adds	r1, r3, r1
 8001708:	4299      	cmp	r1, r3
 800170a:	419b      	sbcs	r3, r3
 800170c:	4440      	add	r0, r8
 800170e:	425f      	negs	r7, r3
 8001710:	19c7      	adds	r7, r0, r7
 8001712:	07fc      	lsls	r4, r7, #31
 8001714:	0849      	lsrs	r1, r1, #1
 8001716:	0016      	movs	r6, r2
 8001718:	430c      	orrs	r4, r1
 800171a:	087f      	lsrs	r7, r7, #1
 800171c:	e6cf      	b.n	80014be <__aeabi_dadd+0x24a>
 800171e:	1acc      	subs	r4, r1, r3
 8001720:	42a1      	cmp	r1, r4
 8001722:	41bf      	sbcs	r7, r7
 8001724:	4643      	mov	r3, r8
 8001726:	427f      	negs	r7, r7
 8001728:	1a18      	subs	r0, r3, r0
 800172a:	4655      	mov	r5, sl
 800172c:	1bc7      	subs	r7, r0, r7
 800172e:	e5f7      	b.n	8001320 <__aeabi_dadd+0xac>
 8001730:	08c9      	lsrs	r1, r1, #3
 8001732:	077b      	lsls	r3, r7, #29
 8001734:	4655      	mov	r5, sl
 8001736:	430b      	orrs	r3, r1
 8001738:	08f8      	lsrs	r0, r7, #3
 800173a:	e6c8      	b.n	80014ce <__aeabi_dadd+0x25a>
 800173c:	2c00      	cmp	r4, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x4ce>
 8001740:	e081      	b.n	8001846 <__aeabi_dadd+0x5d2>
 8001742:	4643      	mov	r3, r8
 8001744:	430b      	orrs	r3, r1
 8001746:	d115      	bne.n	8001774 <__aeabi_dadd+0x500>
 8001748:	2080      	movs	r0, #128	; 0x80
 800174a:	2500      	movs	r5, #0
 800174c:	0300      	lsls	r0, r0, #12
 800174e:	e6e3      	b.n	8001518 <__aeabi_dadd+0x2a4>
 8001750:	1a5c      	subs	r4, r3, r1
 8001752:	42a3      	cmp	r3, r4
 8001754:	419b      	sbcs	r3, r3
 8001756:	1bc7      	subs	r7, r0, r7
 8001758:	425b      	negs	r3, r3
 800175a:	2601      	movs	r6, #1
 800175c:	1aff      	subs	r7, r7, r3
 800175e:	e5da      	b.n	8001316 <__aeabi_dadd+0xa2>
 8001760:	0742      	lsls	r2, r0, #29
 8001762:	08db      	lsrs	r3, r3, #3
 8001764:	4313      	orrs	r3, r2
 8001766:	08c0      	lsrs	r0, r0, #3
 8001768:	e6d2      	b.n	8001510 <__aeabi_dadd+0x29c>
 800176a:	0742      	lsls	r2, r0, #29
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	4313      	orrs	r3, r2
 8001770:	08c0      	lsrs	r0, r0, #3
 8001772:	e6ac      	b.n	80014ce <__aeabi_dadd+0x25a>
 8001774:	4643      	mov	r3, r8
 8001776:	4642      	mov	r2, r8
 8001778:	08c9      	lsrs	r1, r1, #3
 800177a:	075b      	lsls	r3, r3, #29
 800177c:	4655      	mov	r5, sl
 800177e:	430b      	orrs	r3, r1
 8001780:	08d0      	lsrs	r0, r2, #3
 8001782:	e6c5      	b.n	8001510 <__aeabi_dadd+0x29c>
 8001784:	4643      	mov	r3, r8
 8001786:	4642      	mov	r2, r8
 8001788:	075b      	lsls	r3, r3, #29
 800178a:	08c9      	lsrs	r1, r1, #3
 800178c:	430b      	orrs	r3, r1
 800178e:	08d0      	lsrs	r0, r2, #3
 8001790:	e6be      	b.n	8001510 <__aeabi_dadd+0x29c>
 8001792:	4303      	orrs	r3, r0
 8001794:	001c      	movs	r4, r3
 8001796:	1e63      	subs	r3, r4, #1
 8001798:	419c      	sbcs	r4, r3
 800179a:	e6fc      	b.n	8001596 <__aeabi_dadd+0x322>
 800179c:	0002      	movs	r2, r0
 800179e:	3c20      	subs	r4, #32
 80017a0:	40e2      	lsrs	r2, r4
 80017a2:	0014      	movs	r4, r2
 80017a4:	4662      	mov	r2, ip
 80017a6:	2a20      	cmp	r2, #32
 80017a8:	d003      	beq.n	80017b2 <__aeabi_dadd+0x53e>
 80017aa:	2540      	movs	r5, #64	; 0x40
 80017ac:	1aad      	subs	r5, r5, r2
 80017ae:	40a8      	lsls	r0, r5
 80017b0:	4303      	orrs	r3, r0
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	4183      	sbcs	r3, r0
 80017b6:	4323      	orrs	r3, r4
 80017b8:	e775      	b.n	80016a6 <__aeabi_dadd+0x432>
 80017ba:	2a00      	cmp	r2, #0
 80017bc:	d0e2      	beq.n	8001784 <__aeabi_dadd+0x510>
 80017be:	003a      	movs	r2, r7
 80017c0:	430a      	orrs	r2, r1
 80017c2:	d0cd      	beq.n	8001760 <__aeabi_dadd+0x4ec>
 80017c4:	0742      	lsls	r2, r0, #29
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	08c0      	lsrs	r0, r0, #3
 80017ce:	0312      	lsls	r2, r2, #12
 80017d0:	4210      	tst	r0, r2
 80017d2:	d006      	beq.n	80017e2 <__aeabi_dadd+0x56e>
 80017d4:	08fc      	lsrs	r4, r7, #3
 80017d6:	4214      	tst	r4, r2
 80017d8:	d103      	bne.n	80017e2 <__aeabi_dadd+0x56e>
 80017da:	0020      	movs	r0, r4
 80017dc:	08cb      	lsrs	r3, r1, #3
 80017de:	077a      	lsls	r2, r7, #29
 80017e0:	4313      	orrs	r3, r2
 80017e2:	0f5a      	lsrs	r2, r3, #29
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	0752      	lsls	r2, r2, #29
 80017e8:	08db      	lsrs	r3, r3, #3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	e690      	b.n	8001510 <__aeabi_dadd+0x29c>
 80017ee:	4643      	mov	r3, r8
 80017f0:	430b      	orrs	r3, r1
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x582>
 80017f4:	e709      	b.n	800160a <__aeabi_dadd+0x396>
 80017f6:	4643      	mov	r3, r8
 80017f8:	4642      	mov	r2, r8
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	075b      	lsls	r3, r3, #29
 80017fe:	4655      	mov	r5, sl
 8001800:	430b      	orrs	r3, r1
 8001802:	08d0      	lsrs	r0, r2, #3
 8001804:	e666      	b.n	80014d4 <__aeabi_dadd+0x260>
 8001806:	1acc      	subs	r4, r1, r3
 8001808:	42a1      	cmp	r1, r4
 800180a:	4189      	sbcs	r1, r1
 800180c:	1a3f      	subs	r7, r7, r0
 800180e:	4249      	negs	r1, r1
 8001810:	4655      	mov	r5, sl
 8001812:	2601      	movs	r6, #1
 8001814:	1a7f      	subs	r7, r7, r1
 8001816:	e57e      	b.n	8001316 <__aeabi_dadd+0xa2>
 8001818:	4642      	mov	r2, r8
 800181a:	1a5c      	subs	r4, r3, r1
 800181c:	1a87      	subs	r7, r0, r2
 800181e:	42a3      	cmp	r3, r4
 8001820:	4192      	sbcs	r2, r2
 8001822:	4252      	negs	r2, r2
 8001824:	1abf      	subs	r7, r7, r2
 8001826:	023a      	lsls	r2, r7, #8
 8001828:	d53d      	bpl.n	80018a6 <__aeabi_dadd+0x632>
 800182a:	1acc      	subs	r4, r1, r3
 800182c:	42a1      	cmp	r1, r4
 800182e:	4189      	sbcs	r1, r1
 8001830:	4643      	mov	r3, r8
 8001832:	4249      	negs	r1, r1
 8001834:	1a1f      	subs	r7, r3, r0
 8001836:	4655      	mov	r5, sl
 8001838:	1a7f      	subs	r7, r7, r1
 800183a:	e595      	b.n	8001368 <__aeabi_dadd+0xf4>
 800183c:	077b      	lsls	r3, r7, #29
 800183e:	08c9      	lsrs	r1, r1, #3
 8001840:	430b      	orrs	r3, r1
 8001842:	08f8      	lsrs	r0, r7, #3
 8001844:	e643      	b.n	80014ce <__aeabi_dadd+0x25a>
 8001846:	4644      	mov	r4, r8
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	430c      	orrs	r4, r1
 800184c:	d130      	bne.n	80018b0 <__aeabi_dadd+0x63c>
 800184e:	0742      	lsls	r2, r0, #29
 8001850:	4313      	orrs	r3, r2
 8001852:	08c0      	lsrs	r0, r0, #3
 8001854:	e65c      	b.n	8001510 <__aeabi_dadd+0x29c>
 8001856:	077b      	lsls	r3, r7, #29
 8001858:	08c9      	lsrs	r1, r1, #3
 800185a:	430b      	orrs	r3, r1
 800185c:	08f8      	lsrs	r0, r7, #3
 800185e:	e639      	b.n	80014d4 <__aeabi_dadd+0x260>
 8001860:	185c      	adds	r4, r3, r1
 8001862:	429c      	cmp	r4, r3
 8001864:	419b      	sbcs	r3, r3
 8001866:	4440      	add	r0, r8
 8001868:	425b      	negs	r3, r3
 800186a:	18c7      	adds	r7, r0, r3
 800186c:	023b      	lsls	r3, r7, #8
 800186e:	d400      	bmi.n	8001872 <__aeabi_dadd+0x5fe>
 8001870:	e625      	b.n	80014be <__aeabi_dadd+0x24a>
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <__aeabi_dadd+0x674>)
 8001874:	2601      	movs	r6, #1
 8001876:	401f      	ands	r7, r3
 8001878:	e621      	b.n	80014be <__aeabi_dadd+0x24a>
 800187a:	0004      	movs	r4, r0
 800187c:	3a20      	subs	r2, #32
 800187e:	40d4      	lsrs	r4, r2
 8001880:	4662      	mov	r2, ip
 8001882:	2a20      	cmp	r2, #32
 8001884:	d004      	beq.n	8001890 <__aeabi_dadd+0x61c>
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	4666      	mov	r6, ip
 800188a:	1b92      	subs	r2, r2, r6
 800188c:	4090      	lsls	r0, r2
 800188e:	4303      	orrs	r3, r0
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	4193      	sbcs	r3, r2
 8001894:	431c      	orrs	r4, r3
 8001896:	e67e      	b.n	8001596 <__aeabi_dadd+0x322>
 8001898:	185c      	adds	r4, r3, r1
 800189a:	428c      	cmp	r4, r1
 800189c:	4189      	sbcs	r1, r1
 800189e:	4440      	add	r0, r8
 80018a0:	4249      	negs	r1, r1
 80018a2:	1847      	adds	r7, r0, r1
 80018a4:	e6dd      	b.n	8001662 <__aeabi_dadd+0x3ee>
 80018a6:	0023      	movs	r3, r4
 80018a8:	433b      	orrs	r3, r7
 80018aa:	d100      	bne.n	80018ae <__aeabi_dadd+0x63a>
 80018ac:	e6ad      	b.n	800160a <__aeabi_dadd+0x396>
 80018ae:	e606      	b.n	80014be <__aeabi_dadd+0x24a>
 80018b0:	0744      	lsls	r4, r0, #29
 80018b2:	4323      	orrs	r3, r4
 80018b4:	2480      	movs	r4, #128	; 0x80
 80018b6:	08c0      	lsrs	r0, r0, #3
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	4220      	tst	r0, r4
 80018bc:	d008      	beq.n	80018d0 <__aeabi_dadd+0x65c>
 80018be:	4642      	mov	r2, r8
 80018c0:	08d6      	lsrs	r6, r2, #3
 80018c2:	4226      	tst	r6, r4
 80018c4:	d104      	bne.n	80018d0 <__aeabi_dadd+0x65c>
 80018c6:	4655      	mov	r5, sl
 80018c8:	0030      	movs	r0, r6
 80018ca:	08cb      	lsrs	r3, r1, #3
 80018cc:	0751      	lsls	r1, r2, #29
 80018ce:	430b      	orrs	r3, r1
 80018d0:	0f5a      	lsrs	r2, r3, #29
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	08db      	lsrs	r3, r3, #3
 80018d6:	0752      	lsls	r2, r2, #29
 80018d8:	4313      	orrs	r3, r2
 80018da:	e619      	b.n	8001510 <__aeabi_dadd+0x29c>
 80018dc:	2300      	movs	r3, #0
 80018de:	4a01      	ldr	r2, [pc, #4]	; (80018e4 <__aeabi_dadd+0x670>)
 80018e0:	001f      	movs	r7, r3
 80018e2:	e55e      	b.n	80013a2 <__aeabi_dadd+0x12e>
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	ff7fffff 	.word	0xff7fffff

080018ec <__aeabi_ddiv>:
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	4657      	mov	r7, sl
 80018f0:	464e      	mov	r6, r9
 80018f2:	4645      	mov	r5, r8
 80018f4:	46de      	mov	lr, fp
 80018f6:	b5e0      	push	{r5, r6, r7, lr}
 80018f8:	4681      	mov	r9, r0
 80018fa:	0005      	movs	r5, r0
 80018fc:	030c      	lsls	r4, r1, #12
 80018fe:	0048      	lsls	r0, r1, #1
 8001900:	4692      	mov	sl, r2
 8001902:	001f      	movs	r7, r3
 8001904:	b085      	sub	sp, #20
 8001906:	0b24      	lsrs	r4, r4, #12
 8001908:	0d40      	lsrs	r0, r0, #21
 800190a:	0fce      	lsrs	r6, r1, #31
 800190c:	2800      	cmp	r0, #0
 800190e:	d100      	bne.n	8001912 <__aeabi_ddiv+0x26>
 8001910:	e156      	b.n	8001bc0 <__aeabi_ddiv+0x2d4>
 8001912:	4bd4      	ldr	r3, [pc, #848]	; (8001c64 <__aeabi_ddiv+0x378>)
 8001914:	4298      	cmp	r0, r3
 8001916:	d100      	bne.n	800191a <__aeabi_ddiv+0x2e>
 8001918:	e172      	b.n	8001c00 <__aeabi_ddiv+0x314>
 800191a:	0f6b      	lsrs	r3, r5, #29
 800191c:	00e4      	lsls	r4, r4, #3
 800191e:	431c      	orrs	r4, r3
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	041b      	lsls	r3, r3, #16
 8001924:	4323      	orrs	r3, r4
 8001926:	4698      	mov	r8, r3
 8001928:	4bcf      	ldr	r3, [pc, #828]	; (8001c68 <__aeabi_ddiv+0x37c>)
 800192a:	00ed      	lsls	r5, r5, #3
 800192c:	469b      	mov	fp, r3
 800192e:	2300      	movs	r3, #0
 8001930:	4699      	mov	r9, r3
 8001932:	4483      	add	fp, r0
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	033c      	lsls	r4, r7, #12
 8001938:	007b      	lsls	r3, r7, #1
 800193a:	4650      	mov	r0, sl
 800193c:	0b24      	lsrs	r4, r4, #12
 800193e:	0d5b      	lsrs	r3, r3, #21
 8001940:	0fff      	lsrs	r7, r7, #31
 8001942:	2b00      	cmp	r3, #0
 8001944:	d100      	bne.n	8001948 <__aeabi_ddiv+0x5c>
 8001946:	e11f      	b.n	8001b88 <__aeabi_ddiv+0x29c>
 8001948:	4ac6      	ldr	r2, [pc, #792]	; (8001c64 <__aeabi_ddiv+0x378>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d100      	bne.n	8001950 <__aeabi_ddiv+0x64>
 800194e:	e162      	b.n	8001c16 <__aeabi_ddiv+0x32a>
 8001950:	49c5      	ldr	r1, [pc, #788]	; (8001c68 <__aeabi_ddiv+0x37c>)
 8001952:	0f42      	lsrs	r2, r0, #29
 8001954:	468c      	mov	ip, r1
 8001956:	00e4      	lsls	r4, r4, #3
 8001958:	4659      	mov	r1, fp
 800195a:	4314      	orrs	r4, r2
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	4463      	add	r3, ip
 8001960:	0412      	lsls	r2, r2, #16
 8001962:	1acb      	subs	r3, r1, r3
 8001964:	4314      	orrs	r4, r2
 8001966:	469b      	mov	fp, r3
 8001968:	00c2      	lsls	r2, r0, #3
 800196a:	2000      	movs	r0, #0
 800196c:	0033      	movs	r3, r6
 800196e:	407b      	eors	r3, r7
 8001970:	469a      	mov	sl, r3
 8001972:	464b      	mov	r3, r9
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d827      	bhi.n	80019c8 <__aeabi_ddiv+0xdc>
 8001978:	49bc      	ldr	r1, [pc, #752]	; (8001c6c <__aeabi_ddiv+0x380>)
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	58cb      	ldr	r3, [r1, r3]
 800197e:	469f      	mov	pc, r3
 8001980:	46b2      	mov	sl, r6
 8001982:	9b00      	ldr	r3, [sp, #0]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d016      	beq.n	80019b6 <__aeabi_ddiv+0xca>
 8001988:	2b03      	cmp	r3, #3
 800198a:	d100      	bne.n	800198e <__aeabi_ddiv+0xa2>
 800198c:	e28e      	b.n	8001eac <__aeabi_ddiv+0x5c0>
 800198e:	2b01      	cmp	r3, #1
 8001990:	d000      	beq.n	8001994 <__aeabi_ddiv+0xa8>
 8001992:	e0d9      	b.n	8001b48 <__aeabi_ddiv+0x25c>
 8001994:	2300      	movs	r3, #0
 8001996:	2400      	movs	r4, #0
 8001998:	2500      	movs	r5, #0
 800199a:	4652      	mov	r2, sl
 800199c:	051b      	lsls	r3, r3, #20
 800199e:	4323      	orrs	r3, r4
 80019a0:	07d2      	lsls	r2, r2, #31
 80019a2:	4313      	orrs	r3, r2
 80019a4:	0028      	movs	r0, r5
 80019a6:	0019      	movs	r1, r3
 80019a8:	b005      	add	sp, #20
 80019aa:	bcf0      	pop	{r4, r5, r6, r7}
 80019ac:	46bb      	mov	fp, r7
 80019ae:	46b2      	mov	sl, r6
 80019b0:	46a9      	mov	r9, r5
 80019b2:	46a0      	mov	r8, r4
 80019b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b6:	2400      	movs	r4, #0
 80019b8:	2500      	movs	r5, #0
 80019ba:	4baa      	ldr	r3, [pc, #680]	; (8001c64 <__aeabi_ddiv+0x378>)
 80019bc:	e7ed      	b.n	800199a <__aeabi_ddiv+0xae>
 80019be:	46ba      	mov	sl, r7
 80019c0:	46a0      	mov	r8, r4
 80019c2:	0015      	movs	r5, r2
 80019c4:	9000      	str	r0, [sp, #0]
 80019c6:	e7dc      	b.n	8001982 <__aeabi_ddiv+0x96>
 80019c8:	4544      	cmp	r4, r8
 80019ca:	d200      	bcs.n	80019ce <__aeabi_ddiv+0xe2>
 80019cc:	e1c7      	b.n	8001d5e <__aeabi_ddiv+0x472>
 80019ce:	d100      	bne.n	80019d2 <__aeabi_ddiv+0xe6>
 80019d0:	e1c2      	b.n	8001d58 <__aeabi_ddiv+0x46c>
 80019d2:	2301      	movs	r3, #1
 80019d4:	425b      	negs	r3, r3
 80019d6:	469c      	mov	ip, r3
 80019d8:	002e      	movs	r6, r5
 80019da:	4640      	mov	r0, r8
 80019dc:	2500      	movs	r5, #0
 80019de:	44e3      	add	fp, ip
 80019e0:	0223      	lsls	r3, r4, #8
 80019e2:	0e14      	lsrs	r4, r2, #24
 80019e4:	431c      	orrs	r4, r3
 80019e6:	0c1b      	lsrs	r3, r3, #16
 80019e8:	4699      	mov	r9, r3
 80019ea:	0423      	lsls	r3, r4, #16
 80019ec:	0c1f      	lsrs	r7, r3, #16
 80019ee:	0212      	lsls	r2, r2, #8
 80019f0:	4649      	mov	r1, r9
 80019f2:	9200      	str	r2, [sp, #0]
 80019f4:	9701      	str	r7, [sp, #4]
 80019f6:	f7fe fc29 	bl	800024c <__aeabi_uidivmod>
 80019fa:	0002      	movs	r2, r0
 80019fc:	437a      	muls	r2, r7
 80019fe:	040b      	lsls	r3, r1, #16
 8001a00:	0c31      	lsrs	r1, r6, #16
 8001a02:	4680      	mov	r8, r0
 8001a04:	4319      	orrs	r1, r3
 8001a06:	428a      	cmp	r2, r1
 8001a08:	d907      	bls.n	8001a1a <__aeabi_ddiv+0x12e>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	425b      	negs	r3, r3
 8001a0e:	469c      	mov	ip, r3
 8001a10:	1909      	adds	r1, r1, r4
 8001a12:	44e0      	add	r8, ip
 8001a14:	428c      	cmp	r4, r1
 8001a16:	d800      	bhi.n	8001a1a <__aeabi_ddiv+0x12e>
 8001a18:	e207      	b.n	8001e2a <__aeabi_ddiv+0x53e>
 8001a1a:	1a88      	subs	r0, r1, r2
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	f7fe fc15 	bl	800024c <__aeabi_uidivmod>
 8001a22:	0409      	lsls	r1, r1, #16
 8001a24:	468c      	mov	ip, r1
 8001a26:	0431      	lsls	r1, r6, #16
 8001a28:	4666      	mov	r6, ip
 8001a2a:	9a01      	ldr	r2, [sp, #4]
 8001a2c:	0c09      	lsrs	r1, r1, #16
 8001a2e:	4342      	muls	r2, r0
 8001a30:	0003      	movs	r3, r0
 8001a32:	4331      	orrs	r1, r6
 8001a34:	428a      	cmp	r2, r1
 8001a36:	d904      	bls.n	8001a42 <__aeabi_ddiv+0x156>
 8001a38:	1909      	adds	r1, r1, r4
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	428c      	cmp	r4, r1
 8001a3e:	d800      	bhi.n	8001a42 <__aeabi_ddiv+0x156>
 8001a40:	e1ed      	b.n	8001e1e <__aeabi_ddiv+0x532>
 8001a42:	1a88      	subs	r0, r1, r2
 8001a44:	4642      	mov	r2, r8
 8001a46:	0412      	lsls	r2, r2, #16
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	4690      	mov	r8, r2
 8001a4c:	4641      	mov	r1, r8
 8001a4e:	9b00      	ldr	r3, [sp, #0]
 8001a50:	040e      	lsls	r6, r1, #16
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	001f      	movs	r7, r3
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	9b00      	ldr	r3, [sp, #0]
 8001a5a:	0c36      	lsrs	r6, r6, #16
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	0c19      	lsrs	r1, r3, #16
 8001a60:	000b      	movs	r3, r1
 8001a62:	4373      	muls	r3, r6
 8001a64:	0c12      	lsrs	r2, r2, #16
 8001a66:	437e      	muls	r6, r7
 8001a68:	9103      	str	r1, [sp, #12]
 8001a6a:	4351      	muls	r1, r2
 8001a6c:	437a      	muls	r2, r7
 8001a6e:	0c1f      	lsrs	r7, r3, #16
 8001a70:	46bc      	mov	ip, r7
 8001a72:	1876      	adds	r6, r6, r1
 8001a74:	4466      	add	r6, ip
 8001a76:	42b1      	cmp	r1, r6
 8001a78:	d903      	bls.n	8001a82 <__aeabi_ddiv+0x196>
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	0249      	lsls	r1, r1, #9
 8001a7e:	468c      	mov	ip, r1
 8001a80:	4462      	add	r2, ip
 8001a82:	0c31      	lsrs	r1, r6, #16
 8001a84:	188a      	adds	r2, r1, r2
 8001a86:	0431      	lsls	r1, r6, #16
 8001a88:	041e      	lsls	r6, r3, #16
 8001a8a:	0c36      	lsrs	r6, r6, #16
 8001a8c:	198e      	adds	r6, r1, r6
 8001a8e:	4290      	cmp	r0, r2
 8001a90:	d302      	bcc.n	8001a98 <__aeabi_ddiv+0x1ac>
 8001a92:	d112      	bne.n	8001aba <__aeabi_ddiv+0x1ce>
 8001a94:	42b5      	cmp	r5, r6
 8001a96:	d210      	bcs.n	8001aba <__aeabi_ddiv+0x1ce>
 8001a98:	4643      	mov	r3, r8
 8001a9a:	1e59      	subs	r1, r3, #1
 8001a9c:	9b00      	ldr	r3, [sp, #0]
 8001a9e:	469c      	mov	ip, r3
 8001aa0:	4465      	add	r5, ip
 8001aa2:	001f      	movs	r7, r3
 8001aa4:	429d      	cmp	r5, r3
 8001aa6:	419b      	sbcs	r3, r3
 8001aa8:	425b      	negs	r3, r3
 8001aaa:	191b      	adds	r3, r3, r4
 8001aac:	18c0      	adds	r0, r0, r3
 8001aae:	4284      	cmp	r4, r0
 8001ab0:	d200      	bcs.n	8001ab4 <__aeabi_ddiv+0x1c8>
 8001ab2:	e1a0      	b.n	8001df6 <__aeabi_ddiv+0x50a>
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_ddiv+0x1cc>
 8001ab6:	e19b      	b.n	8001df0 <__aeabi_ddiv+0x504>
 8001ab8:	4688      	mov	r8, r1
 8001aba:	1bae      	subs	r6, r5, r6
 8001abc:	42b5      	cmp	r5, r6
 8001abe:	41ad      	sbcs	r5, r5
 8001ac0:	1a80      	subs	r0, r0, r2
 8001ac2:	426d      	negs	r5, r5
 8001ac4:	1b40      	subs	r0, r0, r5
 8001ac6:	4284      	cmp	r4, r0
 8001ac8:	d100      	bne.n	8001acc <__aeabi_ddiv+0x1e0>
 8001aca:	e1d5      	b.n	8001e78 <__aeabi_ddiv+0x58c>
 8001acc:	4649      	mov	r1, r9
 8001ace:	f7fe fbbd 	bl	800024c <__aeabi_uidivmod>
 8001ad2:	9a01      	ldr	r2, [sp, #4]
 8001ad4:	040b      	lsls	r3, r1, #16
 8001ad6:	4342      	muls	r2, r0
 8001ad8:	0c31      	lsrs	r1, r6, #16
 8001ada:	0005      	movs	r5, r0
 8001adc:	4319      	orrs	r1, r3
 8001ade:	428a      	cmp	r2, r1
 8001ae0:	d900      	bls.n	8001ae4 <__aeabi_ddiv+0x1f8>
 8001ae2:	e16c      	b.n	8001dbe <__aeabi_ddiv+0x4d2>
 8001ae4:	1a88      	subs	r0, r1, r2
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	f7fe fbb0 	bl	800024c <__aeabi_uidivmod>
 8001aec:	9a01      	ldr	r2, [sp, #4]
 8001aee:	0436      	lsls	r6, r6, #16
 8001af0:	4342      	muls	r2, r0
 8001af2:	0409      	lsls	r1, r1, #16
 8001af4:	0c36      	lsrs	r6, r6, #16
 8001af6:	0003      	movs	r3, r0
 8001af8:	430e      	orrs	r6, r1
 8001afa:	42b2      	cmp	r2, r6
 8001afc:	d900      	bls.n	8001b00 <__aeabi_ddiv+0x214>
 8001afe:	e153      	b.n	8001da8 <__aeabi_ddiv+0x4bc>
 8001b00:	9803      	ldr	r0, [sp, #12]
 8001b02:	1ab6      	subs	r6, r6, r2
 8001b04:	0002      	movs	r2, r0
 8001b06:	042d      	lsls	r5, r5, #16
 8001b08:	431d      	orrs	r5, r3
 8001b0a:	9f02      	ldr	r7, [sp, #8]
 8001b0c:	042b      	lsls	r3, r5, #16
 8001b0e:	0c1b      	lsrs	r3, r3, #16
 8001b10:	435a      	muls	r2, r3
 8001b12:	437b      	muls	r3, r7
 8001b14:	469c      	mov	ip, r3
 8001b16:	0c29      	lsrs	r1, r5, #16
 8001b18:	4348      	muls	r0, r1
 8001b1a:	0c13      	lsrs	r3, r2, #16
 8001b1c:	4484      	add	ip, r0
 8001b1e:	4463      	add	r3, ip
 8001b20:	4379      	muls	r1, r7
 8001b22:	4298      	cmp	r0, r3
 8001b24:	d903      	bls.n	8001b2e <__aeabi_ddiv+0x242>
 8001b26:	2080      	movs	r0, #128	; 0x80
 8001b28:	0240      	lsls	r0, r0, #9
 8001b2a:	4684      	mov	ip, r0
 8001b2c:	4461      	add	r1, ip
 8001b2e:	0c18      	lsrs	r0, r3, #16
 8001b30:	0412      	lsls	r2, r2, #16
 8001b32:	041b      	lsls	r3, r3, #16
 8001b34:	0c12      	lsrs	r2, r2, #16
 8001b36:	1841      	adds	r1, r0, r1
 8001b38:	189b      	adds	r3, r3, r2
 8001b3a:	428e      	cmp	r6, r1
 8001b3c:	d200      	bcs.n	8001b40 <__aeabi_ddiv+0x254>
 8001b3e:	e0ff      	b.n	8001d40 <__aeabi_ddiv+0x454>
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x258>
 8001b42:	e0fa      	b.n	8001d3a <__aeabi_ddiv+0x44e>
 8001b44:	2301      	movs	r3, #1
 8001b46:	431d      	orrs	r5, r3
 8001b48:	4a49      	ldr	r2, [pc, #292]	; (8001c70 <__aeabi_ddiv+0x384>)
 8001b4a:	445a      	add	r2, fp
 8001b4c:	2a00      	cmp	r2, #0
 8001b4e:	dc00      	bgt.n	8001b52 <__aeabi_ddiv+0x266>
 8001b50:	e0aa      	b.n	8001ca8 <__aeabi_ddiv+0x3bc>
 8001b52:	076b      	lsls	r3, r5, #29
 8001b54:	d000      	beq.n	8001b58 <__aeabi_ddiv+0x26c>
 8001b56:	e13d      	b.n	8001dd4 <__aeabi_ddiv+0x4e8>
 8001b58:	08ed      	lsrs	r5, r5, #3
 8001b5a:	4643      	mov	r3, r8
 8001b5c:	01db      	lsls	r3, r3, #7
 8001b5e:	d506      	bpl.n	8001b6e <__aeabi_ddiv+0x282>
 8001b60:	4642      	mov	r2, r8
 8001b62:	4b44      	ldr	r3, [pc, #272]	; (8001c74 <__aeabi_ddiv+0x388>)
 8001b64:	401a      	ands	r2, r3
 8001b66:	4690      	mov	r8, r2
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	00d2      	lsls	r2, r2, #3
 8001b6c:	445a      	add	r2, fp
 8001b6e:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <__aeabi_ddiv+0x38c>)
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dd00      	ble.n	8001b76 <__aeabi_ddiv+0x28a>
 8001b74:	e71f      	b.n	80019b6 <__aeabi_ddiv+0xca>
 8001b76:	4643      	mov	r3, r8
 8001b78:	075b      	lsls	r3, r3, #29
 8001b7a:	431d      	orrs	r5, r3
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	0552      	lsls	r2, r2, #21
 8001b80:	025c      	lsls	r4, r3, #9
 8001b82:	0b24      	lsrs	r4, r4, #12
 8001b84:	0d53      	lsrs	r3, r2, #21
 8001b86:	e708      	b.n	800199a <__aeabi_ddiv+0xae>
 8001b88:	4652      	mov	r2, sl
 8001b8a:	4322      	orrs	r2, r4
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_ddiv+0x2a4>
 8001b8e:	e07b      	b.n	8001c88 <__aeabi_ddiv+0x39c>
 8001b90:	2c00      	cmp	r4, #0
 8001b92:	d100      	bne.n	8001b96 <__aeabi_ddiv+0x2aa>
 8001b94:	e0fa      	b.n	8001d8c <__aeabi_ddiv+0x4a0>
 8001b96:	0020      	movs	r0, r4
 8001b98:	f001 f9da 	bl	8002f50 <__clzsi2>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	3a0b      	subs	r2, #11
 8001ba0:	231d      	movs	r3, #29
 8001ba2:	0001      	movs	r1, r0
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	4652      	mov	r2, sl
 8001ba8:	3908      	subs	r1, #8
 8001baa:	40da      	lsrs	r2, r3
 8001bac:	408c      	lsls	r4, r1
 8001bae:	4314      	orrs	r4, r2
 8001bb0:	4652      	mov	r2, sl
 8001bb2:	408a      	lsls	r2, r1
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <__aeabi_ddiv+0x390>)
 8001bb6:	4458      	add	r0, fp
 8001bb8:	469b      	mov	fp, r3
 8001bba:	4483      	add	fp, r0
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	e6d5      	b.n	800196c <__aeabi_ddiv+0x80>
 8001bc0:	464b      	mov	r3, r9
 8001bc2:	4323      	orrs	r3, r4
 8001bc4:	4698      	mov	r8, r3
 8001bc6:	d044      	beq.n	8001c52 <__aeabi_ddiv+0x366>
 8001bc8:	2c00      	cmp	r4, #0
 8001bca:	d100      	bne.n	8001bce <__aeabi_ddiv+0x2e2>
 8001bcc:	e0ce      	b.n	8001d6c <__aeabi_ddiv+0x480>
 8001bce:	0020      	movs	r0, r4
 8001bd0:	f001 f9be 	bl	8002f50 <__clzsi2>
 8001bd4:	0001      	movs	r1, r0
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	390b      	subs	r1, #11
 8001bda:	231d      	movs	r3, #29
 8001bdc:	1a5b      	subs	r3, r3, r1
 8001bde:	4649      	mov	r1, r9
 8001be0:	0010      	movs	r0, r2
 8001be2:	40d9      	lsrs	r1, r3
 8001be4:	3808      	subs	r0, #8
 8001be6:	4084      	lsls	r4, r0
 8001be8:	000b      	movs	r3, r1
 8001bea:	464d      	mov	r5, r9
 8001bec:	4323      	orrs	r3, r4
 8001bee:	4698      	mov	r8, r3
 8001bf0:	4085      	lsls	r5, r0
 8001bf2:	4823      	ldr	r0, [pc, #140]	; (8001c80 <__aeabi_ddiv+0x394>)
 8001bf4:	1a83      	subs	r3, r0, r2
 8001bf6:	469b      	mov	fp, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	4699      	mov	r9, r3
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	e69a      	b.n	8001936 <__aeabi_ddiv+0x4a>
 8001c00:	464b      	mov	r3, r9
 8001c02:	4323      	orrs	r3, r4
 8001c04:	4698      	mov	r8, r3
 8001c06:	d11d      	bne.n	8001c44 <__aeabi_ddiv+0x358>
 8001c08:	2308      	movs	r3, #8
 8001c0a:	4699      	mov	r9, r3
 8001c0c:	3b06      	subs	r3, #6
 8001c0e:	2500      	movs	r5, #0
 8001c10:	4683      	mov	fp, r0
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	e68f      	b.n	8001936 <__aeabi_ddiv+0x4a>
 8001c16:	4652      	mov	r2, sl
 8001c18:	4322      	orrs	r2, r4
 8001c1a:	d109      	bne.n	8001c30 <__aeabi_ddiv+0x344>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	4649      	mov	r1, r9
 8001c20:	4319      	orrs	r1, r3
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <__aeabi_ddiv+0x398>)
 8001c24:	4689      	mov	r9, r1
 8001c26:	469c      	mov	ip, r3
 8001c28:	2400      	movs	r4, #0
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	44e3      	add	fp, ip
 8001c2e:	e69d      	b.n	800196c <__aeabi_ddiv+0x80>
 8001c30:	2303      	movs	r3, #3
 8001c32:	464a      	mov	r2, r9
 8001c34:	431a      	orrs	r2, r3
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <__aeabi_ddiv+0x398>)
 8001c38:	4691      	mov	r9, r2
 8001c3a:	469c      	mov	ip, r3
 8001c3c:	4652      	mov	r2, sl
 8001c3e:	2003      	movs	r0, #3
 8001c40:	44e3      	add	fp, ip
 8001c42:	e693      	b.n	800196c <__aeabi_ddiv+0x80>
 8001c44:	230c      	movs	r3, #12
 8001c46:	4699      	mov	r9, r3
 8001c48:	3b09      	subs	r3, #9
 8001c4a:	46a0      	mov	r8, r4
 8001c4c:	4683      	mov	fp, r0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	e671      	b.n	8001936 <__aeabi_ddiv+0x4a>
 8001c52:	2304      	movs	r3, #4
 8001c54:	4699      	mov	r9, r3
 8001c56:	2300      	movs	r3, #0
 8001c58:	469b      	mov	fp, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	2500      	movs	r5, #0
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	e669      	b.n	8001936 <__aeabi_ddiv+0x4a>
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	000007ff 	.word	0x000007ff
 8001c68:	fffffc01 	.word	0xfffffc01
 8001c6c:	0800efb8 	.word	0x0800efb8
 8001c70:	000003ff 	.word	0x000003ff
 8001c74:	feffffff 	.word	0xfeffffff
 8001c78:	000007fe 	.word	0x000007fe
 8001c7c:	000003f3 	.word	0x000003f3
 8001c80:	fffffc0d 	.word	0xfffffc0d
 8001c84:	fffff801 	.word	0xfffff801
 8001c88:	4649      	mov	r1, r9
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	4319      	orrs	r1, r3
 8001c8e:	4689      	mov	r9, r1
 8001c90:	2400      	movs	r4, #0
 8001c92:	2001      	movs	r0, #1
 8001c94:	e66a      	b.n	800196c <__aeabi_ddiv+0x80>
 8001c96:	2300      	movs	r3, #0
 8001c98:	2480      	movs	r4, #128	; 0x80
 8001c9a:	469a      	mov	sl, r3
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4b8a      	ldr	r3, [pc, #552]	; (8001ec8 <__aeabi_ddiv+0x5dc>)
 8001ca0:	0324      	lsls	r4, r4, #12
 8001ca2:	e67a      	b.n	800199a <__aeabi_ddiv+0xae>
 8001ca4:	2501      	movs	r5, #1
 8001ca6:	426d      	negs	r5, r5
 8001ca8:	2301      	movs	r3, #1
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	2b38      	cmp	r3, #56	; 0x38
 8001cae:	dd00      	ble.n	8001cb2 <__aeabi_ddiv+0x3c6>
 8001cb0:	e670      	b.n	8001994 <__aeabi_ddiv+0xa8>
 8001cb2:	2b1f      	cmp	r3, #31
 8001cb4:	dc00      	bgt.n	8001cb8 <__aeabi_ddiv+0x3cc>
 8001cb6:	e0bf      	b.n	8001e38 <__aeabi_ddiv+0x54c>
 8001cb8:	211f      	movs	r1, #31
 8001cba:	4249      	negs	r1, r1
 8001cbc:	1a8a      	subs	r2, r1, r2
 8001cbe:	4641      	mov	r1, r8
 8001cc0:	40d1      	lsrs	r1, r2
 8001cc2:	000a      	movs	r2, r1
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d004      	beq.n	8001cd2 <__aeabi_ddiv+0x3e6>
 8001cc8:	4641      	mov	r1, r8
 8001cca:	4b80      	ldr	r3, [pc, #512]	; (8001ecc <__aeabi_ddiv+0x5e0>)
 8001ccc:	445b      	add	r3, fp
 8001cce:	4099      	lsls	r1, r3
 8001cd0:	430d      	orrs	r5, r1
 8001cd2:	1e6b      	subs	r3, r5, #1
 8001cd4:	419d      	sbcs	r5, r3
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	432a      	orrs	r2, r5
 8001cda:	001d      	movs	r5, r3
 8001cdc:	2400      	movs	r4, #0
 8001cde:	4015      	ands	r5, r2
 8001ce0:	4213      	tst	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_ddiv+0x3fa>
 8001ce4:	e0d4      	b.n	8001e90 <__aeabi_ddiv+0x5a4>
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	2300      	movs	r3, #0
 8001cea:	4011      	ands	r1, r2
 8001cec:	2904      	cmp	r1, #4
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_ddiv+0x406>
 8001cf0:	e0cb      	b.n	8001e8a <__aeabi_ddiv+0x59e>
 8001cf2:	1d11      	adds	r1, r2, #4
 8001cf4:	4291      	cmp	r1, r2
 8001cf6:	4192      	sbcs	r2, r2
 8001cf8:	4252      	negs	r2, r2
 8001cfa:	189b      	adds	r3, r3, r2
 8001cfc:	000a      	movs	r2, r1
 8001cfe:	0219      	lsls	r1, r3, #8
 8001d00:	d400      	bmi.n	8001d04 <__aeabi_ddiv+0x418>
 8001d02:	e0c2      	b.n	8001e8a <__aeabi_ddiv+0x59e>
 8001d04:	2301      	movs	r3, #1
 8001d06:	2400      	movs	r4, #0
 8001d08:	2500      	movs	r5, #0
 8001d0a:	e646      	b.n	800199a <__aeabi_ddiv+0xae>
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	4641      	mov	r1, r8
 8001d10:	031b      	lsls	r3, r3, #12
 8001d12:	4219      	tst	r1, r3
 8001d14:	d008      	beq.n	8001d28 <__aeabi_ddiv+0x43c>
 8001d16:	421c      	tst	r4, r3
 8001d18:	d106      	bne.n	8001d28 <__aeabi_ddiv+0x43c>
 8001d1a:	431c      	orrs	r4, r3
 8001d1c:	0324      	lsls	r4, r4, #12
 8001d1e:	46ba      	mov	sl, r7
 8001d20:	0015      	movs	r5, r2
 8001d22:	4b69      	ldr	r3, [pc, #420]	; (8001ec8 <__aeabi_ddiv+0x5dc>)
 8001d24:	0b24      	lsrs	r4, r4, #12
 8001d26:	e638      	b.n	800199a <__aeabi_ddiv+0xae>
 8001d28:	2480      	movs	r4, #128	; 0x80
 8001d2a:	4643      	mov	r3, r8
 8001d2c:	0324      	lsls	r4, r4, #12
 8001d2e:	431c      	orrs	r4, r3
 8001d30:	0324      	lsls	r4, r4, #12
 8001d32:	46b2      	mov	sl, r6
 8001d34:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <__aeabi_ddiv+0x5dc>)
 8001d36:	0b24      	lsrs	r4, r4, #12
 8001d38:	e62f      	b.n	800199a <__aeabi_ddiv+0xae>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_ddiv+0x454>
 8001d3e:	e703      	b.n	8001b48 <__aeabi_ddiv+0x25c>
 8001d40:	19a6      	adds	r6, r4, r6
 8001d42:	1e68      	subs	r0, r5, #1
 8001d44:	42a6      	cmp	r6, r4
 8001d46:	d200      	bcs.n	8001d4a <__aeabi_ddiv+0x45e>
 8001d48:	e08d      	b.n	8001e66 <__aeabi_ddiv+0x57a>
 8001d4a:	428e      	cmp	r6, r1
 8001d4c:	d200      	bcs.n	8001d50 <__aeabi_ddiv+0x464>
 8001d4e:	e0a3      	b.n	8001e98 <__aeabi_ddiv+0x5ac>
 8001d50:	d100      	bne.n	8001d54 <__aeabi_ddiv+0x468>
 8001d52:	e0b3      	b.n	8001ebc <__aeabi_ddiv+0x5d0>
 8001d54:	0005      	movs	r5, r0
 8001d56:	e6f5      	b.n	8001b44 <__aeabi_ddiv+0x258>
 8001d58:	42aa      	cmp	r2, r5
 8001d5a:	d900      	bls.n	8001d5e <__aeabi_ddiv+0x472>
 8001d5c:	e639      	b.n	80019d2 <__aeabi_ddiv+0xe6>
 8001d5e:	4643      	mov	r3, r8
 8001d60:	07de      	lsls	r6, r3, #31
 8001d62:	0858      	lsrs	r0, r3, #1
 8001d64:	086b      	lsrs	r3, r5, #1
 8001d66:	431e      	orrs	r6, r3
 8001d68:	07ed      	lsls	r5, r5, #31
 8001d6a:	e639      	b.n	80019e0 <__aeabi_ddiv+0xf4>
 8001d6c:	4648      	mov	r0, r9
 8001d6e:	f001 f8ef 	bl	8002f50 <__clzsi2>
 8001d72:	0001      	movs	r1, r0
 8001d74:	0002      	movs	r2, r0
 8001d76:	3115      	adds	r1, #21
 8001d78:	3220      	adds	r2, #32
 8001d7a:	291c      	cmp	r1, #28
 8001d7c:	dc00      	bgt.n	8001d80 <__aeabi_ddiv+0x494>
 8001d7e:	e72c      	b.n	8001bda <__aeabi_ddiv+0x2ee>
 8001d80:	464b      	mov	r3, r9
 8001d82:	3808      	subs	r0, #8
 8001d84:	4083      	lsls	r3, r0
 8001d86:	2500      	movs	r5, #0
 8001d88:	4698      	mov	r8, r3
 8001d8a:	e732      	b.n	8001bf2 <__aeabi_ddiv+0x306>
 8001d8c:	f001 f8e0 	bl	8002f50 <__clzsi2>
 8001d90:	0003      	movs	r3, r0
 8001d92:	001a      	movs	r2, r3
 8001d94:	3215      	adds	r2, #21
 8001d96:	3020      	adds	r0, #32
 8001d98:	2a1c      	cmp	r2, #28
 8001d9a:	dc00      	bgt.n	8001d9e <__aeabi_ddiv+0x4b2>
 8001d9c:	e700      	b.n	8001ba0 <__aeabi_ddiv+0x2b4>
 8001d9e:	4654      	mov	r4, sl
 8001da0:	3b08      	subs	r3, #8
 8001da2:	2200      	movs	r2, #0
 8001da4:	409c      	lsls	r4, r3
 8001da6:	e705      	b.n	8001bb4 <__aeabi_ddiv+0x2c8>
 8001da8:	1936      	adds	r6, r6, r4
 8001daa:	3b01      	subs	r3, #1
 8001dac:	42b4      	cmp	r4, r6
 8001dae:	d900      	bls.n	8001db2 <__aeabi_ddiv+0x4c6>
 8001db0:	e6a6      	b.n	8001b00 <__aeabi_ddiv+0x214>
 8001db2:	42b2      	cmp	r2, r6
 8001db4:	d800      	bhi.n	8001db8 <__aeabi_ddiv+0x4cc>
 8001db6:	e6a3      	b.n	8001b00 <__aeabi_ddiv+0x214>
 8001db8:	1e83      	subs	r3, r0, #2
 8001dba:	1936      	adds	r6, r6, r4
 8001dbc:	e6a0      	b.n	8001b00 <__aeabi_ddiv+0x214>
 8001dbe:	1909      	adds	r1, r1, r4
 8001dc0:	3d01      	subs	r5, #1
 8001dc2:	428c      	cmp	r4, r1
 8001dc4:	d900      	bls.n	8001dc8 <__aeabi_ddiv+0x4dc>
 8001dc6:	e68d      	b.n	8001ae4 <__aeabi_ddiv+0x1f8>
 8001dc8:	428a      	cmp	r2, r1
 8001dca:	d800      	bhi.n	8001dce <__aeabi_ddiv+0x4e2>
 8001dcc:	e68a      	b.n	8001ae4 <__aeabi_ddiv+0x1f8>
 8001dce:	1e85      	subs	r5, r0, #2
 8001dd0:	1909      	adds	r1, r1, r4
 8001dd2:	e687      	b.n	8001ae4 <__aeabi_ddiv+0x1f8>
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	402b      	ands	r3, r5
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d100      	bne.n	8001dde <__aeabi_ddiv+0x4f2>
 8001ddc:	e6bc      	b.n	8001b58 <__aeabi_ddiv+0x26c>
 8001dde:	2305      	movs	r3, #5
 8001de0:	425b      	negs	r3, r3
 8001de2:	42ab      	cmp	r3, r5
 8001de4:	419b      	sbcs	r3, r3
 8001de6:	3504      	adds	r5, #4
 8001de8:	425b      	negs	r3, r3
 8001dea:	08ed      	lsrs	r5, r5, #3
 8001dec:	4498      	add	r8, r3
 8001dee:	e6b4      	b.n	8001b5a <__aeabi_ddiv+0x26e>
 8001df0:	42af      	cmp	r7, r5
 8001df2:	d900      	bls.n	8001df6 <__aeabi_ddiv+0x50a>
 8001df4:	e660      	b.n	8001ab8 <__aeabi_ddiv+0x1cc>
 8001df6:	4282      	cmp	r2, r0
 8001df8:	d804      	bhi.n	8001e04 <__aeabi_ddiv+0x518>
 8001dfa:	d000      	beq.n	8001dfe <__aeabi_ddiv+0x512>
 8001dfc:	e65c      	b.n	8001ab8 <__aeabi_ddiv+0x1cc>
 8001dfe:	42ae      	cmp	r6, r5
 8001e00:	d800      	bhi.n	8001e04 <__aeabi_ddiv+0x518>
 8001e02:	e659      	b.n	8001ab8 <__aeabi_ddiv+0x1cc>
 8001e04:	2302      	movs	r3, #2
 8001e06:	425b      	negs	r3, r3
 8001e08:	469c      	mov	ip, r3
 8001e0a:	9b00      	ldr	r3, [sp, #0]
 8001e0c:	44e0      	add	r8, ip
 8001e0e:	469c      	mov	ip, r3
 8001e10:	4465      	add	r5, ip
 8001e12:	429d      	cmp	r5, r3
 8001e14:	419b      	sbcs	r3, r3
 8001e16:	425b      	negs	r3, r3
 8001e18:	191b      	adds	r3, r3, r4
 8001e1a:	18c0      	adds	r0, r0, r3
 8001e1c:	e64d      	b.n	8001aba <__aeabi_ddiv+0x1ce>
 8001e1e:	428a      	cmp	r2, r1
 8001e20:	d800      	bhi.n	8001e24 <__aeabi_ddiv+0x538>
 8001e22:	e60e      	b.n	8001a42 <__aeabi_ddiv+0x156>
 8001e24:	1e83      	subs	r3, r0, #2
 8001e26:	1909      	adds	r1, r1, r4
 8001e28:	e60b      	b.n	8001a42 <__aeabi_ddiv+0x156>
 8001e2a:	428a      	cmp	r2, r1
 8001e2c:	d800      	bhi.n	8001e30 <__aeabi_ddiv+0x544>
 8001e2e:	e5f4      	b.n	8001a1a <__aeabi_ddiv+0x12e>
 8001e30:	1e83      	subs	r3, r0, #2
 8001e32:	4698      	mov	r8, r3
 8001e34:	1909      	adds	r1, r1, r4
 8001e36:	e5f0      	b.n	8001a1a <__aeabi_ddiv+0x12e>
 8001e38:	4925      	ldr	r1, [pc, #148]	; (8001ed0 <__aeabi_ddiv+0x5e4>)
 8001e3a:	0028      	movs	r0, r5
 8001e3c:	4459      	add	r1, fp
 8001e3e:	408d      	lsls	r5, r1
 8001e40:	4642      	mov	r2, r8
 8001e42:	408a      	lsls	r2, r1
 8001e44:	1e69      	subs	r1, r5, #1
 8001e46:	418d      	sbcs	r5, r1
 8001e48:	4641      	mov	r1, r8
 8001e4a:	40d8      	lsrs	r0, r3
 8001e4c:	40d9      	lsrs	r1, r3
 8001e4e:	4302      	orrs	r2, r0
 8001e50:	432a      	orrs	r2, r5
 8001e52:	000b      	movs	r3, r1
 8001e54:	0751      	lsls	r1, r2, #29
 8001e56:	d100      	bne.n	8001e5a <__aeabi_ddiv+0x56e>
 8001e58:	e751      	b.n	8001cfe <__aeabi_ddiv+0x412>
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	4011      	ands	r1, r2
 8001e5e:	2904      	cmp	r1, #4
 8001e60:	d000      	beq.n	8001e64 <__aeabi_ddiv+0x578>
 8001e62:	e746      	b.n	8001cf2 <__aeabi_ddiv+0x406>
 8001e64:	e74b      	b.n	8001cfe <__aeabi_ddiv+0x412>
 8001e66:	0005      	movs	r5, r0
 8001e68:	428e      	cmp	r6, r1
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_ddiv+0x582>
 8001e6c:	e66a      	b.n	8001b44 <__aeabi_ddiv+0x258>
 8001e6e:	9a00      	ldr	r2, [sp, #0]
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d000      	beq.n	8001e76 <__aeabi_ddiv+0x58a>
 8001e74:	e666      	b.n	8001b44 <__aeabi_ddiv+0x258>
 8001e76:	e667      	b.n	8001b48 <__aeabi_ddiv+0x25c>
 8001e78:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <__aeabi_ddiv+0x5e8>)
 8001e7a:	445a      	add	r2, fp
 8001e7c:	2a00      	cmp	r2, #0
 8001e7e:	dc00      	bgt.n	8001e82 <__aeabi_ddiv+0x596>
 8001e80:	e710      	b.n	8001ca4 <__aeabi_ddiv+0x3b8>
 8001e82:	2301      	movs	r3, #1
 8001e84:	2500      	movs	r5, #0
 8001e86:	4498      	add	r8, r3
 8001e88:	e667      	b.n	8001b5a <__aeabi_ddiv+0x26e>
 8001e8a:	075d      	lsls	r5, r3, #29
 8001e8c:	025b      	lsls	r3, r3, #9
 8001e8e:	0b1c      	lsrs	r4, r3, #12
 8001e90:	08d2      	lsrs	r2, r2, #3
 8001e92:	2300      	movs	r3, #0
 8001e94:	4315      	orrs	r5, r2
 8001e96:	e580      	b.n	800199a <__aeabi_ddiv+0xae>
 8001e98:	9800      	ldr	r0, [sp, #0]
 8001e9a:	3d02      	subs	r5, #2
 8001e9c:	0042      	lsls	r2, r0, #1
 8001e9e:	4282      	cmp	r2, r0
 8001ea0:	41bf      	sbcs	r7, r7
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	193c      	adds	r4, r7, r4
 8001ea6:	1936      	adds	r6, r6, r4
 8001ea8:	9200      	str	r2, [sp, #0]
 8001eaa:	e7dd      	b.n	8001e68 <__aeabi_ddiv+0x57c>
 8001eac:	2480      	movs	r4, #128	; 0x80
 8001eae:	4643      	mov	r3, r8
 8001eb0:	0324      	lsls	r4, r4, #12
 8001eb2:	431c      	orrs	r4, r3
 8001eb4:	0324      	lsls	r4, r4, #12
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <__aeabi_ddiv+0x5dc>)
 8001eb8:	0b24      	lsrs	r4, r4, #12
 8001eba:	e56e      	b.n	800199a <__aeabi_ddiv+0xae>
 8001ebc:	9a00      	ldr	r2, [sp, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d3ea      	bcc.n	8001e98 <__aeabi_ddiv+0x5ac>
 8001ec2:	0005      	movs	r5, r0
 8001ec4:	e7d3      	b.n	8001e6e <__aeabi_ddiv+0x582>
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	000007ff 	.word	0x000007ff
 8001ecc:	0000043e 	.word	0x0000043e
 8001ed0:	0000041e 	.word	0x0000041e
 8001ed4:	000003ff 	.word	0x000003ff

08001ed8 <__eqdf2>:
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	464e      	mov	r6, r9
 8001edc:	4645      	mov	r5, r8
 8001ede:	46de      	mov	lr, fp
 8001ee0:	4657      	mov	r7, sl
 8001ee2:	4690      	mov	r8, r2
 8001ee4:	b5e0      	push	{r5, r6, r7, lr}
 8001ee6:	0017      	movs	r7, r2
 8001ee8:	031a      	lsls	r2, r3, #12
 8001eea:	0b12      	lsrs	r2, r2, #12
 8001eec:	0005      	movs	r5, r0
 8001eee:	4684      	mov	ip, r0
 8001ef0:	4819      	ldr	r0, [pc, #100]	; (8001f58 <__eqdf2+0x80>)
 8001ef2:	030e      	lsls	r6, r1, #12
 8001ef4:	004c      	lsls	r4, r1, #1
 8001ef6:	4691      	mov	r9, r2
 8001ef8:	005a      	lsls	r2, r3, #1
 8001efa:	0fdb      	lsrs	r3, r3, #31
 8001efc:	469b      	mov	fp, r3
 8001efe:	0b36      	lsrs	r6, r6, #12
 8001f00:	0d64      	lsrs	r4, r4, #21
 8001f02:	0fc9      	lsrs	r1, r1, #31
 8001f04:	0d52      	lsrs	r2, r2, #21
 8001f06:	4284      	cmp	r4, r0
 8001f08:	d019      	beq.n	8001f3e <__eqdf2+0x66>
 8001f0a:	4282      	cmp	r2, r0
 8001f0c:	d010      	beq.n	8001f30 <__eqdf2+0x58>
 8001f0e:	2001      	movs	r0, #1
 8001f10:	4294      	cmp	r4, r2
 8001f12:	d10e      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f14:	454e      	cmp	r6, r9
 8001f16:	d10c      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f18:	2001      	movs	r0, #1
 8001f1a:	45c4      	cmp	ip, r8
 8001f1c:	d109      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f1e:	4559      	cmp	r1, fp
 8001f20:	d017      	beq.n	8001f52 <__eqdf2+0x7a>
 8001f22:	2c00      	cmp	r4, #0
 8001f24:	d105      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f26:	0030      	movs	r0, r6
 8001f28:	4328      	orrs	r0, r5
 8001f2a:	1e43      	subs	r3, r0, #1
 8001f2c:	4198      	sbcs	r0, r3
 8001f2e:	e000      	b.n	8001f32 <__eqdf2+0x5a>
 8001f30:	2001      	movs	r0, #1
 8001f32:	bcf0      	pop	{r4, r5, r6, r7}
 8001f34:	46bb      	mov	fp, r7
 8001f36:	46b2      	mov	sl, r6
 8001f38:	46a9      	mov	r9, r5
 8001f3a:	46a0      	mov	r8, r4
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3e:	0033      	movs	r3, r6
 8001f40:	2001      	movs	r0, #1
 8001f42:	432b      	orrs	r3, r5
 8001f44:	d1f5      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f46:	42a2      	cmp	r2, r4
 8001f48:	d1f3      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	d1f0      	bne.n	8001f32 <__eqdf2+0x5a>
 8001f50:	e7e2      	b.n	8001f18 <__eqdf2+0x40>
 8001f52:	2000      	movs	r0, #0
 8001f54:	e7ed      	b.n	8001f32 <__eqdf2+0x5a>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff

08001f5c <__gedf2>:
 8001f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5e:	4647      	mov	r7, r8
 8001f60:	46ce      	mov	lr, r9
 8001f62:	0004      	movs	r4, r0
 8001f64:	0018      	movs	r0, r3
 8001f66:	0016      	movs	r6, r2
 8001f68:	031b      	lsls	r3, r3, #12
 8001f6a:	0b1b      	lsrs	r3, r3, #12
 8001f6c:	4d2d      	ldr	r5, [pc, #180]	; (8002024 <__gedf2+0xc8>)
 8001f6e:	004a      	lsls	r2, r1, #1
 8001f70:	4699      	mov	r9, r3
 8001f72:	b580      	push	{r7, lr}
 8001f74:	0043      	lsls	r3, r0, #1
 8001f76:	030f      	lsls	r7, r1, #12
 8001f78:	46a4      	mov	ip, r4
 8001f7a:	46b0      	mov	r8, r6
 8001f7c:	0b3f      	lsrs	r7, r7, #12
 8001f7e:	0d52      	lsrs	r2, r2, #21
 8001f80:	0fc9      	lsrs	r1, r1, #31
 8001f82:	0d5b      	lsrs	r3, r3, #21
 8001f84:	0fc0      	lsrs	r0, r0, #31
 8001f86:	42aa      	cmp	r2, r5
 8001f88:	d021      	beq.n	8001fce <__gedf2+0x72>
 8001f8a:	42ab      	cmp	r3, r5
 8001f8c:	d013      	beq.n	8001fb6 <__gedf2+0x5a>
 8001f8e:	2a00      	cmp	r2, #0
 8001f90:	d122      	bne.n	8001fd8 <__gedf2+0x7c>
 8001f92:	433c      	orrs	r4, r7
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <__gedf2+0x42>
 8001f98:	464d      	mov	r5, r9
 8001f9a:	432e      	orrs	r6, r5
 8001f9c:	d022      	beq.n	8001fe4 <__gedf2+0x88>
 8001f9e:	2c00      	cmp	r4, #0
 8001fa0:	d010      	beq.n	8001fc4 <__gedf2+0x68>
 8001fa2:	4281      	cmp	r1, r0
 8001fa4:	d022      	beq.n	8001fec <__gedf2+0x90>
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	3901      	subs	r1, #1
 8001faa:	4008      	ands	r0, r1
 8001fac:	3801      	subs	r0, #1
 8001fae:	bcc0      	pop	{r6, r7}
 8001fb0:	46b9      	mov	r9, r7
 8001fb2:	46b0      	mov	r8, r6
 8001fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb6:	464d      	mov	r5, r9
 8001fb8:	432e      	orrs	r6, r5
 8001fba:	d129      	bne.n	8002010 <__gedf2+0xb4>
 8001fbc:	2a00      	cmp	r2, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <__gedf2+0x46>
 8001fc0:	433c      	orrs	r4, r7
 8001fc2:	d1ee      	bne.n	8001fa2 <__gedf2+0x46>
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d1f2      	bne.n	8001fae <__gedf2+0x52>
 8001fc8:	2001      	movs	r0, #1
 8001fca:	4240      	negs	r0, r0
 8001fcc:	e7ef      	b.n	8001fae <__gedf2+0x52>
 8001fce:	003d      	movs	r5, r7
 8001fd0:	4325      	orrs	r5, r4
 8001fd2:	d11d      	bne.n	8002010 <__gedf2+0xb4>
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d0ee      	beq.n	8001fb6 <__gedf2+0x5a>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e2      	bne.n	8001fa2 <__gedf2+0x46>
 8001fdc:	464c      	mov	r4, r9
 8001fde:	4326      	orrs	r6, r4
 8001fe0:	d1df      	bne.n	8001fa2 <__gedf2+0x46>
 8001fe2:	e7e0      	b.n	8001fa6 <__gedf2+0x4a>
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	2c00      	cmp	r4, #0
 8001fe8:	d0e1      	beq.n	8001fae <__gedf2+0x52>
 8001fea:	e7dc      	b.n	8001fa6 <__gedf2+0x4a>
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dc0a      	bgt.n	8002006 <__gedf2+0xaa>
 8001ff0:	dbe8      	blt.n	8001fc4 <__gedf2+0x68>
 8001ff2:	454f      	cmp	r7, r9
 8001ff4:	d8d7      	bhi.n	8001fa6 <__gedf2+0x4a>
 8001ff6:	d00e      	beq.n	8002016 <__gedf2+0xba>
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	454f      	cmp	r7, r9
 8001ffc:	d2d7      	bcs.n	8001fae <__gedf2+0x52>
 8001ffe:	2900      	cmp	r1, #0
 8002000:	d0e2      	beq.n	8001fc8 <__gedf2+0x6c>
 8002002:	0008      	movs	r0, r1
 8002004:	e7d3      	b.n	8001fae <__gedf2+0x52>
 8002006:	4243      	negs	r3, r0
 8002008:	4158      	adcs	r0, r3
 800200a:	0040      	lsls	r0, r0, #1
 800200c:	3801      	subs	r0, #1
 800200e:	e7ce      	b.n	8001fae <__gedf2+0x52>
 8002010:	2002      	movs	r0, #2
 8002012:	4240      	negs	r0, r0
 8002014:	e7cb      	b.n	8001fae <__gedf2+0x52>
 8002016:	45c4      	cmp	ip, r8
 8002018:	d8c5      	bhi.n	8001fa6 <__gedf2+0x4a>
 800201a:	2000      	movs	r0, #0
 800201c:	45c4      	cmp	ip, r8
 800201e:	d2c6      	bcs.n	8001fae <__gedf2+0x52>
 8002020:	e7ed      	b.n	8001ffe <__gedf2+0xa2>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	000007ff 	.word	0x000007ff

08002028 <__ledf2>:
 8002028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202a:	4647      	mov	r7, r8
 800202c:	46ce      	mov	lr, r9
 800202e:	0004      	movs	r4, r0
 8002030:	0018      	movs	r0, r3
 8002032:	0016      	movs	r6, r2
 8002034:	031b      	lsls	r3, r3, #12
 8002036:	0b1b      	lsrs	r3, r3, #12
 8002038:	4d2c      	ldr	r5, [pc, #176]	; (80020ec <__ledf2+0xc4>)
 800203a:	004a      	lsls	r2, r1, #1
 800203c:	4699      	mov	r9, r3
 800203e:	b580      	push	{r7, lr}
 8002040:	0043      	lsls	r3, r0, #1
 8002042:	030f      	lsls	r7, r1, #12
 8002044:	46a4      	mov	ip, r4
 8002046:	46b0      	mov	r8, r6
 8002048:	0b3f      	lsrs	r7, r7, #12
 800204a:	0d52      	lsrs	r2, r2, #21
 800204c:	0fc9      	lsrs	r1, r1, #31
 800204e:	0d5b      	lsrs	r3, r3, #21
 8002050:	0fc0      	lsrs	r0, r0, #31
 8002052:	42aa      	cmp	r2, r5
 8002054:	d00d      	beq.n	8002072 <__ledf2+0x4a>
 8002056:	42ab      	cmp	r3, r5
 8002058:	d010      	beq.n	800207c <__ledf2+0x54>
 800205a:	2a00      	cmp	r2, #0
 800205c:	d127      	bne.n	80020ae <__ledf2+0x86>
 800205e:	433c      	orrs	r4, r7
 8002060:	2b00      	cmp	r3, #0
 8002062:	d111      	bne.n	8002088 <__ledf2+0x60>
 8002064:	464d      	mov	r5, r9
 8002066:	432e      	orrs	r6, r5
 8002068:	d10e      	bne.n	8002088 <__ledf2+0x60>
 800206a:	2000      	movs	r0, #0
 800206c:	2c00      	cmp	r4, #0
 800206e:	d015      	beq.n	800209c <__ledf2+0x74>
 8002070:	e00e      	b.n	8002090 <__ledf2+0x68>
 8002072:	003d      	movs	r5, r7
 8002074:	4325      	orrs	r5, r4
 8002076:	d110      	bne.n	800209a <__ledf2+0x72>
 8002078:	4293      	cmp	r3, r2
 800207a:	d118      	bne.n	80020ae <__ledf2+0x86>
 800207c:	464d      	mov	r5, r9
 800207e:	432e      	orrs	r6, r5
 8002080:	d10b      	bne.n	800209a <__ledf2+0x72>
 8002082:	2a00      	cmp	r2, #0
 8002084:	d102      	bne.n	800208c <__ledf2+0x64>
 8002086:	433c      	orrs	r4, r7
 8002088:	2c00      	cmp	r4, #0
 800208a:	d00b      	beq.n	80020a4 <__ledf2+0x7c>
 800208c:	4281      	cmp	r1, r0
 800208e:	d014      	beq.n	80020ba <__ledf2+0x92>
 8002090:	2002      	movs	r0, #2
 8002092:	3901      	subs	r1, #1
 8002094:	4008      	ands	r0, r1
 8002096:	3801      	subs	r0, #1
 8002098:	e000      	b.n	800209c <__ledf2+0x74>
 800209a:	2002      	movs	r0, #2
 800209c:	bcc0      	pop	{r6, r7}
 800209e:	46b9      	mov	r9, r7
 80020a0:	46b0      	mov	r8, r6
 80020a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d1f9      	bne.n	800209c <__ledf2+0x74>
 80020a8:	2001      	movs	r0, #1
 80020aa:	4240      	negs	r0, r0
 80020ac:	e7f6      	b.n	800209c <__ledf2+0x74>
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1ec      	bne.n	800208c <__ledf2+0x64>
 80020b2:	464c      	mov	r4, r9
 80020b4:	4326      	orrs	r6, r4
 80020b6:	d1e9      	bne.n	800208c <__ledf2+0x64>
 80020b8:	e7ea      	b.n	8002090 <__ledf2+0x68>
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dd04      	ble.n	80020c8 <__ledf2+0xa0>
 80020be:	4243      	negs	r3, r0
 80020c0:	4158      	adcs	r0, r3
 80020c2:	0040      	lsls	r0, r0, #1
 80020c4:	3801      	subs	r0, #1
 80020c6:	e7e9      	b.n	800209c <__ledf2+0x74>
 80020c8:	429a      	cmp	r2, r3
 80020ca:	dbeb      	blt.n	80020a4 <__ledf2+0x7c>
 80020cc:	454f      	cmp	r7, r9
 80020ce:	d8df      	bhi.n	8002090 <__ledf2+0x68>
 80020d0:	d006      	beq.n	80020e0 <__ledf2+0xb8>
 80020d2:	2000      	movs	r0, #0
 80020d4:	454f      	cmp	r7, r9
 80020d6:	d2e1      	bcs.n	800209c <__ledf2+0x74>
 80020d8:	2900      	cmp	r1, #0
 80020da:	d0e5      	beq.n	80020a8 <__ledf2+0x80>
 80020dc:	0008      	movs	r0, r1
 80020de:	e7dd      	b.n	800209c <__ledf2+0x74>
 80020e0:	45c4      	cmp	ip, r8
 80020e2:	d8d5      	bhi.n	8002090 <__ledf2+0x68>
 80020e4:	2000      	movs	r0, #0
 80020e6:	45c4      	cmp	ip, r8
 80020e8:	d2d8      	bcs.n	800209c <__ledf2+0x74>
 80020ea:	e7f5      	b.n	80020d8 <__ledf2+0xb0>
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__aeabi_dmul>:
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	4657      	mov	r7, sl
 80020f4:	464e      	mov	r6, r9
 80020f6:	4645      	mov	r5, r8
 80020f8:	46de      	mov	lr, fp
 80020fa:	b5e0      	push	{r5, r6, r7, lr}
 80020fc:	4698      	mov	r8, r3
 80020fe:	030c      	lsls	r4, r1, #12
 8002100:	004b      	lsls	r3, r1, #1
 8002102:	0006      	movs	r6, r0
 8002104:	4692      	mov	sl, r2
 8002106:	b087      	sub	sp, #28
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	0fcf      	lsrs	r7, r1, #31
 800210e:	2b00      	cmp	r3, #0
 8002110:	d100      	bne.n	8002114 <__aeabi_dmul+0x24>
 8002112:	e15c      	b.n	80023ce <__aeabi_dmul+0x2de>
 8002114:	4ad9      	ldr	r2, [pc, #868]	; (800247c <__aeabi_dmul+0x38c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d100      	bne.n	800211c <__aeabi_dmul+0x2c>
 800211a:	e175      	b.n	8002408 <__aeabi_dmul+0x318>
 800211c:	0f42      	lsrs	r2, r0, #29
 800211e:	00e4      	lsls	r4, r4, #3
 8002120:	4314      	orrs	r4, r2
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	0412      	lsls	r2, r2, #16
 8002126:	4314      	orrs	r4, r2
 8002128:	4ad5      	ldr	r2, [pc, #852]	; (8002480 <__aeabi_dmul+0x390>)
 800212a:	00c5      	lsls	r5, r0, #3
 800212c:	4694      	mov	ip, r2
 800212e:	4463      	add	r3, ip
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2300      	movs	r3, #0
 8002134:	4699      	mov	r9, r3
 8002136:	469b      	mov	fp, r3
 8002138:	4643      	mov	r3, r8
 800213a:	4642      	mov	r2, r8
 800213c:	031e      	lsls	r6, r3, #12
 800213e:	0fd2      	lsrs	r2, r2, #31
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4650      	mov	r0, sl
 8002144:	4690      	mov	r8, r2
 8002146:	0b36      	lsrs	r6, r6, #12
 8002148:	0d5b      	lsrs	r3, r3, #21
 800214a:	d100      	bne.n	800214e <__aeabi_dmul+0x5e>
 800214c:	e120      	b.n	8002390 <__aeabi_dmul+0x2a0>
 800214e:	4acb      	ldr	r2, [pc, #812]	; (800247c <__aeabi_dmul+0x38c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d100      	bne.n	8002156 <__aeabi_dmul+0x66>
 8002154:	e162      	b.n	800241c <__aeabi_dmul+0x32c>
 8002156:	49ca      	ldr	r1, [pc, #808]	; (8002480 <__aeabi_dmul+0x390>)
 8002158:	0f42      	lsrs	r2, r0, #29
 800215a:	468c      	mov	ip, r1
 800215c:	9900      	ldr	r1, [sp, #0]
 800215e:	4463      	add	r3, ip
 8002160:	00f6      	lsls	r6, r6, #3
 8002162:	468c      	mov	ip, r1
 8002164:	4316      	orrs	r6, r2
 8002166:	2280      	movs	r2, #128	; 0x80
 8002168:	449c      	add	ip, r3
 800216a:	0412      	lsls	r2, r2, #16
 800216c:	4663      	mov	r3, ip
 800216e:	4316      	orrs	r6, r2
 8002170:	00c2      	lsls	r2, r0, #3
 8002172:	2000      	movs	r0, #0
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	9900      	ldr	r1, [sp, #0]
 8002178:	4643      	mov	r3, r8
 800217a:	3101      	adds	r1, #1
 800217c:	468c      	mov	ip, r1
 800217e:	4649      	mov	r1, r9
 8002180:	407b      	eors	r3, r7
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	290f      	cmp	r1, #15
 8002186:	d826      	bhi.n	80021d6 <__aeabi_dmul+0xe6>
 8002188:	4bbe      	ldr	r3, [pc, #760]	; (8002484 <__aeabi_dmul+0x394>)
 800218a:	0089      	lsls	r1, r1, #2
 800218c:	5859      	ldr	r1, [r3, r1]
 800218e:	468f      	mov	pc, r1
 8002190:	4643      	mov	r3, r8
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	0034      	movs	r4, r6
 8002196:	0015      	movs	r5, r2
 8002198:	4683      	mov	fp, r0
 800219a:	465b      	mov	r3, fp
 800219c:	2b02      	cmp	r3, #2
 800219e:	d016      	beq.n	80021ce <__aeabi_dmul+0xde>
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dmul+0xb6>
 80021a4:	e203      	b.n	80025ae <__aeabi_dmul+0x4be>
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d000      	beq.n	80021ac <__aeabi_dmul+0xbc>
 80021aa:	e0cd      	b.n	8002348 <__aeabi_dmul+0x258>
 80021ac:	2200      	movs	r2, #0
 80021ae:	2400      	movs	r4, #0
 80021b0:	2500      	movs	r5, #0
 80021b2:	9b01      	ldr	r3, [sp, #4]
 80021b4:	0512      	lsls	r2, r2, #20
 80021b6:	4322      	orrs	r2, r4
 80021b8:	07db      	lsls	r3, r3, #31
 80021ba:	431a      	orrs	r2, r3
 80021bc:	0028      	movs	r0, r5
 80021be:	0011      	movs	r1, r2
 80021c0:	b007      	add	sp, #28
 80021c2:	bcf0      	pop	{r4, r5, r6, r7}
 80021c4:	46bb      	mov	fp, r7
 80021c6:	46b2      	mov	sl, r6
 80021c8:	46a9      	mov	r9, r5
 80021ca:	46a0      	mov	r8, r4
 80021cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ce:	2400      	movs	r4, #0
 80021d0:	2500      	movs	r5, #0
 80021d2:	4aaa      	ldr	r2, [pc, #680]	; (800247c <__aeabi_dmul+0x38c>)
 80021d4:	e7ed      	b.n	80021b2 <__aeabi_dmul+0xc2>
 80021d6:	0c28      	lsrs	r0, r5, #16
 80021d8:	042d      	lsls	r5, r5, #16
 80021da:	0c2d      	lsrs	r5, r5, #16
 80021dc:	002b      	movs	r3, r5
 80021de:	0c11      	lsrs	r1, r2, #16
 80021e0:	0412      	lsls	r2, r2, #16
 80021e2:	0c12      	lsrs	r2, r2, #16
 80021e4:	4353      	muls	r3, r2
 80021e6:	4698      	mov	r8, r3
 80021e8:	0013      	movs	r3, r2
 80021ea:	002f      	movs	r7, r5
 80021ec:	4343      	muls	r3, r0
 80021ee:	4699      	mov	r9, r3
 80021f0:	434f      	muls	r7, r1
 80021f2:	444f      	add	r7, r9
 80021f4:	46bb      	mov	fp, r7
 80021f6:	4647      	mov	r7, r8
 80021f8:	000b      	movs	r3, r1
 80021fa:	0c3f      	lsrs	r7, r7, #16
 80021fc:	46ba      	mov	sl, r7
 80021fe:	4343      	muls	r3, r0
 8002200:	44da      	add	sl, fp
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	45d1      	cmp	r9, sl
 8002206:	d904      	bls.n	8002212 <__aeabi_dmul+0x122>
 8002208:	2780      	movs	r7, #128	; 0x80
 800220a:	027f      	lsls	r7, r7, #9
 800220c:	46b9      	mov	r9, r7
 800220e:	444b      	add	r3, r9
 8002210:	9302      	str	r3, [sp, #8]
 8002212:	4653      	mov	r3, sl
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	469b      	mov	fp, r3
 8002218:	4653      	mov	r3, sl
 800221a:	041f      	lsls	r7, r3, #16
 800221c:	4643      	mov	r3, r8
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	4698      	mov	r8, r3
 8002224:	003b      	movs	r3, r7
 8002226:	4443      	add	r3, r8
 8002228:	9304      	str	r3, [sp, #16]
 800222a:	0c33      	lsrs	r3, r6, #16
 800222c:	0436      	lsls	r6, r6, #16
 800222e:	0c36      	lsrs	r6, r6, #16
 8002230:	4698      	mov	r8, r3
 8002232:	0033      	movs	r3, r6
 8002234:	4343      	muls	r3, r0
 8002236:	4699      	mov	r9, r3
 8002238:	4643      	mov	r3, r8
 800223a:	4343      	muls	r3, r0
 800223c:	002f      	movs	r7, r5
 800223e:	469a      	mov	sl, r3
 8002240:	4643      	mov	r3, r8
 8002242:	4377      	muls	r7, r6
 8002244:	435d      	muls	r5, r3
 8002246:	0c38      	lsrs	r0, r7, #16
 8002248:	444d      	add	r5, r9
 800224a:	1945      	adds	r5, r0, r5
 800224c:	45a9      	cmp	r9, r5
 800224e:	d903      	bls.n	8002258 <__aeabi_dmul+0x168>
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	025b      	lsls	r3, r3, #9
 8002254:	4699      	mov	r9, r3
 8002256:	44ca      	add	sl, r9
 8002258:	043f      	lsls	r7, r7, #16
 800225a:	0c28      	lsrs	r0, r5, #16
 800225c:	0c3f      	lsrs	r7, r7, #16
 800225e:	042d      	lsls	r5, r5, #16
 8002260:	19ed      	adds	r5, r5, r7
 8002262:	0c27      	lsrs	r7, r4, #16
 8002264:	0424      	lsls	r4, r4, #16
 8002266:	0c24      	lsrs	r4, r4, #16
 8002268:	0003      	movs	r3, r0
 800226a:	0020      	movs	r0, r4
 800226c:	4350      	muls	r0, r2
 800226e:	437a      	muls	r2, r7
 8002270:	4691      	mov	r9, r2
 8002272:	003a      	movs	r2, r7
 8002274:	4453      	add	r3, sl
 8002276:	9305      	str	r3, [sp, #20]
 8002278:	0c03      	lsrs	r3, r0, #16
 800227a:	469a      	mov	sl, r3
 800227c:	434a      	muls	r2, r1
 800227e:	4361      	muls	r1, r4
 8002280:	4449      	add	r1, r9
 8002282:	4451      	add	r1, sl
 8002284:	44ab      	add	fp, r5
 8002286:	4589      	cmp	r9, r1
 8002288:	d903      	bls.n	8002292 <__aeabi_dmul+0x1a2>
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	025b      	lsls	r3, r3, #9
 800228e:	4699      	mov	r9, r3
 8002290:	444a      	add	r2, r9
 8002292:	0400      	lsls	r0, r0, #16
 8002294:	0c0b      	lsrs	r3, r1, #16
 8002296:	0c00      	lsrs	r0, r0, #16
 8002298:	0409      	lsls	r1, r1, #16
 800229a:	1809      	adds	r1, r1, r0
 800229c:	0020      	movs	r0, r4
 800229e:	4699      	mov	r9, r3
 80022a0:	4643      	mov	r3, r8
 80022a2:	4370      	muls	r0, r6
 80022a4:	435c      	muls	r4, r3
 80022a6:	437e      	muls	r6, r7
 80022a8:	435f      	muls	r7, r3
 80022aa:	0c03      	lsrs	r3, r0, #16
 80022ac:	4698      	mov	r8, r3
 80022ae:	19a4      	adds	r4, r4, r6
 80022b0:	4444      	add	r4, r8
 80022b2:	444a      	add	r2, r9
 80022b4:	9703      	str	r7, [sp, #12]
 80022b6:	42a6      	cmp	r6, r4
 80022b8:	d904      	bls.n	80022c4 <__aeabi_dmul+0x1d4>
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	025b      	lsls	r3, r3, #9
 80022be:	4698      	mov	r8, r3
 80022c0:	4447      	add	r7, r8
 80022c2:	9703      	str	r7, [sp, #12]
 80022c4:	0423      	lsls	r3, r4, #16
 80022c6:	9e02      	ldr	r6, [sp, #8]
 80022c8:	469a      	mov	sl, r3
 80022ca:	9b05      	ldr	r3, [sp, #20]
 80022cc:	445e      	add	r6, fp
 80022ce:	4698      	mov	r8, r3
 80022d0:	42ae      	cmp	r6, r5
 80022d2:	41ad      	sbcs	r5, r5
 80022d4:	1876      	adds	r6, r6, r1
 80022d6:	428e      	cmp	r6, r1
 80022d8:	4189      	sbcs	r1, r1
 80022da:	0400      	lsls	r0, r0, #16
 80022dc:	0c00      	lsrs	r0, r0, #16
 80022de:	4450      	add	r0, sl
 80022e0:	4440      	add	r0, r8
 80022e2:	426d      	negs	r5, r5
 80022e4:	1947      	adds	r7, r0, r5
 80022e6:	46b8      	mov	r8, r7
 80022e8:	4693      	mov	fp, r2
 80022ea:	4249      	negs	r1, r1
 80022ec:	4689      	mov	r9, r1
 80022ee:	44c3      	add	fp, r8
 80022f0:	44d9      	add	r9, fp
 80022f2:	4298      	cmp	r0, r3
 80022f4:	4180      	sbcs	r0, r0
 80022f6:	45a8      	cmp	r8, r5
 80022f8:	41ad      	sbcs	r5, r5
 80022fa:	4593      	cmp	fp, r2
 80022fc:	4192      	sbcs	r2, r2
 80022fe:	4589      	cmp	r9, r1
 8002300:	4189      	sbcs	r1, r1
 8002302:	426d      	negs	r5, r5
 8002304:	4240      	negs	r0, r0
 8002306:	4328      	orrs	r0, r5
 8002308:	0c24      	lsrs	r4, r4, #16
 800230a:	4252      	negs	r2, r2
 800230c:	4249      	negs	r1, r1
 800230e:	430a      	orrs	r2, r1
 8002310:	9b03      	ldr	r3, [sp, #12]
 8002312:	1900      	adds	r0, r0, r4
 8002314:	1880      	adds	r0, r0, r2
 8002316:	18c7      	adds	r7, r0, r3
 8002318:	464b      	mov	r3, r9
 800231a:	0ddc      	lsrs	r4, r3, #23
 800231c:	9b04      	ldr	r3, [sp, #16]
 800231e:	0275      	lsls	r5, r6, #9
 8002320:	431d      	orrs	r5, r3
 8002322:	1e6a      	subs	r2, r5, #1
 8002324:	4195      	sbcs	r5, r2
 8002326:	464b      	mov	r3, r9
 8002328:	0df6      	lsrs	r6, r6, #23
 800232a:	027f      	lsls	r7, r7, #9
 800232c:	4335      	orrs	r5, r6
 800232e:	025a      	lsls	r2, r3, #9
 8002330:	433c      	orrs	r4, r7
 8002332:	4315      	orrs	r5, r2
 8002334:	01fb      	lsls	r3, r7, #7
 8002336:	d400      	bmi.n	800233a <__aeabi_dmul+0x24a>
 8002338:	e11c      	b.n	8002574 <__aeabi_dmul+0x484>
 800233a:	2101      	movs	r1, #1
 800233c:	086a      	lsrs	r2, r5, #1
 800233e:	400d      	ands	r5, r1
 8002340:	4315      	orrs	r5, r2
 8002342:	07e2      	lsls	r2, r4, #31
 8002344:	4315      	orrs	r5, r2
 8002346:	0864      	lsrs	r4, r4, #1
 8002348:	494f      	ldr	r1, [pc, #316]	; (8002488 <__aeabi_dmul+0x398>)
 800234a:	4461      	add	r1, ip
 800234c:	2900      	cmp	r1, #0
 800234e:	dc00      	bgt.n	8002352 <__aeabi_dmul+0x262>
 8002350:	e0b0      	b.n	80024b4 <__aeabi_dmul+0x3c4>
 8002352:	076b      	lsls	r3, r5, #29
 8002354:	d009      	beq.n	800236a <__aeabi_dmul+0x27a>
 8002356:	220f      	movs	r2, #15
 8002358:	402a      	ands	r2, r5
 800235a:	2a04      	cmp	r2, #4
 800235c:	d005      	beq.n	800236a <__aeabi_dmul+0x27a>
 800235e:	1d2a      	adds	r2, r5, #4
 8002360:	42aa      	cmp	r2, r5
 8002362:	41ad      	sbcs	r5, r5
 8002364:	426d      	negs	r5, r5
 8002366:	1964      	adds	r4, r4, r5
 8002368:	0015      	movs	r5, r2
 800236a:	01e3      	lsls	r3, r4, #7
 800236c:	d504      	bpl.n	8002378 <__aeabi_dmul+0x288>
 800236e:	2180      	movs	r1, #128	; 0x80
 8002370:	4a46      	ldr	r2, [pc, #280]	; (800248c <__aeabi_dmul+0x39c>)
 8002372:	00c9      	lsls	r1, r1, #3
 8002374:	4014      	ands	r4, r2
 8002376:	4461      	add	r1, ip
 8002378:	4a45      	ldr	r2, [pc, #276]	; (8002490 <__aeabi_dmul+0x3a0>)
 800237a:	4291      	cmp	r1, r2
 800237c:	dd00      	ble.n	8002380 <__aeabi_dmul+0x290>
 800237e:	e726      	b.n	80021ce <__aeabi_dmul+0xde>
 8002380:	0762      	lsls	r2, r4, #29
 8002382:	08ed      	lsrs	r5, r5, #3
 8002384:	0264      	lsls	r4, r4, #9
 8002386:	0549      	lsls	r1, r1, #21
 8002388:	4315      	orrs	r5, r2
 800238a:	0b24      	lsrs	r4, r4, #12
 800238c:	0d4a      	lsrs	r2, r1, #21
 800238e:	e710      	b.n	80021b2 <__aeabi_dmul+0xc2>
 8002390:	4652      	mov	r2, sl
 8002392:	4332      	orrs	r2, r6
 8002394:	d100      	bne.n	8002398 <__aeabi_dmul+0x2a8>
 8002396:	e07f      	b.n	8002498 <__aeabi_dmul+0x3a8>
 8002398:	2e00      	cmp	r6, #0
 800239a:	d100      	bne.n	800239e <__aeabi_dmul+0x2ae>
 800239c:	e0dc      	b.n	8002558 <__aeabi_dmul+0x468>
 800239e:	0030      	movs	r0, r6
 80023a0:	f000 fdd6 	bl	8002f50 <__clzsi2>
 80023a4:	0002      	movs	r2, r0
 80023a6:	3a0b      	subs	r2, #11
 80023a8:	231d      	movs	r3, #29
 80023aa:	0001      	movs	r1, r0
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	4652      	mov	r2, sl
 80023b0:	3908      	subs	r1, #8
 80023b2:	40da      	lsrs	r2, r3
 80023b4:	408e      	lsls	r6, r1
 80023b6:	4316      	orrs	r6, r2
 80023b8:	4652      	mov	r2, sl
 80023ba:	408a      	lsls	r2, r1
 80023bc:	9b00      	ldr	r3, [sp, #0]
 80023be:	4935      	ldr	r1, [pc, #212]	; (8002494 <__aeabi_dmul+0x3a4>)
 80023c0:	1a18      	subs	r0, r3, r0
 80023c2:	0003      	movs	r3, r0
 80023c4:	468c      	mov	ip, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	2000      	movs	r0, #0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	e6d3      	b.n	8002176 <__aeabi_dmul+0x86>
 80023ce:	0025      	movs	r5, r4
 80023d0:	4305      	orrs	r5, r0
 80023d2:	d04a      	beq.n	800246a <__aeabi_dmul+0x37a>
 80023d4:	2c00      	cmp	r4, #0
 80023d6:	d100      	bne.n	80023da <__aeabi_dmul+0x2ea>
 80023d8:	e0b0      	b.n	800253c <__aeabi_dmul+0x44c>
 80023da:	0020      	movs	r0, r4
 80023dc:	f000 fdb8 	bl	8002f50 <__clzsi2>
 80023e0:	0001      	movs	r1, r0
 80023e2:	0002      	movs	r2, r0
 80023e4:	390b      	subs	r1, #11
 80023e6:	231d      	movs	r3, #29
 80023e8:	0010      	movs	r0, r2
 80023ea:	1a5b      	subs	r3, r3, r1
 80023ec:	0031      	movs	r1, r6
 80023ee:	0035      	movs	r5, r6
 80023f0:	3808      	subs	r0, #8
 80023f2:	4084      	lsls	r4, r0
 80023f4:	40d9      	lsrs	r1, r3
 80023f6:	4085      	lsls	r5, r0
 80023f8:	430c      	orrs	r4, r1
 80023fa:	4826      	ldr	r0, [pc, #152]	; (8002494 <__aeabi_dmul+0x3a4>)
 80023fc:	1a83      	subs	r3, r0, r2
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2300      	movs	r3, #0
 8002402:	4699      	mov	r9, r3
 8002404:	469b      	mov	fp, r3
 8002406:	e697      	b.n	8002138 <__aeabi_dmul+0x48>
 8002408:	0005      	movs	r5, r0
 800240a:	4325      	orrs	r5, r4
 800240c:	d126      	bne.n	800245c <__aeabi_dmul+0x36c>
 800240e:	2208      	movs	r2, #8
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2302      	movs	r3, #2
 8002414:	2400      	movs	r4, #0
 8002416:	4691      	mov	r9, r2
 8002418:	469b      	mov	fp, r3
 800241a:	e68d      	b.n	8002138 <__aeabi_dmul+0x48>
 800241c:	4652      	mov	r2, sl
 800241e:	9b00      	ldr	r3, [sp, #0]
 8002420:	4332      	orrs	r2, r6
 8002422:	d110      	bne.n	8002446 <__aeabi_dmul+0x356>
 8002424:	4915      	ldr	r1, [pc, #84]	; (800247c <__aeabi_dmul+0x38c>)
 8002426:	2600      	movs	r6, #0
 8002428:	468c      	mov	ip, r1
 800242a:	4463      	add	r3, ip
 800242c:	4649      	mov	r1, r9
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2302      	movs	r3, #2
 8002432:	4319      	orrs	r1, r3
 8002434:	4689      	mov	r9, r1
 8002436:	2002      	movs	r0, #2
 8002438:	e69d      	b.n	8002176 <__aeabi_dmul+0x86>
 800243a:	465b      	mov	r3, fp
 800243c:	9701      	str	r7, [sp, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d000      	beq.n	8002444 <__aeabi_dmul+0x354>
 8002442:	e6ad      	b.n	80021a0 <__aeabi_dmul+0xb0>
 8002444:	e6c3      	b.n	80021ce <__aeabi_dmul+0xde>
 8002446:	4a0d      	ldr	r2, [pc, #52]	; (800247c <__aeabi_dmul+0x38c>)
 8002448:	2003      	movs	r0, #3
 800244a:	4694      	mov	ip, r2
 800244c:	4463      	add	r3, ip
 800244e:	464a      	mov	r2, r9
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2303      	movs	r3, #3
 8002454:	431a      	orrs	r2, r3
 8002456:	4691      	mov	r9, r2
 8002458:	4652      	mov	r2, sl
 800245a:	e68c      	b.n	8002176 <__aeabi_dmul+0x86>
 800245c:	220c      	movs	r2, #12
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2303      	movs	r3, #3
 8002462:	0005      	movs	r5, r0
 8002464:	4691      	mov	r9, r2
 8002466:	469b      	mov	fp, r3
 8002468:	e666      	b.n	8002138 <__aeabi_dmul+0x48>
 800246a:	2304      	movs	r3, #4
 800246c:	4699      	mov	r9, r3
 800246e:	2300      	movs	r3, #0
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	2400      	movs	r4, #0
 8002476:	469b      	mov	fp, r3
 8002478:	e65e      	b.n	8002138 <__aeabi_dmul+0x48>
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	000007ff 	.word	0x000007ff
 8002480:	fffffc01 	.word	0xfffffc01
 8002484:	0800eff8 	.word	0x0800eff8
 8002488:	000003ff 	.word	0x000003ff
 800248c:	feffffff 	.word	0xfeffffff
 8002490:	000007fe 	.word	0x000007fe
 8002494:	fffffc0d 	.word	0xfffffc0d
 8002498:	4649      	mov	r1, r9
 800249a:	2301      	movs	r3, #1
 800249c:	4319      	orrs	r1, r3
 800249e:	4689      	mov	r9, r1
 80024a0:	2600      	movs	r6, #0
 80024a2:	2001      	movs	r0, #1
 80024a4:	e667      	b.n	8002176 <__aeabi_dmul+0x86>
 80024a6:	2300      	movs	r3, #0
 80024a8:	2480      	movs	r4, #128	; 0x80
 80024aa:	2500      	movs	r5, #0
 80024ac:	4a43      	ldr	r2, [pc, #268]	; (80025bc <__aeabi_dmul+0x4cc>)
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	0324      	lsls	r4, r4, #12
 80024b2:	e67e      	b.n	80021b2 <__aeabi_dmul+0xc2>
 80024b4:	2001      	movs	r0, #1
 80024b6:	1a40      	subs	r0, r0, r1
 80024b8:	2838      	cmp	r0, #56	; 0x38
 80024ba:	dd00      	ble.n	80024be <__aeabi_dmul+0x3ce>
 80024bc:	e676      	b.n	80021ac <__aeabi_dmul+0xbc>
 80024be:	281f      	cmp	r0, #31
 80024c0:	dd5b      	ble.n	800257a <__aeabi_dmul+0x48a>
 80024c2:	221f      	movs	r2, #31
 80024c4:	0023      	movs	r3, r4
 80024c6:	4252      	negs	r2, r2
 80024c8:	1a51      	subs	r1, r2, r1
 80024ca:	40cb      	lsrs	r3, r1
 80024cc:	0019      	movs	r1, r3
 80024ce:	2820      	cmp	r0, #32
 80024d0:	d003      	beq.n	80024da <__aeabi_dmul+0x3ea>
 80024d2:	4a3b      	ldr	r2, [pc, #236]	; (80025c0 <__aeabi_dmul+0x4d0>)
 80024d4:	4462      	add	r2, ip
 80024d6:	4094      	lsls	r4, r2
 80024d8:	4325      	orrs	r5, r4
 80024da:	1e6a      	subs	r2, r5, #1
 80024dc:	4195      	sbcs	r5, r2
 80024de:	002a      	movs	r2, r5
 80024e0:	430a      	orrs	r2, r1
 80024e2:	2107      	movs	r1, #7
 80024e4:	000d      	movs	r5, r1
 80024e6:	2400      	movs	r4, #0
 80024e8:	4015      	ands	r5, r2
 80024ea:	4211      	tst	r1, r2
 80024ec:	d05b      	beq.n	80025a6 <__aeabi_dmul+0x4b6>
 80024ee:	210f      	movs	r1, #15
 80024f0:	2400      	movs	r4, #0
 80024f2:	4011      	ands	r1, r2
 80024f4:	2904      	cmp	r1, #4
 80024f6:	d053      	beq.n	80025a0 <__aeabi_dmul+0x4b0>
 80024f8:	1d11      	adds	r1, r2, #4
 80024fa:	4291      	cmp	r1, r2
 80024fc:	4192      	sbcs	r2, r2
 80024fe:	4252      	negs	r2, r2
 8002500:	18a4      	adds	r4, r4, r2
 8002502:	000a      	movs	r2, r1
 8002504:	0223      	lsls	r3, r4, #8
 8002506:	d54b      	bpl.n	80025a0 <__aeabi_dmul+0x4b0>
 8002508:	2201      	movs	r2, #1
 800250a:	2400      	movs	r4, #0
 800250c:	2500      	movs	r5, #0
 800250e:	e650      	b.n	80021b2 <__aeabi_dmul+0xc2>
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	031b      	lsls	r3, r3, #12
 8002514:	421c      	tst	r4, r3
 8002516:	d009      	beq.n	800252c <__aeabi_dmul+0x43c>
 8002518:	421e      	tst	r6, r3
 800251a:	d107      	bne.n	800252c <__aeabi_dmul+0x43c>
 800251c:	4333      	orrs	r3, r6
 800251e:	031c      	lsls	r4, r3, #12
 8002520:	4643      	mov	r3, r8
 8002522:	0015      	movs	r5, r2
 8002524:	0b24      	lsrs	r4, r4, #12
 8002526:	4a25      	ldr	r2, [pc, #148]	; (80025bc <__aeabi_dmul+0x4cc>)
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	e642      	b.n	80021b2 <__aeabi_dmul+0xc2>
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	0312      	lsls	r2, r2, #12
 8002530:	4314      	orrs	r4, r2
 8002532:	0324      	lsls	r4, r4, #12
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <__aeabi_dmul+0x4cc>)
 8002536:	0b24      	lsrs	r4, r4, #12
 8002538:	9701      	str	r7, [sp, #4]
 800253a:	e63a      	b.n	80021b2 <__aeabi_dmul+0xc2>
 800253c:	f000 fd08 	bl	8002f50 <__clzsi2>
 8002540:	0001      	movs	r1, r0
 8002542:	0002      	movs	r2, r0
 8002544:	3115      	adds	r1, #21
 8002546:	3220      	adds	r2, #32
 8002548:	291c      	cmp	r1, #28
 800254a:	dc00      	bgt.n	800254e <__aeabi_dmul+0x45e>
 800254c:	e74b      	b.n	80023e6 <__aeabi_dmul+0x2f6>
 800254e:	0034      	movs	r4, r6
 8002550:	3808      	subs	r0, #8
 8002552:	2500      	movs	r5, #0
 8002554:	4084      	lsls	r4, r0
 8002556:	e750      	b.n	80023fa <__aeabi_dmul+0x30a>
 8002558:	f000 fcfa 	bl	8002f50 <__clzsi2>
 800255c:	0003      	movs	r3, r0
 800255e:	001a      	movs	r2, r3
 8002560:	3215      	adds	r2, #21
 8002562:	3020      	adds	r0, #32
 8002564:	2a1c      	cmp	r2, #28
 8002566:	dc00      	bgt.n	800256a <__aeabi_dmul+0x47a>
 8002568:	e71e      	b.n	80023a8 <__aeabi_dmul+0x2b8>
 800256a:	4656      	mov	r6, sl
 800256c:	3b08      	subs	r3, #8
 800256e:	2200      	movs	r2, #0
 8002570:	409e      	lsls	r6, r3
 8002572:	e723      	b.n	80023bc <__aeabi_dmul+0x2cc>
 8002574:	9b00      	ldr	r3, [sp, #0]
 8002576:	469c      	mov	ip, r3
 8002578:	e6e6      	b.n	8002348 <__aeabi_dmul+0x258>
 800257a:	4912      	ldr	r1, [pc, #72]	; (80025c4 <__aeabi_dmul+0x4d4>)
 800257c:	0022      	movs	r2, r4
 800257e:	4461      	add	r1, ip
 8002580:	002e      	movs	r6, r5
 8002582:	408d      	lsls	r5, r1
 8002584:	408a      	lsls	r2, r1
 8002586:	40c6      	lsrs	r6, r0
 8002588:	1e69      	subs	r1, r5, #1
 800258a:	418d      	sbcs	r5, r1
 800258c:	4332      	orrs	r2, r6
 800258e:	432a      	orrs	r2, r5
 8002590:	40c4      	lsrs	r4, r0
 8002592:	0753      	lsls	r3, r2, #29
 8002594:	d0b6      	beq.n	8002504 <__aeabi_dmul+0x414>
 8002596:	210f      	movs	r1, #15
 8002598:	4011      	ands	r1, r2
 800259a:	2904      	cmp	r1, #4
 800259c:	d1ac      	bne.n	80024f8 <__aeabi_dmul+0x408>
 800259e:	e7b1      	b.n	8002504 <__aeabi_dmul+0x414>
 80025a0:	0765      	lsls	r5, r4, #29
 80025a2:	0264      	lsls	r4, r4, #9
 80025a4:	0b24      	lsrs	r4, r4, #12
 80025a6:	08d2      	lsrs	r2, r2, #3
 80025a8:	4315      	orrs	r5, r2
 80025aa:	2200      	movs	r2, #0
 80025ac:	e601      	b.n	80021b2 <__aeabi_dmul+0xc2>
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	0312      	lsls	r2, r2, #12
 80025b2:	4314      	orrs	r4, r2
 80025b4:	0324      	lsls	r4, r4, #12
 80025b6:	4a01      	ldr	r2, [pc, #4]	; (80025bc <__aeabi_dmul+0x4cc>)
 80025b8:	0b24      	lsrs	r4, r4, #12
 80025ba:	e5fa      	b.n	80021b2 <__aeabi_dmul+0xc2>
 80025bc:	000007ff 	.word	0x000007ff
 80025c0:	0000043e 	.word	0x0000043e
 80025c4:	0000041e 	.word	0x0000041e

080025c8 <__aeabi_dsub>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	4657      	mov	r7, sl
 80025cc:	464e      	mov	r6, r9
 80025ce:	4645      	mov	r5, r8
 80025d0:	46de      	mov	lr, fp
 80025d2:	b5e0      	push	{r5, r6, r7, lr}
 80025d4:	001e      	movs	r6, r3
 80025d6:	0017      	movs	r7, r2
 80025d8:	004a      	lsls	r2, r1, #1
 80025da:	030b      	lsls	r3, r1, #12
 80025dc:	0d52      	lsrs	r2, r2, #21
 80025de:	0a5b      	lsrs	r3, r3, #9
 80025e0:	4690      	mov	r8, r2
 80025e2:	0f42      	lsrs	r2, r0, #29
 80025e4:	431a      	orrs	r2, r3
 80025e6:	0fcd      	lsrs	r5, r1, #31
 80025e8:	4ccd      	ldr	r4, [pc, #820]	; (8002920 <__aeabi_dsub+0x358>)
 80025ea:	0331      	lsls	r1, r6, #12
 80025ec:	00c3      	lsls	r3, r0, #3
 80025ee:	4694      	mov	ip, r2
 80025f0:	0070      	lsls	r0, r6, #1
 80025f2:	0f7a      	lsrs	r2, r7, #29
 80025f4:	0a49      	lsrs	r1, r1, #9
 80025f6:	00ff      	lsls	r7, r7, #3
 80025f8:	469a      	mov	sl, r3
 80025fa:	46b9      	mov	r9, r7
 80025fc:	0d40      	lsrs	r0, r0, #21
 80025fe:	0ff6      	lsrs	r6, r6, #31
 8002600:	4311      	orrs	r1, r2
 8002602:	42a0      	cmp	r0, r4
 8002604:	d100      	bne.n	8002608 <__aeabi_dsub+0x40>
 8002606:	e0b1      	b.n	800276c <__aeabi_dsub+0x1a4>
 8002608:	2201      	movs	r2, #1
 800260a:	4056      	eors	r6, r2
 800260c:	46b3      	mov	fp, r6
 800260e:	42b5      	cmp	r5, r6
 8002610:	d100      	bne.n	8002614 <__aeabi_dsub+0x4c>
 8002612:	e088      	b.n	8002726 <__aeabi_dsub+0x15e>
 8002614:	4642      	mov	r2, r8
 8002616:	1a12      	subs	r2, r2, r0
 8002618:	2a00      	cmp	r2, #0
 800261a:	dc00      	bgt.n	800261e <__aeabi_dsub+0x56>
 800261c:	e0ae      	b.n	800277c <__aeabi_dsub+0x1b4>
 800261e:	2800      	cmp	r0, #0
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x5c>
 8002622:	e0c1      	b.n	80027a8 <__aeabi_dsub+0x1e0>
 8002624:	48be      	ldr	r0, [pc, #760]	; (8002920 <__aeabi_dsub+0x358>)
 8002626:	4580      	cmp	r8, r0
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x64>
 800262a:	e151      	b.n	80028d0 <__aeabi_dsub+0x308>
 800262c:	2080      	movs	r0, #128	; 0x80
 800262e:	0400      	lsls	r0, r0, #16
 8002630:	4301      	orrs	r1, r0
 8002632:	2a38      	cmp	r2, #56	; 0x38
 8002634:	dd00      	ble.n	8002638 <__aeabi_dsub+0x70>
 8002636:	e17b      	b.n	8002930 <__aeabi_dsub+0x368>
 8002638:	2a1f      	cmp	r2, #31
 800263a:	dd00      	ble.n	800263e <__aeabi_dsub+0x76>
 800263c:	e1ee      	b.n	8002a1c <__aeabi_dsub+0x454>
 800263e:	2020      	movs	r0, #32
 8002640:	003e      	movs	r6, r7
 8002642:	1a80      	subs	r0, r0, r2
 8002644:	000c      	movs	r4, r1
 8002646:	40d6      	lsrs	r6, r2
 8002648:	40d1      	lsrs	r1, r2
 800264a:	4087      	lsls	r7, r0
 800264c:	4662      	mov	r2, ip
 800264e:	4084      	lsls	r4, r0
 8002650:	1a52      	subs	r2, r2, r1
 8002652:	1e78      	subs	r0, r7, #1
 8002654:	4187      	sbcs	r7, r0
 8002656:	4694      	mov	ip, r2
 8002658:	4334      	orrs	r4, r6
 800265a:	4327      	orrs	r7, r4
 800265c:	1bdc      	subs	r4, r3, r7
 800265e:	42a3      	cmp	r3, r4
 8002660:	419b      	sbcs	r3, r3
 8002662:	4662      	mov	r2, ip
 8002664:	425b      	negs	r3, r3
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	4699      	mov	r9, r3
 800266a:	464b      	mov	r3, r9
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	d400      	bmi.n	8002672 <__aeabi_dsub+0xaa>
 8002670:	e118      	b.n	80028a4 <__aeabi_dsub+0x2dc>
 8002672:	464b      	mov	r3, r9
 8002674:	0258      	lsls	r0, r3, #9
 8002676:	0a43      	lsrs	r3, r0, #9
 8002678:	4699      	mov	r9, r3
 800267a:	464b      	mov	r3, r9
 800267c:	2b00      	cmp	r3, #0
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0xba>
 8002680:	e137      	b.n	80028f2 <__aeabi_dsub+0x32a>
 8002682:	4648      	mov	r0, r9
 8002684:	f000 fc64 	bl	8002f50 <__clzsi2>
 8002688:	0001      	movs	r1, r0
 800268a:	3908      	subs	r1, #8
 800268c:	2320      	movs	r3, #32
 800268e:	0022      	movs	r2, r4
 8002690:	4648      	mov	r0, r9
 8002692:	1a5b      	subs	r3, r3, r1
 8002694:	40da      	lsrs	r2, r3
 8002696:	4088      	lsls	r0, r1
 8002698:	408c      	lsls	r4, r1
 800269a:	4643      	mov	r3, r8
 800269c:	4310      	orrs	r0, r2
 800269e:	4588      	cmp	r8, r1
 80026a0:	dd00      	ble.n	80026a4 <__aeabi_dsub+0xdc>
 80026a2:	e136      	b.n	8002912 <__aeabi_dsub+0x34a>
 80026a4:	1ac9      	subs	r1, r1, r3
 80026a6:	1c4b      	adds	r3, r1, #1
 80026a8:	2b1f      	cmp	r3, #31
 80026aa:	dd00      	ble.n	80026ae <__aeabi_dsub+0xe6>
 80026ac:	e0ea      	b.n	8002884 <__aeabi_dsub+0x2bc>
 80026ae:	2220      	movs	r2, #32
 80026b0:	0026      	movs	r6, r4
 80026b2:	1ad2      	subs	r2, r2, r3
 80026b4:	0001      	movs	r1, r0
 80026b6:	4094      	lsls	r4, r2
 80026b8:	40de      	lsrs	r6, r3
 80026ba:	40d8      	lsrs	r0, r3
 80026bc:	2300      	movs	r3, #0
 80026be:	4091      	lsls	r1, r2
 80026c0:	1e62      	subs	r2, r4, #1
 80026c2:	4194      	sbcs	r4, r2
 80026c4:	4681      	mov	r9, r0
 80026c6:	4698      	mov	r8, r3
 80026c8:	4331      	orrs	r1, r6
 80026ca:	430c      	orrs	r4, r1
 80026cc:	0763      	lsls	r3, r4, #29
 80026ce:	d009      	beq.n	80026e4 <__aeabi_dsub+0x11c>
 80026d0:	230f      	movs	r3, #15
 80026d2:	4023      	ands	r3, r4
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d005      	beq.n	80026e4 <__aeabi_dsub+0x11c>
 80026d8:	1d23      	adds	r3, r4, #4
 80026da:	42a3      	cmp	r3, r4
 80026dc:	41a4      	sbcs	r4, r4
 80026de:	4264      	negs	r4, r4
 80026e0:	44a1      	add	r9, r4
 80026e2:	001c      	movs	r4, r3
 80026e4:	464b      	mov	r3, r9
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	d400      	bmi.n	80026ec <__aeabi_dsub+0x124>
 80026ea:	e0de      	b.n	80028aa <__aeabi_dsub+0x2e2>
 80026ec:	4641      	mov	r1, r8
 80026ee:	4b8c      	ldr	r3, [pc, #560]	; (8002920 <__aeabi_dsub+0x358>)
 80026f0:	3101      	adds	r1, #1
 80026f2:	4299      	cmp	r1, r3
 80026f4:	d100      	bne.n	80026f8 <__aeabi_dsub+0x130>
 80026f6:	e0e7      	b.n	80028c8 <__aeabi_dsub+0x300>
 80026f8:	464b      	mov	r3, r9
 80026fa:	488a      	ldr	r0, [pc, #552]	; (8002924 <__aeabi_dsub+0x35c>)
 80026fc:	08e4      	lsrs	r4, r4, #3
 80026fe:	4003      	ands	r3, r0
 8002700:	0018      	movs	r0, r3
 8002702:	0549      	lsls	r1, r1, #21
 8002704:	075b      	lsls	r3, r3, #29
 8002706:	0240      	lsls	r0, r0, #9
 8002708:	4323      	orrs	r3, r4
 800270a:	0d4a      	lsrs	r2, r1, #21
 800270c:	0b04      	lsrs	r4, r0, #12
 800270e:	0512      	lsls	r2, r2, #20
 8002710:	07ed      	lsls	r5, r5, #31
 8002712:	4322      	orrs	r2, r4
 8002714:	432a      	orrs	r2, r5
 8002716:	0018      	movs	r0, r3
 8002718:	0011      	movs	r1, r2
 800271a:	bcf0      	pop	{r4, r5, r6, r7}
 800271c:	46bb      	mov	fp, r7
 800271e:	46b2      	mov	sl, r6
 8002720:	46a9      	mov	r9, r5
 8002722:	46a0      	mov	r8, r4
 8002724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002726:	4642      	mov	r2, r8
 8002728:	1a12      	subs	r2, r2, r0
 800272a:	2a00      	cmp	r2, #0
 800272c:	dd52      	ble.n	80027d4 <__aeabi_dsub+0x20c>
 800272e:	2800      	cmp	r0, #0
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x16c>
 8002732:	e09c      	b.n	800286e <__aeabi_dsub+0x2a6>
 8002734:	45a0      	cmp	r8, r4
 8002736:	d100      	bne.n	800273a <__aeabi_dsub+0x172>
 8002738:	e0ca      	b.n	80028d0 <__aeabi_dsub+0x308>
 800273a:	2080      	movs	r0, #128	; 0x80
 800273c:	0400      	lsls	r0, r0, #16
 800273e:	4301      	orrs	r1, r0
 8002740:	2a38      	cmp	r2, #56	; 0x38
 8002742:	dd00      	ble.n	8002746 <__aeabi_dsub+0x17e>
 8002744:	e149      	b.n	80029da <__aeabi_dsub+0x412>
 8002746:	2a1f      	cmp	r2, #31
 8002748:	dc00      	bgt.n	800274c <__aeabi_dsub+0x184>
 800274a:	e197      	b.n	8002a7c <__aeabi_dsub+0x4b4>
 800274c:	0010      	movs	r0, r2
 800274e:	000e      	movs	r6, r1
 8002750:	3820      	subs	r0, #32
 8002752:	40c6      	lsrs	r6, r0
 8002754:	2a20      	cmp	r2, #32
 8002756:	d004      	beq.n	8002762 <__aeabi_dsub+0x19a>
 8002758:	2040      	movs	r0, #64	; 0x40
 800275a:	1a82      	subs	r2, r0, r2
 800275c:	4091      	lsls	r1, r2
 800275e:	430f      	orrs	r7, r1
 8002760:	46b9      	mov	r9, r7
 8002762:	464c      	mov	r4, r9
 8002764:	1e62      	subs	r2, r4, #1
 8002766:	4194      	sbcs	r4, r2
 8002768:	4334      	orrs	r4, r6
 800276a:	e13a      	b.n	80029e2 <__aeabi_dsub+0x41a>
 800276c:	000a      	movs	r2, r1
 800276e:	433a      	orrs	r2, r7
 8002770:	d028      	beq.n	80027c4 <__aeabi_dsub+0x1fc>
 8002772:	46b3      	mov	fp, r6
 8002774:	42b5      	cmp	r5, r6
 8002776:	d02b      	beq.n	80027d0 <__aeabi_dsub+0x208>
 8002778:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <__aeabi_dsub+0x360>)
 800277a:	4442      	add	r2, r8
 800277c:	2a00      	cmp	r2, #0
 800277e:	d05d      	beq.n	800283c <__aeabi_dsub+0x274>
 8002780:	4642      	mov	r2, r8
 8002782:	4644      	mov	r4, r8
 8002784:	1a82      	subs	r2, r0, r2
 8002786:	2c00      	cmp	r4, #0
 8002788:	d000      	beq.n	800278c <__aeabi_dsub+0x1c4>
 800278a:	e0f5      	b.n	8002978 <__aeabi_dsub+0x3b0>
 800278c:	4665      	mov	r5, ip
 800278e:	431d      	orrs	r5, r3
 8002790:	d100      	bne.n	8002794 <__aeabi_dsub+0x1cc>
 8002792:	e19c      	b.n	8002ace <__aeabi_dsub+0x506>
 8002794:	1e55      	subs	r5, r2, #1
 8002796:	2a01      	cmp	r2, #1
 8002798:	d100      	bne.n	800279c <__aeabi_dsub+0x1d4>
 800279a:	e1fb      	b.n	8002b94 <__aeabi_dsub+0x5cc>
 800279c:	4c60      	ldr	r4, [pc, #384]	; (8002920 <__aeabi_dsub+0x358>)
 800279e:	42a2      	cmp	r2, r4
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x1dc>
 80027a2:	e1bd      	b.n	8002b20 <__aeabi_dsub+0x558>
 80027a4:	002a      	movs	r2, r5
 80027a6:	e0f0      	b.n	800298a <__aeabi_dsub+0x3c2>
 80027a8:	0008      	movs	r0, r1
 80027aa:	4338      	orrs	r0, r7
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x1e8>
 80027ae:	e0c3      	b.n	8002938 <__aeabi_dsub+0x370>
 80027b0:	1e50      	subs	r0, r2, #1
 80027b2:	2a01      	cmp	r2, #1
 80027b4:	d100      	bne.n	80027b8 <__aeabi_dsub+0x1f0>
 80027b6:	e1a8      	b.n	8002b0a <__aeabi_dsub+0x542>
 80027b8:	4c59      	ldr	r4, [pc, #356]	; (8002920 <__aeabi_dsub+0x358>)
 80027ba:	42a2      	cmp	r2, r4
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dsub+0x1f8>
 80027be:	e087      	b.n	80028d0 <__aeabi_dsub+0x308>
 80027c0:	0002      	movs	r2, r0
 80027c2:	e736      	b.n	8002632 <__aeabi_dsub+0x6a>
 80027c4:	2201      	movs	r2, #1
 80027c6:	4056      	eors	r6, r2
 80027c8:	46b3      	mov	fp, r6
 80027ca:	42b5      	cmp	r5, r6
 80027cc:	d000      	beq.n	80027d0 <__aeabi_dsub+0x208>
 80027ce:	e721      	b.n	8002614 <__aeabi_dsub+0x4c>
 80027d0:	4a55      	ldr	r2, [pc, #340]	; (8002928 <__aeabi_dsub+0x360>)
 80027d2:	4442      	add	r2, r8
 80027d4:	2a00      	cmp	r2, #0
 80027d6:	d100      	bne.n	80027da <__aeabi_dsub+0x212>
 80027d8:	e0b5      	b.n	8002946 <__aeabi_dsub+0x37e>
 80027da:	4642      	mov	r2, r8
 80027dc:	4644      	mov	r4, r8
 80027de:	1a82      	subs	r2, r0, r2
 80027e0:	2c00      	cmp	r4, #0
 80027e2:	d100      	bne.n	80027e6 <__aeabi_dsub+0x21e>
 80027e4:	e138      	b.n	8002a58 <__aeabi_dsub+0x490>
 80027e6:	4e4e      	ldr	r6, [pc, #312]	; (8002920 <__aeabi_dsub+0x358>)
 80027e8:	42b0      	cmp	r0, r6
 80027ea:	d100      	bne.n	80027ee <__aeabi_dsub+0x226>
 80027ec:	e1de      	b.n	8002bac <__aeabi_dsub+0x5e4>
 80027ee:	2680      	movs	r6, #128	; 0x80
 80027f0:	4664      	mov	r4, ip
 80027f2:	0436      	lsls	r6, r6, #16
 80027f4:	4334      	orrs	r4, r6
 80027f6:	46a4      	mov	ip, r4
 80027f8:	2a38      	cmp	r2, #56	; 0x38
 80027fa:	dd00      	ble.n	80027fe <__aeabi_dsub+0x236>
 80027fc:	e196      	b.n	8002b2c <__aeabi_dsub+0x564>
 80027fe:	2a1f      	cmp	r2, #31
 8002800:	dd00      	ble.n	8002804 <__aeabi_dsub+0x23c>
 8002802:	e224      	b.n	8002c4e <__aeabi_dsub+0x686>
 8002804:	2620      	movs	r6, #32
 8002806:	1ab4      	subs	r4, r6, r2
 8002808:	46a2      	mov	sl, r4
 800280a:	4664      	mov	r4, ip
 800280c:	4656      	mov	r6, sl
 800280e:	40b4      	lsls	r4, r6
 8002810:	46a1      	mov	r9, r4
 8002812:	001c      	movs	r4, r3
 8002814:	464e      	mov	r6, r9
 8002816:	40d4      	lsrs	r4, r2
 8002818:	4326      	orrs	r6, r4
 800281a:	0034      	movs	r4, r6
 800281c:	4656      	mov	r6, sl
 800281e:	40b3      	lsls	r3, r6
 8002820:	1e5e      	subs	r6, r3, #1
 8002822:	41b3      	sbcs	r3, r6
 8002824:	431c      	orrs	r4, r3
 8002826:	4663      	mov	r3, ip
 8002828:	40d3      	lsrs	r3, r2
 800282a:	18c9      	adds	r1, r1, r3
 800282c:	19e4      	adds	r4, r4, r7
 800282e:	42bc      	cmp	r4, r7
 8002830:	41bf      	sbcs	r7, r7
 8002832:	427f      	negs	r7, r7
 8002834:	46b9      	mov	r9, r7
 8002836:	4680      	mov	r8, r0
 8002838:	4489      	add	r9, r1
 800283a:	e0d8      	b.n	80029ee <__aeabi_dsub+0x426>
 800283c:	4640      	mov	r0, r8
 800283e:	4c3b      	ldr	r4, [pc, #236]	; (800292c <__aeabi_dsub+0x364>)
 8002840:	3001      	adds	r0, #1
 8002842:	4220      	tst	r0, r4
 8002844:	d000      	beq.n	8002848 <__aeabi_dsub+0x280>
 8002846:	e0b4      	b.n	80029b2 <__aeabi_dsub+0x3ea>
 8002848:	4640      	mov	r0, r8
 800284a:	2800      	cmp	r0, #0
 800284c:	d000      	beq.n	8002850 <__aeabi_dsub+0x288>
 800284e:	e144      	b.n	8002ada <__aeabi_dsub+0x512>
 8002850:	4660      	mov	r0, ip
 8002852:	4318      	orrs	r0, r3
 8002854:	d100      	bne.n	8002858 <__aeabi_dsub+0x290>
 8002856:	e190      	b.n	8002b7a <__aeabi_dsub+0x5b2>
 8002858:	0008      	movs	r0, r1
 800285a:	4338      	orrs	r0, r7
 800285c:	d000      	beq.n	8002860 <__aeabi_dsub+0x298>
 800285e:	e1aa      	b.n	8002bb6 <__aeabi_dsub+0x5ee>
 8002860:	4661      	mov	r1, ip
 8002862:	08db      	lsrs	r3, r3, #3
 8002864:	0749      	lsls	r1, r1, #29
 8002866:	430b      	orrs	r3, r1
 8002868:	4661      	mov	r1, ip
 800286a:	08cc      	lsrs	r4, r1, #3
 800286c:	e027      	b.n	80028be <__aeabi_dsub+0x2f6>
 800286e:	0008      	movs	r0, r1
 8002870:	4338      	orrs	r0, r7
 8002872:	d061      	beq.n	8002938 <__aeabi_dsub+0x370>
 8002874:	1e50      	subs	r0, r2, #1
 8002876:	2a01      	cmp	r2, #1
 8002878:	d100      	bne.n	800287c <__aeabi_dsub+0x2b4>
 800287a:	e139      	b.n	8002af0 <__aeabi_dsub+0x528>
 800287c:	42a2      	cmp	r2, r4
 800287e:	d027      	beq.n	80028d0 <__aeabi_dsub+0x308>
 8002880:	0002      	movs	r2, r0
 8002882:	e75d      	b.n	8002740 <__aeabi_dsub+0x178>
 8002884:	0002      	movs	r2, r0
 8002886:	391f      	subs	r1, #31
 8002888:	40ca      	lsrs	r2, r1
 800288a:	0011      	movs	r1, r2
 800288c:	2b20      	cmp	r3, #32
 800288e:	d003      	beq.n	8002898 <__aeabi_dsub+0x2d0>
 8002890:	2240      	movs	r2, #64	; 0x40
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	4098      	lsls	r0, r3
 8002896:	4304      	orrs	r4, r0
 8002898:	1e63      	subs	r3, r4, #1
 800289a:	419c      	sbcs	r4, r3
 800289c:	2300      	movs	r3, #0
 800289e:	4699      	mov	r9, r3
 80028a0:	4698      	mov	r8, r3
 80028a2:	430c      	orrs	r4, r1
 80028a4:	0763      	lsls	r3, r4, #29
 80028a6:	d000      	beq.n	80028aa <__aeabi_dsub+0x2e2>
 80028a8:	e712      	b.n	80026d0 <__aeabi_dsub+0x108>
 80028aa:	464b      	mov	r3, r9
 80028ac:	464a      	mov	r2, r9
 80028ae:	08e4      	lsrs	r4, r4, #3
 80028b0:	075b      	lsls	r3, r3, #29
 80028b2:	4323      	orrs	r3, r4
 80028b4:	08d4      	lsrs	r4, r2, #3
 80028b6:	4642      	mov	r2, r8
 80028b8:	4919      	ldr	r1, [pc, #100]	; (8002920 <__aeabi_dsub+0x358>)
 80028ba:	428a      	cmp	r2, r1
 80028bc:	d00e      	beq.n	80028dc <__aeabi_dsub+0x314>
 80028be:	0324      	lsls	r4, r4, #12
 80028c0:	0552      	lsls	r2, r2, #21
 80028c2:	0b24      	lsrs	r4, r4, #12
 80028c4:	0d52      	lsrs	r2, r2, #21
 80028c6:	e722      	b.n	800270e <__aeabi_dsub+0x146>
 80028c8:	000a      	movs	r2, r1
 80028ca:	2400      	movs	r4, #0
 80028cc:	2300      	movs	r3, #0
 80028ce:	e71e      	b.n	800270e <__aeabi_dsub+0x146>
 80028d0:	08db      	lsrs	r3, r3, #3
 80028d2:	4662      	mov	r2, ip
 80028d4:	0752      	lsls	r2, r2, #29
 80028d6:	4313      	orrs	r3, r2
 80028d8:	4662      	mov	r2, ip
 80028da:	08d4      	lsrs	r4, r2, #3
 80028dc:	001a      	movs	r2, r3
 80028de:	4322      	orrs	r2, r4
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x31c>
 80028e2:	e1fc      	b.n	8002cde <__aeabi_dsub+0x716>
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	0312      	lsls	r2, r2, #12
 80028e8:	4314      	orrs	r4, r2
 80028ea:	0324      	lsls	r4, r4, #12
 80028ec:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <__aeabi_dsub+0x358>)
 80028ee:	0b24      	lsrs	r4, r4, #12
 80028f0:	e70d      	b.n	800270e <__aeabi_dsub+0x146>
 80028f2:	0020      	movs	r0, r4
 80028f4:	f000 fb2c 	bl	8002f50 <__clzsi2>
 80028f8:	0001      	movs	r1, r0
 80028fa:	3118      	adds	r1, #24
 80028fc:	291f      	cmp	r1, #31
 80028fe:	dc00      	bgt.n	8002902 <__aeabi_dsub+0x33a>
 8002900:	e6c4      	b.n	800268c <__aeabi_dsub+0xc4>
 8002902:	3808      	subs	r0, #8
 8002904:	4084      	lsls	r4, r0
 8002906:	4643      	mov	r3, r8
 8002908:	0020      	movs	r0, r4
 800290a:	2400      	movs	r4, #0
 800290c:	4588      	cmp	r8, r1
 800290e:	dc00      	bgt.n	8002912 <__aeabi_dsub+0x34a>
 8002910:	e6c8      	b.n	80026a4 <__aeabi_dsub+0xdc>
 8002912:	4a04      	ldr	r2, [pc, #16]	; (8002924 <__aeabi_dsub+0x35c>)
 8002914:	1a5b      	subs	r3, r3, r1
 8002916:	4010      	ands	r0, r2
 8002918:	4698      	mov	r8, r3
 800291a:	4681      	mov	r9, r0
 800291c:	e6d6      	b.n	80026cc <__aeabi_dsub+0x104>
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	000007ff 	.word	0x000007ff
 8002924:	ff7fffff 	.word	0xff7fffff
 8002928:	fffff801 	.word	0xfffff801
 800292c:	000007fe 	.word	0x000007fe
 8002930:	430f      	orrs	r7, r1
 8002932:	1e7a      	subs	r2, r7, #1
 8002934:	4197      	sbcs	r7, r2
 8002936:	e691      	b.n	800265c <__aeabi_dsub+0x94>
 8002938:	4661      	mov	r1, ip
 800293a:	08db      	lsrs	r3, r3, #3
 800293c:	0749      	lsls	r1, r1, #29
 800293e:	430b      	orrs	r3, r1
 8002940:	4661      	mov	r1, ip
 8002942:	08cc      	lsrs	r4, r1, #3
 8002944:	e7b8      	b.n	80028b8 <__aeabi_dsub+0x2f0>
 8002946:	4640      	mov	r0, r8
 8002948:	4cd3      	ldr	r4, [pc, #844]	; (8002c98 <__aeabi_dsub+0x6d0>)
 800294a:	3001      	adds	r0, #1
 800294c:	4220      	tst	r0, r4
 800294e:	d000      	beq.n	8002952 <__aeabi_dsub+0x38a>
 8002950:	e0a2      	b.n	8002a98 <__aeabi_dsub+0x4d0>
 8002952:	4640      	mov	r0, r8
 8002954:	2800      	cmp	r0, #0
 8002956:	d000      	beq.n	800295a <__aeabi_dsub+0x392>
 8002958:	e101      	b.n	8002b5e <__aeabi_dsub+0x596>
 800295a:	4660      	mov	r0, ip
 800295c:	4318      	orrs	r0, r3
 800295e:	d100      	bne.n	8002962 <__aeabi_dsub+0x39a>
 8002960:	e15e      	b.n	8002c20 <__aeabi_dsub+0x658>
 8002962:	0008      	movs	r0, r1
 8002964:	4338      	orrs	r0, r7
 8002966:	d000      	beq.n	800296a <__aeabi_dsub+0x3a2>
 8002968:	e15f      	b.n	8002c2a <__aeabi_dsub+0x662>
 800296a:	4661      	mov	r1, ip
 800296c:	08db      	lsrs	r3, r3, #3
 800296e:	0749      	lsls	r1, r1, #29
 8002970:	430b      	orrs	r3, r1
 8002972:	4661      	mov	r1, ip
 8002974:	08cc      	lsrs	r4, r1, #3
 8002976:	e7a2      	b.n	80028be <__aeabi_dsub+0x2f6>
 8002978:	4dc8      	ldr	r5, [pc, #800]	; (8002c9c <__aeabi_dsub+0x6d4>)
 800297a:	42a8      	cmp	r0, r5
 800297c:	d100      	bne.n	8002980 <__aeabi_dsub+0x3b8>
 800297e:	e0cf      	b.n	8002b20 <__aeabi_dsub+0x558>
 8002980:	2580      	movs	r5, #128	; 0x80
 8002982:	4664      	mov	r4, ip
 8002984:	042d      	lsls	r5, r5, #16
 8002986:	432c      	orrs	r4, r5
 8002988:	46a4      	mov	ip, r4
 800298a:	2a38      	cmp	r2, #56	; 0x38
 800298c:	dc56      	bgt.n	8002a3c <__aeabi_dsub+0x474>
 800298e:	2a1f      	cmp	r2, #31
 8002990:	dd00      	ble.n	8002994 <__aeabi_dsub+0x3cc>
 8002992:	e0d1      	b.n	8002b38 <__aeabi_dsub+0x570>
 8002994:	2520      	movs	r5, #32
 8002996:	001e      	movs	r6, r3
 8002998:	1aad      	subs	r5, r5, r2
 800299a:	4664      	mov	r4, ip
 800299c:	40ab      	lsls	r3, r5
 800299e:	40ac      	lsls	r4, r5
 80029a0:	40d6      	lsrs	r6, r2
 80029a2:	1e5d      	subs	r5, r3, #1
 80029a4:	41ab      	sbcs	r3, r5
 80029a6:	4334      	orrs	r4, r6
 80029a8:	4323      	orrs	r3, r4
 80029aa:	4664      	mov	r4, ip
 80029ac:	40d4      	lsrs	r4, r2
 80029ae:	1b09      	subs	r1, r1, r4
 80029b0:	e049      	b.n	8002a46 <__aeabi_dsub+0x47e>
 80029b2:	4660      	mov	r0, ip
 80029b4:	1bdc      	subs	r4, r3, r7
 80029b6:	1a46      	subs	r6, r0, r1
 80029b8:	42a3      	cmp	r3, r4
 80029ba:	4180      	sbcs	r0, r0
 80029bc:	4240      	negs	r0, r0
 80029be:	4681      	mov	r9, r0
 80029c0:	0030      	movs	r0, r6
 80029c2:	464e      	mov	r6, r9
 80029c4:	1b80      	subs	r0, r0, r6
 80029c6:	4681      	mov	r9, r0
 80029c8:	0200      	lsls	r0, r0, #8
 80029ca:	d476      	bmi.n	8002aba <__aeabi_dsub+0x4f2>
 80029cc:	464b      	mov	r3, r9
 80029ce:	4323      	orrs	r3, r4
 80029d0:	d000      	beq.n	80029d4 <__aeabi_dsub+0x40c>
 80029d2:	e652      	b.n	800267a <__aeabi_dsub+0xb2>
 80029d4:	2400      	movs	r4, #0
 80029d6:	2500      	movs	r5, #0
 80029d8:	e771      	b.n	80028be <__aeabi_dsub+0x2f6>
 80029da:	4339      	orrs	r1, r7
 80029dc:	000c      	movs	r4, r1
 80029de:	1e62      	subs	r2, r4, #1
 80029e0:	4194      	sbcs	r4, r2
 80029e2:	18e4      	adds	r4, r4, r3
 80029e4:	429c      	cmp	r4, r3
 80029e6:	419b      	sbcs	r3, r3
 80029e8:	425b      	negs	r3, r3
 80029ea:	4463      	add	r3, ip
 80029ec:	4699      	mov	r9, r3
 80029ee:	464b      	mov	r3, r9
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	d400      	bmi.n	80029f6 <__aeabi_dsub+0x42e>
 80029f4:	e756      	b.n	80028a4 <__aeabi_dsub+0x2dc>
 80029f6:	2301      	movs	r3, #1
 80029f8:	469c      	mov	ip, r3
 80029fa:	4ba8      	ldr	r3, [pc, #672]	; (8002c9c <__aeabi_dsub+0x6d4>)
 80029fc:	44e0      	add	r8, ip
 80029fe:	4598      	cmp	r8, r3
 8002a00:	d038      	beq.n	8002a74 <__aeabi_dsub+0x4ac>
 8002a02:	464b      	mov	r3, r9
 8002a04:	48a6      	ldr	r0, [pc, #664]	; (8002ca0 <__aeabi_dsub+0x6d8>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	4003      	ands	r3, r0
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	0863      	lsrs	r3, r4, #1
 8002a0e:	4014      	ands	r4, r2
 8002a10:	431c      	orrs	r4, r3
 8002a12:	07c3      	lsls	r3, r0, #31
 8002a14:	431c      	orrs	r4, r3
 8002a16:	0843      	lsrs	r3, r0, #1
 8002a18:	4699      	mov	r9, r3
 8002a1a:	e657      	b.n	80026cc <__aeabi_dsub+0x104>
 8002a1c:	0010      	movs	r0, r2
 8002a1e:	000e      	movs	r6, r1
 8002a20:	3820      	subs	r0, #32
 8002a22:	40c6      	lsrs	r6, r0
 8002a24:	2a20      	cmp	r2, #32
 8002a26:	d004      	beq.n	8002a32 <__aeabi_dsub+0x46a>
 8002a28:	2040      	movs	r0, #64	; 0x40
 8002a2a:	1a82      	subs	r2, r0, r2
 8002a2c:	4091      	lsls	r1, r2
 8002a2e:	430f      	orrs	r7, r1
 8002a30:	46b9      	mov	r9, r7
 8002a32:	464f      	mov	r7, r9
 8002a34:	1e7a      	subs	r2, r7, #1
 8002a36:	4197      	sbcs	r7, r2
 8002a38:	4337      	orrs	r7, r6
 8002a3a:	e60f      	b.n	800265c <__aeabi_dsub+0x94>
 8002a3c:	4662      	mov	r2, ip
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	0013      	movs	r3, r2
 8002a42:	1e5a      	subs	r2, r3, #1
 8002a44:	4193      	sbcs	r3, r2
 8002a46:	1afc      	subs	r4, r7, r3
 8002a48:	42a7      	cmp	r7, r4
 8002a4a:	41bf      	sbcs	r7, r7
 8002a4c:	427f      	negs	r7, r7
 8002a4e:	1bcb      	subs	r3, r1, r7
 8002a50:	4699      	mov	r9, r3
 8002a52:	465d      	mov	r5, fp
 8002a54:	4680      	mov	r8, r0
 8002a56:	e608      	b.n	800266a <__aeabi_dsub+0xa2>
 8002a58:	4666      	mov	r6, ip
 8002a5a:	431e      	orrs	r6, r3
 8002a5c:	d100      	bne.n	8002a60 <__aeabi_dsub+0x498>
 8002a5e:	e0be      	b.n	8002bde <__aeabi_dsub+0x616>
 8002a60:	1e56      	subs	r6, r2, #1
 8002a62:	2a01      	cmp	r2, #1
 8002a64:	d100      	bne.n	8002a68 <__aeabi_dsub+0x4a0>
 8002a66:	e109      	b.n	8002c7c <__aeabi_dsub+0x6b4>
 8002a68:	4c8c      	ldr	r4, [pc, #560]	; (8002c9c <__aeabi_dsub+0x6d4>)
 8002a6a:	42a2      	cmp	r2, r4
 8002a6c:	d100      	bne.n	8002a70 <__aeabi_dsub+0x4a8>
 8002a6e:	e119      	b.n	8002ca4 <__aeabi_dsub+0x6dc>
 8002a70:	0032      	movs	r2, r6
 8002a72:	e6c1      	b.n	80027f8 <__aeabi_dsub+0x230>
 8002a74:	4642      	mov	r2, r8
 8002a76:	2400      	movs	r4, #0
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e648      	b.n	800270e <__aeabi_dsub+0x146>
 8002a7c:	2020      	movs	r0, #32
 8002a7e:	000c      	movs	r4, r1
 8002a80:	1a80      	subs	r0, r0, r2
 8002a82:	003e      	movs	r6, r7
 8002a84:	4087      	lsls	r7, r0
 8002a86:	4084      	lsls	r4, r0
 8002a88:	40d6      	lsrs	r6, r2
 8002a8a:	1e78      	subs	r0, r7, #1
 8002a8c:	4187      	sbcs	r7, r0
 8002a8e:	40d1      	lsrs	r1, r2
 8002a90:	4334      	orrs	r4, r6
 8002a92:	433c      	orrs	r4, r7
 8002a94:	448c      	add	ip, r1
 8002a96:	e7a4      	b.n	80029e2 <__aeabi_dsub+0x41a>
 8002a98:	4a80      	ldr	r2, [pc, #512]	; (8002c9c <__aeabi_dsub+0x6d4>)
 8002a9a:	4290      	cmp	r0, r2
 8002a9c:	d100      	bne.n	8002aa0 <__aeabi_dsub+0x4d8>
 8002a9e:	e0e9      	b.n	8002c74 <__aeabi_dsub+0x6ac>
 8002aa0:	19df      	adds	r7, r3, r7
 8002aa2:	429f      	cmp	r7, r3
 8002aa4:	419b      	sbcs	r3, r3
 8002aa6:	4461      	add	r1, ip
 8002aa8:	425b      	negs	r3, r3
 8002aaa:	18c9      	adds	r1, r1, r3
 8002aac:	07cc      	lsls	r4, r1, #31
 8002aae:	087f      	lsrs	r7, r7, #1
 8002ab0:	084b      	lsrs	r3, r1, #1
 8002ab2:	4699      	mov	r9, r3
 8002ab4:	4680      	mov	r8, r0
 8002ab6:	433c      	orrs	r4, r7
 8002ab8:	e6f4      	b.n	80028a4 <__aeabi_dsub+0x2dc>
 8002aba:	1afc      	subs	r4, r7, r3
 8002abc:	42a7      	cmp	r7, r4
 8002abe:	41bf      	sbcs	r7, r7
 8002ac0:	4663      	mov	r3, ip
 8002ac2:	427f      	negs	r7, r7
 8002ac4:	1ac9      	subs	r1, r1, r3
 8002ac6:	1bcb      	subs	r3, r1, r7
 8002ac8:	4699      	mov	r9, r3
 8002aca:	465d      	mov	r5, fp
 8002acc:	e5d5      	b.n	800267a <__aeabi_dsub+0xb2>
 8002ace:	08ff      	lsrs	r7, r7, #3
 8002ad0:	074b      	lsls	r3, r1, #29
 8002ad2:	465d      	mov	r5, fp
 8002ad4:	433b      	orrs	r3, r7
 8002ad6:	08cc      	lsrs	r4, r1, #3
 8002ad8:	e6ee      	b.n	80028b8 <__aeabi_dsub+0x2f0>
 8002ada:	4662      	mov	r2, ip
 8002adc:	431a      	orrs	r2, r3
 8002ade:	d000      	beq.n	8002ae2 <__aeabi_dsub+0x51a>
 8002ae0:	e082      	b.n	8002be8 <__aeabi_dsub+0x620>
 8002ae2:	000b      	movs	r3, r1
 8002ae4:	433b      	orrs	r3, r7
 8002ae6:	d11b      	bne.n	8002b20 <__aeabi_dsub+0x558>
 8002ae8:	2480      	movs	r4, #128	; 0x80
 8002aea:	2500      	movs	r5, #0
 8002aec:	0324      	lsls	r4, r4, #12
 8002aee:	e6f9      	b.n	80028e4 <__aeabi_dsub+0x31c>
 8002af0:	19dc      	adds	r4, r3, r7
 8002af2:	429c      	cmp	r4, r3
 8002af4:	419b      	sbcs	r3, r3
 8002af6:	4461      	add	r1, ip
 8002af8:	4689      	mov	r9, r1
 8002afa:	425b      	negs	r3, r3
 8002afc:	4499      	add	r9, r3
 8002afe:	464b      	mov	r3, r9
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	d444      	bmi.n	8002b8e <__aeabi_dsub+0x5c6>
 8002b04:	2301      	movs	r3, #1
 8002b06:	4698      	mov	r8, r3
 8002b08:	e6cc      	b.n	80028a4 <__aeabi_dsub+0x2dc>
 8002b0a:	1bdc      	subs	r4, r3, r7
 8002b0c:	4662      	mov	r2, ip
 8002b0e:	42a3      	cmp	r3, r4
 8002b10:	419b      	sbcs	r3, r3
 8002b12:	1a51      	subs	r1, r2, r1
 8002b14:	425b      	negs	r3, r3
 8002b16:	1acb      	subs	r3, r1, r3
 8002b18:	4699      	mov	r9, r3
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	4698      	mov	r8, r3
 8002b1e:	e5a4      	b.n	800266a <__aeabi_dsub+0xa2>
 8002b20:	08ff      	lsrs	r7, r7, #3
 8002b22:	074b      	lsls	r3, r1, #29
 8002b24:	465d      	mov	r5, fp
 8002b26:	433b      	orrs	r3, r7
 8002b28:	08cc      	lsrs	r4, r1, #3
 8002b2a:	e6d7      	b.n	80028dc <__aeabi_dsub+0x314>
 8002b2c:	4662      	mov	r2, ip
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	0014      	movs	r4, r2
 8002b32:	1e63      	subs	r3, r4, #1
 8002b34:	419c      	sbcs	r4, r3
 8002b36:	e679      	b.n	800282c <__aeabi_dsub+0x264>
 8002b38:	0015      	movs	r5, r2
 8002b3a:	4664      	mov	r4, ip
 8002b3c:	3d20      	subs	r5, #32
 8002b3e:	40ec      	lsrs	r4, r5
 8002b40:	46a0      	mov	r8, r4
 8002b42:	2a20      	cmp	r2, #32
 8002b44:	d005      	beq.n	8002b52 <__aeabi_dsub+0x58a>
 8002b46:	2540      	movs	r5, #64	; 0x40
 8002b48:	4664      	mov	r4, ip
 8002b4a:	1aaa      	subs	r2, r5, r2
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	4323      	orrs	r3, r4
 8002b50:	469a      	mov	sl, r3
 8002b52:	4654      	mov	r4, sl
 8002b54:	1e63      	subs	r3, r4, #1
 8002b56:	419c      	sbcs	r4, r3
 8002b58:	4643      	mov	r3, r8
 8002b5a:	4323      	orrs	r3, r4
 8002b5c:	e773      	b.n	8002a46 <__aeabi_dsub+0x47e>
 8002b5e:	4662      	mov	r2, ip
 8002b60:	431a      	orrs	r2, r3
 8002b62:	d023      	beq.n	8002bac <__aeabi_dsub+0x5e4>
 8002b64:	000a      	movs	r2, r1
 8002b66:	433a      	orrs	r2, r7
 8002b68:	d000      	beq.n	8002b6c <__aeabi_dsub+0x5a4>
 8002b6a:	e0a0      	b.n	8002cae <__aeabi_dsub+0x6e6>
 8002b6c:	4662      	mov	r2, ip
 8002b6e:	08db      	lsrs	r3, r3, #3
 8002b70:	0752      	lsls	r2, r2, #29
 8002b72:	4313      	orrs	r3, r2
 8002b74:	4662      	mov	r2, ip
 8002b76:	08d4      	lsrs	r4, r2, #3
 8002b78:	e6b0      	b.n	80028dc <__aeabi_dsub+0x314>
 8002b7a:	000b      	movs	r3, r1
 8002b7c:	433b      	orrs	r3, r7
 8002b7e:	d100      	bne.n	8002b82 <__aeabi_dsub+0x5ba>
 8002b80:	e728      	b.n	80029d4 <__aeabi_dsub+0x40c>
 8002b82:	08ff      	lsrs	r7, r7, #3
 8002b84:	074b      	lsls	r3, r1, #29
 8002b86:	465d      	mov	r5, fp
 8002b88:	433b      	orrs	r3, r7
 8002b8a:	08cc      	lsrs	r4, r1, #3
 8002b8c:	e697      	b.n	80028be <__aeabi_dsub+0x2f6>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	4698      	mov	r8, r3
 8002b92:	e736      	b.n	8002a02 <__aeabi_dsub+0x43a>
 8002b94:	1afc      	subs	r4, r7, r3
 8002b96:	42a7      	cmp	r7, r4
 8002b98:	41bf      	sbcs	r7, r7
 8002b9a:	4663      	mov	r3, ip
 8002b9c:	427f      	negs	r7, r7
 8002b9e:	1ac9      	subs	r1, r1, r3
 8002ba0:	1bcb      	subs	r3, r1, r7
 8002ba2:	4699      	mov	r9, r3
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	465d      	mov	r5, fp
 8002ba8:	4698      	mov	r8, r3
 8002baa:	e55e      	b.n	800266a <__aeabi_dsub+0xa2>
 8002bac:	074b      	lsls	r3, r1, #29
 8002bae:	08ff      	lsrs	r7, r7, #3
 8002bb0:	433b      	orrs	r3, r7
 8002bb2:	08cc      	lsrs	r4, r1, #3
 8002bb4:	e692      	b.n	80028dc <__aeabi_dsub+0x314>
 8002bb6:	1bdc      	subs	r4, r3, r7
 8002bb8:	4660      	mov	r0, ip
 8002bba:	42a3      	cmp	r3, r4
 8002bbc:	41b6      	sbcs	r6, r6
 8002bbe:	1a40      	subs	r0, r0, r1
 8002bc0:	4276      	negs	r6, r6
 8002bc2:	1b80      	subs	r0, r0, r6
 8002bc4:	4681      	mov	r9, r0
 8002bc6:	0200      	lsls	r0, r0, #8
 8002bc8:	d560      	bpl.n	8002c8c <__aeabi_dsub+0x6c4>
 8002bca:	1afc      	subs	r4, r7, r3
 8002bcc:	42a7      	cmp	r7, r4
 8002bce:	41bf      	sbcs	r7, r7
 8002bd0:	4663      	mov	r3, ip
 8002bd2:	427f      	negs	r7, r7
 8002bd4:	1ac9      	subs	r1, r1, r3
 8002bd6:	1bcb      	subs	r3, r1, r7
 8002bd8:	4699      	mov	r9, r3
 8002bda:	465d      	mov	r5, fp
 8002bdc:	e576      	b.n	80026cc <__aeabi_dsub+0x104>
 8002bde:	08ff      	lsrs	r7, r7, #3
 8002be0:	074b      	lsls	r3, r1, #29
 8002be2:	433b      	orrs	r3, r7
 8002be4:	08cc      	lsrs	r4, r1, #3
 8002be6:	e667      	b.n	80028b8 <__aeabi_dsub+0x2f0>
 8002be8:	000a      	movs	r2, r1
 8002bea:	08db      	lsrs	r3, r3, #3
 8002bec:	433a      	orrs	r2, r7
 8002bee:	d100      	bne.n	8002bf2 <__aeabi_dsub+0x62a>
 8002bf0:	e66f      	b.n	80028d2 <__aeabi_dsub+0x30a>
 8002bf2:	4662      	mov	r2, ip
 8002bf4:	0752      	lsls	r2, r2, #29
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	4662      	mov	r2, ip
 8002bfa:	08d4      	lsrs	r4, r2, #3
 8002bfc:	2280      	movs	r2, #128	; 0x80
 8002bfe:	0312      	lsls	r2, r2, #12
 8002c00:	4214      	tst	r4, r2
 8002c02:	d007      	beq.n	8002c14 <__aeabi_dsub+0x64c>
 8002c04:	08c8      	lsrs	r0, r1, #3
 8002c06:	4210      	tst	r0, r2
 8002c08:	d104      	bne.n	8002c14 <__aeabi_dsub+0x64c>
 8002c0a:	465d      	mov	r5, fp
 8002c0c:	0004      	movs	r4, r0
 8002c0e:	08fb      	lsrs	r3, r7, #3
 8002c10:	0749      	lsls	r1, r1, #29
 8002c12:	430b      	orrs	r3, r1
 8002c14:	0f5a      	lsrs	r2, r3, #29
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	08db      	lsrs	r3, r3, #3
 8002c1a:	0752      	lsls	r2, r2, #29
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	e65d      	b.n	80028dc <__aeabi_dsub+0x314>
 8002c20:	074b      	lsls	r3, r1, #29
 8002c22:	08ff      	lsrs	r7, r7, #3
 8002c24:	433b      	orrs	r3, r7
 8002c26:	08cc      	lsrs	r4, r1, #3
 8002c28:	e649      	b.n	80028be <__aeabi_dsub+0x2f6>
 8002c2a:	19dc      	adds	r4, r3, r7
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	419b      	sbcs	r3, r3
 8002c30:	4461      	add	r1, ip
 8002c32:	4689      	mov	r9, r1
 8002c34:	425b      	negs	r3, r3
 8002c36:	4499      	add	r9, r3
 8002c38:	464b      	mov	r3, r9
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	d400      	bmi.n	8002c40 <__aeabi_dsub+0x678>
 8002c3e:	e631      	b.n	80028a4 <__aeabi_dsub+0x2dc>
 8002c40:	464a      	mov	r2, r9
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <__aeabi_dsub+0x6d8>)
 8002c44:	401a      	ands	r2, r3
 8002c46:	2301      	movs	r3, #1
 8002c48:	4691      	mov	r9, r2
 8002c4a:	4698      	mov	r8, r3
 8002c4c:	e62a      	b.n	80028a4 <__aeabi_dsub+0x2dc>
 8002c4e:	0016      	movs	r6, r2
 8002c50:	4664      	mov	r4, ip
 8002c52:	3e20      	subs	r6, #32
 8002c54:	40f4      	lsrs	r4, r6
 8002c56:	46a0      	mov	r8, r4
 8002c58:	2a20      	cmp	r2, #32
 8002c5a:	d005      	beq.n	8002c68 <__aeabi_dsub+0x6a0>
 8002c5c:	2640      	movs	r6, #64	; 0x40
 8002c5e:	4664      	mov	r4, ip
 8002c60:	1ab2      	subs	r2, r6, r2
 8002c62:	4094      	lsls	r4, r2
 8002c64:	4323      	orrs	r3, r4
 8002c66:	469a      	mov	sl, r3
 8002c68:	4654      	mov	r4, sl
 8002c6a:	1e63      	subs	r3, r4, #1
 8002c6c:	419c      	sbcs	r4, r3
 8002c6e:	4643      	mov	r3, r8
 8002c70:	431c      	orrs	r4, r3
 8002c72:	e5db      	b.n	800282c <__aeabi_dsub+0x264>
 8002c74:	0002      	movs	r2, r0
 8002c76:	2400      	movs	r4, #0
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e548      	b.n	800270e <__aeabi_dsub+0x146>
 8002c7c:	19dc      	adds	r4, r3, r7
 8002c7e:	42bc      	cmp	r4, r7
 8002c80:	41bf      	sbcs	r7, r7
 8002c82:	4461      	add	r1, ip
 8002c84:	4689      	mov	r9, r1
 8002c86:	427f      	negs	r7, r7
 8002c88:	44b9      	add	r9, r7
 8002c8a:	e738      	b.n	8002afe <__aeabi_dsub+0x536>
 8002c8c:	464b      	mov	r3, r9
 8002c8e:	4323      	orrs	r3, r4
 8002c90:	d100      	bne.n	8002c94 <__aeabi_dsub+0x6cc>
 8002c92:	e69f      	b.n	80029d4 <__aeabi_dsub+0x40c>
 8002c94:	e606      	b.n	80028a4 <__aeabi_dsub+0x2dc>
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	000007fe 	.word	0x000007fe
 8002c9c:	000007ff 	.word	0x000007ff
 8002ca0:	ff7fffff 	.word	0xff7fffff
 8002ca4:	08ff      	lsrs	r7, r7, #3
 8002ca6:	074b      	lsls	r3, r1, #29
 8002ca8:	433b      	orrs	r3, r7
 8002caa:	08cc      	lsrs	r4, r1, #3
 8002cac:	e616      	b.n	80028dc <__aeabi_dsub+0x314>
 8002cae:	4662      	mov	r2, ip
 8002cb0:	08db      	lsrs	r3, r3, #3
 8002cb2:	0752      	lsls	r2, r2, #29
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	4662      	mov	r2, ip
 8002cb8:	08d4      	lsrs	r4, r2, #3
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	0312      	lsls	r2, r2, #12
 8002cbe:	4214      	tst	r4, r2
 8002cc0:	d007      	beq.n	8002cd2 <__aeabi_dsub+0x70a>
 8002cc2:	08c8      	lsrs	r0, r1, #3
 8002cc4:	4210      	tst	r0, r2
 8002cc6:	d104      	bne.n	8002cd2 <__aeabi_dsub+0x70a>
 8002cc8:	465d      	mov	r5, fp
 8002cca:	0004      	movs	r4, r0
 8002ccc:	08fb      	lsrs	r3, r7, #3
 8002cce:	0749      	lsls	r1, r1, #29
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	0f5a      	lsrs	r2, r3, #29
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	0752      	lsls	r2, r2, #29
 8002cd8:	08db      	lsrs	r3, r3, #3
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	e5fe      	b.n	80028dc <__aeabi_dsub+0x314>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	4a01      	ldr	r2, [pc, #4]	; (8002ce8 <__aeabi_dsub+0x720>)
 8002ce2:	001c      	movs	r4, r3
 8002ce4:	e513      	b.n	800270e <__aeabi_dsub+0x146>
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	000007ff 	.word	0x000007ff

08002cec <__aeabi_dcmpun>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0005      	movs	r5, r0
 8002cf0:	480c      	ldr	r0, [pc, #48]	; (8002d24 <__aeabi_dcmpun+0x38>)
 8002cf2:	031c      	lsls	r4, r3, #12
 8002cf4:	0016      	movs	r6, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	030a      	lsls	r2, r1, #12
 8002cfa:	0049      	lsls	r1, r1, #1
 8002cfc:	0b12      	lsrs	r2, r2, #12
 8002cfe:	0d49      	lsrs	r1, r1, #21
 8002d00:	0b24      	lsrs	r4, r4, #12
 8002d02:	0d5b      	lsrs	r3, r3, #21
 8002d04:	4281      	cmp	r1, r0
 8002d06:	d008      	beq.n	8002d1a <__aeabi_dcmpun+0x2e>
 8002d08:	4a06      	ldr	r2, [pc, #24]	; (8002d24 <__aeabi_dcmpun+0x38>)
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d103      	bne.n	8002d18 <__aeabi_dcmpun+0x2c>
 8002d10:	0020      	movs	r0, r4
 8002d12:	4330      	orrs	r0, r6
 8002d14:	1e43      	subs	r3, r0, #1
 8002d16:	4198      	sbcs	r0, r3
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	432a      	orrs	r2, r5
 8002d1e:	d1fb      	bne.n	8002d18 <__aeabi_dcmpun+0x2c>
 8002d20:	e7f2      	b.n	8002d08 <__aeabi_dcmpun+0x1c>
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	000007ff 	.word	0x000007ff

08002d28 <__aeabi_d2iz>:
 8002d28:	000a      	movs	r2, r1
 8002d2a:	b530      	push	{r4, r5, lr}
 8002d2c:	4c13      	ldr	r4, [pc, #76]	; (8002d7c <__aeabi_d2iz+0x54>)
 8002d2e:	0053      	lsls	r3, r2, #1
 8002d30:	0309      	lsls	r1, r1, #12
 8002d32:	0005      	movs	r5, r0
 8002d34:	0b09      	lsrs	r1, r1, #12
 8002d36:	2000      	movs	r0, #0
 8002d38:	0d5b      	lsrs	r3, r3, #21
 8002d3a:	0fd2      	lsrs	r2, r2, #31
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	dd04      	ble.n	8002d4a <__aeabi_d2iz+0x22>
 8002d40:	480f      	ldr	r0, [pc, #60]	; (8002d80 <__aeabi_d2iz+0x58>)
 8002d42:	4283      	cmp	r3, r0
 8002d44:	dd02      	ble.n	8002d4c <__aeabi_d2iz+0x24>
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <__aeabi_d2iz+0x5c>)
 8002d48:	18d0      	adds	r0, r2, r3
 8002d4a:	bd30      	pop	{r4, r5, pc}
 8002d4c:	2080      	movs	r0, #128	; 0x80
 8002d4e:	0340      	lsls	r0, r0, #13
 8002d50:	4301      	orrs	r1, r0
 8002d52:	480d      	ldr	r0, [pc, #52]	; (8002d88 <__aeabi_d2iz+0x60>)
 8002d54:	1ac0      	subs	r0, r0, r3
 8002d56:	281f      	cmp	r0, #31
 8002d58:	dd08      	ble.n	8002d6c <__aeabi_d2iz+0x44>
 8002d5a:	480c      	ldr	r0, [pc, #48]	; (8002d8c <__aeabi_d2iz+0x64>)
 8002d5c:	1ac3      	subs	r3, r0, r3
 8002d5e:	40d9      	lsrs	r1, r3
 8002d60:	000b      	movs	r3, r1
 8002d62:	4258      	negs	r0, r3
 8002d64:	2a00      	cmp	r2, #0
 8002d66:	d1f0      	bne.n	8002d4a <__aeabi_d2iz+0x22>
 8002d68:	0018      	movs	r0, r3
 8002d6a:	e7ee      	b.n	8002d4a <__aeabi_d2iz+0x22>
 8002d6c:	4c08      	ldr	r4, [pc, #32]	; (8002d90 <__aeabi_d2iz+0x68>)
 8002d6e:	40c5      	lsrs	r5, r0
 8002d70:	46a4      	mov	ip, r4
 8002d72:	4463      	add	r3, ip
 8002d74:	4099      	lsls	r1, r3
 8002d76:	000b      	movs	r3, r1
 8002d78:	432b      	orrs	r3, r5
 8002d7a:	e7f2      	b.n	8002d62 <__aeabi_d2iz+0x3a>
 8002d7c:	000003fe 	.word	0x000003fe
 8002d80:	0000041d 	.word	0x0000041d
 8002d84:	7fffffff 	.word	0x7fffffff
 8002d88:	00000433 	.word	0x00000433
 8002d8c:	00000413 	.word	0x00000413
 8002d90:	fffffbed 	.word	0xfffffbed

08002d94 <__aeabi_i2d>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d016      	beq.n	8002dc8 <__aeabi_i2d+0x34>
 8002d9a:	17c3      	asrs	r3, r0, #31
 8002d9c:	18c5      	adds	r5, r0, r3
 8002d9e:	405d      	eors	r5, r3
 8002da0:	0fc4      	lsrs	r4, r0, #31
 8002da2:	0028      	movs	r0, r5
 8002da4:	f000 f8d4 	bl	8002f50 <__clzsi2>
 8002da8:	4a11      	ldr	r2, [pc, #68]	; (8002df0 <__aeabi_i2d+0x5c>)
 8002daa:	1a12      	subs	r2, r2, r0
 8002dac:	280a      	cmp	r0, #10
 8002dae:	dc16      	bgt.n	8002dde <__aeabi_i2d+0x4a>
 8002db0:	0003      	movs	r3, r0
 8002db2:	002e      	movs	r6, r5
 8002db4:	3315      	adds	r3, #21
 8002db6:	409e      	lsls	r6, r3
 8002db8:	230b      	movs	r3, #11
 8002dba:	1a18      	subs	r0, r3, r0
 8002dbc:	40c5      	lsrs	r5, r0
 8002dbe:	0552      	lsls	r2, r2, #21
 8002dc0:	032d      	lsls	r5, r5, #12
 8002dc2:	0b2d      	lsrs	r5, r5, #12
 8002dc4:	0d53      	lsrs	r3, r2, #21
 8002dc6:	e003      	b.n	8002dd0 <__aeabi_i2d+0x3c>
 8002dc8:	2400      	movs	r4, #0
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2500      	movs	r5, #0
 8002dce:	2600      	movs	r6, #0
 8002dd0:	051b      	lsls	r3, r3, #20
 8002dd2:	432b      	orrs	r3, r5
 8002dd4:	07e4      	lsls	r4, r4, #31
 8002dd6:	4323      	orrs	r3, r4
 8002dd8:	0030      	movs	r0, r6
 8002dda:	0019      	movs	r1, r3
 8002ddc:	bd70      	pop	{r4, r5, r6, pc}
 8002dde:	380b      	subs	r0, #11
 8002de0:	4085      	lsls	r5, r0
 8002de2:	0552      	lsls	r2, r2, #21
 8002de4:	032d      	lsls	r5, r5, #12
 8002de6:	2600      	movs	r6, #0
 8002de8:	0b2d      	lsrs	r5, r5, #12
 8002dea:	0d53      	lsrs	r3, r2, #21
 8002dec:	e7f0      	b.n	8002dd0 <__aeabi_i2d+0x3c>
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	0000041e 	.word	0x0000041e

08002df4 <__aeabi_ui2d>:
 8002df4:	b510      	push	{r4, lr}
 8002df6:	1e04      	subs	r4, r0, #0
 8002df8:	d010      	beq.n	8002e1c <__aeabi_ui2d+0x28>
 8002dfa:	f000 f8a9 	bl	8002f50 <__clzsi2>
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <__aeabi_ui2d+0x48>)
 8002e00:	1a1b      	subs	r3, r3, r0
 8002e02:	280a      	cmp	r0, #10
 8002e04:	dc11      	bgt.n	8002e2a <__aeabi_ui2d+0x36>
 8002e06:	220b      	movs	r2, #11
 8002e08:	0021      	movs	r1, r4
 8002e0a:	1a12      	subs	r2, r2, r0
 8002e0c:	40d1      	lsrs	r1, r2
 8002e0e:	3015      	adds	r0, #21
 8002e10:	030a      	lsls	r2, r1, #12
 8002e12:	055b      	lsls	r3, r3, #21
 8002e14:	4084      	lsls	r4, r0
 8002e16:	0b12      	lsrs	r2, r2, #12
 8002e18:	0d5b      	lsrs	r3, r3, #21
 8002e1a:	e001      	b.n	8002e20 <__aeabi_ui2d+0x2c>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2200      	movs	r2, #0
 8002e20:	051b      	lsls	r3, r3, #20
 8002e22:	4313      	orrs	r3, r2
 8002e24:	0020      	movs	r0, r4
 8002e26:	0019      	movs	r1, r3
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	0022      	movs	r2, r4
 8002e2c:	380b      	subs	r0, #11
 8002e2e:	4082      	lsls	r2, r0
 8002e30:	055b      	lsls	r3, r3, #21
 8002e32:	0312      	lsls	r2, r2, #12
 8002e34:	2400      	movs	r4, #0
 8002e36:	0b12      	lsrs	r2, r2, #12
 8002e38:	0d5b      	lsrs	r3, r3, #21
 8002e3a:	e7f1      	b.n	8002e20 <__aeabi_ui2d+0x2c>
 8002e3c:	0000041e 	.word	0x0000041e

08002e40 <__aeabi_d2f>:
 8002e40:	0002      	movs	r2, r0
 8002e42:	004b      	lsls	r3, r1, #1
 8002e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e46:	0d5b      	lsrs	r3, r3, #21
 8002e48:	030c      	lsls	r4, r1, #12
 8002e4a:	4e3d      	ldr	r6, [pc, #244]	; (8002f40 <__aeabi_d2f+0x100>)
 8002e4c:	0a64      	lsrs	r4, r4, #9
 8002e4e:	0f40      	lsrs	r0, r0, #29
 8002e50:	1c5f      	adds	r7, r3, #1
 8002e52:	0fc9      	lsrs	r1, r1, #31
 8002e54:	4304      	orrs	r4, r0
 8002e56:	00d5      	lsls	r5, r2, #3
 8002e58:	4237      	tst	r7, r6
 8002e5a:	d00a      	beq.n	8002e72 <__aeabi_d2f+0x32>
 8002e5c:	4839      	ldr	r0, [pc, #228]	; (8002f44 <__aeabi_d2f+0x104>)
 8002e5e:	181e      	adds	r6, r3, r0
 8002e60:	2efe      	cmp	r6, #254	; 0xfe
 8002e62:	dd16      	ble.n	8002e92 <__aeabi_d2f+0x52>
 8002e64:	20ff      	movs	r0, #255	; 0xff
 8002e66:	2400      	movs	r4, #0
 8002e68:	05c0      	lsls	r0, r0, #23
 8002e6a:	4320      	orrs	r0, r4
 8002e6c:	07c9      	lsls	r1, r1, #31
 8002e6e:	4308      	orrs	r0, r1
 8002e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <__aeabi_d2f+0x44>
 8002e76:	432c      	orrs	r4, r5
 8002e78:	d026      	beq.n	8002ec8 <__aeabi_d2f+0x88>
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	0192      	lsls	r2, r2, #6
 8002e7e:	0a54      	lsrs	r4, r2, #9
 8002e80:	b2d8      	uxtb	r0, r3
 8002e82:	e7f1      	b.n	8002e68 <__aeabi_d2f+0x28>
 8002e84:	4325      	orrs	r5, r4
 8002e86:	d0ed      	beq.n	8002e64 <__aeabi_d2f+0x24>
 8002e88:	2080      	movs	r0, #128	; 0x80
 8002e8a:	03c0      	lsls	r0, r0, #15
 8002e8c:	4304      	orrs	r4, r0
 8002e8e:	20ff      	movs	r0, #255	; 0xff
 8002e90:	e7ea      	b.n	8002e68 <__aeabi_d2f+0x28>
 8002e92:	2e00      	cmp	r6, #0
 8002e94:	dd1b      	ble.n	8002ece <__aeabi_d2f+0x8e>
 8002e96:	0192      	lsls	r2, r2, #6
 8002e98:	1e53      	subs	r3, r2, #1
 8002e9a:	419a      	sbcs	r2, r3
 8002e9c:	00e4      	lsls	r4, r4, #3
 8002e9e:	0f6d      	lsrs	r5, r5, #29
 8002ea0:	4322      	orrs	r2, r4
 8002ea2:	432a      	orrs	r2, r5
 8002ea4:	0753      	lsls	r3, r2, #29
 8002ea6:	d048      	beq.n	8002f3a <__aeabi_d2f+0xfa>
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d000      	beq.n	8002eb2 <__aeabi_d2f+0x72>
 8002eb0:	3204      	adds	r2, #4
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	04db      	lsls	r3, r3, #19
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d03f      	beq.n	8002f3a <__aeabi_d2f+0xfa>
 8002eba:	1c70      	adds	r0, r6, #1
 8002ebc:	2efe      	cmp	r6, #254	; 0xfe
 8002ebe:	d0d1      	beq.n	8002e64 <__aeabi_d2f+0x24>
 8002ec0:	0192      	lsls	r2, r2, #6
 8002ec2:	0a54      	lsrs	r4, r2, #9
 8002ec4:	b2c0      	uxtb	r0, r0
 8002ec6:	e7cf      	b.n	8002e68 <__aeabi_d2f+0x28>
 8002ec8:	2000      	movs	r0, #0
 8002eca:	2400      	movs	r4, #0
 8002ecc:	e7cc      	b.n	8002e68 <__aeabi_d2f+0x28>
 8002ece:	0032      	movs	r2, r6
 8002ed0:	3217      	adds	r2, #23
 8002ed2:	db22      	blt.n	8002f1a <__aeabi_d2f+0xda>
 8002ed4:	2080      	movs	r0, #128	; 0x80
 8002ed6:	0400      	lsls	r0, r0, #16
 8002ed8:	4320      	orrs	r0, r4
 8002eda:	241e      	movs	r4, #30
 8002edc:	1ba4      	subs	r4, r4, r6
 8002ede:	2c1f      	cmp	r4, #31
 8002ee0:	dd1d      	ble.n	8002f1e <__aeabi_d2f+0xde>
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b96      	subs	r6, r2, r6
 8002ee8:	0002      	movs	r2, r0
 8002eea:	40f2      	lsrs	r2, r6
 8002eec:	0016      	movs	r6, r2
 8002eee:	2c20      	cmp	r4, #32
 8002ef0:	d004      	beq.n	8002efc <__aeabi_d2f+0xbc>
 8002ef2:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <__aeabi_d2f+0x108>)
 8002ef4:	4694      	mov	ip, r2
 8002ef6:	4463      	add	r3, ip
 8002ef8:	4098      	lsls	r0, r3
 8002efa:	4305      	orrs	r5, r0
 8002efc:	002a      	movs	r2, r5
 8002efe:	1e53      	subs	r3, r2, #1
 8002f00:	419a      	sbcs	r2, r3
 8002f02:	4332      	orrs	r2, r6
 8002f04:	2600      	movs	r6, #0
 8002f06:	0753      	lsls	r3, r2, #29
 8002f08:	d1ce      	bne.n	8002ea8 <__aeabi_d2f+0x68>
 8002f0a:	2480      	movs	r4, #128	; 0x80
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	04e4      	lsls	r4, r4, #19
 8002f10:	2001      	movs	r0, #1
 8002f12:	4023      	ands	r3, r4
 8002f14:	4222      	tst	r2, r4
 8002f16:	d1d3      	bne.n	8002ec0 <__aeabi_d2f+0x80>
 8002f18:	e7b0      	b.n	8002e7c <__aeabi_d2f+0x3c>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e7ad      	b.n	8002e7a <__aeabi_d2f+0x3a>
 8002f1e:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <__aeabi_d2f+0x10c>)
 8002f20:	4694      	mov	ip, r2
 8002f22:	002a      	movs	r2, r5
 8002f24:	40e2      	lsrs	r2, r4
 8002f26:	0014      	movs	r4, r2
 8002f28:	002a      	movs	r2, r5
 8002f2a:	4463      	add	r3, ip
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	4098      	lsls	r0, r3
 8002f30:	1e55      	subs	r5, r2, #1
 8002f32:	41aa      	sbcs	r2, r5
 8002f34:	4302      	orrs	r2, r0
 8002f36:	4322      	orrs	r2, r4
 8002f38:	e7e4      	b.n	8002f04 <__aeabi_d2f+0xc4>
 8002f3a:	0033      	movs	r3, r6
 8002f3c:	e79e      	b.n	8002e7c <__aeabi_d2f+0x3c>
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	000007fe 	.word	0x000007fe
 8002f44:	fffffc80 	.word	0xfffffc80
 8002f48:	fffffca2 	.word	0xfffffca2
 8002f4c:	fffffc82 	.word	0xfffffc82

08002f50 <__clzsi2>:
 8002f50:	211c      	movs	r1, #28
 8002f52:	2301      	movs	r3, #1
 8002f54:	041b      	lsls	r3, r3, #16
 8002f56:	4298      	cmp	r0, r3
 8002f58:	d301      	bcc.n	8002f5e <__clzsi2+0xe>
 8002f5a:	0c00      	lsrs	r0, r0, #16
 8002f5c:	3910      	subs	r1, #16
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	4298      	cmp	r0, r3
 8002f62:	d301      	bcc.n	8002f68 <__clzsi2+0x18>
 8002f64:	0a00      	lsrs	r0, r0, #8
 8002f66:	3908      	subs	r1, #8
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	4298      	cmp	r0, r3
 8002f6c:	d301      	bcc.n	8002f72 <__clzsi2+0x22>
 8002f6e:	0900      	lsrs	r0, r0, #4
 8002f70:	3904      	subs	r1, #4
 8002f72:	a202      	add	r2, pc, #8	; (adr r2, 8002f7c <__clzsi2+0x2c>)
 8002f74:	5c10      	ldrb	r0, [r2, r0]
 8002f76:	1840      	adds	r0, r0, r1
 8002f78:	4770      	bx	lr
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	02020304 	.word	0x02020304
 8002f80:	01010101 	.word	0x01010101
	...

08002f8c <__clzdi2>:
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	2900      	cmp	r1, #0
 8002f90:	d103      	bne.n	8002f9a <__clzdi2+0xe>
 8002f92:	f7ff ffdd 	bl	8002f50 <__clzsi2>
 8002f96:	3020      	adds	r0, #32
 8002f98:	e002      	b.n	8002fa0 <__clzdi2+0x14>
 8002f9a:	0008      	movs	r0, r1
 8002f9c:	f7ff ffd8 	bl	8002f50 <__clzsi2>
 8002fa0:	bd10      	pop	{r4, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)

08002fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fa8:	f000 fd08 	bl	80039bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fac:	f000 f876 	bl	800309c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fb0:	f000 f918 	bl	80031e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002fb4:	f000 f8de 	bl	8003174 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002fb8:	f003 feb0 	bl	8006d1c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <main+0xb8>)
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f004 f82e 	bl	8007024 <osSemaphoreNew>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	4b25      	ldr	r3, [pc, #148]	; (8003060 <main+0xbc>)
 8002fcc:	601a      	str	r2, [r3, #0]

  /* creation of UARTSem02 */
  UARTSem02Handle = osSemaphoreNew(1, 0, &UARTSem02_attributes);
 8002fce:	4b25      	ldr	r3, [pc, #148]	; (8003064 <main+0xc0>)
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f004 f825 	bl	8007024 <osSemaphoreNew>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <main+0xc4>)
 8002fde:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  UARTSem02Handle = osSemaphoreNew(1, 0, &UARTSem02_attributes);
 8002fe0:	4b20      	ldr	r3, [pc, #128]	; (8003064 <main+0xc0>)
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f004 f81c 	bl	8007024 <osSemaphoreNew>
 8002fec:	0002      	movs	r2, r0
 8002fee:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <main+0xc4>)
 8002ff0:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (4, sizeof(uint32_t), &myQueue01_attributes);
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <main+0xc8>)
 8002ff4:	001a      	movs	r2, r3
 8002ff6:	2104      	movs	r1, #4
 8002ff8:	2004      	movs	r0, #4
 8002ffa:	f004 f961 	bl	80072c0 <osMessageQueueNew>
 8002ffe:	0002      	movs	r2, r0
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <main+0xcc>)
 8003002:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  myQueue01Handle = osMessageQueueNew (16, sizeof(MotorCommand_t), &myQueue01_attributes);
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <main+0xc8>)
 8003006:	001a      	movs	r2, r3
 8003008:	2110      	movs	r1, #16
 800300a:	2010      	movs	r0, #16
 800300c:	f004 f958 	bl	80072c0 <osMessageQueueNew>
 8003010:	0002      	movs	r2, r0
 8003012:	4b17      	ldr	r3, [pc, #92]	; (8003070 <main+0xcc>)
 8003014:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <main+0xd0>)
 8003018:	4b17      	ldr	r3, [pc, #92]	; (8003078 <main+0xd4>)
 800301a:	2100      	movs	r1, #0
 800301c:	0018      	movs	r0, r3
 800301e:	f003 fed9 	bl	8006dd4 <osThreadNew>
 8003022:	0002      	movs	r2, r0
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <main+0xd8>)
 8003026:	601a      	str	r2, [r3, #0]

  /* creation of Stepper_Task1 */
  Stepper_Task1Handle = osThreadNew(StartTask02, NULL, &Stepper_Task1_attributes);
 8003028:	4a15      	ldr	r2, [pc, #84]	; (8003080 <main+0xdc>)
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <main+0xe0>)
 800302c:	2100      	movs	r1, #0
 800302e:	0018      	movs	r0, r3
 8003030:	f003 fed0 	bl	8006dd4 <osThreadNew>
 8003034:	0002      	movs	r2, r0
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <main+0xe4>)
 8003038:	601a      	str	r2, [r3, #0]

  /* creation of Stepper_Task2 */
  Stepper_Task2Handle = osThreadNew(StartTask03, NULL, &Stepper_Task2_attributes);
 800303a:	4a14      	ldr	r2, [pc, #80]	; (800308c <main+0xe8>)
 800303c:	4b14      	ldr	r3, [pc, #80]	; (8003090 <main+0xec>)
 800303e:	2100      	movs	r1, #0
 8003040:	0018      	movs	r0, r3
 8003042:	f003 fec7 	bl	8006dd4 <osThreadNew>
 8003046:	0002      	movs	r2, r0
 8003048:	4b12      	ldr	r3, [pc, #72]	; (8003094 <main+0xf0>)
 800304a:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  printf("HELLOWORLD");
 800304c:	4b12      	ldr	r3, [pc, #72]	; (8003098 <main+0xf4>)
 800304e:	0018      	movs	r0, r3
 8003050:	f008 f882 	bl	800b158 <iprintf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003054:	f003 fe8e 	bl	8006d74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //osSemaphoreAcquire(UARTSem02Handle, osWaitForever);
  while (1)
 8003058:	e7fe      	b.n	8003058 <main+0xb4>
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	0800f0bc 	.word	0x0800f0bc
 8003060:	200002c4 	.word	0x200002c4
 8003064:	0800f0cc 	.word	0x0800f0cc
 8003068:	200002c8 	.word	0x200002c8
 800306c:	0800f0a4 	.word	0x0800f0a4
 8003070:	200002c0 	.word	0x200002c0
 8003074:	0800f038 	.word	0x0800f038
 8003078:	08003375 	.word	0x08003375
 800307c:	200002b4 	.word	0x200002b4
 8003080:	0800f05c 	.word	0x0800f05c
 8003084:	0800342d 	.word	0x0800342d
 8003088:	200002b8 	.word	0x200002b8
 800308c:	0800f080 	.word	0x0800f080
 8003090:	080034c1 	.word	0x080034c1
 8003094:	200002bc 	.word	0x200002bc
 8003098:	0800edec 	.word	0x0800edec

0800309c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b09f      	sub	sp, #124	; 0x7c
 80030a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030a2:	2440      	movs	r4, #64	; 0x40
 80030a4:	193b      	adds	r3, r7, r4
 80030a6:	0018      	movs	r0, r3
 80030a8:	2338      	movs	r3, #56	; 0x38
 80030aa:	001a      	movs	r2, r3
 80030ac:	2100      	movs	r1, #0
 80030ae:	f007 f93d 	bl	800a32c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030b2:	232c      	movs	r3, #44	; 0x2c
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	0018      	movs	r0, r3
 80030b8:	2314      	movs	r3, #20
 80030ba:	001a      	movs	r2, r3
 80030bc:	2100      	movs	r1, #0
 80030be:	f007 f935 	bl	800a32c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	0018      	movs	r0, r3
 80030c6:	2328      	movs	r3, #40	; 0x28
 80030c8:	001a      	movs	r2, r3
 80030ca:	2100      	movs	r1, #0
 80030cc:	f007 f92e 	bl	800a32c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030d0:	4b26      	ldr	r3, [pc, #152]	; (800316c <SystemClock_Config+0xd0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a26      	ldr	r2, [pc, #152]	; (8003170 <SystemClock_Config+0xd4>)
 80030d6:	401a      	ands	r2, r3
 80030d8:	4b24      	ldr	r3, [pc, #144]	; (800316c <SystemClock_Config+0xd0>)
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	0109      	lsls	r1, r1, #4
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80030e2:	0021      	movs	r1, r4
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	2210      	movs	r2, #16
 80030e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	2201      	movs	r2, #1
 80030ee:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80030f0:	187b      	adds	r3, r7, r1
 80030f2:	2200      	movs	r2, #0
 80030f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80030f6:	187b      	adds	r3, r7, r1
 80030f8:	22a0      	movs	r2, #160	; 0xa0
 80030fa:	0212      	lsls	r2, r2, #8
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	2200      	movs	r2, #0
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003104:	187b      	adds	r3, r7, r1
 8003106:	0018      	movs	r0, r3
 8003108:	f000 ff64 	bl	8003fd4 <HAL_RCC_OscConfig>
 800310c:	1e03      	subs	r3, r0, #0
 800310e:	d001      	beq.n	8003114 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003110:	f000 f9f0 	bl	80034f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	187b      	adds	r3, r7, r1
 8003118:	220f      	movs	r2, #15
 800311a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800311c:	187b      	adds	r3, r7, r1
 800311e:	2200      	movs	r2, #0
 8003120:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003122:	187b      	adds	r3, r7, r1
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003128:	187b      	adds	r3, r7, r1
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800312e:	187b      	adds	r3, r7, r1
 8003130:	22c0      	movs	r2, #192	; 0xc0
 8003132:	00d2      	lsls	r2, r2, #3
 8003134:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003136:	187b      	adds	r3, r7, r1
 8003138:	2100      	movs	r1, #0
 800313a:	0018      	movs	r0, r3
 800313c:	f001 fb1e 	bl	800477c <HAL_RCC_ClockConfig>
 8003140:	1e03      	subs	r3, r0, #0
 8003142:	d001      	beq.n	8003148 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003144:	f000 f9d6 	bl	80034f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	2202      	movs	r2, #2
 800314c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	2204      	movs	r2, #4
 8003152:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003154:	1d3b      	adds	r3, r7, #4
 8003156:	0018      	movs	r0, r3
 8003158:	f001 fd66 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d001      	beq.n	8003164 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003160:	f000 f9c8 	bl	80034f4 <Error_Handler>
  }
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b01f      	add	sp, #124	; 0x7c
 800316a:	bd90      	pop	{r4, r7, pc}
 800316c:	40007000 	.word	0x40007000
 8003170:	ffffe7ff 	.word	0xffffe7ff

08003174 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003178:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 800317a:	4a18      	ldr	r2, [pc, #96]	; (80031dc <MX_USART2_UART_Init+0x68>)
 800317c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 8003180:	22e1      	movs	r2, #225	; 0xe1
 8003182:	0252      	lsls	r2, r2, #9
 8003184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800318c:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 800318e:	2200      	movs	r2, #0
 8003190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 8003194:	2200      	movs	r2, #0
 8003196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 800319a:	220c      	movs	r2, #12
 800319c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800319e:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 80031b8:	0018      	movs	r0, r3
 80031ba:	f002 f8d3 	bl	8005364 <HAL_UART_Init>
 80031be:	1e03      	subs	r3, r0, #0
 80031c0:	d001      	beq.n	80031c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80031c2:	f000 f997 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, rxBuffer,6);
 80031c6:	4906      	ldr	r1, [pc, #24]	; (80031e0 <MX_USART2_UART_Init+0x6c>)
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <MX_USART2_UART_Init+0x64>)
 80031ca:	2206      	movs	r2, #6
 80031cc:	0018      	movs	r0, r3
 80031ce:	f002 faa3 	bl	8005718 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	2000022c 	.word	0x2000022c
 80031dc:	40004400 	.word	0x40004400
 80031e0:	200002cc 	.word	0x200002cc

080031e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b08b      	sub	sp, #44	; 0x2c
 80031e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ea:	2414      	movs	r4, #20
 80031ec:	193b      	adds	r3, r7, r4
 80031ee:	0018      	movs	r0, r3
 80031f0:	2314      	movs	r3, #20
 80031f2:	001a      	movs	r2, r3
 80031f4:	2100      	movs	r1, #0
 80031f6:	f007 f899 	bl	800a32c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fa:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <MX_GPIO_Init+0x10c>)
 80031fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fe:	4b3c      	ldr	r3, [pc, #240]	; (80032f0 <MX_GPIO_Init+0x10c>)
 8003200:	2104      	movs	r1, #4
 8003202:	430a      	orrs	r2, r1
 8003204:	62da      	str	r2, [r3, #44]	; 0x2c
 8003206:	4b3a      	ldr	r3, [pc, #232]	; (80032f0 <MX_GPIO_Init+0x10c>)
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	2204      	movs	r2, #4
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003212:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <MX_GPIO_Init+0x10c>)
 8003214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <MX_GPIO_Init+0x10c>)
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	430a      	orrs	r2, r1
 800321c:	62da      	str	r2, [r3, #44]	; 0x2c
 800321e:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <MX_GPIO_Init+0x10c>)
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <MX_GPIO_Init+0x10c>)
 800322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322e:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <MX_GPIO_Init+0x10c>)
 8003230:	2101      	movs	r1, #1
 8003232:	430a      	orrs	r2, r1
 8003234:	62da      	str	r2, [r3, #44]	; 0x2c
 8003236:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <MX_GPIO_Init+0x10c>)
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	2201      	movs	r2, #1
 800323c:	4013      	ands	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003242:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <MX_GPIO_Init+0x10c>)
 8003244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003246:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <MX_GPIO_Init+0x10c>)
 8003248:	2102      	movs	r1, #2
 800324a:	430a      	orrs	r2, r1
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c
 800324e:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <MX_GPIO_Init+0x10c>)
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	2202      	movs	r2, #2
 8003254:	4013      	ands	r3, r2
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, motor_dir1_Pin|motor_1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800325a:	23a0      	movs	r3, #160	; 0xa0
 800325c:	05db      	lsls	r3, r3, #23
 800325e:	2200      	movs	r2, #0
 8003260:	2123      	movs	r1, #35	; 0x23
 8003262:	0018      	movs	r0, r3
 8003264:	f000 fe98 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	019b      	lsls	r3, r3, #6
 800326c:	4821      	ldr	r0, [pc, #132]	; (80032f4 <MX_GPIO_Init+0x110>)
 800326e:	2200      	movs	r2, #0
 8003270:	0019      	movs	r1, r3
 8003272:	f000 fe91 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003276:	193b      	adds	r3, r7, r4
 8003278:	2280      	movs	r2, #128	; 0x80
 800327a:	0192      	lsls	r2, r2, #6
 800327c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800327e:	193b      	adds	r3, r7, r4
 8003280:	2284      	movs	r2, #132	; 0x84
 8003282:	0392      	lsls	r2, r2, #14
 8003284:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	193b      	adds	r3, r7, r4
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800328c:	193b      	adds	r3, r7, r4
 800328e:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <MX_GPIO_Init+0x114>)
 8003290:	0019      	movs	r1, r3
 8003292:	0010      	movs	r0, r2
 8003294:	f000 fd02 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_dir1_Pin motor_1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = motor_dir1_Pin|motor_1_Pin|LD2_Pin;
 8003298:	193b      	adds	r3, r7, r4
 800329a:	2223      	movs	r2, #35	; 0x23
 800329c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	2201      	movs	r2, #1
 80032a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	2200      	movs	r2, #0
 80032ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b0:	193a      	adds	r2, r7, r4
 80032b2:	23a0      	movs	r3, #160	; 0xa0
 80032b4:	05db      	lsls	r3, r3, #23
 80032b6:	0011      	movs	r1, r2
 80032b8:	0018      	movs	r0, r3
 80032ba:	f000 fcef 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80032be:	0021      	movs	r1, r4
 80032c0:	187b      	adds	r3, r7, r1
 80032c2:	2280      	movs	r2, #128	; 0x80
 80032c4:	0192      	lsls	r2, r2, #6
 80032c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	2201      	movs	r2, #1
 80032cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	2200      	movs	r2, #0
 80032d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <MX_GPIO_Init+0x110>)
 80032de:	0019      	movs	r1, r3
 80032e0:	0010      	movs	r0, r2
 80032e2:	f000 fcdb 	bl	8003c9c <HAL_GPIO_Init>

}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b00b      	add	sp, #44	; 0x2c
 80032ec:	bd90      	pop	{r4, r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	40021000 	.word	0x40021000
 80032f4:	50000400 	.word	0x50000400
 80032f8:	50000800 	.word	0x50000800

080032fc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <__io_putchar+0x20>)
 8003306:	1d39      	adds	r1, r7, #4
 8003308:	4805      	ldr	r0, [pc, #20]	; (8003320 <__io_putchar+0x24>)
 800330a:	2201      	movs	r2, #1
 800330c:	f002 f87e 	bl	800540c <HAL_UART_Transmit>

  return ch;
 8003310:	687b      	ldr	r3, [r7, #4]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	0000ffff 	.word	0x0000ffff
 8003320:	2000022c 	.word	0x2000022c

08003324 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0c      	ldr	r2, [pc, #48]	; (8003364 <HAL_UART_RxCpltCallback+0x40>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d112      	bne.n	800335c <HAL_UART_RxCpltCallback+0x38>
    {

        // Disable interrupt temporarily to prevent re-entrance issues
           __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2120      	movs	r1, #32
 8003342:	438a      	bics	r2, r1
 8003344:	601a      	str	r2, [r3, #0]
           osSemaphoreRelease(UARTSem02Handle);
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <HAL_UART_RxCpltCallback+0x44>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0018      	movs	r0, r3
 800334c:	f003 ff6a 	bl	8007224 <osSemaphoreRelease>
        // Continue receiving the next 12-byte command
        HAL_UART_Receive_IT(&huart2, rxBuffer, 6);
 8003350:	4906      	ldr	r1, [pc, #24]	; (800336c <HAL_UART_RxCpltCallback+0x48>)
 8003352:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_UART_RxCpltCallback+0x4c>)
 8003354:	2206      	movs	r2, #6
 8003356:	0018      	movs	r0, r3
 8003358:	f002 f9de 	bl	8005718 <HAL_UART_Receive_IT>

    }
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40004400 	.word	0x40004400
 8003368:	200002c8 	.word	0x200002c8
 800336c:	200002cc 	.word	0x200002cc
 8003370:	2000022c 	.word	0x2000022c

08003374 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

int count_task1;


  /* Infinite loop */
 osThreadSuspend(Stepper_Task1Handle);
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <StartDefaultTask+0x90>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	0018      	movs	r0, r3
 8003382:	f003 fdcb 	bl	8006f1c <osThreadSuspend>
 osThreadSuspend(Stepper_Task2Handle);
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <StartDefaultTask+0x94>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0018      	movs	r0, r3
 800338c:	f003 fdc6 	bl	8006f1c <osThreadSuspend>

  for(;;)
  {
	  printf("StartDefaultTask\n");
 8003390:	4b1e      	ldr	r3, [pc, #120]	; (800340c <StartDefaultTask+0x98>)
 8003392:	0018      	movs	r0, r3
 8003394:	f007 ff6c 	bl	800b270 <puts>
	  if (osSemaphoreAcquire(UARTSem02Handle, osWaitForever) == osOK)
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <StartDefaultTask+0x9c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2201      	movs	r2, #1
 800339e:	4252      	negs	r2, r2
 80033a0:	0011      	movs	r1, r2
 80033a2:	0018      	movs	r0, r3
 80033a4:	f003 fee0 	bl	8007168 <osSemaphoreAcquire>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d1f1      	bne.n	8003390 <StartDefaultTask+0x1c>
	  {
		  count_task1++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3301      	adds	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
		 HAL_UART_Receive(&huart2, rxBuffer,4,20);
 80033b2:	4918      	ldr	r1, [pc, #96]	; (8003414 <StartDefaultTask+0xa0>)
 80033b4:	4818      	ldr	r0, [pc, #96]	; (8003418 <StartDefaultTask+0xa4>)
 80033b6:	2314      	movs	r3, #20
 80033b8:	2204      	movs	r2, #4
 80033ba:	f002 f8c7 	bl	800554c <HAL_UART_Receive>

		   // printf("DATA RECIVED %c",rxBuffer);
	   // Send motor command to queue
	  if (osMessageQueuePut(myQueue01Handle, &Motorcommad1, 0, osWaitForever) != osOK) {
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <StartDefaultTask+0xa8>)
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	2301      	movs	r3, #1
 80033c4:	425b      	negs	r3, r3
 80033c6:	4916      	ldr	r1, [pc, #88]	; (8003420 <StartDefaultTask+0xac>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	f003 ffff 	bl	80073cc <osMessageQueuePut>
 80033ce:	1e03      	subs	r3, r0, #0
 80033d0:	d003      	beq.n	80033da <StartDefaultTask+0x66>
		  printf("Failed to send to queue\n");
 80033d2:	4b14      	ldr	r3, [pc, #80]	; (8003424 <StartDefaultTask+0xb0>)
 80033d4:	0018      	movs	r0, r3
 80033d6:	f007 ff4b 	bl	800b270 <puts>
	      }

	  ind=0;
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <StartDefaultTask+0xb4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
	  osThreadResume(Stepper_Task1Handle);
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <StartDefaultTask+0x90>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f003 fdc7 	bl	8006f78 <osThreadResume>
	  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <StartDefaultTask+0xa4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <StartDefaultTask+0xa4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2120      	movs	r1, #32
 80033f6:	430a      	orrs	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
	  osDelay(10);  // Delay for a bit before sending another command
 80033fa:	200a      	movs	r0, #10
 80033fc:	f003 fdea 	bl	8006fd4 <osDelay>
	  printf("StartDefaultTask\n");
 8003400:	e7c6      	b.n	8003390 <StartDefaultTask+0x1c>
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	200002b8 	.word	0x200002b8
 8003408:	200002bc 	.word	0x200002bc
 800340c:	0800edf8 	.word	0x0800edf8
 8003410:	200002c8 	.word	0x200002c8
 8003414:	200002cc 	.word	0x200002cc
 8003418:	2000022c 	.word	0x2000022c
 800341c:	200002c0 	.word	0x200002c0
 8003420:	20000018 	.word	0x20000018
 8003424:	0800ee0c 	.word	0x0800ee0c
 8003428:	200002e0 	.word	0x200002e0

0800342c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b089      	sub	sp, #36	; 0x24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	 int steps;
	 int count_task2;
  /* Infinite loop */
  for(;;)
  {
	  printf(" Task02 \n");
 8003434:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <StartTask02+0x84>)
 8003436:	0018      	movs	r0, r3
 8003438:	f007 ff1a 	bl	800b270 <puts>

	          // Wait for a message from the queue
	          if(osMessageQueueGet(myQueue01Handle, &receivedCommand, NULL, osWaitForever) == osOK)
 800343c:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <StartTask02+0x88>)
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	2301      	movs	r3, #1
 8003442:	425b      	negs	r3, r3
 8003444:	2408      	movs	r4, #8
 8003446:	1939      	adds	r1, r7, r4
 8003448:	2200      	movs	r2, #0
 800344a:	f004 f829 	bl	80074a0 <osMessageQueueGet>
 800344e:	1e03      	subs	r3, r0, #0
 8003450:	d11f      	bne.n	8003492 <StartTask02+0x66>
	          {
	              printf("Received motor command: ID=%p, Target Angle=%d, Step Delay=%d\n",
	                     (void *)receivedCommand.motorId, receivedCommand.targetAngle, receivedCommand.stepDelay);
 8003452:	193b      	adds	r3, r7, r4
 8003454:	6819      	ldr	r1, [r3, #0]
	              printf("Received motor command: ID=%p, Target Angle=%d, Step Delay=%d\n",
 8003456:	193b      	adds	r3, r7, r4
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	193b      	adds	r3, r7, r4
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4816      	ldr	r0, [pc, #88]	; (80034b8 <StartTask02+0x8c>)
 8003460:	f007 fe7a 	bl	800b158 <iprintf>
	              count_task2++;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	3301      	adds	r3, #1
 8003468:	61fb      	str	r3, [r7, #28]
	              // Convert angle to steps and run the motor
	              steps = ConvertAngleToSteps(receivedCommand.targetAngle);
 800346a:	193b      	adds	r3, r7, r4
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	0018      	movs	r0, r3
 8003470:	f7fd feb2 	bl	80011d8 <__aeabi_i2f>
 8003474:	1c03      	adds	r3, r0, #0
 8003476:	1c18      	adds	r0, r3, #0
 8003478:	f000 f84e 	bl	8003518 <ConvertAngleToSteps>
 800347c:	0003      	movs	r3, r0
 800347e:	61bb      	str	r3, [r7, #24]
	              StepMotor_Pulse(receivedCommand.motorId, steps, receivedCommand.Direction);
 8003480:	193b      	adds	r3, r7, r4
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	b299      	uxth	r1, r3
 8003488:	193b      	adds	r3, r7, r4
 800348a:	7b1b      	ldrb	r3, [r3, #12]
 800348c:	001a      	movs	r2, r3
 800348e:	f000 f869 	bl	8003564 <StepMotor_Pulse>
	          }

	          osDelay(500);  // Delay for a bit before checking the queue again
 8003492:	23fa      	movs	r3, #250	; 0xfa
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	0018      	movs	r0, r3
 8003498:	f003 fd9c 	bl	8006fd4 <osDelay>
	          printf(" Task02 \n");
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <StartTask02+0x84>)
 800349e:	0018      	movs	r0, r3
 80034a0:	f007 fee6 	bl	800b270 <puts>
	          osSemaphoreRelease(UARTSem02Handle);
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <StartTask02+0x90>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f003 febb 	bl	8007224 <osSemaphoreRelease>
	  printf(" Task02 \n");
 80034ae:	e7c1      	b.n	8003434 <StartTask02+0x8>
 80034b0:	0800ee24 	.word	0x0800ee24
 80034b4:	200002c0 	.word	0x200002c0
 80034b8:	0800ee30 	.word	0x0800ee30
 80034bc:	200002c8 	.word	0x200002c8

080034c0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  osDelay(10);
 80034c8:	200a      	movs	r0, #10
 80034ca:	f003 fd83 	bl	8006fd4 <osDelay>
 80034ce:	e7fb      	b.n	80034c8 <StartTask03+0x8>

080034d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d101      	bne.n	80034e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034e2:	f000 fa8b 	bl	80039fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b002      	add	sp, #8
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	40001000 	.word	0x40001000

080034f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034f8:	b672      	cpsid	i
}
 80034fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034fc:	e7fe      	b.n	80034fc <Error_Handler+0x8>
	...

08003500 <GetEncoderPosition>:
 */
#include "motor_control.h"
#include "main.h"

int GetEncoderPosition(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
	//encoder value
printf("encode");
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <GetEncoderPosition+0x14>)
 8003506:	0018      	movs	r0, r3
 8003508:	f007 fe26 	bl	800b158 <iprintf>
return 1;
 800350c:	2301      	movs	r3, #1
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	0800ee70 	.word	0x0800ee70

08003518 <ConvertAngleToSteps>:

uint16_t ConvertAngleToSteps(float targetAngle) {
 8003518:	b5b0      	push	{r4, r5, r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	static uint16_t stepsPerRevolution= 400;
    // Ensure the targetAngle is within 0-360 degrees


    // Calculate the number of steps required for the given angle
    uint16_t steps = (uint16_t)((targetAngle / 360.0f) * stepsPerRevolution);
 8003520:	490e      	ldr	r1, [pc, #56]	; (800355c <ConvertAngleToSteps+0x44>)
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fd f99c 	bl	8000860 <__aeabi_fdiv>
 8003528:	1c03      	adds	r3, r0, #0
 800352a:	1c1c      	adds	r4, r3, #0
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <ConvertAngleToSteps+0x48>)
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	0018      	movs	r0, r3
 8003532:	f7fd fe51 	bl	80011d8 <__aeabi_i2f>
 8003536:	1c03      	adds	r3, r0, #0
 8003538:	1c19      	adds	r1, r3, #0
 800353a:	1c20      	adds	r0, r4, #0
 800353c:	f7fd fb58 	bl	8000bf0 <__aeabi_fmul>
 8003540:	1c03      	adds	r3, r0, #0
 8003542:	250e      	movs	r5, #14
 8003544:	197c      	adds	r4, r7, r5
 8003546:	1c18      	adds	r0, r3, #0
 8003548:	f7fd f836 	bl	80005b8 <__aeabi_f2uiz>
 800354c:	0003      	movs	r3, r0
 800354e:	8023      	strh	r3, [r4, #0]

    return steps;
 8003550:	197b      	adds	r3, r7, r5
 8003552:	881b      	ldrh	r3, [r3, #0]
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	b004      	add	sp, #16
 800355a:	bdb0      	pop	{r4, r5, r7, pc}
 800355c:	43b40000 	.word	0x43b40000
 8003560:	20000028 	.word	0x20000028

08003564 <StepMotor_Pulse>:



void StepMotor_Pulse(StepperMotor_t *motor, uint16_t steps, uint8_t direction) {
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	0008      	movs	r0, r1
 800356e:	0011      	movs	r1, r2
 8003570:	1cbb      	adds	r3, r7, #2
 8003572:	1c02      	adds	r2, r0, #0
 8003574:	801a      	strh	r2, [r3, #0]
 8003576:	1c7b      	adds	r3, r7, #1
 8003578:	1c0a      	adds	r2, r1, #0
 800357a:	701a      	strb	r2, [r3, #0]
    // Get the initial encoder position
    motor->encoderPosition = GetEncoderPosition();
 800357c:	f7ff ffc0 	bl	8003500 <GetEncoderPosition>
 8003580:	0002      	movs	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	615a      	str	r2, [r3, #20]

    DEBUG_PRINT("StepMotor_Pulse");
 8003586:	4b27      	ldr	r3, [pc, #156]	; (8003624 <StepMotor_Pulse+0xc0>)
 8003588:	0018      	movs	r0, r3
 800358a:	f007 fde5 	bl	800b158 <iprintf>
    // Set the direction
    if (direction == 1) {
 800358e:	1c7b      	adds	r3, r7, #1
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d108      	bne.n	80035a8 <StepMotor_Pulse+0x44>
        HAL_GPIO_WritePin(motor->DIR_Port, motor->DIR_Pin, GPIO_PIN_SET);  // Forward
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6898      	ldr	r0, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	899b      	ldrh	r3, [r3, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	0019      	movs	r1, r3
 80035a2:	f000 fcf9 	bl	8003f98 <HAL_GPIO_WritePin>
 80035a6:	e007      	b.n	80035b8 <StepMotor_Pulse+0x54>
    } else {
        HAL_GPIO_WritePin(motor->DIR_Port, motor->DIR_Pin, GPIO_PIN_RESET);  // Reverse
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6898      	ldr	r0, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	899b      	ldrh	r3, [r3, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	0019      	movs	r1, r3
 80035b4:	f000 fcf0 	bl	8003f98 <HAL_GPIO_WritePin>
    }

    // Perform the steps
    for (uint16_t i = 0; i < steps; i++) {
 80035b8:	230e      	movs	r3, #14
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	2200      	movs	r2, #0
 80035be:	801a      	strh	r2, [r3, #0]
 80035c0:	e01f      	b.n	8003602 <StepMotor_Pulse+0x9e>
        HAL_GPIO_WritePin(motor->STEP_Port, motor->STEP_Pin, GPIO_PIN_SET);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	889b      	ldrh	r3, [r3, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	0019      	movs	r1, r3
 80035ce:	f000 fce3 	bl	8003f98 <HAL_GPIO_WritePin>
        osDelay(motor->stepDelay);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	0018      	movs	r0, r3
 80035d8:	f003 fcfc 	bl	8006fd4 <osDelay>
        HAL_GPIO_WritePin(motor->STEP_Port, motor->STEP_Pin, GPIO_PIN_RESET);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	889b      	ldrh	r3, [r3, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	0019      	movs	r1, r3
 80035e8:	f000 fcd6 	bl	8003f98 <HAL_GPIO_WritePin>
        osDelay(motor->stepDelay);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f003 fcef 	bl	8006fd4 <osDelay>
    for (uint16_t i = 0; i < steps; i++) {
 80035f6:	210e      	movs	r1, #14
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	881a      	ldrh	r2, [r3, #0]
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	3201      	adds	r2, #1
 8003600:	801a      	strh	r2, [r3, #0]
 8003602:	230e      	movs	r3, #14
 8003604:	18fa      	adds	r2, r7, r3
 8003606:	1cbb      	adds	r3, r7, #2
 8003608:	8812      	ldrh	r2, [r2, #0]
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d3d8      	bcc.n	80035c2 <StepMotor_Pulse+0x5e>
    }

    // Get the final encoder position
    motor->encoderPosition = GetEncoderPosition();
 8003610:	f7ff ff76 	bl	8003500 <GetEncoderPosition>
 8003614:	0002      	movs	r2, r0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	615a      	str	r2, [r3, #20]
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b004      	add	sp, #16
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	0800ee78 	.word	0x0800ee78

08003628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_MspInit+0x34>)
 800362e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003630:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_MspInit+0x34>)
 8003632:	2101      	movs	r1, #1
 8003634:	430a      	orrs	r2, r1
 8003636:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <HAL_MspInit+0x34>)
 800363a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363c:	4b07      	ldr	r3, [pc, #28]	; (800365c <HAL_MspInit+0x34>)
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	0549      	lsls	r1, r1, #21
 8003642:	430a      	orrs	r2, r1
 8003644:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003646:	2302      	movs	r3, #2
 8003648:	425b      	negs	r3, r3
 800364a:	2200      	movs	r2, #0
 800364c:	2103      	movs	r1, #3
 800364e:	0018      	movs	r0, r3
 8003650:	f000 fa78 	bl	8003b44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	40021000 	.word	0x40021000

08003660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b089      	sub	sp, #36	; 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	240c      	movs	r4, #12
 800366a:	193b      	adds	r3, r7, r4
 800366c:	0018      	movs	r0, r3
 800366e:	2314      	movs	r3, #20
 8003670:	001a      	movs	r2, r3
 8003672:	2100      	movs	r1, #0
 8003674:	f006 fe5a 	bl	800a32c <memset>
  if(huart->Instance==USART2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_UART_MspInit+0x90>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d131      	bne.n	80036e6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003682:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <HAL_UART_MspInit+0x94>)
 8003684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_UART_MspInit+0x94>)
 8003688:	2180      	movs	r1, #128	; 0x80
 800368a:	0289      	lsls	r1, r1, #10
 800368c:	430a      	orrs	r2, r1
 800368e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003690:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_UART_MspInit+0x94>)
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <HAL_UART_MspInit+0x94>)
 8003696:	2101      	movs	r1, #1
 8003698:	430a      	orrs	r2, r1
 800369a:	62da      	str	r2, [r3, #44]	; 0x2c
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <HAL_UART_MspInit+0x94>)
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	2201      	movs	r2, #1
 80036a2:	4013      	ands	r3, r2
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036a8:	0021      	movs	r1, r4
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	220c      	movs	r2, #12
 80036ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	187b      	adds	r3, r7, r1
 80036b2:	2202      	movs	r2, #2
 80036b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	187b      	adds	r3, r7, r1
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036bc:	187b      	adds	r3, r7, r1
 80036be:	2203      	movs	r2, #3
 80036c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	2204      	movs	r2, #4
 80036c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c8:	187a      	adds	r2, r7, r1
 80036ca:	23a0      	movs	r3, #160	; 0xa0
 80036cc:	05db      	lsls	r3, r3, #23
 80036ce:	0011      	movs	r1, r2
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 fae3 	bl	8003c9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2103      	movs	r1, #3
 80036da:	201c      	movs	r0, #28
 80036dc:	f000 fa32 	bl	8003b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036e0:	201c      	movs	r0, #28
 80036e2:	f000 fa44 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b009      	add	sp, #36	; 0x24
 80036ec:	bd90      	pop	{r4, r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	40004400 	.word	0x40004400
 80036f4:	40021000 	.word	0x40021000

080036f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	0019      	movs	r1, r3
 800370e:	2011      	movs	r0, #17
 8003710:	f000 fa18 	bl	8003b44 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003714:	2011      	movs	r0, #17
 8003716:	f000 fa2a 	bl	8003b6e <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HAL_InitTick+0x98>)
 800371c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371e:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <HAL_InitTick+0x98>)
 8003720:	2110      	movs	r1, #16
 8003722:	430a      	orrs	r2, r1
 8003724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003726:	2308      	movs	r3, #8
 8003728:	18fa      	adds	r2, r7, r3
 800372a:	230c      	movs	r3, #12
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	0011      	movs	r1, r2
 8003730:	0018      	movs	r0, r3
 8003732:	f001 fa47 	bl	8004bc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003736:	f001 fa19 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 800373a:	0003      	movs	r3, r0
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	4914      	ldr	r1, [pc, #80]	; (8003794 <HAL_InitTick+0x9c>)
 8003742:	0018      	movs	r0, r3
 8003744:	f7fc fcfc 	bl	8000140 <__udivsi3>
 8003748:	0003      	movs	r3, r0
 800374a:	3b01      	subs	r3, #1
 800374c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_InitTick+0xa0>)
 8003750:	4a12      	ldr	r2, [pc, #72]	; (800379c <HAL_InitTick+0xa4>)
 8003752:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_InitTick+0xa0>)
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <HAL_InitTick+0xa8>)
 8003758:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800375a:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <HAL_InitTick+0xa0>)
 800375c:	6a3a      	ldr	r2, [r7, #32]
 800375e:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_InitTick+0xa0>)
 8003762:	2200      	movs	r2, #0
 8003764:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <HAL_InitTick+0xa0>)
 8003768:	2200      	movs	r2, #0
 800376a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <HAL_InitTick+0xa0>)
 800376e:	0018      	movs	r0, r3
 8003770:	f001 fbf8 	bl	8004f64 <HAL_TIM_Base_Init>
 8003774:	1e03      	subs	r3, r0, #0
 8003776:	d105      	bne.n	8003784 <HAL_InitTick+0x8c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_InitTick+0xa0>)
 800377a:	0018      	movs	r0, r3
 800377c:	f001 fc3a 	bl	8004ff4 <HAL_TIM_Base_Start_IT>
 8003780:	0003      	movs	r3, r0
 8003782:	e000      	b.n	8003786 <HAL_InitTick+0x8e>
  }

  /* Return function status */
  return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b00a      	add	sp, #40	; 0x28
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	40021000 	.word	0x40021000
 8003794:	000f4240 	.word	0x000f4240
 8003798:	200002e4 	.word	0x200002e4
 800379c:	40001000 	.word	0x40001000
 80037a0:	000003e7 	.word	0x000003e7

080037a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037a8:	e7fe      	b.n	80037a8 <NMI_Handler+0x4>

080037aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ae:	e7fe      	b.n	80037ae <HardFault_Handler+0x4>

080037b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <TIM6_DAC_IRQHandler+0x14>)
 80037b6:	0018      	movs	r0, r3
 80037b8:	f001 fc6e 	bl	8005098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	200002e4 	.word	0x200002e4

080037c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <USART2_IRQHandler+0x14>)
 80037ce:	0018      	movs	r0, r3
 80037d0:	f002 f800 	bl	80057d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	2000022c 	.word	0x2000022c

080037e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
	return 1;
 80037e4:	2301      	movs	r3, #1
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <_kill>:

int _kill(int pid, int sig)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037f6:	f006 fc61 	bl	800a0bc <__errno>
 80037fa:	0003      	movs	r3, r0
 80037fc:	2216      	movs	r2, #22
 80037fe:	601a      	str	r2, [r3, #0]
	return -1;
 8003800:	2301      	movs	r3, #1
 8003802:	425b      	negs	r3, r3
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <_exit>:

void _exit (int status)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003814:	2301      	movs	r3, #1
 8003816:	425a      	negs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	0011      	movs	r1, r2
 800381c:	0018      	movs	r0, r3
 800381e:	f7ff ffe5 	bl	80037ec <_kill>
	while (1) {}		/* Make sure we hang here */
 8003822:	e7fe      	b.n	8003822 <_exit+0x16>

08003824 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e00a      	b.n	800384c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003836:	e000      	b.n	800383a <_read+0x16>
 8003838:	bf00      	nop
 800383a:	0001      	movs	r1, r0
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	60ba      	str	r2, [r7, #8]
 8003842:	b2ca      	uxtb	r2, r1
 8003844:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	3301      	adds	r3, #1
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	dbf0      	blt.n	8003836 <_read+0x12>
	}

return len;
 8003854:	687b      	ldr	r3, [r7, #4]
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	b006      	add	sp, #24
 800385c:	bd80      	pop	{r7, pc}

0800385e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e009      	b.n	8003884 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	60ba      	str	r2, [r7, #8]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	0018      	movs	r0, r3
 800387a:	f7ff fd3f 	bl	80032fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3301      	adds	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	dbf1      	blt.n	8003870 <_write+0x12>
	}
	return len;
 800388c:	687b      	ldr	r3, [r7, #4]
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b006      	add	sp, #24
 8003894:	bd80      	pop	{r7, pc}

08003896 <_close>:

int _close(int file)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
	return -1;
 800389e:	2301      	movs	r3, #1
 80038a0:	425b      	negs	r3, r3
}
 80038a2:	0018      	movs	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b002      	add	sp, #8
 80038a8:	bd80      	pop	{r7, pc}

080038aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	0192      	lsls	r2, r2, #6
 80038ba:	605a      	str	r2, [r3, #4]
	return 0;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b002      	add	sp, #8
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <_isatty>:

int _isatty(int file)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
	return 1;
 80038ce:	2301      	movs	r3, #1
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b002      	add	sp, #8
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
	return 0;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	0018      	movs	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b004      	add	sp, #16
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038f8:	4a14      	ldr	r2, [pc, #80]	; (800394c <_sbrk+0x5c>)
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <_sbrk+0x60>)
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <_sbrk+0x64>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <_sbrk+0x64>)
 800390e:	4a12      	ldr	r2, [pc, #72]	; (8003958 <_sbrk+0x68>)
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <_sbrk+0x64>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	18d3      	adds	r3, r2, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	429a      	cmp	r2, r3
 800391e:	d207      	bcs.n	8003930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003920:	f006 fbcc 	bl	800a0bc <__errno>
 8003924:	0003      	movs	r3, r0
 8003926:	220c      	movs	r2, #12
 8003928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800392a:	2301      	movs	r3, #1
 800392c:	425b      	negs	r3, r3
 800392e:	e009      	b.n	8003944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <_sbrk+0x64>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <_sbrk+0x64>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	18d2      	adds	r2, r2, r3
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <_sbrk+0x64>)
 8003940:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b006      	add	sp, #24
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20005000 	.word	0x20005000
 8003950:	00000400 	.word	0x00000400
 8003954:	20000324 	.word	0x20000324
 8003958:	20001d40 	.word	0x20001d40

0800395c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003960:	46c0      	nop			; (mov r8, r8)
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003968:	480d      	ldr	r0, [pc, #52]	; (80039a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800396a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800396c:	f7ff fff6 	bl	800395c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003970:	480c      	ldr	r0, [pc, #48]	; (80039a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003972:	490d      	ldr	r1, [pc, #52]	; (80039a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <LoopForever+0xe>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003978:	e002      	b.n	8003980 <LoopCopyDataInit>

0800397a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800397a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800397c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397e:	3304      	adds	r3, #4

08003980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003984:	d3f9      	bcc.n	800397a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003988:	4c0a      	ldr	r4, [pc, #40]	; (80039b4 <LoopForever+0x16>)
  movs r3, #0
 800398a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800398c:	e001      	b.n	8003992 <LoopFillZerobss>

0800398e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003990:	3204      	adds	r2, #4

08003992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003994:	d3fb      	bcc.n	800398e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8003996:	f006 fc99 	bl	800a2cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800399a:	f7ff fb03 	bl	8002fa4 <main>

0800399e <LoopForever>:

LoopForever:
    b LoopForever
 800399e:	e7fe      	b.n	800399e <LoopForever>
   ldr   r0, =_estack
 80039a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80039a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80039ac:	0800f624 	.word	0x0800f624
  ldr r2, =_sbss
 80039b0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80039b4:	20001d3c 	.word	0x20001d3c

080039b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039b8:	e7fe      	b.n	80039b8 <ADC1_COMP_IRQHandler>
	...

080039bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039c2:	1dfb      	adds	r3, r7, #7
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_Init+0x3c>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_Init+0x3c>)
 80039ce:	2140      	movs	r1, #64	; 0x40
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039d4:	2003      	movs	r0, #3
 80039d6:	f7ff fe8f 	bl	80036f8 <HAL_InitTick>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80039de:	1dfb      	adds	r3, r7, #7
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e001      	b.n	80039ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039e6:	f7ff fe1f 	bl	8003628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039ea:	1dfb      	adds	r3, r7, #7
 80039ec:	781b      	ldrb	r3, [r3, #0]
}
 80039ee:	0018      	movs	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b002      	add	sp, #8
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	40022000 	.word	0x40022000

080039fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_IncTick+0x1c>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	001a      	movs	r2, r3
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_IncTick+0x20>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	18d2      	adds	r2, r2, r3
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_IncTick+0x20>)
 8003a0e:	601a      	str	r2, [r3, #0]
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	20000034 	.word	0x20000034
 8003a1c:	20000328 	.word	0x20000328

08003a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  return uwTick;
 8003a24:	4b02      	ldr	r3, [pc, #8]	; (8003a30 <HAL_GetTick+0x10>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	20000328 	.word	0x20000328

08003a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	0002      	movs	r2, r0
 8003a3c:	1dfb      	adds	r3, r7, #7
 8003a3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a40:	1dfb      	adds	r3, r7, #7
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b7f      	cmp	r3, #127	; 0x7f
 8003a46:	d809      	bhi.n	8003a5c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a48:	1dfb      	adds	r3, r7, #7
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	001a      	movs	r2, r3
 8003a4e:	231f      	movs	r3, #31
 8003a50:	401a      	ands	r2, r3
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <__NVIC_EnableIRQ+0x30>)
 8003a54:	2101      	movs	r1, #1
 8003a56:	4091      	lsls	r1, r2
 8003a58:	000a      	movs	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]
  }
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b002      	add	sp, #8
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	e000e100 	.word	0xe000e100

08003a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	0002      	movs	r2, r0
 8003a70:	6039      	str	r1, [r7, #0]
 8003a72:	1dfb      	adds	r3, r7, #7
 8003a74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a76:	1dfb      	adds	r3, r7, #7
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a7c:	d828      	bhi.n	8003ad0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a7e:	4a2f      	ldr	r2, [pc, #188]	; (8003b3c <__NVIC_SetPriority+0xd4>)
 8003a80:	1dfb      	adds	r3, r7, #7
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	b25b      	sxtb	r3, r3
 8003a86:	089b      	lsrs	r3, r3, #2
 8003a88:	33c0      	adds	r3, #192	; 0xc0
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	589b      	ldr	r3, [r3, r2]
 8003a8e:	1dfa      	adds	r2, r7, #7
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	0011      	movs	r1, r2
 8003a94:	2203      	movs	r2, #3
 8003a96:	400a      	ands	r2, r1
 8003a98:	00d2      	lsls	r2, r2, #3
 8003a9a:	21ff      	movs	r1, #255	; 0xff
 8003a9c:	4091      	lsls	r1, r2
 8003a9e:	000a      	movs	r2, r1
 8003aa0:	43d2      	mvns	r2, r2
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	019b      	lsls	r3, r3, #6
 8003aaa:	22ff      	movs	r2, #255	; 0xff
 8003aac:	401a      	ands	r2, r3
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	4003      	ands	r3, r0
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003abc:	481f      	ldr	r0, [pc, #124]	; (8003b3c <__NVIC_SetPriority+0xd4>)
 8003abe:	1dfb      	adds	r3, r7, #7
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	b25b      	sxtb	r3, r3
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	33c0      	adds	r3, #192	; 0xc0
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ace:	e031      	b.n	8003b34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ad0:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <__NVIC_SetPriority+0xd8>)
 8003ad2:	1dfb      	adds	r3, r7, #7
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	230f      	movs	r3, #15
 8003ada:	400b      	ands	r3, r1
 8003adc:	3b08      	subs	r3, #8
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	3306      	adds	r3, #6
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	18d3      	adds	r3, r2, r3
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	1dfa      	adds	r2, r7, #7
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	0011      	movs	r1, r2
 8003af0:	2203      	movs	r2, #3
 8003af2:	400a      	ands	r2, r1
 8003af4:	00d2      	lsls	r2, r2, #3
 8003af6:	21ff      	movs	r1, #255	; 0xff
 8003af8:	4091      	lsls	r1, r2
 8003afa:	000a      	movs	r2, r1
 8003afc:	43d2      	mvns	r2, r2
 8003afe:	401a      	ands	r2, r3
 8003b00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	019b      	lsls	r3, r3, #6
 8003b06:	22ff      	movs	r2, #255	; 0xff
 8003b08:	401a      	ands	r2, r3
 8003b0a:	1dfb      	adds	r3, r7, #7
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	0018      	movs	r0, r3
 8003b10:	2303      	movs	r3, #3
 8003b12:	4003      	ands	r3, r0
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b18:	4809      	ldr	r0, [pc, #36]	; (8003b40 <__NVIC_SetPriority+0xd8>)
 8003b1a:	1dfb      	adds	r3, r7, #7
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	001c      	movs	r4, r3
 8003b20:	230f      	movs	r3, #15
 8003b22:	4023      	ands	r3, r4
 8003b24:	3b08      	subs	r3, #8
 8003b26:	089b      	lsrs	r3, r3, #2
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	3306      	adds	r3, #6
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	18c3      	adds	r3, r0, r3
 8003b30:	3304      	adds	r3, #4
 8003b32:	601a      	str	r2, [r3, #0]
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b003      	add	sp, #12
 8003b3a:	bd90      	pop	{r4, r7, pc}
 8003b3c:	e000e100 	.word	0xe000e100
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	210f      	movs	r1, #15
 8003b50:	187b      	adds	r3, r7, r1
 8003b52:	1c02      	adds	r2, r0, #0
 8003b54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	187b      	adds	r3, r7, r1
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	0011      	movs	r1, r2
 8003b60:	0018      	movs	r0, r3
 8003b62:	f7ff ff81 	bl	8003a68 <__NVIC_SetPriority>
}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b004      	add	sp, #16
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	0002      	movs	r2, r0
 8003b76:	1dfb      	adds	r3, r7, #7
 8003b78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b7a:	1dfb      	adds	r3, r7, #7
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	b25b      	sxtb	r3, r3
 8003b80:	0018      	movs	r0, r3
 8003b82:	f7ff ff57 	bl	8003a34 <__NVIC_EnableIRQ>
}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b002      	add	sp, #8
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b96:	230f      	movs	r3, #15
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2225      	movs	r2, #37	; 0x25
 8003ba2:	5c9b      	ldrb	r3, [r3, r2]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d008      	beq.n	8003bbc <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2204      	movs	r2, #4
 8003bae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	; 0x24
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e024      	b.n	8003c06 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	210e      	movs	r1, #14
 8003bc8:	438a      	bics	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	438a      	bics	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	221c      	movs	r2, #28
 8003be2:	401a      	ands	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	2101      	movs	r1, #1
 8003bea:	4091      	lsls	r1, r2
 8003bec:	000a      	movs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2225      	movs	r2, #37	; 0x25
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2224      	movs	r2, #36	; 0x24
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	5499      	strb	r1, [r3, r2]

    return status;
 8003c00:	230f      	movs	r3, #15
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003c06:	0018      	movs	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b004      	add	sp, #16
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c16:	210f      	movs	r1, #15
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2225      	movs	r2, #37	; 0x25
 8003c22:	5c9b      	ldrb	r3, [r3, r2]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d006      	beq.n	8003c38 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e02a      	b.n	8003c8e <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	210e      	movs	r1, #14
 8003c44:	438a      	bics	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2101      	movs	r1, #1
 8003c54:	438a      	bics	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	221c      	movs	r2, #28
 8003c5e:	401a      	ands	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	2101      	movs	r1, #1
 8003c66:	4091      	lsls	r1, r2
 8003c68:	000a      	movs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2225      	movs	r2, #37	; 0x25
 8003c70:	2101      	movs	r1, #1
 8003c72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	2100      	movs	r1, #0
 8003c7a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	0010      	movs	r0, r2
 8003c8c:	4798      	blx	r3
    }
  }
  return status;
 8003c8e:	230f      	movs	r3, #15
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	781b      	ldrb	r3, [r3, #0]
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b004      	add	sp, #16
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003cb2:	e155      	b.n	8003f60 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4091      	lsls	r1, r2
 8003cbe:	000a      	movs	r2, r1
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d100      	bne.n	8003ccc <HAL_GPIO_Init+0x30>
 8003cca:	e146      	b.n	8003f5a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d005      	beq.n	8003ce4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2203      	movs	r2, #3
 8003cde:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d130      	bne.n	8003d46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	2203      	movs	r2, #3
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	0013      	movs	r3, r2
 8003cf4:	43da      	mvns	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	409a      	lsls	r2, r3
 8003d06:	0013      	movs	r3, r2
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	0013      	movs	r3, r2
 8003d22:	43da      	mvns	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4013      	ands	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	2201      	movs	r2, #1
 8003d32:	401a      	ands	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	409a      	lsls	r2, r3
 8003d38:	0013      	movs	r3, r2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d017      	beq.n	8003d82 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	0013      	movs	r3, r2
 8003d62:	43da      	mvns	r2, r3
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	409a      	lsls	r2, r3
 8003d74:	0013      	movs	r3, r2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2203      	movs	r2, #3
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d123      	bne.n	8003dd6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	08da      	lsrs	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3208      	adds	r2, #8
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	58d3      	ldr	r3, [r2, r3]
 8003d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2207      	movs	r2, #7
 8003da0:	4013      	ands	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	220f      	movs	r2, #15
 8003da6:	409a      	lsls	r2, r3
 8003da8:	0013      	movs	r3, r2
 8003daa:	43da      	mvns	r2, r3
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2107      	movs	r1, #7
 8003dba:	400b      	ands	r3, r1
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	0092      	lsls	r2, r2, #2
 8003dd2:	6939      	ldr	r1, [r7, #16]
 8003dd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	2203      	movs	r2, #3
 8003de2:	409a      	lsls	r2, r3
 8003de4:	0013      	movs	r3, r2
 8003de6:	43da      	mvns	r2, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2203      	movs	r2, #3
 8003df4:	401a      	ands	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	0013      	movs	r3, r2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	23c0      	movs	r3, #192	; 0xc0
 8003e10:	029b      	lsls	r3, r3, #10
 8003e12:	4013      	ands	r3, r2
 8003e14:	d100      	bne.n	8003e18 <HAL_GPIO_Init+0x17c>
 8003e16:	e0a0      	b.n	8003f5a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e18:	4b57      	ldr	r3, [pc, #348]	; (8003f78 <HAL_GPIO_Init+0x2dc>)
 8003e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1c:	4b56      	ldr	r3, [pc, #344]	; (8003f78 <HAL_GPIO_Init+0x2dc>)
 8003e1e:	2101      	movs	r1, #1
 8003e20:	430a      	orrs	r2, r1
 8003e22:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e24:	4a55      	ldr	r2, [pc, #340]	; (8003f7c <HAL_GPIO_Init+0x2e0>)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	589b      	ldr	r3, [r3, r2]
 8003e30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2203      	movs	r2, #3
 8003e36:	4013      	ands	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	0013      	movs	r3, r2
 8003e40:	43da      	mvns	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	23a0      	movs	r3, #160	; 0xa0
 8003e4c:	05db      	lsls	r3, r3, #23
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d01f      	beq.n	8003e92 <HAL_GPIO_Init+0x1f6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4a      	ldr	r2, [pc, #296]	; (8003f80 <HAL_GPIO_Init+0x2e4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d019      	beq.n	8003e8e <HAL_GPIO_Init+0x1f2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a49      	ldr	r2, [pc, #292]	; (8003f84 <HAL_GPIO_Init+0x2e8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_GPIO_Init+0x1ee>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a48      	ldr	r2, [pc, #288]	; (8003f88 <HAL_GPIO_Init+0x2ec>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00d      	beq.n	8003e86 <HAL_GPIO_Init+0x1ea>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a47      	ldr	r2, [pc, #284]	; (8003f8c <HAL_GPIO_Init+0x2f0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d007      	beq.n	8003e82 <HAL_GPIO_Init+0x1e6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a46      	ldr	r2, [pc, #280]	; (8003f90 <HAL_GPIO_Init+0x2f4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_GPIO_Init+0x1e2>
 8003e7a:	2305      	movs	r3, #5
 8003e7c:	e00a      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e7e:	2306      	movs	r3, #6
 8003e80:	e008      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e82:	2304      	movs	r3, #4
 8003e84:	e006      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e86:	2303      	movs	r3, #3
 8003e88:	e004      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e002      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_GPIO_Init+0x1f8>
 8003e92:	2300      	movs	r3, #0
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	2103      	movs	r1, #3
 8003e98:	400a      	ands	r2, r1
 8003e9a:	0092      	lsls	r2, r2, #2
 8003e9c:	4093      	lsls	r3, r2
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ea4:	4935      	ldr	r1, [pc, #212]	; (8003f7c <HAL_GPIO_Init+0x2e0>)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eb2:	4b38      	ldr	r3, [pc, #224]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	035b      	lsls	r3, r3, #13
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ed6:	4b2f      	ldr	r3, [pc, #188]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003edc:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	039b      	lsls	r3, r3, #14
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f00:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003f06:	4b23      	ldr	r3, [pc, #140]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	029b      	lsls	r3, r3, #10
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	43da      	mvns	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	025b      	lsls	r3, r3, #9
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	40da      	lsrs	r2, r3
 8003f68:	1e13      	subs	r3, r2, #0
 8003f6a:	d000      	beq.n	8003f6e <HAL_GPIO_Init+0x2d2>
 8003f6c:	e6a2      	b.n	8003cb4 <HAL_GPIO_Init+0x18>
  }
}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b006      	add	sp, #24
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	50000400 	.word	0x50000400
 8003f84:	50000800 	.word	0x50000800
 8003f88:	50000c00 	.word	0x50000c00
 8003f8c:	50001000 	.word	0x50001000
 8003f90:	50001c00 	.word	0x50001c00
 8003f94:	40010400 	.word	0x40010400

08003f98 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	0008      	movs	r0, r1
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	1cbb      	adds	r3, r7, #2
 8003fa6:	1c02      	adds	r2, r0, #0
 8003fa8:	801a      	strh	r2, [r3, #0]
 8003faa:	1c7b      	adds	r3, r7, #1
 8003fac:	1c0a      	adds	r2, r1, #0
 8003fae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fb0:	1c7b      	adds	r3, r7, #1
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fb8:	1cbb      	adds	r3, r7, #2
 8003fba:	881a      	ldrh	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003fc0:	e003      	b.n	8003fca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003fc2:	1cbb      	adds	r3, r7, #2
 8003fc4:	881a      	ldrh	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b002      	add	sp, #8
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd4:	b5b0      	push	{r4, r5, r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f000 fbbf 	bl	8004766 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe8:	4bc9      	ldr	r3, [pc, #804]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	220c      	movs	r2, #12
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff2:	4bc7      	ldr	r3, [pc, #796]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	025b      	lsls	r3, r3, #9
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2201      	movs	r2, #1
 8004004:	4013      	ands	r3, r2
 8004006:	d100      	bne.n	800400a <HAL_RCC_OscConfig+0x36>
 8004008:	e07e      	b.n	8004108 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b08      	cmp	r3, #8
 800400e:	d007      	beq.n	8004020 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d112      	bne.n	800403c <HAL_RCC_OscConfig+0x68>
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	025b      	lsls	r3, r3, #9
 800401c:	429a      	cmp	r2, r3
 800401e:	d10d      	bne.n	800403c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004020:	4bbb      	ldr	r3, [pc, #748]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	029b      	lsls	r3, r3, #10
 8004028:	4013      	ands	r3, r2
 800402a:	d100      	bne.n	800402e <HAL_RCC_OscConfig+0x5a>
 800402c:	e06b      	b.n	8004106 <HAL_RCC_OscConfig+0x132>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d167      	bne.n	8004106 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f000 fb95 	bl	8004766 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	025b      	lsls	r3, r3, #9
 8004044:	429a      	cmp	r2, r3
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x84>
 8004048:	4bb1      	ldr	r3, [pc, #708]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4bb0      	ldr	r3, [pc, #704]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800404e:	2180      	movs	r1, #128	; 0x80
 8004050:	0249      	lsls	r1, r1, #9
 8004052:	430a      	orrs	r2, r1
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e027      	b.n	80040a8 <HAL_RCC_OscConfig+0xd4>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	23a0      	movs	r3, #160	; 0xa0
 800405e:	02db      	lsls	r3, r3, #11
 8004060:	429a      	cmp	r2, r3
 8004062:	d10e      	bne.n	8004082 <HAL_RCC_OscConfig+0xae>
 8004064:	4baa      	ldr	r3, [pc, #680]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4ba9      	ldr	r3, [pc, #676]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800406a:	2180      	movs	r1, #128	; 0x80
 800406c:	02c9      	lsls	r1, r1, #11
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	4ba7      	ldr	r3, [pc, #668]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4ba6      	ldr	r3, [pc, #664]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	0249      	lsls	r1, r1, #9
 800407c:	430a      	orrs	r2, r1
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e012      	b.n	80040a8 <HAL_RCC_OscConfig+0xd4>
 8004082:	4ba3      	ldr	r3, [pc, #652]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4ba2      	ldr	r3, [pc, #648]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004088:	49a2      	ldr	r1, [pc, #648]	; (8004314 <HAL_RCC_OscConfig+0x340>)
 800408a:	400a      	ands	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	4ba0      	ldr	r3, [pc, #640]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	2380      	movs	r3, #128	; 0x80
 8004094:	025b      	lsls	r3, r3, #9
 8004096:	4013      	ands	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4b9c      	ldr	r3, [pc, #624]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b9b      	ldr	r3, [pc, #620]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 80040a2:	499d      	ldr	r1, [pc, #628]	; (8004318 <HAL_RCC_OscConfig+0x344>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7ff fcb6 	bl	8003a20 <HAL_GetTick>
 80040b4:	0003      	movs	r3, r0
 80040b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040b8:	e009      	b.n	80040ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ba:	f7ff fcb1 	bl	8003a20 <HAL_GetTick>
 80040be:	0002      	movs	r2, r0
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b64      	cmp	r3, #100	; 0x64
 80040c6:	d902      	bls.n	80040ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	f000 fb4c 	bl	8004766 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040ce:	4b90      	ldr	r3, [pc, #576]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	2380      	movs	r3, #128	; 0x80
 80040d4:	029b      	lsls	r3, r3, #10
 80040d6:	4013      	ands	r3, r2
 80040d8:	d0ef      	beq.n	80040ba <HAL_RCC_OscConfig+0xe6>
 80040da:	e015      	b.n	8004108 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7ff fca0 	bl	8003a20 <HAL_GetTick>
 80040e0:	0003      	movs	r3, r0
 80040e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e6:	f7ff fc9b 	bl	8003a20 <HAL_GetTick>
 80040ea:	0002      	movs	r2, r0
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b64      	cmp	r3, #100	; 0x64
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e336      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040f8:	4b85      	ldr	r3, [pc, #532]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	029b      	lsls	r3, r3, #10
 8004100:	4013      	ands	r3, r2
 8004102:	d1f0      	bne.n	80040e6 <HAL_RCC_OscConfig+0x112>
 8004104:	e000      	b.n	8004108 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004106:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2202      	movs	r2, #2
 800410e:	4013      	ands	r3, r2
 8004110:	d100      	bne.n	8004114 <HAL_RCC_OscConfig+0x140>
 8004112:	e099      	b.n	8004248 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	2220      	movs	r2, #32
 800411e:	4013      	ands	r3, r2
 8004120:	d009      	beq.n	8004136 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004122:	4b7b      	ldr	r3, [pc, #492]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	4b7a      	ldr	r3, [pc, #488]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004128:	2120      	movs	r1, #32
 800412a:	430a      	orrs	r2, r1
 800412c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	2220      	movs	r2, #32
 8004132:	4393      	bics	r3, r2
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d005      	beq.n	8004148 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d13e      	bne.n	80041c0 <HAL_RCC_OscConfig+0x1ec>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d13b      	bne.n	80041c0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004148:	4b71      	ldr	r3, [pc, #452]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2204      	movs	r2, #4
 800414e:	4013      	ands	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_RCC_OscConfig+0x188>
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e304      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415c:	4b6c      	ldr	r3, [pc, #432]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4a6e      	ldr	r2, [pc, #440]	; (800431c <HAL_RCC_OscConfig+0x348>)
 8004162:	4013      	ands	r3, r2
 8004164:	0019      	movs	r1, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	4b68      	ldr	r3, [pc, #416]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004172:	4b67      	ldr	r3, [pc, #412]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2209      	movs	r2, #9
 8004178:	4393      	bics	r3, r2
 800417a:	0019      	movs	r1, r3
 800417c:	4b64      	ldr	r3, [pc, #400]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800417e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004184:	f000 fc42 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 8004188:	0001      	movs	r1, r0
 800418a:	4b61      	ldr	r3, [pc, #388]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	220f      	movs	r2, #15
 8004192:	4013      	ands	r3, r2
 8004194:	4a62      	ldr	r2, [pc, #392]	; (8004320 <HAL_RCC_OscConfig+0x34c>)
 8004196:	5cd3      	ldrb	r3, [r2, r3]
 8004198:	000a      	movs	r2, r1
 800419a:	40da      	lsrs	r2, r3
 800419c:	4b61      	ldr	r3, [pc, #388]	; (8004324 <HAL_RCC_OscConfig+0x350>)
 800419e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80041a0:	4b61      	ldr	r3, [pc, #388]	; (8004328 <HAL_RCC_OscConfig+0x354>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2513      	movs	r5, #19
 80041a6:	197c      	adds	r4, r7, r5
 80041a8:	0018      	movs	r0, r3
 80041aa:	f7ff faa5 	bl	80036f8 <HAL_InitTick>
 80041ae:	0003      	movs	r3, r0
 80041b0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80041b2:	197b      	adds	r3, r7, r5
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d046      	beq.n	8004248 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80041ba:	197b      	adds	r3, r7, r5
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	e2d2      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d027      	beq.n	8004216 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80041c6:	4b52      	ldr	r3, [pc, #328]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2209      	movs	r2, #9
 80041cc:	4393      	bics	r3, r2
 80041ce:	0019      	movs	r1, r3
 80041d0:	4b4f      	ldr	r3, [pc, #316]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 80041d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d4:	430a      	orrs	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7ff fc22 	bl	8003a20 <HAL_GetTick>
 80041dc:	0003      	movs	r3, r0
 80041de:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e2:	f7ff fc1d 	bl	8003a20 <HAL_GetTick>
 80041e6:	0002      	movs	r2, r0
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e2b8      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041f4:	4b46      	ldr	r3, [pc, #280]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2204      	movs	r2, #4
 80041fa:	4013      	ands	r3, r2
 80041fc:	d0f1      	beq.n	80041e2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fe:	4b44      	ldr	r3, [pc, #272]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4a46      	ldr	r2, [pc, #280]	; (800431c <HAL_RCC_OscConfig+0x348>)
 8004204:	4013      	ands	r3, r2
 8004206:	0019      	movs	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	021a      	lsls	r2, r3, #8
 800420e:	4b40      	ldr	r3, [pc, #256]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	e018      	b.n	8004248 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004216:	4b3e      	ldr	r3, [pc, #248]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b3d      	ldr	r3, [pc, #244]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800421c:	2101      	movs	r1, #1
 800421e:	438a      	bics	r2, r1
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004222:	f7ff fbfd 	bl	8003a20 <HAL_GetTick>
 8004226:	0003      	movs	r3, r0
 8004228:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800422c:	f7ff fbf8 	bl	8003a20 <HAL_GetTick>
 8004230:	0002      	movs	r2, r0
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e293      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800423e:	4b34      	ldr	r3, [pc, #208]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2204      	movs	r2, #4
 8004244:	4013      	ands	r3, r2
 8004246:	d1f1      	bne.n	800422c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2210      	movs	r2, #16
 800424e:	4013      	ands	r3, r2
 8004250:	d100      	bne.n	8004254 <HAL_RCC_OscConfig+0x280>
 8004252:	e0a2      	b.n	800439a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d140      	bne.n	80042dc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800425a:	4b2d      	ldr	r3, [pc, #180]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4013      	ands	r3, r2
 8004264:	d005      	beq.n	8004272 <HAL_RCC_OscConfig+0x29e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e279      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004272:	4b27      	ldr	r3, [pc, #156]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4a2d      	ldr	r2, [pc, #180]	; (800432c <HAL_RCC_OscConfig+0x358>)
 8004278:	4013      	ands	r3, r2
 800427a:	0019      	movs	r1, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004286:	4b22      	ldr	r3, [pc, #136]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	021b      	lsls	r3, r3, #8
 800428c:	0a19      	lsrs	r1, r3, #8
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	061a      	lsls	r2, r3, #24
 8004294:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	0b5b      	lsrs	r3, r3, #13
 80042a0:	3301      	adds	r3, #1
 80042a2:	2280      	movs	r2, #128	; 0x80
 80042a4:	0212      	lsls	r2, r2, #8
 80042a6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80042a8:	4b19      	ldr	r3, [pc, #100]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	091b      	lsrs	r3, r3, #4
 80042ae:	210f      	movs	r1, #15
 80042b0:	400b      	ands	r3, r1
 80042b2:	491b      	ldr	r1, [pc, #108]	; (8004320 <HAL_RCC_OscConfig+0x34c>)
 80042b4:	5ccb      	ldrb	r3, [r1, r3]
 80042b6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCC_OscConfig+0x350>)
 80042ba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <HAL_RCC_OscConfig+0x354>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2513      	movs	r5, #19
 80042c2:	197c      	adds	r4, r7, r5
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff fa17 	bl	80036f8 <HAL_InitTick>
 80042ca:	0003      	movs	r3, r0
 80042cc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80042ce:	197b      	adds	r3, r7, r5
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d061      	beq.n	800439a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80042d6:	197b      	adds	r3, r7, r5
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	e244      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d040      	beq.n	8004366 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <HAL_RCC_OscConfig+0x33c>)
 80042ea:	2180      	movs	r1, #128	; 0x80
 80042ec:	0049      	lsls	r1, r1, #1
 80042ee:	430a      	orrs	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f2:	f7ff fb95 	bl	8003a20 <HAL_GetTick>
 80042f6:	0003      	movs	r3, r0
 80042f8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042fa:	e019      	b.n	8004330 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042fc:	f7ff fb90 	bl	8003a20 <HAL_GetTick>
 8004300:	0002      	movs	r2, r0
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d912      	bls.n	8004330 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e22b      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	40021000 	.word	0x40021000
 8004314:	fffeffff 	.word	0xfffeffff
 8004318:	fffbffff 	.word	0xfffbffff
 800431c:	ffffe0ff 	.word	0xffffe0ff
 8004320:	0800f0dc 	.word	0x0800f0dc
 8004324:	2000002c 	.word	0x2000002c
 8004328:	20000030 	.word	0x20000030
 800432c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004330:	4bca      	ldr	r3, [pc, #808]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4013      	ands	r3, r2
 800433a:	d0df      	beq.n	80042fc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800433c:	4bc7      	ldr	r3, [pc, #796]	; (800465c <HAL_RCC_OscConfig+0x688>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	4ac7      	ldr	r2, [pc, #796]	; (8004660 <HAL_RCC_OscConfig+0x68c>)
 8004342:	4013      	ands	r3, r2
 8004344:	0019      	movs	r1, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800434a:	4bc4      	ldr	r3, [pc, #784]	; (800465c <HAL_RCC_OscConfig+0x688>)
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004350:	4bc2      	ldr	r3, [pc, #776]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	0a19      	lsrs	r1, r3, #8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	061a      	lsls	r2, r3, #24
 800435e:	4bbf      	ldr	r3, [pc, #764]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
 8004364:	e019      	b.n	800439a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004366:	4bbd      	ldr	r3, [pc, #756]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4bbc      	ldr	r3, [pc, #752]	; (800465c <HAL_RCC_OscConfig+0x688>)
 800436c:	49bd      	ldr	r1, [pc, #756]	; (8004664 <HAL_RCC_OscConfig+0x690>)
 800436e:	400a      	ands	r2, r1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004372:	f7ff fb55 	bl	8003a20 <HAL_GetTick>
 8004376:	0003      	movs	r3, r0
 8004378:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800437c:	f7ff fb50 	bl	8003a20 <HAL_GetTick>
 8004380:	0002      	movs	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e1eb      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800438e:	4bb3      	ldr	r3, [pc, #716]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4013      	ands	r3, r2
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2208      	movs	r2, #8
 80043a0:	4013      	ands	r3, r2
 80043a2:	d036      	beq.n	8004412 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d019      	beq.n	80043e0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ac:	4bab      	ldr	r3, [pc, #684]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80043ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043b0:	4baa      	ldr	r3, [pc, #680]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80043b2:	2101      	movs	r1, #1
 80043b4:	430a      	orrs	r2, r1
 80043b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b8:	f7ff fb32 	bl	8003a20 <HAL_GetTick>
 80043bc:	0003      	movs	r3, r0
 80043be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c2:	f7ff fb2d 	bl	8003a20 <HAL_GetTick>
 80043c6:	0002      	movs	r2, r0
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e1c8      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043d4:	4ba1      	ldr	r3, [pc, #644]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80043d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d8:	2202      	movs	r2, #2
 80043da:	4013      	ands	r3, r2
 80043dc:	d0f1      	beq.n	80043c2 <HAL_RCC_OscConfig+0x3ee>
 80043de:	e018      	b.n	8004412 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e0:	4b9e      	ldr	r3, [pc, #632]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80043e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043e4:	4b9d      	ldr	r3, [pc, #628]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80043e6:	2101      	movs	r1, #1
 80043e8:	438a      	bics	r2, r1
 80043ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ec:	f7ff fb18 	bl	8003a20 <HAL_GetTick>
 80043f0:	0003      	movs	r3, r0
 80043f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f6:	f7ff fb13 	bl	8003a20 <HAL_GetTick>
 80043fa:	0002      	movs	r2, r0
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e1ae      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004408:	4b94      	ldr	r3, [pc, #592]	; (800465c <HAL_RCC_OscConfig+0x688>)
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	2202      	movs	r2, #2
 800440e:	4013      	ands	r3, r2
 8004410:	d1f1      	bne.n	80043f6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2204      	movs	r2, #4
 8004418:	4013      	ands	r3, r2
 800441a:	d100      	bne.n	800441e <HAL_RCC_OscConfig+0x44a>
 800441c:	e0ae      	b.n	800457c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441e:	2023      	movs	r0, #35	; 0x23
 8004420:	183b      	adds	r3, r7, r0
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004426:	4b8d      	ldr	r3, [pc, #564]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	055b      	lsls	r3, r3, #21
 800442e:	4013      	ands	r3, r2
 8004430:	d109      	bne.n	8004446 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004432:	4b8a      	ldr	r3, [pc, #552]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004436:	4b89      	ldr	r3, [pc, #548]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004438:	2180      	movs	r1, #128	; 0x80
 800443a:	0549      	lsls	r1, r1, #21
 800443c:	430a      	orrs	r2, r1
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004440:	183b      	adds	r3, r7, r0
 8004442:	2201      	movs	r2, #1
 8004444:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004446:	4b88      	ldr	r3, [pc, #544]	; (8004668 <HAL_RCC_OscConfig+0x694>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4013      	ands	r3, r2
 8004450:	d11a      	bne.n	8004488 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004452:	4b85      	ldr	r3, [pc, #532]	; (8004668 <HAL_RCC_OscConfig+0x694>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4b84      	ldr	r3, [pc, #528]	; (8004668 <HAL_RCC_OscConfig+0x694>)
 8004458:	2180      	movs	r1, #128	; 0x80
 800445a:	0049      	lsls	r1, r1, #1
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004460:	f7ff fade 	bl	8003a20 <HAL_GetTick>
 8004464:	0003      	movs	r3, r0
 8004466:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446a:	f7ff fad9 	bl	8003a20 <HAL_GetTick>
 800446e:	0002      	movs	r2, r0
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b64      	cmp	r3, #100	; 0x64
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e174      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	4b7a      	ldr	r3, [pc, #488]	; (8004668 <HAL_RCC_OscConfig+0x694>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4013      	ands	r3, r2
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	429a      	cmp	r2, r3
 8004492:	d107      	bne.n	80044a4 <HAL_RCC_OscConfig+0x4d0>
 8004494:	4b71      	ldr	r3, [pc, #452]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004498:	4b70      	ldr	r3, [pc, #448]	; (800465c <HAL_RCC_OscConfig+0x688>)
 800449a:	2180      	movs	r1, #128	; 0x80
 800449c:	0049      	lsls	r1, r1, #1
 800449e:	430a      	orrs	r2, r1
 80044a0:	651a      	str	r2, [r3, #80]	; 0x50
 80044a2:	e031      	b.n	8004508 <HAL_RCC_OscConfig+0x534>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10c      	bne.n	80044c6 <HAL_RCC_OscConfig+0x4f2>
 80044ac:	4b6b      	ldr	r3, [pc, #428]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80044ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044b0:	4b6a      	ldr	r3, [pc, #424]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80044b2:	496c      	ldr	r1, [pc, #432]	; (8004664 <HAL_RCC_OscConfig+0x690>)
 80044b4:	400a      	ands	r2, r1
 80044b6:	651a      	str	r2, [r3, #80]	; 0x50
 80044b8:	4b68      	ldr	r3, [pc, #416]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80044ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044bc:	4b67      	ldr	r3, [pc, #412]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80044be:	496b      	ldr	r1, [pc, #428]	; (800466c <HAL_RCC_OscConfig+0x698>)
 80044c0:	400a      	ands	r2, r1
 80044c2:	651a      	str	r2, [r3, #80]	; 0x50
 80044c4:	e020      	b.n	8004508 <HAL_RCC_OscConfig+0x534>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	23a0      	movs	r3, #160	; 0xa0
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d10e      	bne.n	80044f0 <HAL_RCC_OscConfig+0x51c>
 80044d2:	4b62      	ldr	r3, [pc, #392]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80044d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044d6:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80044d8:	2180      	movs	r1, #128	; 0x80
 80044da:	00c9      	lsls	r1, r1, #3
 80044dc:	430a      	orrs	r2, r1
 80044de:	651a      	str	r2, [r3, #80]	; 0x50
 80044e0:	4b5e      	ldr	r3, [pc, #376]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80044e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044e4:	4b5d      	ldr	r3, [pc, #372]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80044e6:	2180      	movs	r1, #128	; 0x80
 80044e8:	0049      	lsls	r1, r1, #1
 80044ea:	430a      	orrs	r2, r1
 80044ec:	651a      	str	r2, [r3, #80]	; 0x50
 80044ee:	e00b      	b.n	8004508 <HAL_RCC_OscConfig+0x534>
 80044f0:	4b5a      	ldr	r3, [pc, #360]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80044f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044f4:	4b59      	ldr	r3, [pc, #356]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80044f6:	495b      	ldr	r1, [pc, #364]	; (8004664 <HAL_RCC_OscConfig+0x690>)
 80044f8:	400a      	ands	r2, r1
 80044fa:	651a      	str	r2, [r3, #80]	; 0x50
 80044fc:	4b57      	ldr	r3, [pc, #348]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80044fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004500:	4b56      	ldr	r3, [pc, #344]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004502:	495a      	ldr	r1, [pc, #360]	; (800466c <HAL_RCC_OscConfig+0x698>)
 8004504:	400a      	ands	r2, r1
 8004506:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d015      	beq.n	800453c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004510:	f7ff fa86 	bl	8003a20 <HAL_GetTick>
 8004514:	0003      	movs	r3, r0
 8004516:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004518:	e009      	b.n	800452e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7ff fa81 	bl	8003a20 <HAL_GetTick>
 800451e:	0002      	movs	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	4a52      	ldr	r2, [pc, #328]	; (8004670 <HAL_RCC_OscConfig+0x69c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e11b      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800452e:	4b4b      	ldr	r3, [pc, #300]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4013      	ands	r3, r2
 8004538:	d0ef      	beq.n	800451a <HAL_RCC_OscConfig+0x546>
 800453a:	e014      	b.n	8004566 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453c:	f7ff fa70 	bl	8003a20 <HAL_GetTick>
 8004540:	0003      	movs	r3, r0
 8004542:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004544:	e009      	b.n	800455a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7ff fa6b 	bl	8003a20 <HAL_GetTick>
 800454a:	0002      	movs	r2, r0
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	4a47      	ldr	r2, [pc, #284]	; (8004670 <HAL_RCC_OscConfig+0x69c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e105      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800455a:	4b40      	ldr	r3, [pc, #256]	; (800465c <HAL_RCC_OscConfig+0x688>)
 800455c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4013      	ands	r3, r2
 8004564:	d1ef      	bne.n	8004546 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004566:	2323      	movs	r3, #35	; 0x23
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004570:	4b3a      	ldr	r3, [pc, #232]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004574:	4b39      	ldr	r3, [pc, #228]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004576:	493f      	ldr	r1, [pc, #252]	; (8004674 <HAL_RCC_OscConfig+0x6a0>)
 8004578:	400a      	ands	r2, r1
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2220      	movs	r2, #32
 8004582:	4013      	ands	r3, r2
 8004584:	d049      	beq.n	800461a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d026      	beq.n	80045dc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800458e:	4b33      	ldr	r3, [pc, #204]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	4b32      	ldr	r3, [pc, #200]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004594:	2101      	movs	r1, #1
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]
 800459a:	4b30      	ldr	r3, [pc, #192]	; (800465c <HAL_RCC_OscConfig+0x688>)
 800459c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459e:	4b2f      	ldr	r3, [pc, #188]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80045a0:	2101      	movs	r1, #1
 80045a2:	430a      	orrs	r2, r1
 80045a4:	635a      	str	r2, [r3, #52]	; 0x34
 80045a6:	4b34      	ldr	r3, [pc, #208]	; (8004678 <HAL_RCC_OscConfig+0x6a4>)
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	4b33      	ldr	r3, [pc, #204]	; (8004678 <HAL_RCC_OscConfig+0x6a4>)
 80045ac:	2180      	movs	r1, #128	; 0x80
 80045ae:	0189      	lsls	r1, r1, #6
 80045b0:	430a      	orrs	r2, r1
 80045b2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7ff fa34 	bl	8003a20 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045be:	f7ff fa2f 	bl	8003a20 <HAL_GetTick>
 80045c2:	0002      	movs	r2, r0
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0ca      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045d0:	4b22      	ldr	r3, [pc, #136]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2202      	movs	r2, #2
 80045d6:	4013      	ands	r3, r2
 80045d8:	d0f1      	beq.n	80045be <HAL_RCC_OscConfig+0x5ea>
 80045da:	e01e      	b.n	800461a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80045dc:	4b1f      	ldr	r3, [pc, #124]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4b1e      	ldr	r3, [pc, #120]	; (800465c <HAL_RCC_OscConfig+0x688>)
 80045e2:	2101      	movs	r1, #1
 80045e4:	438a      	bics	r2, r1
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <HAL_RCC_OscConfig+0x6a4>)
 80045ea:	6a1a      	ldr	r2, [r3, #32]
 80045ec:	4b22      	ldr	r3, [pc, #136]	; (8004678 <HAL_RCC_OscConfig+0x6a4>)
 80045ee:	4923      	ldr	r1, [pc, #140]	; (800467c <HAL_RCC_OscConfig+0x6a8>)
 80045f0:	400a      	ands	r2, r1
 80045f2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7ff fa14 	bl	8003a20 <HAL_GetTick>
 80045f8:	0003      	movs	r3, r0
 80045fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fe:	f7ff fa0f 	bl	8003a20 <HAL_GetTick>
 8004602:	0002      	movs	r2, r0
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e0aa      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2202      	movs	r2, #2
 8004616:	4013      	ands	r3, r2
 8004618:	d1f1      	bne.n	80045fe <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	2b00      	cmp	r3, #0
 8004620:	d100      	bne.n	8004624 <HAL_RCC_OscConfig+0x650>
 8004622:	e09f      	b.n	8004764 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b0c      	cmp	r3, #12
 8004628:	d100      	bne.n	800462c <HAL_RCC_OscConfig+0x658>
 800462a:	e078      	b.n	800471e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	2b02      	cmp	r3, #2
 8004632:	d159      	bne.n	80046e8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <HAL_RCC_OscConfig+0x688>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b08      	ldr	r3, [pc, #32]	; (800465c <HAL_RCC_OscConfig+0x688>)
 800463a:	4911      	ldr	r1, [pc, #68]	; (8004680 <HAL_RCC_OscConfig+0x6ac>)
 800463c:	400a      	ands	r2, r1
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7ff f9ee 	bl	8003a20 <HAL_GetTick>
 8004644:	0003      	movs	r3, r0
 8004646:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004648:	e01c      	b.n	8004684 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464a:	f7ff f9e9 	bl	8003a20 <HAL_GetTick>
 800464e:	0002      	movs	r2, r0
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d915      	bls.n	8004684 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e084      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
 800465c:	40021000 	.word	0x40021000
 8004660:	ffff1fff 	.word	0xffff1fff
 8004664:	fffffeff 	.word	0xfffffeff
 8004668:	40007000 	.word	0x40007000
 800466c:	fffffbff 	.word	0xfffffbff
 8004670:	00001388 	.word	0x00001388
 8004674:	efffffff 	.word	0xefffffff
 8004678:	40010000 	.word	0x40010000
 800467c:	ffffdfff 	.word	0xffffdfff
 8004680:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004684:	4b3a      	ldr	r3, [pc, #232]	; (8004770 <HAL_RCC_OscConfig+0x79c>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	049b      	lsls	r3, r3, #18
 800468c:	4013      	ands	r3, r2
 800468e:	d1dc      	bne.n	800464a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004690:	4b37      	ldr	r3, [pc, #220]	; (8004770 <HAL_RCC_OscConfig+0x79c>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4a37      	ldr	r2, [pc, #220]	; (8004774 <HAL_RCC_OscConfig+0x7a0>)
 8004696:	4013      	ands	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a8:	431a      	orrs	r2, r3
 80046aa:	4b31      	ldr	r3, [pc, #196]	; (8004770 <HAL_RCC_OscConfig+0x79c>)
 80046ac:	430a      	orrs	r2, r1
 80046ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b0:	4b2f      	ldr	r3, [pc, #188]	; (8004770 <HAL_RCC_OscConfig+0x79c>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <HAL_RCC_OscConfig+0x79c>)
 80046b6:	2180      	movs	r1, #128	; 0x80
 80046b8:	0449      	lsls	r1, r1, #17
 80046ba:	430a      	orrs	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046be:	f7ff f9af 	bl	8003a20 <HAL_GetTick>
 80046c2:	0003      	movs	r3, r0
 80046c4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c8:	f7ff f9aa 	bl	8003a20 <HAL_GetTick>
 80046cc:	0002      	movs	r2, r0
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e045      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80046da:	4b25      	ldr	r3, [pc, #148]	; (8004770 <HAL_RCC_OscConfig+0x79c>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	049b      	lsls	r3, r3, #18
 80046e2:	4013      	ands	r3, r2
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x6f4>
 80046e6:	e03d      	b.n	8004764 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e8:	4b21      	ldr	r3, [pc, #132]	; (8004770 <HAL_RCC_OscConfig+0x79c>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCC_OscConfig+0x79c>)
 80046ee:	4922      	ldr	r1, [pc, #136]	; (8004778 <HAL_RCC_OscConfig+0x7a4>)
 80046f0:	400a      	ands	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7ff f994 	bl	8003a20 <HAL_GetTick>
 80046f8:	0003      	movs	r3, r0
 80046fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fe:	f7ff f98f 	bl	8003a20 <HAL_GetTick>
 8004702:	0002      	movs	r2, r0
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e02a      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004710:	4b17      	ldr	r3, [pc, #92]	; (8004770 <HAL_RCC_OscConfig+0x79c>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	049b      	lsls	r3, r3, #18
 8004718:	4013      	ands	r3, r2
 800471a:	d1f0      	bne.n	80046fe <HAL_RCC_OscConfig+0x72a>
 800471c:	e022      	b.n	8004764 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e01d      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800472a:	4b11      	ldr	r3, [pc, #68]	; (8004770 <HAL_RCC_OscConfig+0x79c>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	025b      	lsls	r3, r3, #9
 8004736:	401a      	ands	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	429a      	cmp	r2, r3
 800473e:	d10f      	bne.n	8004760 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	23f0      	movs	r3, #240	; 0xf0
 8004744:	039b      	lsls	r3, r3, #14
 8004746:	401a      	ands	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d107      	bne.n	8004760 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	23c0      	movs	r3, #192	; 0xc0
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	401a      	ands	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	0018      	movs	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	b00a      	add	sp, #40	; 0x28
 800476c:	bdb0      	pop	{r4, r5, r7, pc}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	40021000 	.word	0x40021000
 8004774:	ff02ffff 	.word	0xff02ffff
 8004778:	feffffff 	.word	0xfeffffff

0800477c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e128      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004790:	4b96      	ldr	r3, [pc, #600]	; (80049ec <HAL_RCC_ClockConfig+0x270>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	4013      	ands	r3, r2
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d91e      	bls.n	80047dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b93      	ldr	r3, [pc, #588]	; (80049ec <HAL_RCC_ClockConfig+0x270>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	4393      	bics	r3, r2
 80047a6:	0019      	movs	r1, r3
 80047a8:	4b90      	ldr	r3, [pc, #576]	; (80049ec <HAL_RCC_ClockConfig+0x270>)
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047b0:	f7ff f936 	bl	8003a20 <HAL_GetTick>
 80047b4:	0003      	movs	r3, r0
 80047b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b8:	e009      	b.n	80047ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ba:	f7ff f931 	bl	8003a20 <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	4a8a      	ldr	r2, [pc, #552]	; (80049f0 <HAL_RCC_ClockConfig+0x274>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e109      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b87      	ldr	r3, [pc, #540]	; (80049ec <HAL_RCC_ClockConfig+0x270>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2201      	movs	r2, #1
 80047d4:	4013      	ands	r3, r2
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1ee      	bne.n	80047ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2202      	movs	r2, #2
 80047e2:	4013      	ands	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e6:	4b83      	ldr	r3, [pc, #524]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	22f0      	movs	r2, #240	; 0xf0
 80047ec:	4393      	bics	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	4b7f      	ldr	r3, [pc, #508]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 80047f6:	430a      	orrs	r2, r1
 80047f8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2201      	movs	r2, #1
 8004800:	4013      	ands	r3, r2
 8004802:	d100      	bne.n	8004806 <HAL_RCC_ClockConfig+0x8a>
 8004804:	e089      	b.n	800491a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800480e:	4b79      	ldr	r3, [pc, #484]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	029b      	lsls	r3, r3, #10
 8004816:	4013      	ands	r3, r2
 8004818:	d120      	bne.n	800485c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0e1      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b03      	cmp	r3, #3
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004826:	4b73      	ldr	r3, [pc, #460]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	049b      	lsls	r3, r3, #18
 800482e:	4013      	ands	r3, r2
 8004830:	d114      	bne.n	800485c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e0d5      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d106      	bne.n	800484c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800483e:	4b6d      	ldr	r3, [pc, #436]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2204      	movs	r2, #4
 8004844:	4013      	ands	r3, r2
 8004846:	d109      	bne.n	800485c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0ca      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800484c:	4b69      	ldr	r3, [pc, #420]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4013      	ands	r3, r2
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0c2      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800485c:	4b65      	ldr	r3, [pc, #404]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2203      	movs	r2, #3
 8004862:	4393      	bics	r3, r2
 8004864:	0019      	movs	r1, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	4b62      	ldr	r3, [pc, #392]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 800486c:	430a      	orrs	r2, r1
 800486e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004870:	f7ff f8d6 	bl	8003a20 <HAL_GetTick>
 8004874:	0003      	movs	r3, r0
 8004876:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d111      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004880:	e009      	b.n	8004896 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004882:	f7ff f8cd 	bl	8003a20 <HAL_GetTick>
 8004886:	0002      	movs	r2, r0
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	4a58      	ldr	r2, [pc, #352]	; (80049f0 <HAL_RCC_ClockConfig+0x274>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e0a5      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004896:	4b57      	ldr	r3, [pc, #348]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	220c      	movs	r2, #12
 800489c:	4013      	ands	r3, r2
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d1ef      	bne.n	8004882 <HAL_RCC_ClockConfig+0x106>
 80048a2:	e03a      	b.n	800491a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d111      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ac:	e009      	b.n	80048c2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ae:	f7ff f8b7 	bl	8003a20 <HAL_GetTick>
 80048b2:	0002      	movs	r2, r0
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	4a4d      	ldr	r2, [pc, #308]	; (80049f0 <HAL_RCC_ClockConfig+0x274>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e08f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048c2:	4b4c      	ldr	r3, [pc, #304]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	220c      	movs	r2, #12
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b0c      	cmp	r3, #12
 80048cc:	d1ef      	bne.n	80048ae <HAL_RCC_ClockConfig+0x132>
 80048ce:	e024      	b.n	800491a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d11b      	bne.n	8004910 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048d8:	e009      	b.n	80048ee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048da:	f7ff f8a1 	bl	8003a20 <HAL_GetTick>
 80048de:	0002      	movs	r2, r0
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	4a42      	ldr	r2, [pc, #264]	; (80049f0 <HAL_RCC_ClockConfig+0x274>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e079      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ee:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	220c      	movs	r2, #12
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d1ef      	bne.n	80048da <HAL_RCC_ClockConfig+0x15e>
 80048fa:	e00e      	b.n	800491a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7ff f890 	bl	8003a20 <HAL_GetTick>
 8004900:	0002      	movs	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	4a3a      	ldr	r2, [pc, #232]	; (80049f0 <HAL_RCC_ClockConfig+0x274>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e068      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004910:	4b38      	ldr	r3, [pc, #224]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	220c      	movs	r2, #12
 8004916:	4013      	ands	r3, r2
 8004918:	d1f0      	bne.n	80048fc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800491a:	4b34      	ldr	r3, [pc, #208]	; (80049ec <HAL_RCC_ClockConfig+0x270>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2201      	movs	r2, #1
 8004920:	4013      	ands	r3, r2
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d21e      	bcs.n	8004966 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004928:	4b30      	ldr	r3, [pc, #192]	; (80049ec <HAL_RCC_ClockConfig+0x270>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2201      	movs	r2, #1
 800492e:	4393      	bics	r3, r2
 8004930:	0019      	movs	r1, r3
 8004932:	4b2e      	ldr	r3, [pc, #184]	; (80049ec <HAL_RCC_ClockConfig+0x270>)
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800493a:	f7ff f871 	bl	8003a20 <HAL_GetTick>
 800493e:	0003      	movs	r3, r0
 8004940:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	e009      	b.n	8004958 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004944:	f7ff f86c 	bl	8003a20 <HAL_GetTick>
 8004948:	0002      	movs	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	4a28      	ldr	r2, [pc, #160]	; (80049f0 <HAL_RCC_ClockConfig+0x274>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e044      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004958:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_RCC_ClockConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2201      	movs	r2, #1
 800495e:	4013      	ands	r3, r2
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d1ee      	bne.n	8004944 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2204      	movs	r2, #4
 800496c:	4013      	ands	r3, r2
 800496e:	d009      	beq.n	8004984 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004970:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a20      	ldr	r2, [pc, #128]	; (80049f8 <HAL_RCC_ClockConfig+0x27c>)
 8004976:	4013      	ands	r3, r2
 8004978:	0019      	movs	r1, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 8004980:	430a      	orrs	r2, r1
 8004982:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2208      	movs	r2, #8
 800498a:	4013      	ands	r3, r2
 800498c:	d00a      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800498e:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <HAL_RCC_ClockConfig+0x280>)
 8004994:	4013      	ands	r3, r2
 8004996:	0019      	movs	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	00da      	lsls	r2, r3, #3
 800499e:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 80049a0:	430a      	orrs	r2, r1
 80049a2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049a4:	f000 f832 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 80049a8:	0001      	movs	r1, r0
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <HAL_RCC_ClockConfig+0x278>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	091b      	lsrs	r3, r3, #4
 80049b0:	220f      	movs	r2, #15
 80049b2:	4013      	ands	r3, r2
 80049b4:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <HAL_RCC_ClockConfig+0x284>)
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	000a      	movs	r2, r1
 80049ba:	40da      	lsrs	r2, r3
 80049bc:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <HAL_RCC_ClockConfig+0x288>)
 80049be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <HAL_RCC_ClockConfig+0x28c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	250b      	movs	r5, #11
 80049c6:	197c      	adds	r4, r7, r5
 80049c8:	0018      	movs	r0, r3
 80049ca:	f7fe fe95 	bl	80036f8 <HAL_InitTick>
 80049ce:	0003      	movs	r3, r0
 80049d0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80049d2:	197b      	adds	r3, r7, r5
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80049da:	197b      	adds	r3, r7, r5
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	e000      	b.n	80049e2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b004      	add	sp, #16
 80049e8:	bdb0      	pop	{r4, r5, r7, pc}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	40022000 	.word	0x40022000
 80049f0:	00001388 	.word	0x00001388
 80049f4:	40021000 	.word	0x40021000
 80049f8:	fffff8ff 	.word	0xfffff8ff
 80049fc:	ffffc7ff 	.word	0xffffc7ff
 8004a00:	0800f0dc 	.word	0x0800f0dc
 8004a04:	2000002c 	.word	0x2000002c
 8004a08:	20000030 	.word	0x20000030

08004a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a0c:	b5b0      	push	{r4, r5, r7, lr}
 8004a0e:	b08e      	sub	sp, #56	; 0x38
 8004a10:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004a12:	4b4c      	ldr	r3, [pc, #304]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d014      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x40>
 8004a22:	d900      	bls.n	8004a26 <HAL_RCC_GetSysClockFreq+0x1a>
 8004a24:	e07b      	b.n	8004b1e <HAL_RCC_GetSysClockFreq+0x112>
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d002      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x24>
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d00b      	beq.n	8004a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a2e:	e076      	b.n	8004b1e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a30:	4b44      	ldr	r3, [pc, #272]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2210      	movs	r2, #16
 8004a36:	4013      	ands	r3, r2
 8004a38:	d002      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004a3a:	4b43      	ldr	r3, [pc, #268]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004a3e:	e07c      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004a40:	4b42      	ldr	r3, [pc, #264]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x140>)
 8004a42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a44:	e079      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a46:	4b42      	ldr	r3, [pc, #264]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x144>)
 8004a48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a4a:	e076      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4e:	0c9a      	lsrs	r2, r3, #18
 8004a50:	230f      	movs	r3, #15
 8004a52:	401a      	ands	r2, r3
 8004a54:	4b3f      	ldr	r3, [pc, #252]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x148>)
 8004a56:	5c9b      	ldrb	r3, [r3, r2]
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	0d9a      	lsrs	r2, r3, #22
 8004a5e:	2303      	movs	r3, #3
 8004a60:	4013      	ands	r3, r2
 8004a62:	3301      	adds	r3, #1
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	2380      	movs	r3, #128	; 0x80
 8004a6c:	025b      	lsls	r3, r3, #9
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d01a      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	4a35      	ldr	r2, [pc, #212]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x144>)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	69b8      	ldr	r0, [r7, #24]
 8004a80:	69f9      	ldr	r1, [r7, #28]
 8004a82:	f7fb fd6b 	bl	800055c <__aeabi_lmul>
 8004a86:	0002      	movs	r2, r0
 8004a88:	000b      	movs	r3, r1
 8004a8a:	0010      	movs	r0, r2
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f7fb fd3f 	bl	800051c <__aeabi_uldivmod>
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	000b      	movs	r3, r1
 8004aa2:	0013      	movs	r3, r2
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa6:	e037      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004aa8:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x138>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2210      	movs	r2, #16
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d01a      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	4a23      	ldr	r2, [pc, #140]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004abc:	2300      	movs	r3, #0
 8004abe:	68b8      	ldr	r0, [r7, #8]
 8004ac0:	68f9      	ldr	r1, [r7, #12]
 8004ac2:	f7fb fd4b 	bl	800055c <__aeabi_lmul>
 8004ac6:	0002      	movs	r2, r0
 8004ac8:	000b      	movs	r3, r1
 8004aca:	0010      	movs	r0, r2
 8004acc:	0019      	movs	r1, r3
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f7fb fd1f 	bl	800051c <__aeabi_uldivmod>
 8004ade:	0002      	movs	r2, r0
 8004ae0:	000b      	movs	r3, r1
 8004ae2:	0013      	movs	r3, r2
 8004ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae6:	e017      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	0018      	movs	r0, r3
 8004aec:	2300      	movs	r3, #0
 8004aee:	0019      	movs	r1, r3
 8004af0:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x140>)
 8004af2:	2300      	movs	r3, #0
 8004af4:	f7fb fd32 	bl	800055c <__aeabi_lmul>
 8004af8:	0002      	movs	r2, r0
 8004afa:	000b      	movs	r3, r1
 8004afc:	0010      	movs	r0, r2
 8004afe:	0019      	movs	r1, r3
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	001c      	movs	r4, r3
 8004b04:	2300      	movs	r3, #0
 8004b06:	001d      	movs	r5, r3
 8004b08:	0022      	movs	r2, r4
 8004b0a:	002b      	movs	r3, r5
 8004b0c:	f7fb fd06 	bl	800051c <__aeabi_uldivmod>
 8004b10:	0002      	movs	r2, r0
 8004b12:	000b      	movs	r3, r1
 8004b14:	0013      	movs	r3, r2
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b1c:	e00d      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	0b5b      	lsrs	r3, r3, #13
 8004b24:	2207      	movs	r2, #7
 8004b26:	4013      	ands	r3, r2
 8004b28:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	2280      	movs	r2, #128	; 0x80
 8004b30:	0212      	lsls	r2, r2, #8
 8004b32:	409a      	lsls	r2, r3
 8004b34:	0013      	movs	r3, r2
 8004b36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b38:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b00e      	add	sp, #56	; 0x38
 8004b42:	bdb0      	pop	{r4, r5, r7, pc}
 8004b44:	40021000 	.word	0x40021000
 8004b48:	003d0900 	.word	0x003d0900
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	007a1200 	.word	0x007a1200
 8004b54:	0800f0f4 	.word	0x0800f0f4

08004b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b5c:	4b02      	ldr	r3, [pc, #8]	; (8004b68 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	0018      	movs	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	2000002c 	.word	0x2000002c

08004b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b70:	f7ff fff2 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004b74:	0001      	movs	r1, r0
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	4013      	ands	r3, r2
 8004b80:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b82:	5cd3      	ldrb	r3, [r2, r3]
 8004b84:	40d9      	lsrs	r1, r3
 8004b86:	000b      	movs	r3, r1
}
 8004b88:	0018      	movs	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	40021000 	.word	0x40021000
 8004b94:	0800f0ec 	.word	0x0800f0ec

08004b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b9c:	f7ff ffdc 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004ba0:	0001      	movs	r1, r0
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	0adb      	lsrs	r3, r3, #11
 8004ba8:	2207      	movs	r2, #7
 8004baa:	4013      	ands	r3, r2
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bae:	5cd3      	ldrb	r3, [r2, r3]
 8004bb0:	40d9      	lsrs	r1, r3
 8004bb2:	000b      	movs	r3, r1
}
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	0800f0ec 	.word	0x0800f0ec

08004bc4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	220f      	movs	r2, #15
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bd4:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	2203      	movs	r2, #3
 8004bda:	401a      	ands	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	22f0      	movs	r2, #240	; 0xf0
 8004be6:	401a      	ands	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	23e0      	movs	r3, #224	; 0xe0
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	401a      	ands	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004bfa:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	08da      	lsrs	r2, r3, #3
 8004c00:	23e0      	movs	r3, #224	; 0xe0
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	401a      	ands	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_RCC_GetClockConfig+0x60>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	401a      	ands	r2, r3
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	601a      	str	r2, [r3, #0]
}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b002      	add	sp, #8
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40022000 	.word	0x40022000

08004c28 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004c30:	2317      	movs	r3, #23
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d106      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d100      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004c4e:	e104      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c50:	4bb9      	ldr	r3, [pc, #740]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	055b      	lsls	r3, r3, #21
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d10a      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5c:	4bb6      	ldr	r3, [pc, #728]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c60:	4bb5      	ldr	r3, [pc, #724]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	0549      	lsls	r1, r1, #21
 8004c66:	430a      	orrs	r2, r1
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004c6a:	2317      	movs	r3, #23
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c72:	4bb2      	ldr	r3, [pc, #712]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d11a      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7e:	4baf      	ldr	r3, [pc, #700]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4bae      	ldr	r3, [pc, #696]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004c84:	2180      	movs	r1, #128	; 0x80
 8004c86:	0049      	lsls	r1, r1, #1
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8c:	f7fe fec8 	bl	8003a20 <HAL_GetTick>
 8004c90:	0003      	movs	r3, r0
 8004c92:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c94:	e008      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c96:	f7fe fec3 	bl	8003a20 <HAL_GetTick>
 8004c9a:	0002      	movs	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b64      	cmp	r3, #100	; 0x64
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e143      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca8:	4ba4      	ldr	r3, [pc, #656]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004cb4:	4ba0      	ldr	r3, [pc, #640]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	23c0      	movs	r3, #192	; 0xc0
 8004cba:	039b      	lsls	r3, r3, #14
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	23c0      	movs	r3, #192	; 0xc0
 8004cc6:	039b      	lsls	r3, r3, #14
 8004cc8:	4013      	ands	r3, r2
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	23c0      	movs	r3, #192	; 0xc0
 8004cd6:	039b      	lsls	r3, r3, #14
 8004cd8:	4013      	ands	r3, r2
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d013      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	23c0      	movs	r3, #192	; 0xc0
 8004ce6:	029b      	lsls	r3, r3, #10
 8004ce8:	401a      	ands	r2, r3
 8004cea:	23c0      	movs	r3, #192	; 0xc0
 8004cec:	029b      	lsls	r3, r3, #10
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d10a      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004cf2:	4b91      	ldr	r3, [pc, #580]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	029b      	lsls	r3, r3, #10
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	2380      	movs	r3, #128	; 0x80
 8004cfe:	029b      	lsls	r3, r3, #10
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d101      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e113      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004d08:	4b8b      	ldr	r3, [pc, #556]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d0c:	23c0      	movs	r3, #192	; 0xc0
 8004d0e:	029b      	lsls	r3, r3, #10
 8004d10:	4013      	ands	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d049      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	23c0      	movs	r3, #192	; 0xc0
 8004d20:	029b      	lsls	r3, r3, #10
 8004d22:	4013      	ands	r3, r2
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d004      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	4013      	ands	r3, r2
 8004d32:	d10d      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	23c0      	movs	r3, #192	; 0xc0
 8004d3a:	029b      	lsls	r3, r3, #10
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d034      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d02e      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004d50:	4b79      	ldr	r3, [pc, #484]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d54:	4a7a      	ldr	r2, [pc, #488]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d5a:	4b77      	ldr	r3, [pc, #476]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d5e:	4b76      	ldr	r3, [pc, #472]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d60:	2180      	movs	r1, #128	; 0x80
 8004d62:	0309      	lsls	r1, r1, #12
 8004d64:	430a      	orrs	r2, r1
 8004d66:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d68:	4b73      	ldr	r3, [pc, #460]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d6c:	4b72      	ldr	r3, [pc, #456]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d6e:	4975      	ldr	r1, [pc, #468]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004d70:	400a      	ands	r2, r1
 8004d72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004d74:	4b70      	ldr	r3, [pc, #448]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4013      	ands	r3, r2
 8004d82:	d014      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fe fe4c 	bl	8003a20 <HAL_GetTick>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d8c:	e009      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fe fe47 	bl	8003a20 <HAL_GetTick>
 8004d92:	0002      	movs	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	4a6b      	ldr	r2, [pc, #428]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e0c6      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004da2:	4b65      	ldr	r3, [pc, #404]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004da6:	2380      	movs	r3, #128	; 0x80
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4013      	ands	r3, r2
 8004dac:	d0ef      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	4013      	ands	r3, r2
 8004db8:	d01f      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	23c0      	movs	r3, #192	; 0xc0
 8004dc0:	029b      	lsls	r3, r3, #10
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	23c0      	movs	r3, #192	; 0xc0
 8004dc6:	029b      	lsls	r3, r3, #10
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d10c      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004dcc:	4b5a      	ldr	r3, [pc, #360]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a5e      	ldr	r2, [pc, #376]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	0019      	movs	r1, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	23c0      	movs	r3, #192	; 0xc0
 8004ddc:	039b      	lsls	r3, r3, #14
 8004dde:	401a      	ands	r2, r3
 8004de0:	4b55      	ldr	r3, [pc, #340]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004de2:	430a      	orrs	r2, r1
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	4b54      	ldr	r3, [pc, #336]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004de8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	23c0      	movs	r3, #192	; 0xc0
 8004df0:	029b      	lsls	r3, r3, #10
 8004df2:	401a      	ands	r2, r3
 8004df4:	4b50      	ldr	r3, [pc, #320]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004df6:	430a      	orrs	r2, r1
 8004df8:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	4013      	ands	r3, r2
 8004e02:	d01f      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	23c0      	movs	r3, #192	; 0xc0
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	401a      	ands	r2, r3
 8004e0e:	23c0      	movs	r3, #192	; 0xc0
 8004e10:	029b      	lsls	r3, r3, #10
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004e16:	4b48      	ldr	r3, [pc, #288]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a4c      	ldr	r2, [pc, #304]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	0019      	movs	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	23c0      	movs	r3, #192	; 0xc0
 8004e26:	039b      	lsls	r3, r3, #14
 8004e28:	401a      	ands	r2, r3
 8004e2a:	4b43      	ldr	r3, [pc, #268]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	4b41      	ldr	r3, [pc, #260]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e32:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	23c0      	movs	r3, #192	; 0xc0
 8004e3a:	029b      	lsls	r3, r3, #10
 8004e3c:	401a      	ands	r2, r3
 8004e3e:	4b3e      	ldr	r3, [pc, #248]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e40:	430a      	orrs	r2, r1
 8004e42:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e44:	2317      	movs	r3, #23
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4e:	4b3a      	ldr	r3, [pc, #232]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e52:	4b39      	ldr	r3, [pc, #228]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e54:	493e      	ldr	r1, [pc, #248]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004e56:	400a      	ands	r2, r1
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	4013      	ands	r3, r2
 8004e62:	d009      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e64:	4b34      	ldr	r3, [pc, #208]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e68:	2203      	movs	r2, #3
 8004e6a:	4393      	bics	r3, r2
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e74:	430a      	orrs	r2, r1
 8004e76:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d009      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e82:	4b2d      	ldr	r3, [pc, #180]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e86:	220c      	movs	r2, #12
 8004e88:	4393      	bics	r3, r2
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	4b29      	ldr	r3, [pc, #164]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e92:	430a      	orrs	r2, r1
 8004e94:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ea0:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea4:	4a2b      	ldr	r2, [pc, #172]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ebe:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec2:	4a25      	ldr	r2, [pc, #148]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699a      	ldr	r2, [r3, #24]
 8004ecc:	4b1a      	ldr	r3, [pc, #104]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	2380      	movs	r3, #128	; 0x80
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	4013      	ands	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ede:	4b16      	ldr	r3, [pc, #88]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d009      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f00:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	0019      	movs	r1, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2280      	movs	r2, #128	; 0x80
 8004f16:	4013      	ands	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004f1a:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	4a10      	ldr	r2, [pc, #64]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1a      	ldr	r2, [r3, #32]
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b006      	add	sp, #24
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40007000 	.word	0x40007000
 8004f40:	fffcffff 	.word	0xfffcffff
 8004f44:	fff7ffff 	.word	0xfff7ffff
 8004f48:	00001388 	.word	0x00001388
 8004f4c:	ffcfffff 	.word	0xffcfffff
 8004f50:	efffffff 	.word	0xefffffff
 8004f54:	fffff3ff 	.word	0xfffff3ff
 8004f58:	ffffcfff 	.word	0xffffcfff
 8004f5c:	fbffffff 	.word	0xfbffffff
 8004f60:	fff3ffff 	.word	0xfff3ffff

08004f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e032      	b.n	8004fdc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2239      	movs	r2, #57	; 0x39
 8004f7a:	5c9b      	ldrb	r3, [r3, r2]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d107      	bne.n	8004f92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2238      	movs	r2, #56	; 0x38
 8004f86:	2100      	movs	r1, #0
 8004f88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f000 f829 	bl	8004fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2239      	movs	r2, #57	; 0x39
 8004f96:	2102      	movs	r1, #2
 8004f98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	0010      	movs	r0, r2
 8004fa6:	f000 f97f 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	223e      	movs	r2, #62	; 0x3e
 8004fae:	2101      	movs	r1, #1
 8004fb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	223a      	movs	r2, #58	; 0x3a
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	5499      	strb	r1, [r3, r2]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	223b      	movs	r2, #59	; 0x3b
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	5499      	strb	r1, [r3, r2]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	223c      	movs	r2, #60	; 0x3c
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	5499      	strb	r1, [r3, r2]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	223d      	movs	r2, #61	; 0x3d
 8004fce:	2101      	movs	r1, #1
 8004fd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2239      	movs	r2, #57	; 0x39
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	0018      	movs	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b002      	add	sp, #8
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b002      	add	sp, #8
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2239      	movs	r2, #57	; 0x39
 8005000:	5c9b      	ldrb	r3, [r3, r2]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d001      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e03b      	b.n	8005084 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2239      	movs	r2, #57	; 0x39
 8005010:	2102      	movs	r1, #2
 8005012:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2101      	movs	r1, #1
 8005020:	430a      	orrs	r2, r1
 8005022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	05db      	lsls	r3, r3, #23
 800502c:	429a      	cmp	r2, r3
 800502e:	d00e      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x5a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a15      	ldr	r2, [pc, #84]	; (800508c <HAL_TIM_Base_Start_IT+0x98>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x5a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a14      	ldr	r2, [pc, #80]	; (8005090 <HAL_TIM_Base_Start_IT+0x9c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x5a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a12      	ldr	r2, [pc, #72]	; (8005094 <HAL_TIM_Base_Start_IT+0xa0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d111      	bne.n	8005072 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2207      	movs	r2, #7
 8005056:	4013      	ands	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b06      	cmp	r3, #6
 800505e:	d010      	beq.n	8005082 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2101      	movs	r1, #1
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005070:	e007      	b.n	8005082 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2101      	movs	r1, #1
 800507e:	430a      	orrs	r2, r1
 8005080:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	0018      	movs	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	b004      	add	sp, #16
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40000400 	.word	0x40000400
 8005090:	40010800 	.word	0x40010800
 8005094:	40011400 	.word	0x40011400

08005098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2202      	movs	r2, #2
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d124      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	2202      	movs	r2, #2
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d11d      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2203      	movs	r2, #3
 80050c2:	4252      	negs	r2, r2
 80050c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2203      	movs	r2, #3
 80050d4:	4013      	ands	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	0018      	movs	r0, r3
 80050dc:	f000 f8cc 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 80050e0:	e007      	b.n	80050f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	0018      	movs	r0, r3
 80050e6:	f000 f8bf 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	0018      	movs	r0, r3
 80050ee:	f000 f8cb 	bl	8005288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2204      	movs	r2, #4
 8005100:	4013      	ands	r3, r2
 8005102:	2b04      	cmp	r3, #4
 8005104:	d125      	bne.n	8005152 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	2204      	movs	r2, #4
 800510e:	4013      	ands	r3, r2
 8005110:	2b04      	cmp	r3, #4
 8005112:	d11e      	bne.n	8005152 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2205      	movs	r2, #5
 800511a:	4252      	negs	r2, r2
 800511c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	23c0      	movs	r3, #192	; 0xc0
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4013      	ands	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	0018      	movs	r0, r3
 8005136:	f000 f89f 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 800513a:	e007      	b.n	800514c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	0018      	movs	r0, r3
 8005140:	f000 f892 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	0018      	movs	r0, r3
 8005148:	f000 f89e 	bl	8005288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2208      	movs	r2, #8
 800515a:	4013      	ands	r3, r2
 800515c:	2b08      	cmp	r3, #8
 800515e:	d124      	bne.n	80051aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2208      	movs	r2, #8
 8005168:	4013      	ands	r3, r2
 800516a:	2b08      	cmp	r3, #8
 800516c:	d11d      	bne.n	80051aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2209      	movs	r2, #9
 8005174:	4252      	negs	r2, r2
 8005176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2204      	movs	r2, #4
 800517c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	2203      	movs	r2, #3
 8005186:	4013      	ands	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0018      	movs	r0, r3
 800518e:	f000 f873 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 8005192:	e007      	b.n	80051a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	0018      	movs	r0, r3
 8005198:	f000 f866 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 f872 	bl	8005288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2210      	movs	r2, #16
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d125      	bne.n	8005204 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2210      	movs	r2, #16
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d11e      	bne.n	8005204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2211      	movs	r2, #17
 80051cc:	4252      	negs	r2, r2
 80051ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2208      	movs	r2, #8
 80051d4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	23c0      	movs	r3, #192	; 0xc0
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4013      	ands	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	0018      	movs	r0, r3
 80051e8:	f000 f846 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 80051ec:	e007      	b.n	80051fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 f839 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f000 f845 	bl	8005288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2201      	movs	r2, #1
 800520c:	4013      	ands	r3, r2
 800520e:	2b01      	cmp	r3, #1
 8005210:	d10f      	bne.n	8005232 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	4013      	ands	r3, r2
 800521c:	2b01      	cmp	r3, #1
 800521e:	d108      	bne.n	8005232 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2202      	movs	r2, #2
 8005226:	4252      	negs	r2, r2
 8005228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	0018      	movs	r0, r3
 800522e:	f7fe f94f 	bl	80034d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2240      	movs	r2, #64	; 0x40
 800523a:	4013      	ands	r3, r2
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d10f      	bne.n	8005260 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2240      	movs	r2, #64	; 0x40
 8005248:	4013      	ands	r3, r2
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d108      	bne.n	8005260 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2241      	movs	r2, #65	; 0x41
 8005254:	4252      	negs	r2, r2
 8005256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	0018      	movs	r0, r3
 800525c:	f000 f81c 	bl	8005298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b002      	add	sp, #8
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005270:	46c0      	nop			; (mov r8, r8)
 8005272:	46bd      	mov	sp, r7
 8005274:	b002      	add	sp, #8
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b002      	add	sp, #8
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b002      	add	sp, #8
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a0:	46c0      	nop			; (mov r8, r8)
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b002      	add	sp, #8
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	05db      	lsls	r3, r3, #23
 80052be:	429a      	cmp	r2, r3
 80052c0:	d00b      	beq.n	80052da <TIM_Base_SetConfig+0x32>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a23      	ldr	r2, [pc, #140]	; (8005354 <TIM_Base_SetConfig+0xac>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <TIM_Base_SetConfig+0x32>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a22      	ldr	r2, [pc, #136]	; (8005358 <TIM_Base_SetConfig+0xb0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_Base_SetConfig+0x32>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a21      	ldr	r2, [pc, #132]	; (800535c <TIM_Base_SetConfig+0xb4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d108      	bne.n	80052ec <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2270      	movs	r2, #112	; 0x70
 80052de:	4393      	bics	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	05db      	lsls	r3, r3, #23
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d00b      	beq.n	800530e <TIM_Base_SetConfig+0x66>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a16      	ldr	r2, [pc, #88]	; (8005354 <TIM_Base_SetConfig+0xac>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <TIM_Base_SetConfig+0x66>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a15      	ldr	r2, [pc, #84]	; (8005358 <TIM_Base_SetConfig+0xb0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_Base_SetConfig+0x66>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a14      	ldr	r2, [pc, #80]	; (800535c <TIM_Base_SetConfig+0xb4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d108      	bne.n	8005320 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a13      	ldr	r2, [pc, #76]	; (8005360 <TIM_Base_SetConfig+0xb8>)
 8005312:	4013      	ands	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2280      	movs	r2, #128	; 0x80
 8005324:	4393      	bics	r3, r2
 8005326:	001a      	movs	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	615a      	str	r2, [r3, #20]
}
 800534c:	46c0      	nop			; (mov r8, r8)
 800534e:	46bd      	mov	sp, r7
 8005350:	b004      	add	sp, #16
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40000400 	.word	0x40000400
 8005358:	40010800 	.word	0x40010800
 800535c:	40011400 	.word	0x40011400
 8005360:	fffffcff 	.word	0xfffffcff

08005364 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e044      	b.n	8005400 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d107      	bne.n	800538e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2278      	movs	r2, #120	; 0x78
 8005382:	2100      	movs	r1, #0
 8005384:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	0018      	movs	r0, r3
 800538a:	f7fe f969 	bl	8003660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2224      	movs	r2, #36	; 0x24
 8005392:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2101      	movs	r1, #1
 80053a0:	438a      	bics	r2, r1
 80053a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	0018      	movs	r0, r3
 80053a8:	f000 fd12 	bl	8005dd0 <UART_SetConfig>
 80053ac:	0003      	movs	r3, r0
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e024      	b.n	8005400 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	0018      	movs	r0, r3
 80053c2:	f000 ffa3 	bl	800630c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	490d      	ldr	r1, [pc, #52]	; (8005408 <HAL_UART_Init+0xa4>)
 80053d2:	400a      	ands	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	212a      	movs	r1, #42	; 0x2a
 80053e2:	438a      	bics	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2101      	movs	r1, #1
 80053f2:	430a      	orrs	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	0018      	movs	r0, r3
 80053fa:	f001 f83b 	bl	8006474 <UART_CheckIdleState>
 80053fe:	0003      	movs	r3, r0
}
 8005400:	0018      	movs	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	b002      	add	sp, #8
 8005406:	bd80      	pop	{r7, pc}
 8005408:	ffffb7ff 	.word	0xffffb7ff

0800540c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	1dbb      	adds	r3, r7, #6
 800541a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005420:	2b20      	cmp	r3, #32
 8005422:	d000      	beq.n	8005426 <HAL_UART_Transmit+0x1a>
 8005424:	e08c      	b.n	8005540 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_UART_Transmit+0x28>
 800542c:	1dbb      	adds	r3, r7, #6
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e084      	b.n	8005542 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	015b      	lsls	r3, r3, #5
 8005440:	429a      	cmp	r2, r3
 8005442:	d109      	bne.n	8005458 <HAL_UART_Transmit+0x4c>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d105      	bne.n	8005458 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2201      	movs	r2, #1
 8005450:	4013      	ands	r3, r2
 8005452:	d001      	beq.n	8005458 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e074      	b.n	8005542 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2284      	movs	r2, #132	; 0x84
 800545c:	2100      	movs	r1, #0
 800545e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2221      	movs	r2, #33	; 0x21
 8005464:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005466:	f7fe fadb 	bl	8003a20 <HAL_GetTick>
 800546a:	0003      	movs	r3, r0
 800546c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1dba      	adds	r2, r7, #6
 8005472:	2150      	movs	r1, #80	; 0x50
 8005474:	8812      	ldrh	r2, [r2, #0]
 8005476:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	1dba      	adds	r2, r7, #6
 800547c:	2152      	movs	r1, #82	; 0x52
 800547e:	8812      	ldrh	r2, [r2, #0]
 8005480:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	2380      	movs	r3, #128	; 0x80
 8005488:	015b      	lsls	r3, r3, #5
 800548a:	429a      	cmp	r2, r3
 800548c:	d108      	bne.n	80054a0 <HAL_UART_Transmit+0x94>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e003      	b.n	80054a8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054a8:	e02f      	b.n	800550a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	0013      	movs	r3, r2
 80054b4:	2200      	movs	r2, #0
 80054b6:	2180      	movs	r1, #128	; 0x80
 80054b8:	f001 f884 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 80054bc:	1e03      	subs	r3, r0, #0
 80054be:	d004      	beq.n	80054ca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e03b      	b.n	8005542 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10b      	bne.n	80054e8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	001a      	movs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	05d2      	lsls	r2, r2, #23
 80054dc:	0dd2      	lsrs	r2, r2, #23
 80054de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	3302      	adds	r3, #2
 80054e4:	61bb      	str	r3, [r7, #24]
 80054e6:	e007      	b.n	80054f8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	781a      	ldrb	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3301      	adds	r3, #1
 80054f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2252      	movs	r2, #82	; 0x52
 80054fc:	5a9b      	ldrh	r3, [r3, r2]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b299      	uxth	r1, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2252      	movs	r2, #82	; 0x52
 8005508:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2252      	movs	r2, #82	; 0x52
 800550e:	5a9b      	ldrh	r3, [r3, r2]
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1c9      	bne.n	80054aa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	0013      	movs	r3, r2
 8005520:	2200      	movs	r2, #0
 8005522:	2140      	movs	r1, #64	; 0x40
 8005524:	f001 f84e 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 8005528:	1e03      	subs	r3, r0, #0
 800552a:	d004      	beq.n	8005536 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e005      	b.n	8005542 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	e000      	b.n	8005542 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005540:	2302      	movs	r3, #2
  }
}
 8005542:	0018      	movs	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	b008      	add	sp, #32
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	1dbb      	adds	r3, r7, #6
 800555a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2280      	movs	r2, #128	; 0x80
 8005560:	589b      	ldr	r3, [r3, r2]
 8005562:	2b20      	cmp	r3, #32
 8005564:	d000      	beq.n	8005568 <HAL_UART_Receive+0x1c>
 8005566:	e0d0      	b.n	800570a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_UART_Receive+0x2a>
 800556e:	1dbb      	adds	r3, r7, #6
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e0c8      	b.n	800570c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	015b      	lsls	r3, r3, #5
 8005582:	429a      	cmp	r2, r3
 8005584:	d109      	bne.n	800559a <HAL_UART_Receive+0x4e>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d105      	bne.n	800559a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2201      	movs	r2, #1
 8005592:	4013      	ands	r3, r2
 8005594:	d001      	beq.n	800559a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e0b8      	b.n	800570c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2284      	movs	r2, #132	; 0x84
 800559e:	2100      	movs	r1, #0
 80055a0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2280      	movs	r2, #128	; 0x80
 80055a6:	2122      	movs	r1, #34	; 0x22
 80055a8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b0:	f7fe fa36 	bl	8003a20 <HAL_GetTick>
 80055b4:	0003      	movs	r3, r0
 80055b6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	1dba      	adds	r2, r7, #6
 80055bc:	2158      	movs	r1, #88	; 0x58
 80055be:	8812      	ldrh	r2, [r2, #0]
 80055c0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1dba      	adds	r2, r7, #6
 80055c6:	215a      	movs	r1, #90	; 0x5a
 80055c8:	8812      	ldrh	r2, [r2, #0]
 80055ca:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	015b      	lsls	r3, r3, #5
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d10d      	bne.n	80055f4 <HAL_UART_Receive+0xa8>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d104      	bne.n	80055ea <HAL_UART_Receive+0x9e>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	225c      	movs	r2, #92	; 0x5c
 80055e4:	494b      	ldr	r1, [pc, #300]	; (8005714 <HAL_UART_Receive+0x1c8>)
 80055e6:	5299      	strh	r1, [r3, r2]
 80055e8:	e02e      	b.n	8005648 <HAL_UART_Receive+0xfc>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	225c      	movs	r2, #92	; 0x5c
 80055ee:	21ff      	movs	r1, #255	; 0xff
 80055f0:	5299      	strh	r1, [r3, r2]
 80055f2:	e029      	b.n	8005648 <HAL_UART_Receive+0xfc>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10d      	bne.n	8005618 <HAL_UART_Receive+0xcc>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <HAL_UART_Receive+0xc2>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	225c      	movs	r2, #92	; 0x5c
 8005608:	21ff      	movs	r1, #255	; 0xff
 800560a:	5299      	strh	r1, [r3, r2]
 800560c:	e01c      	b.n	8005648 <HAL_UART_Receive+0xfc>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	225c      	movs	r2, #92	; 0x5c
 8005612:	217f      	movs	r1, #127	; 0x7f
 8005614:	5299      	strh	r1, [r3, r2]
 8005616:	e017      	b.n	8005648 <HAL_UART_Receive+0xfc>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	055b      	lsls	r3, r3, #21
 8005620:	429a      	cmp	r2, r3
 8005622:	d10d      	bne.n	8005640 <HAL_UART_Receive+0xf4>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <HAL_UART_Receive+0xea>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	225c      	movs	r2, #92	; 0x5c
 8005630:	217f      	movs	r1, #127	; 0x7f
 8005632:	5299      	strh	r1, [r3, r2]
 8005634:	e008      	b.n	8005648 <HAL_UART_Receive+0xfc>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	225c      	movs	r2, #92	; 0x5c
 800563a:	213f      	movs	r1, #63	; 0x3f
 800563c:	5299      	strh	r1, [r3, r2]
 800563e:	e003      	b.n	8005648 <HAL_UART_Receive+0xfc>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	225c      	movs	r2, #92	; 0x5c
 8005644:	2100      	movs	r1, #0
 8005646:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005648:	2312      	movs	r3, #18
 800564a:	18fb      	adds	r3, r7, r3
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	215c      	movs	r1, #92	; 0x5c
 8005650:	5a52      	ldrh	r2, [r2, r1]
 8005652:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	2380      	movs	r3, #128	; 0x80
 800565a:	015b      	lsls	r3, r3, #5
 800565c:	429a      	cmp	r2, r3
 800565e:	d108      	bne.n	8005672 <HAL_UART_Receive+0x126>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e003      	b.n	800567a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005676:	2300      	movs	r3, #0
 8005678:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800567a:	e03a      	b.n	80056f2 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	0013      	movs	r3, r2
 8005686:	2200      	movs	r2, #0
 8005688:	2120      	movs	r1, #32
 800568a:	f000 ff9b 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 800568e:	1e03      	subs	r3, r0, #0
 8005690:	d005      	beq.n	800569e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	2120      	movs	r1, #32
 8005698:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e036      	b.n	800570c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10e      	bne.n	80056c2 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2212      	movs	r2, #18
 80056ae:	18ba      	adds	r2, r7, r2
 80056b0:	8812      	ldrh	r2, [r2, #0]
 80056b2:	4013      	ands	r3, r2
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	3302      	adds	r3, #2
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	e00e      	b.n	80056e0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2212      	movs	r2, #18
 80056cc:	18ba      	adds	r2, r7, r2
 80056ce:	8812      	ldrh	r2, [r2, #0]
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	4013      	ands	r3, r2
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	3301      	adds	r3, #1
 80056de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	225a      	movs	r2, #90	; 0x5a
 80056e4:	5a9b      	ldrh	r3, [r3, r2]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b299      	uxth	r1, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	225a      	movs	r2, #90	; 0x5a
 80056f0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	225a      	movs	r2, #90	; 0x5a
 80056f6:	5a9b      	ldrh	r3, [r3, r2]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1be      	bne.n	800567c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2280      	movs	r2, #128	; 0x80
 8005702:	2120      	movs	r1, #32
 8005704:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e000      	b.n	800570c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800570a:	2302      	movs	r3, #2
  }
}
 800570c:	0018      	movs	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	b008      	add	sp, #32
 8005712:	bd80      	pop	{r7, pc}
 8005714:	000001ff 	.word	0x000001ff

08005718 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	1dbb      	adds	r3, r7, #6
 8005724:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2280      	movs	r2, #128	; 0x80
 800572a:	589b      	ldr	r3, [r3, r2]
 800572c:	2b20      	cmp	r3, #32
 800572e:	d14a      	bne.n	80057c6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_UART_Receive_IT+0x26>
 8005736:	1dbb      	adds	r3, r7, #6
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e042      	b.n	80057c8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	015b      	lsls	r3, r3, #5
 800574a:	429a      	cmp	r2, r3
 800574c:	d109      	bne.n	8005762 <HAL_UART_Receive_IT+0x4a>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d105      	bne.n	8005762 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2201      	movs	r2, #1
 800575a:	4013      	ands	r3, r2
 800575c:	d001      	beq.n	8005762 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e032      	b.n	80057c8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <HAL_UART_Receive_IT+0xb8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d020      	beq.n	80057b4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	041b      	lsls	r3, r3, #16
 800577c:	4013      	ands	r3, r2
 800577e:	d019      	beq.n	80057b4 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005780:	f3ef 8310 	mrs	r3, PRIMASK
 8005784:	613b      	str	r3, [r7, #16]
  return(result);
 8005786:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	2301      	movs	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f383 8810 	msr	PRIMASK, r3
}
 8005794:	46c0      	nop			; (mov r8, r8)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	04c9      	lsls	r1, r1, #19
 80057a4:	430a      	orrs	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f383 8810 	msr	PRIMASK, r3
}
 80057b2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057b4:	1dbb      	adds	r3, r7, #6
 80057b6:	881a      	ldrh	r2, [r3, #0]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	0018      	movs	r0, r3
 80057be:	f000 ff6b 	bl	8006698 <UART_Start_Receive_IT>
 80057c2:	0003      	movs	r3, r0
 80057c4:	e000      	b.n	80057c8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	0018      	movs	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b008      	add	sp, #32
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40004800 	.word	0x40004800

080057d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057d4:	b590      	push	{r4, r7, lr}
 80057d6:	b0ab      	sub	sp, #172	; 0xac
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	22a4      	movs	r2, #164	; 0xa4
 80057e4:	18b9      	adds	r1, r7, r2
 80057e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	20a0      	movs	r0, #160	; 0xa0
 80057f0:	1839      	adds	r1, r7, r0
 80057f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	219c      	movs	r1, #156	; 0x9c
 80057fc:	1879      	adds	r1, r7, r1
 80057fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005800:	0011      	movs	r1, r2
 8005802:	18bb      	adds	r3, r7, r2
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a99      	ldr	r2, [pc, #612]	; (8005a6c <HAL_UART_IRQHandler+0x298>)
 8005808:	4013      	ands	r3, r2
 800580a:	2298      	movs	r2, #152	; 0x98
 800580c:	18bc      	adds	r4, r7, r2
 800580e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005810:	18bb      	adds	r3, r7, r2
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d114      	bne.n	8005842 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005818:	187b      	adds	r3, r7, r1
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2220      	movs	r2, #32
 800581e:	4013      	ands	r3, r2
 8005820:	d00f      	beq.n	8005842 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005822:	183b      	adds	r3, r7, r0
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2220      	movs	r2, #32
 8005828:	4013      	ands	r3, r2
 800582a:	d00a      	beq.n	8005842 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005830:	2b00      	cmp	r3, #0
 8005832:	d100      	bne.n	8005836 <HAL_UART_IRQHandler+0x62>
 8005834:	e2a0      	b.n	8005d78 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	0010      	movs	r0, r2
 800583e:	4798      	blx	r3
      }
      return;
 8005840:	e29a      	b.n	8005d78 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005842:	2398      	movs	r3, #152	; 0x98
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d100      	bne.n	800584e <HAL_UART_IRQHandler+0x7a>
 800584c:	e114      	b.n	8005a78 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800584e:	239c      	movs	r3, #156	; 0x9c
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2201      	movs	r2, #1
 8005856:	4013      	ands	r3, r2
 8005858:	d106      	bne.n	8005868 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800585a:	23a0      	movs	r3, #160	; 0xa0
 800585c:	18fb      	adds	r3, r7, r3
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a83      	ldr	r2, [pc, #524]	; (8005a70 <HAL_UART_IRQHandler+0x29c>)
 8005862:	4013      	ands	r3, r2
 8005864:	d100      	bne.n	8005868 <HAL_UART_IRQHandler+0x94>
 8005866:	e107      	b.n	8005a78 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005868:	23a4      	movs	r3, #164	; 0xa4
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2201      	movs	r2, #1
 8005870:	4013      	ands	r3, r2
 8005872:	d012      	beq.n	800589a <HAL_UART_IRQHandler+0xc6>
 8005874:	23a0      	movs	r3, #160	; 0xa0
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4013      	ands	r3, r2
 8005880:	d00b      	beq.n	800589a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2201      	movs	r2, #1
 8005888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2284      	movs	r2, #132	; 0x84
 800588e:	589b      	ldr	r3, [r3, r2]
 8005890:	2201      	movs	r2, #1
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2184      	movs	r1, #132	; 0x84
 8005898:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800589a:	23a4      	movs	r3, #164	; 0xa4
 800589c:	18fb      	adds	r3, r7, r3
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2202      	movs	r2, #2
 80058a2:	4013      	ands	r3, r2
 80058a4:	d011      	beq.n	80058ca <HAL_UART_IRQHandler+0xf6>
 80058a6:	239c      	movs	r3, #156	; 0x9c
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2201      	movs	r2, #1
 80058ae:	4013      	ands	r3, r2
 80058b0:	d00b      	beq.n	80058ca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2202      	movs	r2, #2
 80058b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2284      	movs	r2, #132	; 0x84
 80058be:	589b      	ldr	r3, [r3, r2]
 80058c0:	2204      	movs	r2, #4
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2184      	movs	r1, #132	; 0x84
 80058c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058ca:	23a4      	movs	r3, #164	; 0xa4
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2204      	movs	r2, #4
 80058d2:	4013      	ands	r3, r2
 80058d4:	d011      	beq.n	80058fa <HAL_UART_IRQHandler+0x126>
 80058d6:	239c      	movs	r3, #156	; 0x9c
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2201      	movs	r2, #1
 80058de:	4013      	ands	r3, r2
 80058e0:	d00b      	beq.n	80058fa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2204      	movs	r2, #4
 80058e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2284      	movs	r2, #132	; 0x84
 80058ee:	589b      	ldr	r3, [r3, r2]
 80058f0:	2202      	movs	r2, #2
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2184      	movs	r1, #132	; 0x84
 80058f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058fa:	23a4      	movs	r3, #164	; 0xa4
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2208      	movs	r2, #8
 8005902:	4013      	ands	r3, r2
 8005904:	d017      	beq.n	8005936 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005906:	23a0      	movs	r3, #160	; 0xa0
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2220      	movs	r2, #32
 800590e:	4013      	ands	r3, r2
 8005910:	d105      	bne.n	800591e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005912:	239c      	movs	r3, #156	; 0x9c
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2201      	movs	r2, #1
 800591a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800591c:	d00b      	beq.n	8005936 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2208      	movs	r2, #8
 8005924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2284      	movs	r2, #132	; 0x84
 800592a:	589b      	ldr	r3, [r3, r2]
 800592c:	2208      	movs	r2, #8
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2184      	movs	r1, #132	; 0x84
 8005934:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005936:	23a4      	movs	r3, #164	; 0xa4
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	4013      	ands	r3, r2
 8005942:	d013      	beq.n	800596c <HAL_UART_IRQHandler+0x198>
 8005944:	23a0      	movs	r3, #160	; 0xa0
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	2380      	movs	r3, #128	; 0x80
 800594c:	04db      	lsls	r3, r3, #19
 800594e:	4013      	ands	r3, r2
 8005950:	d00c      	beq.n	800596c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2280      	movs	r2, #128	; 0x80
 8005958:	0112      	lsls	r2, r2, #4
 800595a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2284      	movs	r2, #132	; 0x84
 8005960:	589b      	ldr	r3, [r3, r2]
 8005962:	2220      	movs	r2, #32
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2184      	movs	r1, #132	; 0x84
 800596a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2284      	movs	r2, #132	; 0x84
 8005970:	589b      	ldr	r3, [r3, r2]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d100      	bne.n	8005978 <HAL_UART_IRQHandler+0x1a4>
 8005976:	e201      	b.n	8005d7c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005978:	23a4      	movs	r3, #164	; 0xa4
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2220      	movs	r2, #32
 8005980:	4013      	ands	r3, r2
 8005982:	d00e      	beq.n	80059a2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005984:	23a0      	movs	r3, #160	; 0xa0
 8005986:	18fb      	adds	r3, r7, r3
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2220      	movs	r2, #32
 800598c:	4013      	ands	r3, r2
 800598e:	d008      	beq.n	80059a2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	0010      	movs	r0, r2
 80059a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2284      	movs	r2, #132	; 0x84
 80059a6:	589b      	ldr	r3, [r3, r2]
 80059a8:	2194      	movs	r1, #148	; 0x94
 80059aa:	187a      	adds	r2, r7, r1
 80059ac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2240      	movs	r2, #64	; 0x40
 80059b6:	4013      	ands	r3, r2
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d004      	beq.n	80059c6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059bc:	187b      	adds	r3, r7, r1
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2228      	movs	r2, #40	; 0x28
 80059c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059c4:	d047      	beq.n	8005a56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	0018      	movs	r0, r3
 80059ca:	f000 ff2f 	bl	800682c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2240      	movs	r2, #64	; 0x40
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d137      	bne.n	8005a4c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059dc:	f3ef 8310 	mrs	r3, PRIMASK
 80059e0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80059e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e4:	2090      	movs	r0, #144	; 0x90
 80059e6:	183a      	adds	r2, r7, r0
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	2301      	movs	r3, #1
 80059ec:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059f0:	f383 8810 	msr	PRIMASK, r3
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2140      	movs	r1, #64	; 0x40
 8005a02:	438a      	bics	r2, r1
 8005a04:	609a      	str	r2, [r3, #8]
 8005a06:	183b      	adds	r3, r7, r0
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a0e:	f383 8810 	msr	PRIMASK, r3
}
 8005a12:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d012      	beq.n	8005a42 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a20:	4a14      	ldr	r2, [pc, #80]	; (8005a74 <HAL_UART_IRQHandler+0x2a0>)
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f7fe f8f0 	bl	8003c0e <HAL_DMA_Abort_IT>
 8005a2e:	1e03      	subs	r3, r0, #0
 8005a30:	d01a      	beq.n	8005a68 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a40:	e012      	b.n	8005a68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	0018      	movs	r0, r3
 8005a46:	f000 f9af 	bl	8005da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4a:	e00d      	b.n	8005a68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f000 f9aa 	bl	8005da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a54:	e008      	b.n	8005a68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f000 f9a5 	bl	8005da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2284      	movs	r2, #132	; 0x84
 8005a62:	2100      	movs	r1, #0
 8005a64:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005a66:	e189      	b.n	8005d7c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	46c0      	nop			; (mov r8, r8)
    return;
 8005a6a:	e187      	b.n	8005d7c <HAL_UART_IRQHandler+0x5a8>
 8005a6c:	0000080f 	.word	0x0000080f
 8005a70:	04000120 	.word	0x04000120
 8005a74:	080068f5 	.word	0x080068f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d000      	beq.n	8005a82 <HAL_UART_IRQHandler+0x2ae>
 8005a80:	e13b      	b.n	8005cfa <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a82:	23a4      	movs	r3, #164	; 0xa4
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2210      	movs	r2, #16
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d100      	bne.n	8005a90 <HAL_UART_IRQHandler+0x2bc>
 8005a8e:	e134      	b.n	8005cfa <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a90:	23a0      	movs	r3, #160	; 0xa0
 8005a92:	18fb      	adds	r3, r7, r3
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2210      	movs	r2, #16
 8005a98:	4013      	ands	r3, r2
 8005a9a:	d100      	bne.n	8005a9e <HAL_UART_IRQHandler+0x2ca>
 8005a9c:	e12d      	b.n	8005cfa <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2210      	movs	r2, #16
 8005aa4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2240      	movs	r2, #64	; 0x40
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d000      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x2e2>
 8005ab4:	e0a1      	b.n	8005bfa <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	217e      	movs	r1, #126	; 0x7e
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005ac4:	187b      	adds	r3, r7, r1
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d100      	bne.n	8005ace <HAL_UART_IRQHandler+0x2fa>
 8005acc:	e158      	b.n	8005d80 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2258      	movs	r2, #88	; 0x58
 8005ad2:	5a9b      	ldrh	r3, [r3, r2]
 8005ad4:	187a      	adds	r2, r7, r1
 8005ad6:	8812      	ldrh	r2, [r2, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d300      	bcc.n	8005ade <HAL_UART_IRQHandler+0x30a>
 8005adc:	e150      	b.n	8005d80 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	187a      	adds	r2, r7, r1
 8005ae2:	215a      	movs	r1, #90	; 0x5a
 8005ae4:	8812      	ldrh	r2, [r2, #0]
 8005ae6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2220      	movs	r2, #32
 8005af2:	4013      	ands	r3, r2
 8005af4:	d16f      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af6:	f3ef 8310 	mrs	r3, PRIMASK
 8005afa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005afe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b00:	2301      	movs	r3, #1
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	f383 8810 	msr	PRIMASK, r3
}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	499e      	ldr	r1, [pc, #632]	; (8005d90 <HAL_UART_IRQHandler+0x5bc>)
 8005b18:	400a      	ands	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	f383 8810 	msr	PRIMASK, r3
}
 8005b26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b28:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	677b      	str	r3, [r7, #116]	; 0x74
 8005b32:	2301      	movs	r3, #1
 8005b34:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b38:	f383 8810 	msr	PRIMASK, r3
}
 8005b3c:	46c0      	nop			; (mov r8, r8)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2101      	movs	r1, #1
 8005b4a:	438a      	bics	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]
 8005b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b50:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b54:	f383 8810 	msr	PRIMASK, r3
}
 8005b58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b62:	673b      	str	r3, [r7, #112]	; 0x70
 8005b64:	2301      	movs	r3, #1
 8005b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6a:	f383 8810 	msr	PRIMASK, r3
}
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2140      	movs	r1, #64	; 0x40
 8005b7c:	438a      	bics	r2, r1
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b82:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b86:	f383 8810 	msr	PRIMASK, r3
}
 8005b8a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2280      	movs	r2, #128	; 0x80
 8005b90:	2120      	movs	r1, #32
 8005b92:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b9e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005baa:	f383 8810 	msr	PRIMASK, r3
}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2110      	movs	r1, #16
 8005bbc:	438a      	bics	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc6:	f383 8810 	msr	PRIMASK, r3
}
 8005bca:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f7fd ffdc 	bl	8003b8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2258      	movs	r2, #88	; 0x58
 8005be0:	5a9a      	ldrh	r2, [r3, r2]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	215a      	movs	r1, #90	; 0x5a
 8005be6:	5a5b      	ldrh	r3, [r3, r1]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	0011      	movs	r1, r2
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f000 f8e0 	bl	8005db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bf8:	e0c2      	b.n	8005d80 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2258      	movs	r2, #88	; 0x58
 8005bfe:	5a99      	ldrh	r1, [r3, r2]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	225a      	movs	r2, #90	; 0x5a
 8005c04:	5a9b      	ldrh	r3, [r3, r2]
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	208e      	movs	r0, #142	; 0x8e
 8005c0a:	183b      	adds	r3, r7, r0
 8005c0c:	1a8a      	subs	r2, r1, r2
 8005c0e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	225a      	movs	r2, #90	; 0x5a
 8005c14:	5a9b      	ldrh	r3, [r3, r2]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d100      	bne.n	8005c1e <HAL_UART_IRQHandler+0x44a>
 8005c1c:	e0b2      	b.n	8005d84 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005c1e:	183b      	adds	r3, r7, r0
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d100      	bne.n	8005c28 <HAL_UART_IRQHandler+0x454>
 8005c26:	e0ad      	b.n	8005d84 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c28:	f3ef 8310 	mrs	r3, PRIMASK
 8005c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c30:	2488      	movs	r4, #136	; 0x88
 8005c32:	193a      	adds	r2, r7, r4
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	2301      	movs	r3, #1
 8005c38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f383 8810 	msr	PRIMASK, r3
}
 8005c40:	46c0      	nop			; (mov r8, r8)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4951      	ldr	r1, [pc, #324]	; (8005d94 <HAL_UART_IRQHandler+0x5c0>)
 8005c4e:	400a      	ands	r2, r1
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	193b      	adds	r3, r7, r4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f383 8810 	msr	PRIMASK, r3
}
 8005c5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c60:	f3ef 8310 	mrs	r3, PRIMASK
 8005c64:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c66:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c68:	2484      	movs	r4, #132	; 0x84
 8005c6a:	193a      	adds	r2, r7, r4
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	2301      	movs	r3, #1
 8005c70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f383 8810 	msr	PRIMASK, r3
}
 8005c78:	46c0      	nop			; (mov r8, r8)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2101      	movs	r1, #1
 8005c86:	438a      	bics	r2, r1
 8005c88:	609a      	str	r2, [r3, #8]
 8005c8a:	193b      	adds	r3, r7, r4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	f383 8810 	msr	PRIMASK, r3
}
 8005c96:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	2120      	movs	r1, #32
 8005c9e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cac:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	2480      	movs	r4, #128	; 0x80
 8005cb6:	193a      	adds	r2, r7, r4
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	2301      	movs	r3, #1
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	f383 8810 	msr	PRIMASK, r3
}
 8005cc4:	46c0      	nop			; (mov r8, r8)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2110      	movs	r1, #16
 8005cd2:	438a      	bics	r2, r1
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	193b      	adds	r3, r7, r4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	f383 8810 	msr	PRIMASK, r3
}
 8005ce2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cea:	183b      	adds	r3, r7, r0
 8005cec:	881a      	ldrh	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	0011      	movs	r1, r2
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f000 f860 	bl	8005db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cf8:	e044      	b.n	8005d84 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cfa:	23a4      	movs	r3, #164	; 0xa4
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	2380      	movs	r3, #128	; 0x80
 8005d02:	035b      	lsls	r3, r3, #13
 8005d04:	4013      	ands	r3, r2
 8005d06:	d010      	beq.n	8005d2a <HAL_UART_IRQHandler+0x556>
 8005d08:	239c      	movs	r3, #156	; 0x9c
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	03db      	lsls	r3, r3, #15
 8005d12:	4013      	ands	r3, r2
 8005d14:	d009      	beq.n	8005d2a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	0352      	lsls	r2, r2, #13
 8005d1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 ffec 	bl	8006d00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d28:	e02f      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d2a:	23a4      	movs	r3, #164	; 0xa4
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2280      	movs	r2, #128	; 0x80
 8005d32:	4013      	ands	r3, r2
 8005d34:	d00f      	beq.n	8005d56 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d36:	23a0      	movs	r3, #160	; 0xa0
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2280      	movs	r2, #128	; 0x80
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d009      	beq.n	8005d56 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01e      	beq.n	8005d88 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	0010      	movs	r0, r2
 8005d52:	4798      	blx	r3
    }
    return;
 8005d54:	e018      	b.n	8005d88 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d56:	23a4      	movs	r3, #164	; 0xa4
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2240      	movs	r2, #64	; 0x40
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_UART_IRQHandler+0x5b6>
 8005d62:	23a0      	movs	r3, #160	; 0xa0
 8005d64:	18fb      	adds	r3, r7, r3
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2240      	movs	r2, #64	; 0x40
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	d00d      	beq.n	8005d8a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	0018      	movs	r0, r3
 8005d72:	f000 fdd6 	bl	8006922 <UART_EndTransmit_IT>
    return;
 8005d76:	e008      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	e006      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b6>
    return;
 8005d7c:	46c0      	nop			; (mov r8, r8)
 8005d7e:	e004      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8005d80:	46c0      	nop			; (mov r8, r8)
 8005d82:	e002      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	e000      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b6>
    return;
 8005d88:	46c0      	nop			; (mov r8, r8)
  }

}
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b02b      	add	sp, #172	; 0xac
 8005d8e:	bd90      	pop	{r4, r7, pc}
 8005d90:	fffffeff 	.word	0xfffffeff
 8005d94:	fffffedf 	.word	0xfffffedf

08005d98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b002      	add	sp, #8
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005db0:	46c0      	nop			; (mov r8, r8)
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b002      	add	sp, #8
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	000a      	movs	r2, r1
 8005dc2:	1cbb      	adds	r3, r7, #2
 8005dc4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	b002      	add	sp, #8
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dd0:	b5b0      	push	{r4, r5, r7, lr}
 8005dd2:	b08e      	sub	sp, #56	; 0x38
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dd8:	231a      	movs	r3, #26
 8005dda:	2218      	movs	r2, #24
 8005ddc:	189b      	adds	r3, r3, r2
 8005dde:	19db      	adds	r3, r3, r7
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4ac3      	ldr	r2, [pc, #780]	; (8006110 <UART_SetConfig+0x340>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	0019      	movs	r1, r3
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4abe      	ldr	r2, [pc, #760]	; (8006114 <UART_SetConfig+0x344>)
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	0019      	movs	r1, r3
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4ab8      	ldr	r2, [pc, #736]	; (8006118 <UART_SetConfig+0x348>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e40:	4313      	orrs	r3, r2
 8005e42:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	4ab4      	ldr	r2, [pc, #720]	; (800611c <UART_SetConfig+0x34c>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	0019      	movs	r1, r3
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e56:	430a      	orrs	r2, r1
 8005e58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4ab0      	ldr	r2, [pc, #704]	; (8006120 <UART_SetConfig+0x350>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d131      	bne.n	8005ec8 <UART_SetConfig+0xf8>
 8005e64:	4baf      	ldr	r3, [pc, #700]	; (8006124 <UART_SetConfig+0x354>)
 8005e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e68:	2203      	movs	r2, #3
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d01d      	beq.n	8005eac <UART_SetConfig+0xdc>
 8005e70:	d823      	bhi.n	8005eba <UART_SetConfig+0xea>
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d00c      	beq.n	8005e90 <UART_SetConfig+0xc0>
 8005e76:	d820      	bhi.n	8005eba <UART_SetConfig+0xea>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <UART_SetConfig+0xb2>
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d00e      	beq.n	8005e9e <UART_SetConfig+0xce>
 8005e80:	e01b      	b.n	8005eba <UART_SetConfig+0xea>
 8005e82:	231b      	movs	r3, #27
 8005e84:	2218      	movs	r2, #24
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	19db      	adds	r3, r3, r7
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e0b4      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005e90:	231b      	movs	r3, #27
 8005e92:	2218      	movs	r2, #24
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	19db      	adds	r3, r3, r7
 8005e98:	2202      	movs	r2, #2
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	e0ad      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005e9e:	231b      	movs	r3, #27
 8005ea0:	2218      	movs	r2, #24
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	19db      	adds	r3, r3, r7
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e0a6      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005eac:	231b      	movs	r3, #27
 8005eae:	2218      	movs	r2, #24
 8005eb0:	189b      	adds	r3, r3, r2
 8005eb2:	19db      	adds	r3, r3, r7
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	e09f      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005eba:	231b      	movs	r3, #27
 8005ebc:	2218      	movs	r2, #24
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	19db      	adds	r3, r3, r7
 8005ec2:	2210      	movs	r2, #16
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	e098      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a96      	ldr	r2, [pc, #600]	; (8006128 <UART_SetConfig+0x358>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d131      	bne.n	8005f36 <UART_SetConfig+0x166>
 8005ed2:	4b94      	ldr	r3, [pc, #592]	; (8006124 <UART_SetConfig+0x354>)
 8005ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed6:	220c      	movs	r2, #12
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b0c      	cmp	r3, #12
 8005edc:	d01d      	beq.n	8005f1a <UART_SetConfig+0x14a>
 8005ede:	d823      	bhi.n	8005f28 <UART_SetConfig+0x158>
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d00c      	beq.n	8005efe <UART_SetConfig+0x12e>
 8005ee4:	d820      	bhi.n	8005f28 <UART_SetConfig+0x158>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <UART_SetConfig+0x120>
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d00e      	beq.n	8005f0c <UART_SetConfig+0x13c>
 8005eee:	e01b      	b.n	8005f28 <UART_SetConfig+0x158>
 8005ef0:	231b      	movs	r3, #27
 8005ef2:	2218      	movs	r2, #24
 8005ef4:	189b      	adds	r3, r3, r2
 8005ef6:	19db      	adds	r3, r3, r7
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e07d      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005efe:	231b      	movs	r3, #27
 8005f00:	2218      	movs	r2, #24
 8005f02:	189b      	adds	r3, r3, r2
 8005f04:	19db      	adds	r3, r3, r7
 8005f06:	2202      	movs	r2, #2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	e076      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005f0c:	231b      	movs	r3, #27
 8005f0e:	2218      	movs	r2, #24
 8005f10:	189b      	adds	r3, r3, r2
 8005f12:	19db      	adds	r3, r3, r7
 8005f14:	2204      	movs	r2, #4
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e06f      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005f1a:	231b      	movs	r3, #27
 8005f1c:	2218      	movs	r2, #24
 8005f1e:	189b      	adds	r3, r3, r2
 8005f20:	19db      	adds	r3, r3, r7
 8005f22:	2208      	movs	r2, #8
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	e068      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005f28:	231b      	movs	r3, #27
 8005f2a:	2218      	movs	r2, #24
 8005f2c:	189b      	adds	r3, r3, r2
 8005f2e:	19db      	adds	r3, r3, r7
 8005f30:	2210      	movs	r2, #16
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	e061      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a7c      	ldr	r2, [pc, #496]	; (800612c <UART_SetConfig+0x35c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d106      	bne.n	8005f4e <UART_SetConfig+0x17e>
 8005f40:	231b      	movs	r3, #27
 8005f42:	2218      	movs	r2, #24
 8005f44:	189b      	adds	r3, r3, r2
 8005f46:	19db      	adds	r3, r3, r7
 8005f48:	2200      	movs	r2, #0
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	e055      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a77      	ldr	r2, [pc, #476]	; (8006130 <UART_SetConfig+0x360>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d106      	bne.n	8005f66 <UART_SetConfig+0x196>
 8005f58:	231b      	movs	r3, #27
 8005f5a:	2218      	movs	r2, #24
 8005f5c:	189b      	adds	r3, r3, r2
 8005f5e:	19db      	adds	r3, r3, r7
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	e049      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a6b      	ldr	r2, [pc, #428]	; (8006118 <UART_SetConfig+0x348>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d13e      	bne.n	8005fee <UART_SetConfig+0x21e>
 8005f70:	4b6c      	ldr	r3, [pc, #432]	; (8006124 <UART_SetConfig+0x354>)
 8005f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f74:	23c0      	movs	r3, #192	; 0xc0
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	4013      	ands	r3, r2
 8005f7a:	22c0      	movs	r2, #192	; 0xc0
 8005f7c:	0112      	lsls	r2, r2, #4
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d027      	beq.n	8005fd2 <UART_SetConfig+0x202>
 8005f82:	22c0      	movs	r2, #192	; 0xc0
 8005f84:	0112      	lsls	r2, r2, #4
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d82a      	bhi.n	8005fe0 <UART_SetConfig+0x210>
 8005f8a:	2280      	movs	r2, #128	; 0x80
 8005f8c:	0112      	lsls	r2, r2, #4
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d011      	beq.n	8005fb6 <UART_SetConfig+0x1e6>
 8005f92:	2280      	movs	r2, #128	; 0x80
 8005f94:	0112      	lsls	r2, r2, #4
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d822      	bhi.n	8005fe0 <UART_SetConfig+0x210>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <UART_SetConfig+0x1d8>
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	00d2      	lsls	r2, r2, #3
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <UART_SetConfig+0x1f4>
 8005fa6:	e01b      	b.n	8005fe0 <UART_SetConfig+0x210>
 8005fa8:	231b      	movs	r3, #27
 8005faa:	2218      	movs	r2, #24
 8005fac:	189b      	adds	r3, r3, r2
 8005fae:	19db      	adds	r3, r3, r7
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	e021      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005fb6:	231b      	movs	r3, #27
 8005fb8:	2218      	movs	r2, #24
 8005fba:	189b      	adds	r3, r3, r2
 8005fbc:	19db      	adds	r3, r3, r7
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	e01a      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005fc4:	231b      	movs	r3, #27
 8005fc6:	2218      	movs	r2, #24
 8005fc8:	189b      	adds	r3, r3, r2
 8005fca:	19db      	adds	r3, r3, r7
 8005fcc:	2204      	movs	r2, #4
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	e013      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005fd2:	231b      	movs	r3, #27
 8005fd4:	2218      	movs	r2, #24
 8005fd6:	189b      	adds	r3, r3, r2
 8005fd8:	19db      	adds	r3, r3, r7
 8005fda:	2208      	movs	r2, #8
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	e00c      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005fe0:	231b      	movs	r3, #27
 8005fe2:	2218      	movs	r2, #24
 8005fe4:	189b      	adds	r3, r3, r2
 8005fe6:	19db      	adds	r3, r3, r7
 8005fe8:	2210      	movs	r2, #16
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	e005      	b.n	8005ffa <UART_SetConfig+0x22a>
 8005fee:	231b      	movs	r3, #27
 8005ff0:	2218      	movs	r2, #24
 8005ff2:	189b      	adds	r3, r3, r2
 8005ff4:	19db      	adds	r3, r3, r7
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a46      	ldr	r2, [pc, #280]	; (8006118 <UART_SetConfig+0x348>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d000      	beq.n	8006006 <UART_SetConfig+0x236>
 8006004:	e09a      	b.n	800613c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006006:	231b      	movs	r3, #27
 8006008:	2218      	movs	r2, #24
 800600a:	189b      	adds	r3, r3, r2
 800600c:	19db      	adds	r3, r3, r7
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b08      	cmp	r3, #8
 8006012:	d01d      	beq.n	8006050 <UART_SetConfig+0x280>
 8006014:	dc20      	bgt.n	8006058 <UART_SetConfig+0x288>
 8006016:	2b04      	cmp	r3, #4
 8006018:	d015      	beq.n	8006046 <UART_SetConfig+0x276>
 800601a:	dc1d      	bgt.n	8006058 <UART_SetConfig+0x288>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <UART_SetConfig+0x256>
 8006020:	2b02      	cmp	r3, #2
 8006022:	d005      	beq.n	8006030 <UART_SetConfig+0x260>
 8006024:	e018      	b.n	8006058 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006026:	f7fe fda1 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 800602a:	0003      	movs	r3, r0
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800602e:	e01c      	b.n	800606a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006030:	4b3c      	ldr	r3, [pc, #240]	; (8006124 <UART_SetConfig+0x354>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2210      	movs	r2, #16
 8006036:	4013      	ands	r3, r2
 8006038:	d002      	beq.n	8006040 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800603a:	4b3e      	ldr	r3, [pc, #248]	; (8006134 <UART_SetConfig+0x364>)
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800603e:	e014      	b.n	800606a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006040:	4b3d      	ldr	r3, [pc, #244]	; (8006138 <UART_SetConfig+0x368>)
 8006042:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006044:	e011      	b.n	800606a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006046:	f7fe fce1 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 800604a:	0003      	movs	r3, r0
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800604e:	e00c      	b.n	800606a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006050:	2380      	movs	r3, #128	; 0x80
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006056:	e008      	b.n	800606a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800605c:	231a      	movs	r3, #26
 800605e:	2218      	movs	r2, #24
 8006060:	189b      	adds	r3, r3, r2
 8006062:	19db      	adds	r3, r3, r7
 8006064:	2201      	movs	r2, #1
 8006066:	701a      	strb	r2, [r3, #0]
        break;
 8006068:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d100      	bne.n	8006072 <UART_SetConfig+0x2a2>
 8006070:	e133      	b.n	80062da <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	0013      	movs	r3, r2
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	189b      	adds	r3, r3, r2
 800607c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800607e:	429a      	cmp	r2, r3
 8006080:	d305      	bcc.n	800608e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608a:	429a      	cmp	r2, r3
 800608c:	d906      	bls.n	800609c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800608e:	231a      	movs	r3, #26
 8006090:	2218      	movs	r2, #24
 8006092:	189b      	adds	r3, r3, r2
 8006094:	19db      	adds	r3, r3, r7
 8006096:	2201      	movs	r2, #1
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e11e      	b.n	80062da <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	6939      	ldr	r1, [r7, #16]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	000b      	movs	r3, r1
 80060aa:	0e1b      	lsrs	r3, r3, #24
 80060ac:	0010      	movs	r0, r2
 80060ae:	0205      	lsls	r5, r0, #8
 80060b0:	431d      	orrs	r5, r3
 80060b2:	000b      	movs	r3, r1
 80060b4:	021c      	lsls	r4, r3, #8
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	68b8      	ldr	r0, [r7, #8]
 80060c4:	68f9      	ldr	r1, [r7, #12]
 80060c6:	1900      	adds	r0, r0, r4
 80060c8:	4169      	adcs	r1, r5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	2300      	movs	r3, #0
 80060d2:	607b      	str	r3, [r7, #4]
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f7fa fa20 	bl	800051c <__aeabi_uldivmod>
 80060dc:	0002      	movs	r2, r0
 80060de:	000b      	movs	r3, r1
 80060e0:	0013      	movs	r3, r2
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060e6:	23c0      	movs	r3, #192	; 0xc0
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d309      	bcc.n	8006102 <UART_SetConfig+0x332>
 80060ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f0:	2380      	movs	r3, #128	; 0x80
 80060f2:	035b      	lsls	r3, r3, #13
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d204      	bcs.n	8006102 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060fe:	60da      	str	r2, [r3, #12]
 8006100:	e0eb      	b.n	80062da <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006102:	231a      	movs	r3, #26
 8006104:	2218      	movs	r2, #24
 8006106:	189b      	adds	r3, r3, r2
 8006108:	19db      	adds	r3, r3, r7
 800610a:	2201      	movs	r2, #1
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	e0e4      	b.n	80062da <UART_SetConfig+0x50a>
 8006110:	efff69f3 	.word	0xefff69f3
 8006114:	ffffcfff 	.word	0xffffcfff
 8006118:	40004800 	.word	0x40004800
 800611c:	fffff4ff 	.word	0xfffff4ff
 8006120:	40013800 	.word	0x40013800
 8006124:	40021000 	.word	0x40021000
 8006128:	40004400 	.word	0x40004400
 800612c:	40004c00 	.word	0x40004c00
 8006130:	40005000 	.word	0x40005000
 8006134:	003d0900 	.word	0x003d0900
 8006138:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	2380      	movs	r3, #128	; 0x80
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	429a      	cmp	r2, r3
 8006146:	d000      	beq.n	800614a <UART_SetConfig+0x37a>
 8006148:	e070      	b.n	800622c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800614a:	231b      	movs	r3, #27
 800614c:	2218      	movs	r2, #24
 800614e:	189b      	adds	r3, r3, r2
 8006150:	19db      	adds	r3, r3, r7
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b08      	cmp	r3, #8
 8006156:	d822      	bhi.n	800619e <UART_SetConfig+0x3ce>
 8006158:	009a      	lsls	r2, r3, #2
 800615a:	4b67      	ldr	r3, [pc, #412]	; (80062f8 <UART_SetConfig+0x528>)
 800615c:	18d3      	adds	r3, r2, r3
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006162:	f7fe fd03 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8006166:	0003      	movs	r3, r0
 8006168:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800616a:	e021      	b.n	80061b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800616c:	f7fe fd14 	bl	8004b98 <HAL_RCC_GetPCLK2Freq>
 8006170:	0003      	movs	r3, r0
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006174:	e01c      	b.n	80061b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006176:	4b61      	ldr	r3, [pc, #388]	; (80062fc <UART_SetConfig+0x52c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2210      	movs	r2, #16
 800617c:	4013      	ands	r3, r2
 800617e:	d002      	beq.n	8006186 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006180:	4b5f      	ldr	r3, [pc, #380]	; (8006300 <UART_SetConfig+0x530>)
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006184:	e014      	b.n	80061b0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006186:	4b5f      	ldr	r3, [pc, #380]	; (8006304 <UART_SetConfig+0x534>)
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800618a:	e011      	b.n	80061b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800618c:	f7fe fc3e 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 8006190:	0003      	movs	r3, r0
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006194:	e00c      	b.n	80061b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006196:	2380      	movs	r3, #128	; 0x80
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800619c:	e008      	b.n	80061b0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061a2:	231a      	movs	r3, #26
 80061a4:	2218      	movs	r2, #24
 80061a6:	189b      	adds	r3, r3, r2
 80061a8:	19db      	adds	r3, r3, r7
 80061aa:	2201      	movs	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
        break;
 80061ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d100      	bne.n	80061b8 <UART_SetConfig+0x3e8>
 80061b6:	e090      	b.n	80062da <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	005a      	lsls	r2, r3, #1
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	085b      	lsrs	r3, r3, #1
 80061c2:	18d2      	adds	r2, r2, r3
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	0019      	movs	r1, r3
 80061ca:	0010      	movs	r0, r2
 80061cc:	f7f9 ffb8 	bl	8000140 <__udivsi3>
 80061d0:	0003      	movs	r3, r0
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	2b0f      	cmp	r3, #15
 80061d8:	d921      	bls.n	800621e <UART_SetConfig+0x44e>
 80061da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	025b      	lsls	r3, r3, #9
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d21c      	bcs.n	800621e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	200e      	movs	r0, #14
 80061ea:	2418      	movs	r4, #24
 80061ec:	1903      	adds	r3, r0, r4
 80061ee:	19db      	adds	r3, r3, r7
 80061f0:	210f      	movs	r1, #15
 80061f2:	438a      	bics	r2, r1
 80061f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	085b      	lsrs	r3, r3, #1
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2207      	movs	r2, #7
 80061fe:	4013      	ands	r3, r2
 8006200:	b299      	uxth	r1, r3
 8006202:	1903      	adds	r3, r0, r4
 8006204:	19db      	adds	r3, r3, r7
 8006206:	1902      	adds	r2, r0, r4
 8006208:	19d2      	adds	r2, r2, r7
 800620a:	8812      	ldrh	r2, [r2, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	1902      	adds	r2, r0, r4
 8006216:	19d2      	adds	r2, r2, r7
 8006218:	8812      	ldrh	r2, [r2, #0]
 800621a:	60da      	str	r2, [r3, #12]
 800621c:	e05d      	b.n	80062da <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800621e:	231a      	movs	r3, #26
 8006220:	2218      	movs	r2, #24
 8006222:	189b      	adds	r3, r3, r2
 8006224:	19db      	adds	r3, r3, r7
 8006226:	2201      	movs	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	e056      	b.n	80062da <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800622c:	231b      	movs	r3, #27
 800622e:	2218      	movs	r2, #24
 8006230:	189b      	adds	r3, r3, r2
 8006232:	19db      	adds	r3, r3, r7
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b08      	cmp	r3, #8
 8006238:	d822      	bhi.n	8006280 <UART_SetConfig+0x4b0>
 800623a:	009a      	lsls	r2, r3, #2
 800623c:	4b32      	ldr	r3, [pc, #200]	; (8006308 <UART_SetConfig+0x538>)
 800623e:	18d3      	adds	r3, r2, r3
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006244:	f7fe fc92 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8006248:	0003      	movs	r3, r0
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800624c:	e021      	b.n	8006292 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800624e:	f7fe fca3 	bl	8004b98 <HAL_RCC_GetPCLK2Freq>
 8006252:	0003      	movs	r3, r0
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006256:	e01c      	b.n	8006292 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006258:	4b28      	ldr	r3, [pc, #160]	; (80062fc <UART_SetConfig+0x52c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2210      	movs	r2, #16
 800625e:	4013      	ands	r3, r2
 8006260:	d002      	beq.n	8006268 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006262:	4b27      	ldr	r3, [pc, #156]	; (8006300 <UART_SetConfig+0x530>)
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006266:	e014      	b.n	8006292 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006268:	4b26      	ldr	r3, [pc, #152]	; (8006304 <UART_SetConfig+0x534>)
 800626a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800626c:	e011      	b.n	8006292 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800626e:	f7fe fbcd 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 8006272:	0003      	movs	r3, r0
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006276:	e00c      	b.n	8006292 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800627e:	e008      	b.n	8006292 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006284:	231a      	movs	r3, #26
 8006286:	2218      	movs	r2, #24
 8006288:	189b      	adds	r3, r3, r2
 800628a:	19db      	adds	r3, r3, r7
 800628c:	2201      	movs	r2, #1
 800628e:	701a      	strb	r2, [r3, #0]
        break;
 8006290:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d020      	beq.n	80062da <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	085a      	lsrs	r2, r3, #1
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	18d2      	adds	r2, r2, r3
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	0019      	movs	r1, r3
 80062a8:	0010      	movs	r0, r2
 80062aa:	f7f9 ff49 	bl	8000140 <__udivsi3>
 80062ae:	0003      	movs	r3, r0
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	2b0f      	cmp	r3, #15
 80062b6:	d90a      	bls.n	80062ce <UART_SetConfig+0x4fe>
 80062b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ba:	2380      	movs	r3, #128	; 0x80
 80062bc:	025b      	lsls	r3, r3, #9
 80062be:	429a      	cmp	r2, r3
 80062c0:	d205      	bcs.n	80062ce <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60da      	str	r2, [r3, #12]
 80062cc:	e005      	b.n	80062da <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80062ce:	231a      	movs	r3, #26
 80062d0:	2218      	movs	r2, #24
 80062d2:	189b      	adds	r3, r3, r2
 80062d4:	19db      	adds	r3, r3, r7
 80062d6:	2201      	movs	r2, #1
 80062d8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	2200      	movs	r2, #0
 80062de:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2200      	movs	r2, #0
 80062e4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80062e6:	231a      	movs	r3, #26
 80062e8:	2218      	movs	r2, #24
 80062ea:	189b      	adds	r3, r3, r2
 80062ec:	19db      	adds	r3, r3, r7
 80062ee:	781b      	ldrb	r3, [r3, #0]
}
 80062f0:	0018      	movs	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b00e      	add	sp, #56	; 0x38
 80062f6:	bdb0      	pop	{r4, r5, r7, pc}
 80062f8:	0800f100 	.word	0x0800f100
 80062fc:	40021000 	.word	0x40021000
 8006300:	003d0900 	.word	0x003d0900
 8006304:	00f42400 	.word	0x00f42400
 8006308:	0800f124 	.word	0x0800f124

0800630c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	2201      	movs	r2, #1
 800631a:	4013      	ands	r3, r2
 800631c:	d00b      	beq.n	8006336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4a4a      	ldr	r2, [pc, #296]	; (8006450 <UART_AdvFeatureConfig+0x144>)
 8006326:	4013      	ands	r3, r2
 8006328:	0019      	movs	r1, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	2202      	movs	r2, #2
 800633c:	4013      	ands	r3, r2
 800633e:	d00b      	beq.n	8006358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	4a43      	ldr	r2, [pc, #268]	; (8006454 <UART_AdvFeatureConfig+0x148>)
 8006348:	4013      	ands	r3, r2
 800634a:	0019      	movs	r1, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	2204      	movs	r2, #4
 800635e:	4013      	ands	r3, r2
 8006360:	d00b      	beq.n	800637a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	4a3b      	ldr	r2, [pc, #236]	; (8006458 <UART_AdvFeatureConfig+0x14c>)
 800636a:	4013      	ands	r3, r2
 800636c:	0019      	movs	r1, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	2208      	movs	r2, #8
 8006380:	4013      	ands	r3, r2
 8006382:	d00b      	beq.n	800639c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	4a34      	ldr	r2, [pc, #208]	; (800645c <UART_AdvFeatureConfig+0x150>)
 800638c:	4013      	ands	r3, r2
 800638e:	0019      	movs	r1, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2210      	movs	r2, #16
 80063a2:	4013      	ands	r3, r2
 80063a4:	d00b      	beq.n	80063be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4a2c      	ldr	r2, [pc, #176]	; (8006460 <UART_AdvFeatureConfig+0x154>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	0019      	movs	r1, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	2220      	movs	r2, #32
 80063c4:	4013      	ands	r3, r2
 80063c6:	d00b      	beq.n	80063e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	4a25      	ldr	r2, [pc, #148]	; (8006464 <UART_AdvFeatureConfig+0x158>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	0019      	movs	r1, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	2240      	movs	r2, #64	; 0x40
 80063e6:	4013      	ands	r3, r2
 80063e8:	d01d      	beq.n	8006426 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <UART_AdvFeatureConfig+0x15c>)
 80063f2:	4013      	ands	r3, r2
 80063f4:	0019      	movs	r1, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006406:	2380      	movs	r3, #128	; 0x80
 8006408:	035b      	lsls	r3, r3, #13
 800640a:	429a      	cmp	r2, r3
 800640c:	d10b      	bne.n	8006426 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4a15      	ldr	r2, [pc, #84]	; (800646c <UART_AdvFeatureConfig+0x160>)
 8006416:	4013      	ands	r3, r2
 8006418:	0019      	movs	r1, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	2280      	movs	r2, #128	; 0x80
 800642c:	4013      	ands	r3, r2
 800642e:	d00b      	beq.n	8006448 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4a0e      	ldr	r2, [pc, #56]	; (8006470 <UART_AdvFeatureConfig+0x164>)
 8006438:	4013      	ands	r3, r2
 800643a:	0019      	movs	r1, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	605a      	str	r2, [r3, #4]
  }
}
 8006448:	46c0      	nop			; (mov r8, r8)
 800644a:	46bd      	mov	sp, r7
 800644c:	b002      	add	sp, #8
 800644e:	bd80      	pop	{r7, pc}
 8006450:	fffdffff 	.word	0xfffdffff
 8006454:	fffeffff 	.word	0xfffeffff
 8006458:	fffbffff 	.word	0xfffbffff
 800645c:	ffff7fff 	.word	0xffff7fff
 8006460:	ffffefff 	.word	0xffffefff
 8006464:	ffffdfff 	.word	0xffffdfff
 8006468:	ffefffff 	.word	0xffefffff
 800646c:	ff9fffff 	.word	0xff9fffff
 8006470:	fff7ffff 	.word	0xfff7ffff

08006474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b092      	sub	sp, #72	; 0x48
 8006478:	af02      	add	r7, sp, #8
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2284      	movs	r2, #132	; 0x84
 8006480:	2100      	movs	r1, #0
 8006482:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006484:	f7fd facc 	bl	8003a20 <HAL_GetTick>
 8006488:	0003      	movs	r3, r0
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2208      	movs	r2, #8
 8006494:	4013      	ands	r3, r2
 8006496:	2b08      	cmp	r3, #8
 8006498:	d12c      	bne.n	80064f4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800649a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649c:	2280      	movs	r2, #128	; 0x80
 800649e:	0391      	lsls	r1, r2, #14
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	4a46      	ldr	r2, [pc, #280]	; (80065bc <UART_CheckIdleState+0x148>)
 80064a4:	9200      	str	r2, [sp, #0]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f000 f88c 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 80064ac:	1e03      	subs	r3, r0, #0
 80064ae:	d021      	beq.n	80064f4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b0:	f3ef 8310 	mrs	r3, PRIMASK
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80064ba:	2301      	movs	r3, #1
 80064bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	f383 8810 	msr	PRIMASK, r3
}
 80064c4:	46c0      	nop			; (mov r8, r8)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2180      	movs	r1, #128	; 0x80
 80064d2:	438a      	bics	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	f383 8810 	msr	PRIMASK, r3
}
 80064e0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2278      	movs	r2, #120	; 0x78
 80064ec:	2100      	movs	r1, #0
 80064ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e05f      	b.n	80065b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2204      	movs	r2, #4
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d146      	bne.n	8006590 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006504:	2280      	movs	r2, #128	; 0x80
 8006506:	03d1      	lsls	r1, r2, #15
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4a2c      	ldr	r2, [pc, #176]	; (80065bc <UART_CheckIdleState+0x148>)
 800650c:	9200      	str	r2, [sp, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	f000 f858 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 8006514:	1e03      	subs	r3, r0, #0
 8006516:	d03b      	beq.n	8006590 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006518:	f3ef 8310 	mrs	r3, PRIMASK
 800651c:	60fb      	str	r3, [r7, #12]
  return(result);
 800651e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
 8006522:	2301      	movs	r3, #1
 8006524:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f383 8810 	msr	PRIMASK, r3
}
 800652c:	46c0      	nop			; (mov r8, r8)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4921      	ldr	r1, [pc, #132]	; (80065c0 <UART_CheckIdleState+0x14c>)
 800653a:	400a      	ands	r2, r1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006540:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f383 8810 	msr	PRIMASK, r3
}
 8006548:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654a:	f3ef 8310 	mrs	r3, PRIMASK
 800654e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006550:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	633b      	str	r3, [r7, #48]	; 0x30
 8006554:	2301      	movs	r3, #1
 8006556:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	f383 8810 	msr	PRIMASK, r3
}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2101      	movs	r1, #1
 800656c:	438a      	bics	r2, r1
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	f383 8810 	msr	PRIMASK, r3
}
 800657a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2280      	movs	r2, #128	; 0x80
 8006580:	2120      	movs	r1, #32
 8006582:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2278      	movs	r2, #120	; 0x78
 8006588:	2100      	movs	r1, #0
 800658a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e011      	b.n	80065b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2280      	movs	r2, #128	; 0x80
 800659a:	2120      	movs	r1, #32
 800659c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2278      	movs	r2, #120	; 0x78
 80065ae:	2100      	movs	r1, #0
 80065b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	0018      	movs	r0, r3
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b010      	add	sp, #64	; 0x40
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	01ffffff 	.word	0x01ffffff
 80065c0:	fffffedf 	.word	0xfffffedf

080065c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	1dfb      	adds	r3, r7, #7
 80065d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d4:	e04b      	b.n	800666e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	3301      	adds	r3, #1
 80065da:	d048      	beq.n	800666e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065dc:	f7fd fa20 	bl	8003a20 <HAL_GetTick>
 80065e0:	0002      	movs	r2, r0
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d302      	bcc.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e04b      	b.n	800668e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2204      	movs	r2, #4
 80065fe:	4013      	ands	r3, r2
 8006600:	d035      	beq.n	800666e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	2208      	movs	r2, #8
 800660a:	4013      	ands	r3, r2
 800660c:	2b08      	cmp	r3, #8
 800660e:	d111      	bne.n	8006634 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2208      	movs	r2, #8
 8006616:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	0018      	movs	r0, r3
 800661c:	f000 f906 	bl	800682c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2284      	movs	r2, #132	; 0x84
 8006624:	2108      	movs	r1, #8
 8006626:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2278      	movs	r2, #120	; 0x78
 800662c:	2100      	movs	r1, #0
 800662e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e02c      	b.n	800668e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69da      	ldr	r2, [r3, #28]
 800663a:	2380      	movs	r3, #128	; 0x80
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	401a      	ands	r2, r3
 8006640:	2380      	movs	r3, #128	; 0x80
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	429a      	cmp	r2, r3
 8006646:	d112      	bne.n	800666e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2280      	movs	r2, #128	; 0x80
 800664e:	0112      	lsls	r2, r2, #4
 8006650:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	0018      	movs	r0, r3
 8006656:	f000 f8e9 	bl	800682c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2284      	movs	r2, #132	; 0x84
 800665e:	2120      	movs	r1, #32
 8006660:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2278      	movs	r2, #120	; 0x78
 8006666:	2100      	movs	r1, #0
 8006668:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e00f      	b.n	800668e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	4013      	ands	r3, r2
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	425a      	negs	r2, r3
 800667e:	4153      	adcs	r3, r2
 8006680:	b2db      	uxtb	r3, r3
 8006682:	001a      	movs	r2, r3
 8006684:	1dfb      	adds	r3, r7, #7
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d0a4      	beq.n	80065d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	0018      	movs	r0, r3
 8006690:	46bd      	mov	sp, r7
 8006692:	b004      	add	sp, #16
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b090      	sub	sp, #64	; 0x40
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	1dbb      	adds	r3, r7, #6
 80066a4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	1dba      	adds	r2, r7, #6
 80066b0:	2158      	movs	r1, #88	; 0x58
 80066b2:	8812      	ldrh	r2, [r2, #0]
 80066b4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	1dba      	adds	r2, r7, #6
 80066ba:	215a      	movs	r1, #90	; 0x5a
 80066bc:	8812      	ldrh	r2, [r2, #0]
 80066be:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	2380      	movs	r3, #128	; 0x80
 80066cc:	015b      	lsls	r3, r3, #5
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d10d      	bne.n	80066ee <UART_Start_Receive_IT+0x56>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <UART_Start_Receive_IT+0x4c>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	225c      	movs	r2, #92	; 0x5c
 80066de:	4950      	ldr	r1, [pc, #320]	; (8006820 <UART_Start_Receive_IT+0x188>)
 80066e0:	5299      	strh	r1, [r3, r2]
 80066e2:	e02e      	b.n	8006742 <UART_Start_Receive_IT+0xaa>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	225c      	movs	r2, #92	; 0x5c
 80066e8:	21ff      	movs	r1, #255	; 0xff
 80066ea:	5299      	strh	r1, [r3, r2]
 80066ec:	e029      	b.n	8006742 <UART_Start_Receive_IT+0xaa>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10d      	bne.n	8006712 <UART_Start_Receive_IT+0x7a>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d104      	bne.n	8006708 <UART_Start_Receive_IT+0x70>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	225c      	movs	r2, #92	; 0x5c
 8006702:	21ff      	movs	r1, #255	; 0xff
 8006704:	5299      	strh	r1, [r3, r2]
 8006706:	e01c      	b.n	8006742 <UART_Start_Receive_IT+0xaa>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	225c      	movs	r2, #92	; 0x5c
 800670c:	217f      	movs	r1, #127	; 0x7f
 800670e:	5299      	strh	r1, [r3, r2]
 8006710:	e017      	b.n	8006742 <UART_Start_Receive_IT+0xaa>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	2380      	movs	r3, #128	; 0x80
 8006718:	055b      	lsls	r3, r3, #21
 800671a:	429a      	cmp	r2, r3
 800671c:	d10d      	bne.n	800673a <UART_Start_Receive_IT+0xa2>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <UART_Start_Receive_IT+0x98>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	225c      	movs	r2, #92	; 0x5c
 800672a:	217f      	movs	r1, #127	; 0x7f
 800672c:	5299      	strh	r1, [r3, r2]
 800672e:	e008      	b.n	8006742 <UART_Start_Receive_IT+0xaa>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	225c      	movs	r2, #92	; 0x5c
 8006734:	213f      	movs	r1, #63	; 0x3f
 8006736:	5299      	strh	r1, [r3, r2]
 8006738:	e003      	b.n	8006742 <UART_Start_Receive_IT+0xaa>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	225c      	movs	r2, #92	; 0x5c
 800673e:	2100      	movs	r1, #0
 8006740:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2284      	movs	r2, #132	; 0x84
 8006746:	2100      	movs	r1, #0
 8006748:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2280      	movs	r2, #128	; 0x80
 800674e:	2122      	movs	r1, #34	; 0x22
 8006750:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006752:	f3ef 8310 	mrs	r3, PRIMASK
 8006756:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800675c:	2301      	movs	r3, #1
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	f383 8810 	msr	PRIMASK, r3
}
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2101      	movs	r1, #1
 8006774:	430a      	orrs	r2, r1
 8006776:	609a      	str	r2, [r3, #8]
 8006778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	f383 8810 	msr	PRIMASK, r3
}
 8006782:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	2380      	movs	r3, #128	; 0x80
 800678a:	015b      	lsls	r3, r3, #5
 800678c:	429a      	cmp	r2, r3
 800678e:	d107      	bne.n	80067a0 <UART_Start_Receive_IT+0x108>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d103      	bne.n	80067a0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4a22      	ldr	r2, [pc, #136]	; (8006824 <UART_Start_Receive_IT+0x18c>)
 800679c:	669a      	str	r2, [r3, #104]	; 0x68
 800679e:	e002      	b.n	80067a6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a21      	ldr	r2, [pc, #132]	; (8006828 <UART_Start_Receive_IT+0x190>)
 80067a4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d019      	beq.n	80067e2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ae:	f3ef 8310 	mrs	r3, PRIMASK
 80067b2:	61fb      	str	r3, [r7, #28]
  return(result);
 80067b4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80067b6:	637b      	str	r3, [r7, #52]	; 0x34
 80067b8:	2301      	movs	r3, #1
 80067ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	f383 8810 	msr	PRIMASK, r3
}
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2190      	movs	r1, #144	; 0x90
 80067d0:	0049      	lsls	r1, r1, #1
 80067d2:	430a      	orrs	r2, r1
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	f383 8810 	msr	PRIMASK, r3
}
 80067e0:	e018      	b.n	8006814 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e2:	f3ef 8310 	mrs	r3, PRIMASK
 80067e6:	613b      	str	r3, [r7, #16]
  return(result);
 80067e8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80067ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80067ec:	2301      	movs	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f383 8810 	msr	PRIMASK, r3
}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2120      	movs	r1, #32
 8006804:	430a      	orrs	r2, r1
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	f383 8810 	msr	PRIMASK, r3
}
 8006812:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	0018      	movs	r0, r3
 8006818:	46bd      	mov	sp, r7
 800681a:	b010      	add	sp, #64	; 0x40
 800681c:	bd80      	pop	{r7, pc}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	000001ff 	.word	0x000001ff
 8006824:	08006b3d 	.word	0x08006b3d
 8006828:	08006979 	.word	0x08006979

0800682c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08e      	sub	sp, #56	; 0x38
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006834:	f3ef 8310 	mrs	r3, PRIMASK
 8006838:	617b      	str	r3, [r7, #20]
  return(result);
 800683a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800683c:	637b      	str	r3, [r7, #52]	; 0x34
 800683e:	2301      	movs	r3, #1
 8006840:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	f383 8810 	msr	PRIMASK, r3
}
 8006848:	46c0      	nop			; (mov r8, r8)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4926      	ldr	r1, [pc, #152]	; (80068f0 <UART_EndRxTransfer+0xc4>)
 8006856:	400a      	ands	r2, r1
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	f383 8810 	msr	PRIMASK, r3
}
 8006864:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006866:	f3ef 8310 	mrs	r3, PRIMASK
 800686a:	623b      	str	r3, [r7, #32]
  return(result);
 800686c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686e:	633b      	str	r3, [r7, #48]	; 0x30
 8006870:	2301      	movs	r3, #1
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	f383 8810 	msr	PRIMASK, r3
}
 800687a:	46c0      	nop			; (mov r8, r8)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2101      	movs	r1, #1
 8006888:	438a      	bics	r2, r1
 800688a:	609a      	str	r2, [r3, #8]
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	f383 8810 	msr	PRIMASK, r3
}
 8006896:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689c:	2b01      	cmp	r3, #1
 800689e:	d118      	bne.n	80068d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a0:	f3ef 8310 	mrs	r3, PRIMASK
 80068a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80068a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068aa:	2301      	movs	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f383 8810 	msr	PRIMASK, r3
}
 80068b4:	46c0      	nop			; (mov r8, r8)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2110      	movs	r1, #16
 80068c2:	438a      	bics	r2, r1
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f383 8810 	msr	PRIMASK, r3
}
 80068d0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2280      	movs	r2, #128	; 0x80
 80068d6:	2120      	movs	r1, #32
 80068d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	46bd      	mov	sp, r7
 80068ea:	b00e      	add	sp, #56	; 0x38
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	fffffedf 	.word	0xfffffedf

080068f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	225a      	movs	r2, #90	; 0x5a
 8006906:	2100      	movs	r1, #0
 8006908:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2252      	movs	r2, #82	; 0x52
 800690e:	2100      	movs	r1, #0
 8006910:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	0018      	movs	r0, r3
 8006916:	f7ff fa47 	bl	8005da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800691a:	46c0      	nop			; (mov r8, r8)
 800691c:	46bd      	mov	sp, r7
 800691e:	b004      	add	sp, #16
 8006920:	bd80      	pop	{r7, pc}

08006922 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b086      	sub	sp, #24
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800692a:	f3ef 8310 	mrs	r3, PRIMASK
 800692e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006930:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	2301      	movs	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f383 8810 	msr	PRIMASK, r3
}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2140      	movs	r1, #64	; 0x40
 800694c:	438a      	bics	r2, r1
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f383 8810 	msr	PRIMASK, r3
}
 800695a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	0018      	movs	r0, r3
 800696c:	f7ff fa14 	bl	8005d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006970:	46c0      	nop			; (mov r8, r8)
 8006972:	46bd      	mov	sp, r7
 8006974:	b006      	add	sp, #24
 8006976:	bd80      	pop	{r7, pc}

08006978 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b094      	sub	sp, #80	; 0x50
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006980:	204e      	movs	r0, #78	; 0x4e
 8006982:	183b      	adds	r3, r7, r0
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	215c      	movs	r1, #92	; 0x5c
 8006988:	5a52      	ldrh	r2, [r2, r1]
 800698a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2280      	movs	r2, #128	; 0x80
 8006990:	589b      	ldr	r3, [r3, r2]
 8006992:	2b22      	cmp	r3, #34	; 0x22
 8006994:	d000      	beq.n	8006998 <UART_RxISR_8BIT+0x20>
 8006996:	e0bf      	b.n	8006b18 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800699e:	214c      	movs	r1, #76	; 0x4c
 80069a0:	187b      	adds	r3, r7, r1
 80069a2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	183b      	adds	r3, r7, r0
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b2d9      	uxtb	r1, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b4:	400a      	ands	r2, r1
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	225a      	movs	r2, #90	; 0x5a
 80069c8:	5a9b      	ldrh	r3, [r3, r2]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b299      	uxth	r1, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	225a      	movs	r2, #90	; 0x5a
 80069d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	225a      	movs	r2, #90	; 0x5a
 80069da:	5a9b      	ldrh	r3, [r3, r2]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d000      	beq.n	80069e4 <UART_RxISR_8BIT+0x6c>
 80069e2:	e0a1      	b.n	8006b28 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e4:	f3ef 8310 	mrs	r3, PRIMASK
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ee:	2301      	movs	r3, #1
 80069f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	f383 8810 	msr	PRIMASK, r3
}
 80069f8:	46c0      	nop			; (mov r8, r8)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	494a      	ldr	r1, [pc, #296]	; (8006b30 <UART_RxISR_8BIT+0x1b8>)
 8006a06:	400a      	ands	r2, r1
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	f383 8810 	msr	PRIMASK, r3
}
 8006a14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a16:	f3ef 8310 	mrs	r3, PRIMASK
 8006a1a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a20:	2301      	movs	r3, #1
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	f383 8810 	msr	PRIMASK, r3
}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2101      	movs	r1, #1
 8006a38:	438a      	bics	r2, r1
 8006a3a:	609a      	str	r2, [r3, #8]
 8006a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	f383 8810 	msr	PRIMASK, r3
}
 8006a46:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2280      	movs	r2, #128	; 0x80
 8006a4c:	2120      	movs	r1, #32
 8006a4e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a34      	ldr	r2, [pc, #208]	; (8006b34 <UART_RxISR_8BIT+0x1bc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d01f      	beq.n	8006aa6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	2380      	movs	r3, #128	; 0x80
 8006a6e:	041b      	lsls	r3, r3, #16
 8006a70:	4013      	ands	r3, r2
 8006a72:	d018      	beq.n	8006aa6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a74:	f3ef 8310 	mrs	r3, PRIMASK
 8006a78:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a7a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a7e:	2301      	movs	r3, #1
 8006a80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f383 8810 	msr	PRIMASK, r3
}
 8006a88:	46c0      	nop			; (mov r8, r8)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4928      	ldr	r1, [pc, #160]	; (8006b38 <UART_RxISR_8BIT+0x1c0>)
 8006a96:	400a      	ands	r2, r1
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	f383 8810 	msr	PRIMASK, r3
}
 8006aa4:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d12f      	bne.n	8006b0e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006aba:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006abe:	2301      	movs	r3, #1
 8006ac0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f383 8810 	msr	PRIMASK, r3
}
 8006ac8:	46c0      	nop			; (mov r8, r8)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2110      	movs	r1, #16
 8006ad6:	438a      	bics	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006adc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f383 8810 	msr	PRIMASK, r3
}
 8006ae4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	2210      	movs	r2, #16
 8006aee:	4013      	ands	r3, r2
 8006af0:	2b10      	cmp	r3, #16
 8006af2:	d103      	bne.n	8006afc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2210      	movs	r2, #16
 8006afa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2258      	movs	r2, #88	; 0x58
 8006b00:	5a9a      	ldrh	r2, [r3, r2]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0011      	movs	r1, r2
 8006b06:	0018      	movs	r0, r3
 8006b08:	f7ff f956 	bl	8005db8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b0c:	e00c      	b.n	8006b28 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	0018      	movs	r0, r3
 8006b12:	f7fc fc07 	bl	8003324 <HAL_UART_RxCpltCallback>
}
 8006b16:	e007      	b.n	8006b28 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2108      	movs	r1, #8
 8006b24:	430a      	orrs	r2, r1
 8006b26:	619a      	str	r2, [r3, #24]
}
 8006b28:	46c0      	nop			; (mov r8, r8)
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	b014      	add	sp, #80	; 0x50
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	fffffedf 	.word	0xfffffedf
 8006b34:	40004800 	.word	0x40004800
 8006b38:	fbffffff 	.word	0xfbffffff

08006b3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b094      	sub	sp, #80	; 0x50
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b44:	204e      	movs	r0, #78	; 0x4e
 8006b46:	183b      	adds	r3, r7, r0
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	215c      	movs	r1, #92	; 0x5c
 8006b4c:	5a52      	ldrh	r2, [r2, r1]
 8006b4e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2280      	movs	r2, #128	; 0x80
 8006b54:	589b      	ldr	r3, [r3, r2]
 8006b56:	2b22      	cmp	r3, #34	; 0x22
 8006b58:	d000      	beq.n	8006b5c <UART_RxISR_16BIT+0x20>
 8006b5a:	e0bf      	b.n	8006cdc <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b62:	214c      	movs	r1, #76	; 0x4c
 8006b64:	187b      	adds	r3, r7, r1
 8006b66:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b6e:	187b      	adds	r3, r7, r1
 8006b70:	183a      	adds	r2, r7, r0
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	8812      	ldrh	r2, [r2, #0]
 8006b76:	4013      	ands	r3, r2
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	1c9a      	adds	r2, r3, #2
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	225a      	movs	r2, #90	; 0x5a
 8006b8c:	5a9b      	ldrh	r3, [r3, r2]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b299      	uxth	r1, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	225a      	movs	r2, #90	; 0x5a
 8006b98:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	225a      	movs	r2, #90	; 0x5a
 8006b9e:	5a9b      	ldrh	r3, [r3, r2]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d000      	beq.n	8006ba8 <UART_RxISR_16BIT+0x6c>
 8006ba6:	e0a1      	b.n	8006cec <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bac:	623b      	str	r3, [r7, #32]
  return(result);
 8006bae:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	f383 8810 	msr	PRIMASK, r3
}
 8006bbc:	46c0      	nop			; (mov r8, r8)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	494a      	ldr	r1, [pc, #296]	; (8006cf4 <UART_RxISR_16BIT+0x1b8>)
 8006bca:	400a      	ands	r2, r1
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	f383 8810 	msr	PRIMASK, r3
}
 8006bd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bda:	f3ef 8310 	mrs	r3, PRIMASK
 8006bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be2:	643b      	str	r3, [r7, #64]	; 0x40
 8006be4:	2301      	movs	r3, #1
 8006be6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	f383 8810 	msr	PRIMASK, r3
}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	438a      	bics	r2, r1
 8006bfe:	609a      	str	r2, [r3, #8]
 8006c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c06:	f383 8810 	msr	PRIMASK, r3
}
 8006c0a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2280      	movs	r2, #128	; 0x80
 8006c10:	2120      	movs	r1, #32
 8006c12:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a34      	ldr	r2, [pc, #208]	; (8006cf8 <UART_RxISR_16BIT+0x1bc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d01f      	beq.n	8006c6a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	2380      	movs	r3, #128	; 0x80
 8006c32:	041b      	lsls	r3, r3, #16
 8006c34:	4013      	ands	r3, r2
 8006c36:	d018      	beq.n	8006c6a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c38:	f3ef 8310 	mrs	r3, PRIMASK
 8006c3c:	617b      	str	r3, [r7, #20]
  return(result);
 8006c3e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c42:	2301      	movs	r3, #1
 8006c44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	f383 8810 	msr	PRIMASK, r3
}
 8006c4c:	46c0      	nop			; (mov r8, r8)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4928      	ldr	r1, [pc, #160]	; (8006cfc <UART_RxISR_16BIT+0x1c0>)
 8006c5a:	400a      	ands	r2, r1
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	f383 8810 	msr	PRIMASK, r3
}
 8006c68:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d12f      	bne.n	8006cd2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c78:	f3ef 8310 	mrs	r3, PRIMASK
 8006c7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c7e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c80:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c82:	2301      	movs	r3, #1
 8006c84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f383 8810 	msr	PRIMASK, r3
}
 8006c8c:	46c0      	nop			; (mov r8, r8)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2110      	movs	r1, #16
 8006c9a:	438a      	bics	r2, r1
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f383 8810 	msr	PRIMASK, r3
}
 8006ca8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	2210      	movs	r2, #16
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d103      	bne.n	8006cc0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2210      	movs	r2, #16
 8006cbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2258      	movs	r2, #88	; 0x58
 8006cc4:	5a9a      	ldrh	r2, [r3, r2]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	0011      	movs	r1, r2
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f7ff f874 	bl	8005db8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cd0:	e00c      	b.n	8006cec <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f7fc fb25 	bl	8003324 <HAL_UART_RxCpltCallback>
}
 8006cda:	e007      	b.n	8006cec <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2108      	movs	r1, #8
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	619a      	str	r2, [r3, #24]
}
 8006cec:	46c0      	nop			; (mov r8, r8)
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b014      	add	sp, #80	; 0x50
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	fffffedf 	.word	0xfffffedf
 8006cf8:	40004800 	.word	0x40004800
 8006cfc:	fbffffff 	.word	0xfbffffff

08006d00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d08:	46c0      	nop			; (mov r8, r8)
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b002      	add	sp, #8
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006d14:	46c0      	nop			; (mov r8, r8)
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d22:	f3ef 8305 	mrs	r3, IPSR
 8006d26:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d109      	bne.n	8006d42 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d32:	607b      	str	r3, [r7, #4]
  return(result);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d007      	beq.n	8006d4a <osKernelInitialize+0x2e>
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <osKernelInitialize+0x54>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d103      	bne.n	8006d4a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8006d42:	2306      	movs	r3, #6
 8006d44:	425b      	negs	r3, r3
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e00c      	b.n	8006d64 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d4a:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <osKernelInitialize+0x54>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d105      	bne.n	8006d5e <osKernelInitialize+0x42>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <osKernelInitialize+0x54>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e002      	b.n	8006d64 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	425b      	negs	r3, r3
 8006d62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006d64:	68fb      	ldr	r3, [r7, #12]
}
 8006d66:	0018      	movs	r0, r3
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	b004      	add	sp, #16
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	46c0      	nop			; (mov r8, r8)
 8006d70:	2000032c 	.word	0x2000032c

08006d74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d7a:	f3ef 8305 	mrs	r3, IPSR
 8006d7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d109      	bne.n	8006d9a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d86:	f3ef 8310 	mrs	r3, PRIMASK
 8006d8a:	607b      	str	r3, [r7, #4]
  return(result);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <osKernelStart+0x2e>
 8006d92:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <osKernelStart+0x5c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d103      	bne.n	8006da2 <osKernelStart+0x2e>
    stat = osErrorISR;
 8006d9a:	2306      	movs	r3, #6
 8006d9c:	425b      	negs	r3, r3
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	e010      	b.n	8006dc4 <osKernelStart+0x50>
  }
  else {
    if (KernelState == osKernelReady) {
 8006da2:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <osKernelStart+0x5c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d109      	bne.n	8006dbe <osKernelStart+0x4a>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006daa:	f7ff ffb1 	bl	8006d10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006dae:	4b08      	ldr	r3, [pc, #32]	; (8006dd0 <osKernelStart+0x5c>)
 8006db0:	2202      	movs	r2, #2
 8006db2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006db4:	f001 fdf6 	bl	80089a4 <vTaskStartScheduler>
      stat = osOK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	e002      	b.n	8006dc4 <osKernelStart+0x50>
    } else {
      stat = osError;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	425b      	negs	r3, r3
 8006dc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
}
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	b004      	add	sp, #16
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	46c0      	nop			; (mov r8, r8)
 8006dd0:	2000032c 	.word	0x2000032c

08006dd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006dd4:	b5b0      	push	{r4, r5, r7, lr}
 8006dd6:	b090      	sub	sp, #64	; 0x40
 8006dd8:	af04      	add	r7, sp, #16
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006de0:	2300      	movs	r3, #0
 8006de2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006de4:	f3ef 8305 	mrs	r3, IPSR
 8006de8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006dea:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d000      	beq.n	8006df2 <osThreadNew+0x1e>
 8006df0:	e08c      	b.n	8006f0c <osThreadNew+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006df2:	f3ef 8310 	mrs	r3, PRIMASK
 8006df6:	61bb      	str	r3, [r7, #24]
  return(result);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <osThreadNew+0x34>
 8006dfe:	4b46      	ldr	r3, [pc, #280]	; (8006f18 <osThreadNew+0x144>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d100      	bne.n	8006e08 <osThreadNew+0x34>
 8006e06:	e081      	b.n	8006f0c <osThreadNew+0x138>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d100      	bne.n	8006e10 <osThreadNew+0x3c>
 8006e0e:	e07d      	b.n	8006f0c <osThreadNew+0x138>
    stack = configMINIMAL_STACK_SIZE;
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006e14:	2318      	movs	r3, #24
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	425b      	negs	r3, r3
 8006e20:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d044      	beq.n	8006eb2 <osThreadNew+0xde>
      if (attr->name != NULL) {
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <osThreadNew+0x62>
        name = attr->name;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <osThreadNew+0x70>
        prio = (UBaseType_t)attr->priority;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d007      	beq.n	8006e5a <osThreadNew+0x86>
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	2b38      	cmp	r3, #56	; 0x38
 8006e4e:	d804      	bhi.n	8006e5a <osThreadNew+0x86>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	4013      	ands	r3, r2
 8006e58:	d001      	beq.n	8006e5e <osThreadNew+0x8a>
        return (NULL);
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e057      	b.n	8006f0e <osThreadNew+0x13a>
      }

      if (attr->stack_size > 0U) {
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <osThreadNew+0x9a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	089b      	lsrs	r3, r3, #2
 8006e6c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00e      	beq.n	8006e94 <osThreadNew+0xc0>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	2bbb      	cmp	r3, #187	; 0xbb
 8006e7c:	d90a      	bls.n	8006e94 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d006      	beq.n	8006e94 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <osThreadNew+0xc0>
        mem = 1;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	623b      	str	r3, [r7, #32]
 8006e92:	e010      	b.n	8006eb6 <osThreadNew+0xe2>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10c      	bne.n	8006eb6 <osThreadNew+0xe2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d108      	bne.n	8006eb6 <osThreadNew+0xe2>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <osThreadNew+0xe2>
          mem = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	623b      	str	r3, [r7, #32]
 8006eb0:	e001      	b.n	8006eb6 <osThreadNew+0xe2>
        }
      }
    }
    else {
      mem = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d112      	bne.n	8006ee2 <osThreadNew+0x10e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ec4:	68bd      	ldr	r5, [r7, #8]
 8006ec6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8006ec8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	9302      	str	r3, [sp, #8]
 8006ece:	9201      	str	r2, [sp, #4]
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	002b      	movs	r3, r5
 8006ed6:	0022      	movs	r2, r4
 8006ed8:	f001 facb 	bl	8008472 <xTaskCreateStatic>
 8006edc:	0003      	movs	r3, r0
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	e014      	b.n	8006f0c <osThreadNew+0x138>
    }
    else {
      if (mem == 0) {
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d111      	bne.n	8006f0c <osThreadNew+0x138>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68bc      	ldr	r4, [r7, #8]
 8006eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	2314      	movs	r3, #20
 8006ef4:	18fb      	adds	r3, r7, r3
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	0023      	movs	r3, r4
 8006efe:	f001 fafc 	bl	80084fa <xTaskCreate>
 8006f02:	0003      	movs	r3, r0
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d001      	beq.n	8006f0c <osThreadNew+0x138>
          hTask = NULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f0c:	697b      	ldr	r3, [r7, #20]
}
 8006f0e:	0018      	movs	r0, r3
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b00c      	add	sp, #48	; 0x30
 8006f14:	bdb0      	pop	{r4, r5, r7, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	2000032c 	.word	0x2000032c

08006f1c <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f28:	f3ef 8305 	mrs	r3, IPSR
 8006f2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d109      	bne.n	8006f48 <osThreadSuspend+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f34:	f3ef 8310 	mrs	r3, PRIMASK
 8006f38:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d007      	beq.n	8006f50 <osThreadSuspend+0x34>
 8006f40:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <osThreadSuspend+0x58>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d103      	bne.n	8006f50 <osThreadSuspend+0x34>
    stat = osErrorISR;
 8006f48:	2306      	movs	r3, #6
 8006f4a:	425b      	negs	r3, r3
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	e00c      	b.n	8006f6a <osThreadSuspend+0x4e>
  }
  else if (hTask == NULL) {
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d103      	bne.n	8006f5e <osThreadSuspend+0x42>
    stat = osErrorParameter;
 8006f56:	2304      	movs	r3, #4
 8006f58:	425b      	negs	r3, r3
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	e005      	b.n	8006f6a <osThreadSuspend+0x4e>
  }
  else {
    stat = osOK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	0018      	movs	r0, r3
 8006f66:	f001 fc43 	bl	80087f0 <vTaskSuspend>
  }

  return (stat);
 8006f6a:	697b      	ldr	r3, [r7, #20]
}
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b006      	add	sp, #24
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	2000032c 	.word	0x2000032c

08006f78 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f84:	f3ef 8305 	mrs	r3, IPSR
 8006f88:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d109      	bne.n	8006fa4 <osThreadResume+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f90:	f3ef 8310 	mrs	r3, PRIMASK
 8006f94:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d007      	beq.n	8006fac <osThreadResume+0x34>
 8006f9c:	4b0c      	ldr	r3, [pc, #48]	; (8006fd0 <osThreadResume+0x58>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d103      	bne.n	8006fac <osThreadResume+0x34>
    stat = osErrorISR;
 8006fa4:	2306      	movs	r3, #6
 8006fa6:	425b      	negs	r3, r3
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e00c      	b.n	8006fc6 <osThreadResume+0x4e>
  }
  else if (hTask == NULL) {
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d103      	bne.n	8006fba <osThreadResume+0x42>
    stat = osErrorParameter;
 8006fb2:	2304      	movs	r3, #4
 8006fb4:	425b      	negs	r3, r3
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	e005      	b.n	8006fc6 <osThreadResume+0x4e>
  }
  else {
    stat = osOK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f001 fca1 	bl	8008908 <vTaskResume>
  }

  return (stat);
 8006fc6:	697b      	ldr	r3, [r7, #20]
}
 8006fc8:	0018      	movs	r0, r3
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	b006      	add	sp, #24
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	2000032c 	.word	0x2000032c

08006fd4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fdc:	f3ef 8305 	mrs	r3, IPSR
 8006fe0:	613b      	str	r3, [r7, #16]
  return(result);
 8006fe2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8006fec:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <osDelay+0x30>
 8006ff4:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <osDelay+0x4c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d103      	bne.n	8007004 <osDelay+0x30>
    stat = osErrorISR;
 8006ffc:	2306      	movs	r3, #6
 8006ffe:	425b      	negs	r3, r3
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	e008      	b.n	8007016 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8007004:	2300      	movs	r3, #0
 8007006:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <osDelay+0x42>
      vTaskDelay(ticks);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	0018      	movs	r0, r3
 8007012:	f001 fbc7 	bl	80087a4 <vTaskDelay>
    }
  }

  return (stat);
 8007016:	697b      	ldr	r3, [r7, #20]
}
 8007018:	0018      	movs	r0, r3
 800701a:	46bd      	mov	sp, r7
 800701c:	b006      	add	sp, #24
 800701e:	bd80      	pop	{r7, pc}
 8007020:	2000032c 	.word	0x2000032c

08007024 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b08c      	sub	sp, #48	; 0x30
 8007028:	af02      	add	r7, sp, #8
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007030:	2300      	movs	r3, #0
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007034:	f3ef 8305 	mrs	r3, IPSR
 8007038:	61bb      	str	r3, [r7, #24]
  return(result);
 800703a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800703c:	2b00      	cmp	r3, #0
 800703e:	d000      	beq.n	8007042 <osSemaphoreNew+0x1e>
 8007040:	e08a      	b.n	8007158 <osSemaphoreNew+0x134>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007042:	f3ef 8310 	mrs	r3, PRIMASK
 8007046:	617b      	str	r3, [r7, #20]
  return(result);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d004      	beq.n	8007058 <osSemaphoreNew+0x34>
 800704e:	4b45      	ldr	r3, [pc, #276]	; (8007164 <osSemaphoreNew+0x140>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b02      	cmp	r3, #2
 8007054:	d100      	bne.n	8007058 <osSemaphoreNew+0x34>
 8007056:	e07f      	b.n	8007158 <osSemaphoreNew+0x134>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d100      	bne.n	8007060 <osSemaphoreNew+0x3c>
 800705e:	e07b      	b.n	8007158 <osSemaphoreNew+0x134>
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	429a      	cmp	r2, r3
 8007066:	d900      	bls.n	800706a <osSemaphoreNew+0x46>
 8007068:	e076      	b.n	8007158 <osSemaphoreNew+0x134>
    mem = -1;
 800706a:	2301      	movs	r3, #1
 800706c:	425b      	negs	r3, r3
 800706e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d015      	beq.n	80070a2 <osSemaphoreNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d006      	beq.n	800708c <osSemaphoreNew+0x68>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	2b4f      	cmp	r3, #79	; 0x4f
 8007084:	d902      	bls.n	800708c <osSemaphoreNew+0x68>
        mem = 1;
 8007086:	2301      	movs	r3, #1
 8007088:	623b      	str	r3, [r7, #32]
 800708a:	e00c      	b.n	80070a6 <osSemaphoreNew+0x82>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d108      	bne.n	80070a6 <osSemaphoreNew+0x82>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <osSemaphoreNew+0x82>
          mem = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	623b      	str	r3, [r7, #32]
 80070a0:	e001      	b.n	80070a6 <osSemaphoreNew+0x82>
        }
      }
    }
    else {
      mem = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	3301      	adds	r3, #1
 80070aa:	d055      	beq.n	8007158 <osSemaphoreNew+0x134>
      if (max_count == 1U) {
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d12b      	bne.n	800710a <osSemaphoreNew+0xe6>
        if (mem == 1) {
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d10b      	bne.n	80070d0 <osSemaphoreNew+0xac>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2203      	movs	r2, #3
 80070be:	9200      	str	r2, [sp, #0]
 80070c0:	2200      	movs	r2, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	2001      	movs	r0, #1
 80070c6:	f000 fb80 	bl	80077ca <xQueueGenericCreateStatic>
 80070ca:	0003      	movs	r3, r0
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
 80070ce:	e006      	b.n	80070de <osSemaphoreNew+0xba>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80070d0:	2203      	movs	r2, #3
 80070d2:	2100      	movs	r1, #0
 80070d4:	2001      	movs	r0, #1
 80070d6:	f000 fbc4 	bl	8007862 <xQueueGenericCreate>
 80070da:	0003      	movs	r3, r0
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d027      	beq.n	8007134 <osSemaphoreNew+0x110>
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d024      	beq.n	8007134 <osSemaphoreNew+0x110>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80070ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070ec:	2300      	movs	r3, #0
 80070ee:	2200      	movs	r2, #0
 80070f0:	2100      	movs	r1, #0
 80070f2:	f000 fc5e 	bl	80079b2 <xQueueGenericSend>
 80070f6:	0003      	movs	r3, r0
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d01b      	beq.n	8007134 <osSemaphoreNew+0x110>
            vSemaphoreDelete (hSemaphore);
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	0018      	movs	r0, r3
 8007100:	f000 ffe3 	bl	80080ca <vQueueDelete>
            hSemaphore = NULL;
 8007104:	2300      	movs	r3, #0
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
 8007108:	e014      	b.n	8007134 <osSemaphoreNew+0x110>
          }
        }
      }
      else {
        if (mem == 1) {
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d109      	bne.n	8007124 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	0018      	movs	r0, r3
 800711a:	f000 fc01 	bl	8007920 <xQueueCreateCountingSemaphoreStatic>
 800711e:	0003      	movs	r3, r0
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
 8007122:	e007      	b.n	8007134 <osSemaphoreNew+0x110>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	0011      	movs	r1, r2
 800712a:	0018      	movs	r0, r3
 800712c:	f000 fc1e 	bl	800796c <xQueueCreateCountingSemaphore>
 8007130:	0003      	movs	r3, r0
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00e      	beq.n	8007158 <osSemaphoreNew+0x134>
        if (attr != NULL) {
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <osSemaphoreNew+0x124>
          name = attr->name;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	61fb      	str	r3, [r7, #28]
 8007146:	e001      	b.n	800714c <osSemaphoreNew+0x128>
        } else {
          name = NULL;
 8007148:	2300      	movs	r3, #0
 800714a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	0011      	movs	r1, r2
 8007152:	0018      	movs	r0, r3
 8007154:	f001 f908 	bl	8008368 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800715a:	0018      	movs	r0, r3
 800715c:	46bd      	mov	sp, r7
 800715e:	b00a      	add	sp, #40	; 0x28
 8007160:	bd80      	pop	{r7, pc}
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	2000032c 	.word	0x2000032c

08007168 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007176:	2300      	movs	r3, #0
 8007178:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d103      	bne.n	8007188 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007180:	2304      	movs	r3, #4
 8007182:	425b      	negs	r3, r3
 8007184:	61fb      	str	r3, [r7, #28]
 8007186:	e043      	b.n	8007210 <osSemaphoreAcquire+0xa8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007188:	f3ef 8305 	mrs	r3, IPSR
 800718c:	617b      	str	r3, [r7, #20]
  return(result);
 800718e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <osSemaphoreAcquire+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007194:	f3ef 8310 	mrs	r3, PRIMASK
 8007198:	613b      	str	r3, [r7, #16]
  return(result);
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d022      	beq.n	80071e6 <osSemaphoreAcquire+0x7e>
 80071a0:	4b1e      	ldr	r3, [pc, #120]	; (800721c <osSemaphoreAcquire+0xb4>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d11e      	bne.n	80071e6 <osSemaphoreAcquire+0x7e>
    if (timeout != 0U) {
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <osSemaphoreAcquire+0x4e>
      stat = osErrorParameter;
 80071ae:	2304      	movs	r3, #4
 80071b0:	425b      	negs	r3, r3
 80071b2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80071b4:	e02b      	b.n	800720e <osSemaphoreAcquire+0xa6>
    }
    else {
      yield = pdFALSE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80071ba:	230c      	movs	r3, #12
 80071bc:	18fa      	adds	r2, r7, r3
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2100      	movs	r1, #0
 80071c2:	0018      	movs	r0, r3
 80071c4:	f000 ff1e 	bl	8008004 <xQueueReceiveFromISR>
 80071c8:	0003      	movs	r3, r0
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d003      	beq.n	80071d6 <osSemaphoreAcquire+0x6e>
        stat = osErrorResource;
 80071ce:	2303      	movs	r3, #3
 80071d0:	425b      	negs	r3, r3
 80071d2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80071d4:	e01b      	b.n	800720e <osSemaphoreAcquire+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d018      	beq.n	800720e <osSemaphoreAcquire+0xa6>
 80071dc:	4b10      	ldr	r3, [pc, #64]	; (8007220 <osSemaphoreAcquire+0xb8>)
 80071de:	2280      	movs	r2, #128	; 0x80
 80071e0:	0552      	lsls	r2, r2, #21
 80071e2:	601a      	str	r2, [r3, #0]
    if (timeout != 0U) {
 80071e4:	e013      	b.n	800720e <osSemaphoreAcquire+0xa6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	0011      	movs	r1, r2
 80071ec:	0018      	movs	r0, r3
 80071ee:	f000 fe2f 	bl	8007e50 <xQueueSemaphoreTake>
 80071f2:	0003      	movs	r3, r0
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d00b      	beq.n	8007210 <osSemaphoreAcquire+0xa8>
      if (timeout != 0U) {
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <osSemaphoreAcquire+0x9e>
        stat = osErrorTimeout;
 80071fe:	2302      	movs	r3, #2
 8007200:	425b      	negs	r3, r3
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	e004      	b.n	8007210 <osSemaphoreAcquire+0xa8>
      } else {
        stat = osErrorResource;
 8007206:	2303      	movs	r3, #3
 8007208:	425b      	negs	r3, r3
 800720a:	61fb      	str	r3, [r7, #28]
 800720c:	e000      	b.n	8007210 <osSemaphoreAcquire+0xa8>
    if (timeout != 0U) {
 800720e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  return (stat);
 8007210:	69fb      	ldr	r3, [r7, #28]
}
 8007212:	0018      	movs	r0, r3
 8007214:	46bd      	mov	sp, r7
 8007216:	b008      	add	sp, #32
 8007218:	bd80      	pop	{r7, pc}
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	2000032c 	.word	0x2000032c
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007230:	2300      	movs	r3, #0
 8007232:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d103      	bne.n	8007242 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800723a:	2304      	movs	r3, #4
 800723c:	425b      	negs	r3, r3
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	e035      	b.n	80072ae <osSemaphoreRelease+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007242:	f3ef 8305 	mrs	r3, IPSR
 8007246:	617b      	str	r3, [r7, #20]
  return(result);
 8007248:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <osSemaphoreRelease+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800724e:	f3ef 8310 	mrs	r3, PRIMASK
 8007252:	613b      	str	r3, [r7, #16]
  return(result);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d01b      	beq.n	8007292 <osSemaphoreRelease+0x6e>
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <osSemaphoreRelease+0x94>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d117      	bne.n	8007292 <osSemaphoreRelease+0x6e>
    yield = pdFALSE;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007266:	230c      	movs	r3, #12
 8007268:	18fa      	adds	r2, r7, r3
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	0011      	movs	r1, r2
 800726e:	0018      	movs	r0, r3
 8007270:	f000 fcd4 	bl	8007c1c <xQueueGiveFromISR>
 8007274:	0003      	movs	r3, r0
 8007276:	2b01      	cmp	r3, #1
 8007278:	d003      	beq.n	8007282 <osSemaphoreRelease+0x5e>
      stat = osErrorResource;
 800727a:	2303      	movs	r3, #3
 800727c:	425b      	negs	r3, r3
 800727e:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007280:	e014      	b.n	80072ac <osSemaphoreRelease+0x88>
    } else {
      portYIELD_FROM_ISR (yield);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d011      	beq.n	80072ac <osSemaphoreRelease+0x88>
 8007288:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <osSemaphoreRelease+0x98>)
 800728a:	2280      	movs	r2, #128	; 0x80
 800728c:	0552      	lsls	r2, r2, #21
 800728e:	601a      	str	r2, [r3, #0]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007290:	e00c      	b.n	80072ac <osSemaphoreRelease+0x88>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007292:	69b8      	ldr	r0, [r7, #24]
 8007294:	2300      	movs	r3, #0
 8007296:	2200      	movs	r2, #0
 8007298:	2100      	movs	r1, #0
 800729a:	f000 fb8a 	bl	80079b2 <xQueueGenericSend>
 800729e:	0003      	movs	r3, r0
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d004      	beq.n	80072ae <osSemaphoreRelease+0x8a>
      stat = osErrorResource;
 80072a4:	2303      	movs	r3, #3
 80072a6:	425b      	negs	r3, r3
 80072a8:	61fb      	str	r3, [r7, #28]
 80072aa:	e000      	b.n	80072ae <osSemaphoreRelease+0x8a>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80072ac:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (stat);
 80072ae:	69fb      	ldr	r3, [r7, #28]
}
 80072b0:	0018      	movs	r0, r3
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b008      	add	sp, #32
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	2000032c 	.word	0x2000032c
 80072bc:	e000ed04 	.word	0xe000ed04

080072c0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80072c0:	b590      	push	{r4, r7, lr}
 80072c2:	b08d      	sub	sp, #52	; 0x34
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80072cc:	2300      	movs	r3, #0
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072d0:	f3ef 8305 	mrs	r3, IPSR
 80072d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80072d6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d000      	beq.n	80072de <osMessageQueueNew+0x1e>
 80072dc:	e06f      	b.n	80073be <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072de:	f3ef 8310 	mrs	r3, PRIMASK
 80072e2:	617b      	str	r3, [r7, #20]
  return(result);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <osMessageQueueNew+0x34>
 80072ea:	4b37      	ldr	r3, [pc, #220]	; (80073c8 <osMessageQueueNew+0x108>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d100      	bne.n	80072f4 <osMessageQueueNew+0x34>
 80072f2:	e064      	b.n	80073be <osMessageQueueNew+0xfe>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d100      	bne.n	80072fc <osMessageQueueNew+0x3c>
 80072fa:	e060      	b.n	80073be <osMessageQueueNew+0xfe>
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d05d      	beq.n	80073be <osMessageQueueNew+0xfe>
    mem = -1;
 8007302:	2301      	movs	r3, #1
 8007304:	425b      	negs	r3, r3
 8007306:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d028      	beq.n	8007360 <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d011      	beq.n	800733a <osMessageQueueNew+0x7a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	2b4f      	cmp	r3, #79	; 0x4f
 800731c:	d90d      	bls.n	800733a <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	695a      	ldr	r2, [r3, #20]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	434b      	muls	r3, r1
 8007330:	429a      	cmp	r2, r3
 8007332:	d302      	bcc.n	800733a <osMessageQueueNew+0x7a>
        mem = 1;
 8007334:	2301      	movs	r3, #1
 8007336:	623b      	str	r3, [r7, #32]
 8007338:	e014      	b.n	8007364 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d110      	bne.n	8007364 <osMessageQueueNew+0xa4>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10c      	bne.n	8007364 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800734e:	2b00      	cmp	r3, #0
 8007350:	d108      	bne.n	8007364 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d104      	bne.n	8007364 <osMessageQueueNew+0xa4>
          mem = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	623b      	str	r3, [r7, #32]
 800735e:	e001      	b.n	8007364 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d10c      	bne.n	8007384 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691a      	ldr	r2, [r3, #16]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	68b9      	ldr	r1, [r7, #8]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	2400      	movs	r4, #0
 8007378:	9400      	str	r4, [sp, #0]
 800737a:	f000 fa26 	bl	80077ca <xQueueGenericCreateStatic>
 800737e:	0003      	movs	r3, r0
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
 8007382:	e00a      	b.n	800739a <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d107      	bne.n	800739a <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	0018      	movs	r0, r3
 8007392:	f000 fa66 	bl	8007862 <xQueueGenericCreate>
 8007396:	0003      	movs	r3, r0
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00e      	beq.n	80073be <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <osMessageQueueNew+0xee>
        name = attr->name;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	61fb      	str	r3, [r7, #28]
 80073ac:	e001      	b.n	80073b2 <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	0011      	movs	r1, r2
 80073b8:	0018      	movs	r0, r3
 80073ba:	f000 ffd5 	bl	8008368 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073c0:	0018      	movs	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b00b      	add	sp, #44	; 0x2c
 80073c6:	bd90      	pop	{r4, r7, pc}
 80073c8:	2000032c 	.word	0x2000032c

080073cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08a      	sub	sp, #40	; 0x28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	1dfb      	adds	r3, r7, #7
 80073da:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073e4:	f3ef 8305 	mrs	r3, IPSR
 80073e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80073ea:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <osMessageQueuePut+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f0:	f3ef 8310 	mrs	r3, PRIMASK
 80073f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d028      	beq.n	800744e <osMessageQueuePut+0x82>
 80073fc:	4b26      	ldr	r3, [pc, #152]	; (8007498 <osMessageQueuePut+0xcc>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d124      	bne.n	800744e <osMessageQueuePut+0x82>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <osMessageQueuePut+0x4a>
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <osMessageQueuePut+0x4a>
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <osMessageQueuePut+0x52>
      stat = osErrorParameter;
 8007416:	2304      	movs	r3, #4
 8007418:	425b      	negs	r3, r3
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800741c:	e035      	b.n	800748a <osMessageQueuePut+0xbe>
    }
    else {
      yield = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007422:	2314      	movs	r3, #20
 8007424:	18fa      	adds	r2, r7, r3
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	6a38      	ldr	r0, [r7, #32]
 800742a:	2300      	movs	r3, #0
 800742c:	f000 fb85 	bl	8007b3a <xQueueGenericSendFromISR>
 8007430:	0003      	movs	r3, r0
 8007432:	2b01      	cmp	r3, #1
 8007434:	d003      	beq.n	800743e <osMessageQueuePut+0x72>
        stat = osErrorResource;
 8007436:	2303      	movs	r3, #3
 8007438:	425b      	negs	r3, r3
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800743c:	e025      	b.n	800748a <osMessageQueuePut+0xbe>
      } else {
        portYIELD_FROM_ISR (yield);
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d022      	beq.n	800748a <osMessageQueuePut+0xbe>
 8007444:	4b15      	ldr	r3, [pc, #84]	; (800749c <osMessageQueuePut+0xd0>)
 8007446:	2280      	movs	r2, #128	; 0x80
 8007448:	0552      	lsls	r2, r2, #21
 800744a:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800744c:	e01d      	b.n	800748a <osMessageQueuePut+0xbe>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <osMessageQueuePut+0x8e>
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d103      	bne.n	8007462 <osMessageQueuePut+0x96>
      stat = osErrorParameter;
 800745a:	2304      	movs	r3, #4
 800745c:	425b      	negs	r3, r3
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
 8007460:	e014      	b.n	800748c <osMessageQueuePut+0xc0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	6a38      	ldr	r0, [r7, #32]
 8007468:	2300      	movs	r3, #0
 800746a:	f000 faa2 	bl	80079b2 <xQueueGenericSend>
 800746e:	0003      	movs	r3, r0
 8007470:	2b01      	cmp	r3, #1
 8007472:	d00b      	beq.n	800748c <osMessageQueuePut+0xc0>
        if (timeout != 0U) {
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <osMessageQueuePut+0xb6>
          stat = osErrorTimeout;
 800747a:	2302      	movs	r3, #2
 800747c:	425b      	negs	r3, r3
 800747e:	627b      	str	r3, [r7, #36]	; 0x24
 8007480:	e004      	b.n	800748c <osMessageQueuePut+0xc0>
        } else {
          stat = osErrorResource;
 8007482:	2303      	movs	r3, #3
 8007484:	425b      	negs	r3, r3
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
 8007488:	e000      	b.n	800748c <osMessageQueuePut+0xc0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800748a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800748e:	0018      	movs	r0, r3
 8007490:	46bd      	mov	sp, r7
 8007492:	b00a      	add	sp, #40	; 0x28
 8007494:	bd80      	pop	{r7, pc}
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	2000032c 	.word	0x2000032c
 800749c:	e000ed04 	.word	0xe000ed04

080074a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08a      	sub	sp, #40	; 0x28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b6:	f3ef 8305 	mrs	r3, IPSR
 80074ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80074bc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <osMessageQueueGet+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c2:	f3ef 8310 	mrs	r3, PRIMASK
 80074c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d028      	beq.n	8007520 <osMessageQueueGet+0x80>
 80074ce:	4b26      	ldr	r3, [pc, #152]	; (8007568 <osMessageQueueGet+0xc8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d124      	bne.n	8007520 <osMessageQueueGet+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <osMessageQueueGet+0x48>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <osMessageQueueGet+0x48>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <osMessageQueueGet+0x50>
      stat = osErrorParameter;
 80074e8:	2304      	movs	r3, #4
 80074ea:	425b      	negs	r3, r3
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80074ee:	e035      	b.n	800755c <osMessageQueueGet+0xbc>
    }
    else {
      yield = pdFALSE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80074f4:	2314      	movs	r3, #20
 80074f6:	18fa      	adds	r2, r7, r3
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	0018      	movs	r0, r3
 80074fe:	f000 fd81 	bl	8008004 <xQueueReceiveFromISR>
 8007502:	0003      	movs	r3, r0
 8007504:	2b01      	cmp	r3, #1
 8007506:	d003      	beq.n	8007510 <osMessageQueueGet+0x70>
        stat = osErrorResource;
 8007508:	2303      	movs	r3, #3
 800750a:	425b      	negs	r3, r3
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800750e:	e025      	b.n	800755c <osMessageQueueGet+0xbc>
      } else {
        portYIELD_FROM_ISR (yield);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d022      	beq.n	800755c <osMessageQueueGet+0xbc>
 8007516:	4b15      	ldr	r3, [pc, #84]	; (800756c <osMessageQueueGet+0xcc>)
 8007518:	2280      	movs	r2, #128	; 0x80
 800751a:	0552      	lsls	r2, r2, #21
 800751c:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800751e:	e01d      	b.n	800755c <osMessageQueueGet+0xbc>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <osMessageQueueGet+0x8c>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d103      	bne.n	8007534 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
 800752c:	2304      	movs	r3, #4
 800752e:	425b      	negs	r3, r3
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
 8007532:	e014      	b.n	800755e <osMessageQueueGet+0xbe>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	0018      	movs	r0, r3
 800753c:	f000 fbd3 	bl	8007ce6 <xQueueReceive>
 8007540:	0003      	movs	r3, r0
 8007542:	2b01      	cmp	r3, #1
 8007544:	d00b      	beq.n	800755e <osMessageQueueGet+0xbe>
        if (timeout != 0U) {
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <osMessageQueueGet+0xb4>
          stat = osErrorTimeout;
 800754c:	2302      	movs	r3, #2
 800754e:	425b      	negs	r3, r3
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
 8007552:	e004      	b.n	800755e <osMessageQueueGet+0xbe>
        } else {
          stat = osErrorResource;
 8007554:	2303      	movs	r3, #3
 8007556:	425b      	negs	r3, r3
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
 800755a:	e000      	b.n	800755e <osMessageQueueGet+0xbe>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800755c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007560:	0018      	movs	r0, r3
 8007562:	46bd      	mov	sp, r7
 8007564:	b00a      	add	sp, #40	; 0x28
 8007566:	bd80      	pop	{r7, pc}
 8007568:	2000032c 	.word	0x2000032c
 800756c:	e000ed04 	.word	0xe000ed04

08007570 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4a06      	ldr	r2, [pc, #24]	; (8007598 <vApplicationGetIdleTaskMemory+0x28>)
 8007580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	4a05      	ldr	r2, [pc, #20]	; (800759c <vApplicationGetIdleTaskMemory+0x2c>)
 8007586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2280      	movs	r2, #128	; 0x80
 800758c:	601a      	str	r2, [r3, #0]
}
 800758e:	46c0      	nop			; (mov r8, r8)
 8007590:	46bd      	mov	sp, r7
 8007592:	b004      	add	sp, #16
 8007594:	bd80      	pop	{r7, pc}
 8007596:	46c0      	nop			; (mov r8, r8)
 8007598:	20000330 	.word	0x20000330
 800759c:	200003ec 	.word	0x200003ec

080075a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4a06      	ldr	r2, [pc, #24]	; (80075c8 <vApplicationGetTimerTaskMemory+0x28>)
 80075b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	4a05      	ldr	r2, [pc, #20]	; (80075cc <vApplicationGetTimerTaskMemory+0x2c>)
 80075b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2280      	movs	r2, #128	; 0x80
 80075bc:	0052      	lsls	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]
}
 80075c0:	46c0      	nop			; (mov r8, r8)
 80075c2:	46bd      	mov	sp, r7
 80075c4:	b004      	add	sp, #16
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	200005ec 	.word	0x200005ec
 80075cc:	200006a8 	.word	0x200006a8

080075d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3308      	adds	r3, #8
 80075dc:	001a      	movs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	4252      	negs	r2, r2
 80075e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3308      	adds	r3, #8
 80075ee:	001a      	movs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3308      	adds	r3, #8
 80075f8:	001a      	movs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007604:	46c0      	nop			; (mov r8, r8)
 8007606:	46bd      	mov	sp, r7
 8007608:	b002      	add	sp, #8
 800760a:	bd80      	pop	{r7, pc}

0800760c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	46bd      	mov	sp, r7
 800761e:	b002      	add	sp, #8
 8007620:	bd80      	pop	{r7, pc}

08007622 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	601a      	str	r2, [r3, #0]
}
 800765e:	46c0      	nop			; (mov r8, r8)
 8007660:	46bd      	mov	sp, r7
 8007662:	b004      	add	sp, #16
 8007664:	bd80      	pop	{r7, pc}

08007666 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	3301      	adds	r3, #1
 800767a:	d103      	bne.n	8007684 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	e00c      	b.n	800769e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3308      	adds	r3, #8
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	e002      	b.n	8007692 <vListInsert+0x2c>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	429a      	cmp	r2, r3
 800769c:	d2f6      	bcs.n	800768c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	601a      	str	r2, [r3, #0]
}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	46bd      	mov	sp, r7
 80076ce:	b004      	add	sp, #16
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6892      	ldr	r2, [r2, #8]
 80076e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6852      	ldr	r2, [r2, #4]
 80076f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d103      	bne.n	8007706 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	1e5a      	subs	r2, r3, #1
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
}
 800771a:	0018      	movs	r0, r3
 800771c:	46bd      	mov	sp, r7
 800771e:	b004      	add	sp, #16
 8007720:	bd80      	pop	{r7, pc}

08007722 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <xQueueGenericReset+0x18>
 8007736:	b672      	cpsid	i
 8007738:	e7fe      	b.n	8007738 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800773a:	f002 fa81 	bl	8009c40 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	434b      	muls	r3, r1
 800774c:	18d2      	adds	r2, r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007768:	1e59      	subs	r1, r3, #1
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	434b      	muls	r3, r1
 8007770:	18d2      	adds	r2, r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2244      	movs	r2, #68	; 0x44
 800777a:	21ff      	movs	r1, #255	; 0xff
 800777c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2245      	movs	r2, #69	; 0x45
 8007782:	21ff      	movs	r1, #255	; 0xff
 8007784:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10d      	bne.n	80077a8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d013      	beq.n	80077bc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3310      	adds	r3, #16
 8007798:	0018      	movs	r0, r3
 800779a:	f001 fb55 	bl	8008e48 <xTaskRemoveFromEventList>
 800779e:	1e03      	subs	r3, r0, #0
 80077a0:	d00c      	beq.n	80077bc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80077a2:	f002 fa3d 	bl	8009c20 <vPortYield>
 80077a6:	e009      	b.n	80077bc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3310      	adds	r3, #16
 80077ac:	0018      	movs	r0, r3
 80077ae:	f7ff ff0f 	bl	80075d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3324      	adds	r3, #36	; 0x24
 80077b6:	0018      	movs	r0, r3
 80077b8:	f7ff ff0a 	bl	80075d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077bc:	f002 fa52 	bl	8009c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077c0:	2301      	movs	r3, #1
}
 80077c2:	0018      	movs	r0, r3
 80077c4:	46bd      	mov	sp, r7
 80077c6:	b004      	add	sp, #16
 80077c8:	bd80      	pop	{r7, pc}

080077ca <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077ca:	b590      	push	{r4, r7, lr}
 80077cc:	b089      	sub	sp, #36	; 0x24
 80077ce:	af02      	add	r7, sp, #8
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <xQueueGenericCreateStatic+0x18>
 80077de:	b672      	cpsid	i
 80077e0:	e7fe      	b.n	80077e0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <xQueueGenericCreateStatic+0x22>
 80077e8:	b672      	cpsid	i
 80077ea:	e7fe      	b.n	80077ea <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <xQueueGenericCreateStatic+0x2e>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <xQueueGenericCreateStatic+0x32>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <xQueueGenericCreateStatic+0x34>
 80077fc:	2300      	movs	r3, #0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <xQueueGenericCreateStatic+0x3c>
 8007802:	b672      	cpsid	i
 8007804:	e7fe      	b.n	8007804 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <xQueueGenericCreateStatic+0x48>
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <xQueueGenericCreateStatic+0x4c>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <xQueueGenericCreateStatic+0x4e>
 8007816:	2300      	movs	r3, #0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <xQueueGenericCreateStatic+0x56>
 800781c:	b672      	cpsid	i
 800781e:	e7fe      	b.n	800781e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007820:	2350      	movs	r3, #80	; 0x50
 8007822:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b50      	cmp	r3, #80	; 0x50
 8007828:	d001      	beq.n	800782e <xQueueGenericCreateStatic+0x64>
 800782a:	b672      	cpsid	i
 800782c:	e7fe      	b.n	800782c <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800782e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00e      	beq.n	8007858 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2246      	movs	r2, #70	; 0x46
 800783e:	2101      	movs	r1, #1
 8007840:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007842:	2328      	movs	r3, #40	; 0x28
 8007844:	18fb      	adds	r3, r7, r3
 8007846:	781c      	ldrb	r4, [r3, #0]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	0023      	movs	r3, r4
 8007854:	f000 f83d 	bl	80078d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007858:	697b      	ldr	r3, [r7, #20]
	}
 800785a:	0018      	movs	r0, r3
 800785c:	46bd      	mov	sp, r7
 800785e:	b007      	add	sp, #28
 8007860:	bd90      	pop	{r4, r7, pc}

08007862 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007862:	b590      	push	{r4, r7, lr}
 8007864:	b08b      	sub	sp, #44	; 0x2c
 8007866:	af02      	add	r7, sp, #8
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	1dfb      	adds	r3, r7, #7
 800786e:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <xQueueGenericCreate+0x18>
 8007876:	b672      	cpsid	i
 8007878:	e7fe      	b.n	8007878 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007880:	2300      	movs	r3, #0
 8007882:	61fb      	str	r3, [r7, #28]
 8007884:	e003      	b.n	800788e <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	4353      	muls	r3, r2
 800788c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	3350      	adds	r3, #80	; 0x50
 8007892:	0018      	movs	r0, r3
 8007894:	f002 fa6c 	bl	8009d70 <pvPortMalloc>
 8007898:	0003      	movs	r3, r0
 800789a:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d012      	beq.n	80078c8 <xQueueGenericCreate+0x66>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	3350      	adds	r3, #80	; 0x50
 80078aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	2246      	movs	r2, #70	; 0x46
 80078b0:	2100      	movs	r1, #0
 80078b2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078b4:	1dfb      	adds	r3, r7, #7
 80078b6:	781c      	ldrb	r4, [r3, #0]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	68b9      	ldr	r1, [r7, #8]
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	0023      	movs	r3, r4
 80078c4:	f000 f805 	bl	80078d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078c8:	69bb      	ldr	r3, [r7, #24]
	}
 80078ca:	0018      	movs	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b009      	add	sp, #36	; 0x24
 80078d0:	bd90      	pop	{r4, r7, pc}

080078d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	001a      	movs	r2, r3
 80078e0:	1cfb      	adds	r3, r7, #3
 80078e2:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e002      	b.n	80078f8 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	2101      	movs	r1, #1
 8007908:	0018      	movs	r0, r3
 800790a:	f7ff ff0a 	bl	8007722 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	1cfa      	adds	r2, r7, #3
 8007912:	214c      	movs	r1, #76	; 0x4c
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007918:	46c0      	nop			; (mov r8, r8)
 800791a:	46bd      	mov	sp, r7
 800791c:	b004      	add	sp, #16
 800791e:	bd80      	pop	{r7, pc}

08007920 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af02      	add	r7, sp, #8
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <xQueueCreateCountingSemaphoreStatic+0x16>
 8007932:	b672      	cpsid	i
 8007934:	e7fe      	b.n	8007934 <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	429a      	cmp	r2, r3
 800793c:	d901      	bls.n	8007942 <xQueueCreateCountingSemaphoreStatic+0x22>
 800793e:	b672      	cpsid	i
 8007940:	e7fe      	b.n	8007940 <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	2202      	movs	r2, #2
 8007948:	9200      	str	r2, [sp, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	2100      	movs	r1, #0
 800794e:	f7ff ff3c 	bl	80077ca <xQueueGenericCreateStatic>
 8007952:	0003      	movs	r3, r0
 8007954:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <xQueueCreateCountingSemaphoreStatic+0x42>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007962:	697b      	ldr	r3, [r7, #20]
	}
 8007964:	0018      	movs	r0, r3
 8007966:	46bd      	mov	sp, r7
 8007968:	b006      	add	sp, #24
 800796a:	bd80      	pop	{r7, pc}

0800796c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <xQueueCreateCountingSemaphore+0x14>
 800797c:	b672      	cpsid	i
 800797e:	e7fe      	b.n	800797e <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	429a      	cmp	r2, r3
 8007986:	d901      	bls.n	800798c <xQueueCreateCountingSemaphore+0x20>
 8007988:	b672      	cpsid	i
 800798a:	e7fe      	b.n	800798a <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	2100      	movs	r1, #0
 8007992:	0018      	movs	r0, r3
 8007994:	f7ff ff65 	bl	8007862 <xQueueGenericCreate>
 8007998:	0003      	movs	r3, r0
 800799a:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80079a8:	68fb      	ldr	r3, [r7, #12]
	}
 80079aa:	0018      	movs	r0, r3
 80079ac:	46bd      	mov	sp, r7
 80079ae:	b004      	add	sp, #16
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b08a      	sub	sp, #40	; 0x28
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	607a      	str	r2, [r7, #4]
 80079be:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079c0:	2300      	movs	r3, #0
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <xQueueGenericSend+0x20>
 80079ce:	b672      	cpsid	i
 80079d0:	e7fe      	b.n	80079d0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d103      	bne.n	80079e0 <xQueueGenericSend+0x2e>
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <xQueueGenericSend+0x32>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e000      	b.n	80079e6 <xQueueGenericSend+0x34>
 80079e4:	2300      	movs	r3, #0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <xQueueGenericSend+0x3c>
 80079ea:	b672      	cpsid	i
 80079ec:	e7fe      	b.n	80079ec <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d103      	bne.n	80079fc <xQueueGenericSend+0x4a>
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <xQueueGenericSend+0x4e>
 80079fc:	2301      	movs	r3, #1
 80079fe:	e000      	b.n	8007a02 <xQueueGenericSend+0x50>
 8007a00:	2300      	movs	r3, #0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <xQueueGenericSend+0x58>
 8007a06:	b672      	cpsid	i
 8007a08:	e7fe      	b.n	8007a08 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a0a:	f001 fbb5 	bl	8009178 <xTaskGetSchedulerState>
 8007a0e:	1e03      	subs	r3, r0, #0
 8007a10:	d102      	bne.n	8007a18 <xQueueGenericSend+0x66>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <xQueueGenericSend+0x6a>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <xQueueGenericSend+0x6c>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <xQueueGenericSend+0x74>
 8007a22:	b672      	cpsid	i
 8007a24:	e7fe      	b.n	8007a24 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a26:	f002 f90b 	bl	8009c40 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d302      	bcc.n	8007a3c <xQueueGenericSend+0x8a>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d11e      	bne.n	8007a7a <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	68b9      	ldr	r1, [r7, #8]
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	0018      	movs	r0, r3
 8007a44:	f000 fb73 	bl	800812e <prvCopyDataToQueue>
 8007a48:	0003      	movs	r3, r0
 8007a4a:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d009      	beq.n	8007a68 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	3324      	adds	r3, #36	; 0x24
 8007a58:	0018      	movs	r0, r3
 8007a5a:	f001 f9f5 	bl	8008e48 <xTaskRemoveFromEventList>
 8007a5e:	1e03      	subs	r3, r0, #0
 8007a60:	d007      	beq.n	8007a72 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a62:	f002 f8dd 	bl	8009c20 <vPortYield>
 8007a66:	e004      	b.n	8007a72 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a6e:	f002 f8d7 	bl	8009c20 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a72:	f002 f8f7 	bl	8009c64 <vPortExitCritical>
				return pdPASS;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e05b      	b.n	8007b32 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d103      	bne.n	8007a88 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a80:	f002 f8f0 	bl	8009c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e054      	b.n	8007b32 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a8e:	2314      	movs	r3, #20
 8007a90:	18fb      	adds	r3, r7, r3
 8007a92:	0018      	movs	r0, r3
 8007a94:	f001 fa34 	bl	8008f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a9c:	f002 f8e2 	bl	8009c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007aa0:	f000 ffde 	bl	8008a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007aa4:	f002 f8cc 	bl	8009c40 <vPortEnterCritical>
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	2244      	movs	r2, #68	; 0x44
 8007aac:	5c9b      	ldrb	r3, [r3, r2]
 8007aae:	b25b      	sxtb	r3, r3
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	d103      	bne.n	8007abc <xQueueGenericSend+0x10a>
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	2244      	movs	r2, #68	; 0x44
 8007ab8:	2100      	movs	r1, #0
 8007aba:	5499      	strb	r1, [r3, r2]
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	2245      	movs	r2, #69	; 0x45
 8007ac0:	5c9b      	ldrb	r3, [r3, r2]
 8007ac2:	b25b      	sxtb	r3, r3
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	d103      	bne.n	8007ad0 <xQueueGenericSend+0x11e>
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	2245      	movs	r2, #69	; 0x45
 8007acc:	2100      	movs	r1, #0
 8007ace:	5499      	strb	r1, [r3, r2]
 8007ad0:	f002 f8c8 	bl	8009c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ad4:	1d3a      	adds	r2, r7, #4
 8007ad6:	2314      	movs	r3, #20
 8007ad8:	18fb      	adds	r3, r7, r3
 8007ada:	0011      	movs	r1, r2
 8007adc:	0018      	movs	r0, r3
 8007ade:	f001 fa23 	bl	8008f28 <xTaskCheckForTimeOut>
 8007ae2:	1e03      	subs	r3, r0, #0
 8007ae4:	d11e      	bne.n	8007b24 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	0018      	movs	r0, r3
 8007aea:	f000 fc25 	bl	8008338 <prvIsQueueFull>
 8007aee:	1e03      	subs	r3, r0, #0
 8007af0:	d011      	beq.n	8007b16 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	3310      	adds	r3, #16
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	0011      	movs	r1, r2
 8007afa:	0018      	movs	r0, r3
 8007afc:	f001 f960 	bl	8008dc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	0018      	movs	r0, r3
 8007b04:	f000 fba4 	bl	8008250 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b08:	f000 ffb6 	bl	8008a78 <xTaskResumeAll>
 8007b0c:	1e03      	subs	r3, r0, #0
 8007b0e:	d18a      	bne.n	8007a26 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8007b10:	f002 f886 	bl	8009c20 <vPortYield>
 8007b14:	e787      	b.n	8007a26 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	0018      	movs	r0, r3
 8007b1a:	f000 fb99 	bl	8008250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b1e:	f000 ffab 	bl	8008a78 <xTaskResumeAll>
 8007b22:	e780      	b.n	8007a26 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	0018      	movs	r0, r3
 8007b28:	f000 fb92 	bl	8008250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b2c:	f000 ffa4 	bl	8008a78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b30:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b32:	0018      	movs	r0, r3
 8007b34:	46bd      	mov	sp, r7
 8007b36:	b00a      	add	sp, #40	; 0x28
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b3a:	b590      	push	{r4, r7, lr}
 8007b3c:	b089      	sub	sp, #36	; 0x24
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	60b9      	str	r1, [r7, #8]
 8007b44:	607a      	str	r2, [r7, #4]
 8007b46:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <xQueueGenericSendFromISR+0x1c>
 8007b52:	b672      	cpsid	i
 8007b54:	e7fe      	b.n	8007b54 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <xQueueGenericSendFromISR+0x2a>
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <xQueueGenericSendFromISR+0x2e>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <xQueueGenericSendFromISR+0x30>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <xQueueGenericSendFromISR+0x38>
 8007b6e:	b672      	cpsid	i
 8007b70:	e7fe      	b.n	8007b70 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d103      	bne.n	8007b80 <xQueueGenericSendFromISR+0x46>
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <xQueueGenericSendFromISR+0x4a>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e000      	b.n	8007b86 <xQueueGenericSendFromISR+0x4c>
 8007b84:	2300      	movs	r3, #0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <xQueueGenericSendFromISR+0x54>
 8007b8a:	b672      	cpsid	i
 8007b8c:	e7fe      	b.n	8007b8c <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b8e:	f002 f881 	bl	8009c94 <ulSetInterruptMaskFromISR>
 8007b92:	0003      	movs	r3, r0
 8007b94:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d302      	bcc.n	8007ba8 <xQueueGenericSendFromISR+0x6e>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d12e      	bne.n	8007c06 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ba8:	2413      	movs	r4, #19
 8007baa:	193b      	adds	r3, r7, r4
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	2145      	movs	r1, #69	; 0x45
 8007bb0:	5c52      	ldrb	r2, [r2, r1]
 8007bb2:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f000 fab7 	bl	800812e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bc0:	193b      	adds	r3, r7, r4
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	b25b      	sxtb	r3, r3
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	d111      	bne.n	8007bee <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d016      	beq.n	8007c00 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	3324      	adds	r3, #36	; 0x24
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f001 f936 	bl	8008e48 <xTaskRemoveFromEventList>
 8007bdc:	1e03      	subs	r3, r0, #0
 8007bde:	d00f      	beq.n	8007c00 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00c      	beq.n	8007c00 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	e008      	b.n	8007c00 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bee:	2313      	movs	r3, #19
 8007bf0:	18fb      	adds	r3, r7, r3
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	b259      	sxtb	r1, r3
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2245      	movs	r2, #69	; 0x45
 8007bfe:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8007c00:	2301      	movs	r3, #1
 8007c02:	61fb      	str	r3, [r7, #28]
		{
 8007c04:	e001      	b.n	8007c0a <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f002 f847 	bl	8009ca0 <vClearInterruptMaskFromISR>

	return xReturn;
 8007c12:	69fb      	ldr	r3, [r7, #28]
}
 8007c14:	0018      	movs	r0, r3
 8007c16:	46bd      	mov	sp, r7
 8007c18:	b009      	add	sp, #36	; 0x24
 8007c1a:	bd90      	pop	{r4, r7, pc}

08007c1c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <xQueueGiveFromISR+0x18>
 8007c30:	b672      	cpsid	i
 8007c32:	e7fe      	b.n	8007c32 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <xQueueGiveFromISR+0x24>
 8007c3c:	b672      	cpsid	i
 8007c3e:	e7fe      	b.n	8007c3e <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d103      	bne.n	8007c50 <xQueueGiveFromISR+0x34>
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <xQueueGiveFromISR+0x38>
 8007c50:	2301      	movs	r3, #1
 8007c52:	e000      	b.n	8007c56 <xQueueGiveFromISR+0x3a>
 8007c54:	2300      	movs	r3, #0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <xQueueGiveFromISR+0x42>
 8007c5a:	b672      	cpsid	i
 8007c5c:	e7fe      	b.n	8007c5c <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c5e:	f002 f819 	bl	8009c94 <ulSetInterruptMaskFromISR>
 8007c62:	0003      	movs	r3, r0
 8007c64:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6a:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d22c      	bcs.n	8007cd0 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c76:	200f      	movs	r0, #15
 8007c78:	183b      	adds	r3, r7, r0
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	2145      	movs	r1, #69	; 0x45
 8007c7e:	5c52      	ldrb	r2, [r2, r1]
 8007c80:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c8a:	183b      	adds	r3, r7, r0
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	b25b      	sxtb	r3, r3
 8007c90:	3301      	adds	r3, #1
 8007c92:	d111      	bne.n	8007cb8 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d016      	beq.n	8007cca <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	3324      	adds	r3, #36	; 0x24
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f001 f8d1 	bl	8008e48 <xTaskRemoveFromEventList>
 8007ca6:	1e03      	subs	r3, r0, #0
 8007ca8:	d00f      	beq.n	8007cca <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00c      	beq.n	8007cca <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e008      	b.n	8007cca <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cb8:	230f      	movs	r3, #15
 8007cba:	18fb      	adds	r3, r7, r3
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	b259      	sxtb	r1, r3
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	2245      	movs	r2, #69	; 0x45
 8007cc8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	61fb      	str	r3, [r7, #28]
 8007cce:	e001      	b.n	8007cd4 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f001 ffe2 	bl	8009ca0 <vClearInterruptMaskFromISR>

	return xReturn;
 8007cdc:	69fb      	ldr	r3, [r7, #28]
}
 8007cde:	0018      	movs	r0, r3
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	b008      	add	sp, #32
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b08a      	sub	sp, #40	; 0x28
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <xQueueReceive+0x1e>
 8007d00:	b672      	cpsid	i
 8007d02:	e7fe      	b.n	8007d02 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d103      	bne.n	8007d12 <xQueueReceive+0x2c>
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <xQueueReceive+0x30>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e000      	b.n	8007d18 <xQueueReceive+0x32>
 8007d16:	2300      	movs	r3, #0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <xQueueReceive+0x3a>
 8007d1c:	b672      	cpsid	i
 8007d1e:	e7fe      	b.n	8007d1e <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d20:	f001 fa2a 	bl	8009178 <xTaskGetSchedulerState>
 8007d24:	1e03      	subs	r3, r0, #0
 8007d26:	d102      	bne.n	8007d2e <xQueueReceive+0x48>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <xQueueReceive+0x4c>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e000      	b.n	8007d34 <xQueueReceive+0x4e>
 8007d32:	2300      	movs	r3, #0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <xQueueReceive+0x56>
 8007d38:	b672      	cpsid	i
 8007d3a:	e7fe      	b.n	8007d3a <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d3c:	f001 ff80 	bl	8009c40 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01a      	beq.n	8007d82 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	0011      	movs	r1, r2
 8007d52:	0018      	movs	r0, r3
 8007d54:	f000 fa56 	bl	8008204 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	1e5a      	subs	r2, r3, #1
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d008      	beq.n	8007d7a <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	3310      	adds	r3, #16
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	f001 f86b 	bl	8008e48 <xTaskRemoveFromEventList>
 8007d72:	1e03      	subs	r3, r0, #0
 8007d74:	d001      	beq.n	8007d7a <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d76:	f001 ff53 	bl	8009c20 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d7a:	f001 ff73 	bl	8009c64 <vPortExitCritical>
				return pdPASS;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e062      	b.n	8007e48 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d88:	f001 ff6c 	bl	8009c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e05b      	b.n	8007e48 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d106      	bne.n	8007da4 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d96:	2314      	movs	r3, #20
 8007d98:	18fb      	adds	r3, r7, r3
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f001 f8b0 	bl	8008f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007da0:	2301      	movs	r3, #1
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007da4:	f001 ff5e 	bl	8009c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007da8:	f000 fe5a 	bl	8008a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dac:	f001 ff48 	bl	8009c40 <vPortEnterCritical>
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	2244      	movs	r2, #68	; 0x44
 8007db4:	5c9b      	ldrb	r3, [r3, r2]
 8007db6:	b25b      	sxtb	r3, r3
 8007db8:	3301      	adds	r3, #1
 8007dba:	d103      	bne.n	8007dc4 <xQueueReceive+0xde>
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	2244      	movs	r2, #68	; 0x44
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	5499      	strb	r1, [r3, r2]
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	2245      	movs	r2, #69	; 0x45
 8007dc8:	5c9b      	ldrb	r3, [r3, r2]
 8007dca:	b25b      	sxtb	r3, r3
 8007dcc:	3301      	adds	r3, #1
 8007dce:	d103      	bne.n	8007dd8 <xQueueReceive+0xf2>
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	2245      	movs	r2, #69	; 0x45
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	5499      	strb	r1, [r3, r2]
 8007dd8:	f001 ff44 	bl	8009c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ddc:	1d3a      	adds	r2, r7, #4
 8007dde:	2314      	movs	r3, #20
 8007de0:	18fb      	adds	r3, r7, r3
 8007de2:	0011      	movs	r1, r2
 8007de4:	0018      	movs	r0, r3
 8007de6:	f001 f89f 	bl	8008f28 <xTaskCheckForTimeOut>
 8007dea:	1e03      	subs	r3, r0, #0
 8007dec:	d11e      	bne.n	8007e2c <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	0018      	movs	r0, r3
 8007df2:	f000 fa8b 	bl	800830c <prvIsQueueEmpty>
 8007df6:	1e03      	subs	r3, r0, #0
 8007df8:	d011      	beq.n	8007e1e <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	3324      	adds	r3, #36	; 0x24
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	0011      	movs	r1, r2
 8007e02:	0018      	movs	r0, r3
 8007e04:	f000 ffdc 	bl	8008dc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	f000 fa20 	bl	8008250 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e10:	f000 fe32 	bl	8008a78 <xTaskResumeAll>
 8007e14:	1e03      	subs	r3, r0, #0
 8007e16:	d191      	bne.n	8007d3c <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8007e18:	f001 ff02 	bl	8009c20 <vPortYield>
 8007e1c:	e78e      	b.n	8007d3c <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	0018      	movs	r0, r3
 8007e22:	f000 fa15 	bl	8008250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e26:	f000 fe27 	bl	8008a78 <xTaskResumeAll>
 8007e2a:	e787      	b.n	8007d3c <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	0018      	movs	r0, r3
 8007e30:	f000 fa0e 	bl	8008250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e34:	f000 fe20 	bl	8008a78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f000 fa66 	bl	800830c <prvIsQueueEmpty>
 8007e40:	1e03      	subs	r3, r0, #0
 8007e42:	d100      	bne.n	8007e46 <xQueueReceive+0x160>
 8007e44:	e77a      	b.n	8007d3c <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e48:	0018      	movs	r0, r3
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	b00a      	add	sp, #40	; 0x28
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	; 0x28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e62:	2300      	movs	r3, #0
 8007e64:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <xQueueSemaphoreTake+0x20>
 8007e6c:	b672      	cpsid	i
 8007e6e:	e7fe      	b.n	8007e6e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <xQueueSemaphoreTake+0x2c>
 8007e78:	b672      	cpsid	i
 8007e7a:	e7fe      	b.n	8007e7a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e7c:	f001 f97c 	bl	8009178 <xTaskGetSchedulerState>
 8007e80:	1e03      	subs	r3, r0, #0
 8007e82:	d102      	bne.n	8007e8a <xQueueSemaphoreTake+0x3a>
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <xQueueSemaphoreTake+0x3e>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e000      	b.n	8007e90 <xQueueSemaphoreTake+0x40>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <xQueueSemaphoreTake+0x48>
 8007e94:	b672      	cpsid	i
 8007e96:	e7fe      	b.n	8007e96 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e98:	f001 fed2 	bl	8009c40 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d01d      	beq.n	8007ee4 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	1e5a      	subs	r2, r3, #1
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d104      	bne.n	8007ec2 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007eb8:	f001 faae 	bl	8009418 <pvTaskIncrementMutexHeldCount>
 8007ebc:	0002      	movs	r2, r0
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d008      	beq.n	8007edc <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	3310      	adds	r3, #16
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f000 ffba 	bl	8008e48 <xTaskRemoveFromEventList>
 8007ed4:	1e03      	subs	r3, r0, #0
 8007ed6:	d001      	beq.n	8007edc <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ed8:	f001 fea2 	bl	8009c20 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007edc:	f001 fec2 	bl	8009c64 <vPortExitCritical>
				return pdPASS;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e08b      	b.n	8007ffc <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d108      	bne.n	8007efc <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <xQueueSemaphoreTake+0xa4>
 8007ef0:	b672      	cpsid	i
 8007ef2:	e7fe      	b.n	8007ef2 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ef4:	f001 feb6 	bl	8009c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e07f      	b.n	8007ffc <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d106      	bne.n	8007f10 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f02:	230c      	movs	r3, #12
 8007f04:	18fb      	adds	r3, r7, r3
 8007f06:	0018      	movs	r0, r3
 8007f08:	f000 fffa 	bl	8008f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f10:	f001 fea8 	bl	8009c64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f14:	f000 fda4 	bl	8008a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f18:	f001 fe92 	bl	8009c40 <vPortEnterCritical>
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	2244      	movs	r2, #68	; 0x44
 8007f20:	5c9b      	ldrb	r3, [r3, r2]
 8007f22:	b25b      	sxtb	r3, r3
 8007f24:	3301      	adds	r3, #1
 8007f26:	d103      	bne.n	8007f30 <xQueueSemaphoreTake+0xe0>
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	2244      	movs	r2, #68	; 0x44
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	5499      	strb	r1, [r3, r2]
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	2245      	movs	r2, #69	; 0x45
 8007f34:	5c9b      	ldrb	r3, [r3, r2]
 8007f36:	b25b      	sxtb	r3, r3
 8007f38:	3301      	adds	r3, #1
 8007f3a:	d103      	bne.n	8007f44 <xQueueSemaphoreTake+0xf4>
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	2245      	movs	r2, #69	; 0x45
 8007f40:	2100      	movs	r1, #0
 8007f42:	5499      	strb	r1, [r3, r2]
 8007f44:	f001 fe8e 	bl	8009c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f48:	003a      	movs	r2, r7
 8007f4a:	230c      	movs	r3, #12
 8007f4c:	18fb      	adds	r3, r7, r3
 8007f4e:	0011      	movs	r1, r2
 8007f50:	0018      	movs	r0, r3
 8007f52:	f000 ffe9 	bl	8008f28 <xTaskCheckForTimeOut>
 8007f56:	1e03      	subs	r3, r0, #0
 8007f58:	d12e      	bne.n	8007fb8 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f000 f9d5 	bl	800830c <prvIsQueueEmpty>
 8007f62:	1e03      	subs	r3, r0, #0
 8007f64:	d021      	beq.n	8007faa <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8007f6e:	f001 fe67 	bl	8009c40 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	0018      	movs	r0, r3
 8007f78:	f001 f91a 	bl	80091b0 <xTaskPriorityInherit>
 8007f7c:	0003      	movs	r3, r0
 8007f7e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8007f80:	f001 fe70 	bl	8009c64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	3324      	adds	r3, #36	; 0x24
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	0011      	movs	r1, r2
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	f000 ff17 	bl	8008dc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	0018      	movs	r0, r3
 8007f96:	f000 f95b 	bl	8008250 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f9a:	f000 fd6d 	bl	8008a78 <xTaskResumeAll>
 8007f9e:	1e03      	subs	r3, r0, #0
 8007fa0:	d000      	beq.n	8007fa4 <xQueueSemaphoreTake+0x154>
 8007fa2:	e779      	b.n	8007e98 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8007fa4:	f001 fe3c 	bl	8009c20 <vPortYield>
 8007fa8:	e776      	b.n	8007e98 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	0018      	movs	r0, r3
 8007fae:	f000 f94f 	bl	8008250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fb2:	f000 fd61 	bl	8008a78 <xTaskResumeAll>
 8007fb6:	e76f      	b.n	8007e98 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	0018      	movs	r0, r3
 8007fbc:	f000 f948 	bl	8008250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fc0:	f000 fd5a 	bl	8008a78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f000 f9a0 	bl	800830c <prvIsQueueEmpty>
 8007fcc:	1e03      	subs	r3, r0, #0
 8007fce:	d100      	bne.n	8007fd2 <xQueueSemaphoreTake+0x182>
 8007fd0:	e762      	b.n	8007e98 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d010      	beq.n	8007ffa <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8007fd8:	f001 fe32 	bl	8009c40 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	0018      	movs	r0, r3
 8007fe0:	f000 f88f 	bl	8008102 <prvGetDisinheritPriorityAfterTimeout>
 8007fe4:	0003      	movs	r3, r0
 8007fe6:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	0011      	movs	r1, r2
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f001 f9a1 	bl	8009338 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ff6:	f001 fe35 	bl	8009c64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ffa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	46bd      	mov	sp, r7
 8008000:	b00a      	add	sp, #40	; 0x28
 8008002:	bd80      	pop	{r7, pc}

08008004 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008004:	b590      	push	{r4, r7, lr}
 8008006:	b08b      	sub	sp, #44	; 0x2c
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <xQueueReceiveFromISR+0x1a>
 800801a:	b672      	cpsid	i
 800801c:	e7fe      	b.n	800801c <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d103      	bne.n	800802c <xQueueReceiveFromISR+0x28>
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <xQueueReceiveFromISR+0x2c>
 800802c:	2301      	movs	r3, #1
 800802e:	e000      	b.n	8008032 <xQueueReceiveFromISR+0x2e>
 8008030:	2300      	movs	r3, #0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <xQueueReceiveFromISR+0x36>
 8008036:	b672      	cpsid	i
 8008038:	e7fe      	b.n	8008038 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800803a:	f001 fe2b 	bl	8009c94 <ulSetInterruptMaskFromISR>
 800803e:	0003      	movs	r3, r0
 8008040:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008046:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d032      	beq.n	80080b4 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800804e:	2417      	movs	r4, #23
 8008050:	193b      	adds	r3, r7, r4
 8008052:	6a3a      	ldr	r2, [r7, #32]
 8008054:	2144      	movs	r1, #68	; 0x44
 8008056:	5c52      	ldrb	r2, [r2, r1]
 8008058:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	0011      	movs	r1, r2
 8008060:	0018      	movs	r0, r3
 8008062:	f000 f8cf 	bl	8008204 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	1e5a      	subs	r2, r3, #1
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800806e:	193b      	adds	r3, r7, r4
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	b25b      	sxtb	r3, r3
 8008074:	3301      	adds	r3, #1
 8008076:	d111      	bne.n	800809c <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d016      	beq.n	80080ae <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	3310      	adds	r3, #16
 8008084:	0018      	movs	r0, r3
 8008086:	f000 fedf 	bl	8008e48 <xTaskRemoveFromEventList>
 800808a:	1e03      	subs	r3, r0, #0
 800808c:	d00f      	beq.n	80080ae <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00c      	beq.n	80080ae <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	e008      	b.n	80080ae <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800809c:	2317      	movs	r3, #23
 800809e:	18fb      	adds	r3, r7, r3
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	b259      	sxtb	r1, r3
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	2244      	movs	r2, #68	; 0x44
 80080ac:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80080ae:	2301      	movs	r3, #1
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
 80080b2:	e001      	b.n	80080b8 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 80080b4:	2300      	movs	r3, #0
 80080b6:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	0018      	movs	r0, r3
 80080bc:	f001 fdf0 	bl	8009ca0 <vClearInterruptMaskFromISR>

	return xReturn;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080c2:	0018      	movs	r0, r3
 80080c4:	46bd      	mov	sp, r7
 80080c6:	b00b      	add	sp, #44	; 0x2c
 80080c8:	bd90      	pop	{r4, r7, pc}

080080ca <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <vQueueDelete+0x16>
 80080dc:	b672      	cpsid	i
 80080de:	e7fe      	b.n	80080de <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	0018      	movs	r0, r3
 80080e4:	f000 f968 	bl	80083b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2246      	movs	r2, #70	; 0x46
 80080ec:	5c9b      	ldrb	r3, [r3, r2]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d103      	bne.n	80080fa <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	0018      	movs	r0, r3
 80080f6:	f001 fee1 	bl	8009ebc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	46bd      	mov	sp, r7
 80080fe:	b004      	add	sp, #16
 8008100:	bd80      	pop	{r7, pc}

08008102 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b00      	cmp	r3, #0
 8008110:	d006      	beq.n	8008120 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2238      	movs	r2, #56	; 0x38
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	e001      	b.n	8008124 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008124:	68fb      	ldr	r3, [r7, #12]
	}
 8008126:	0018      	movs	r0, r3
 8008128:	46bd      	mov	sp, r7
 800812a:	b004      	add	sp, #16
 800812c:	bd80      	pop	{r7, pc}

0800812e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b086      	sub	sp, #24
 8008132:	af00      	add	r7, sp, #0
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800813a:	2300      	movs	r3, #0
 800813c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10e      	bne.n	800816a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d14e      	bne.n	80081f2 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	0018      	movs	r0, r3
 800815a:	f001 f891 	bl	8009280 <xTaskPriorityDisinherit>
 800815e:	0003      	movs	r3, r0
 8008160:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	609a      	str	r2, [r3, #8]
 8008168:	e043      	b.n	80081f2 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d119      	bne.n	80081a4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6858      	ldr	r0, [r3, #4]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	0019      	movs	r1, r3
 800817c:	f002 f8cd 	bl	800a31a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	18d2      	adds	r2, r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	429a      	cmp	r2, r3
 8008198:	d32b      	bcc.n	80081f2 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	605a      	str	r2, [r3, #4]
 80081a2:	e026      	b.n	80081f2 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	68d8      	ldr	r0, [r3, #12]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	0019      	movs	r1, r3
 80081b0:	f002 f8b3 	bl	800a31a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081bc:	425b      	negs	r3, r3
 80081be:	18d2      	adds	r2, r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d207      	bcs.n	80081e0 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d8:	425b      	negs	r3, r3
 80081da:	18d2      	adds	r2, r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d105      	bne.n	80081f2 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80081fa:	697b      	ldr	r3, [r7, #20]
}
 80081fc:	0018      	movs	r0, r3
 80081fe:	46bd      	mov	sp, r7
 8008200:	b006      	add	sp, #24
 8008202:	bd80      	pop	{r7, pc}

08008204 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d018      	beq.n	8008248 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	18d2      	adds	r2, r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	429a      	cmp	r2, r3
 800822e:	d303      	bcc.n	8008238 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68d9      	ldr	r1, [r3, #12]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	0018      	movs	r0, r3
 8008244:	f002 f869 	bl	800a31a <memcpy>
	}
}
 8008248:	46c0      	nop			; (mov r8, r8)
 800824a:	46bd      	mov	sp, r7
 800824c:	b002      	add	sp, #8
 800824e:	bd80      	pop	{r7, pc}

08008250 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008258:	f001 fcf2 	bl	8009c40 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800825c:	230f      	movs	r3, #15
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	2145      	movs	r1, #69	; 0x45
 8008264:	5c52      	ldrb	r2, [r2, r1]
 8008266:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008268:	e013      	b.n	8008292 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	2b00      	cmp	r3, #0
 8008270:	d016      	beq.n	80082a0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3324      	adds	r3, #36	; 0x24
 8008276:	0018      	movs	r0, r3
 8008278:	f000 fde6 	bl	8008e48 <xTaskRemoveFromEventList>
 800827c:	1e03      	subs	r3, r0, #0
 800827e:	d001      	beq.n	8008284 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008280:	f000 fea2 	bl	8008fc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008284:	210f      	movs	r1, #15
 8008286:	187b      	adds	r3, r7, r1
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	3b01      	subs	r3, #1
 800828c:	b2da      	uxtb	r2, r3
 800828e:	187b      	adds	r3, r7, r1
 8008290:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008292:	230f      	movs	r3, #15
 8008294:	18fb      	adds	r3, r7, r3
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	b25b      	sxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	dce5      	bgt.n	800826a <prvUnlockQueue+0x1a>
 800829e:	e000      	b.n	80082a2 <prvUnlockQueue+0x52>
					break;
 80082a0:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2245      	movs	r2, #69	; 0x45
 80082a6:	21ff      	movs	r1, #255	; 0xff
 80082a8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80082aa:	f001 fcdb 	bl	8009c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082ae:	f001 fcc7 	bl	8009c40 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082b2:	230e      	movs	r3, #14
 80082b4:	18fb      	adds	r3, r7, r3
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	2144      	movs	r1, #68	; 0x44
 80082ba:	5c52      	ldrb	r2, [r2, r1]
 80082bc:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082be:	e013      	b.n	80082e8 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d016      	beq.n	80082f6 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3310      	adds	r3, #16
 80082cc:	0018      	movs	r0, r3
 80082ce:	f000 fdbb 	bl	8008e48 <xTaskRemoveFromEventList>
 80082d2:	1e03      	subs	r3, r0, #0
 80082d4:	d001      	beq.n	80082da <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80082d6:	f000 fe77 	bl	8008fc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082da:	210e      	movs	r1, #14
 80082dc:	187b      	adds	r3, r7, r1
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	187b      	adds	r3, r7, r1
 80082e6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082e8:	230e      	movs	r3, #14
 80082ea:	18fb      	adds	r3, r7, r3
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b25b      	sxtb	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	dce5      	bgt.n	80082c0 <prvUnlockQueue+0x70>
 80082f4:	e000      	b.n	80082f8 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80082f6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2244      	movs	r2, #68	; 0x44
 80082fc:	21ff      	movs	r1, #255	; 0xff
 80082fe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008300:	f001 fcb0 	bl	8009c64 <vPortExitCritical>
}
 8008304:	46c0      	nop			; (mov r8, r8)
 8008306:	46bd      	mov	sp, r7
 8008308:	b004      	add	sp, #16
 800830a:	bd80      	pop	{r7, pc}

0800830c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008314:	f001 fc94 	bl	8009c40 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008320:	2301      	movs	r3, #1
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e001      	b.n	800832a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800832a:	f001 fc9b 	bl	8009c64 <vPortExitCritical>

	return xReturn;
 800832e:	68fb      	ldr	r3, [r7, #12]
}
 8008330:	0018      	movs	r0, r3
 8008332:	46bd      	mov	sp, r7
 8008334:	b004      	add	sp, #16
 8008336:	bd80      	pop	{r7, pc}

08008338 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008340:	f001 fc7e 	bl	8009c40 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834c:	429a      	cmp	r2, r3
 800834e:	d102      	bne.n	8008356 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008350:	2301      	movs	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	e001      	b.n	800835a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800835a:	f001 fc83 	bl	8009c64 <vPortExitCritical>

	return xReturn;
 800835e:	68fb      	ldr	r3, [r7, #12]
}
 8008360:	0018      	movs	r0, r3
 8008362:	46bd      	mov	sp, r7
 8008364:	b004      	add	sp, #16
 8008366:	bd80      	pop	{r7, pc}

08008368 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	e015      	b.n	80083a4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008378:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <vQueueAddToRegistry+0x4c>)
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	00d2      	lsls	r2, r2, #3
 800837e:	58d3      	ldr	r3, [r2, r3]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10c      	bne.n	800839e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008384:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <vQueueAddToRegistry+0x4c>)
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	00d2      	lsls	r2, r2, #3
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800838e:	4a09      	ldr	r2, [pc, #36]	; (80083b4 <vQueueAddToRegistry+0x4c>)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	18d3      	adds	r3, r2, r3
 8008396:	3304      	adds	r3, #4
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800839c:	e006      	b.n	80083ac <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b07      	cmp	r3, #7
 80083a8:	d9e6      	bls.n	8008378 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	46c0      	nop			; (mov r8, r8)
 80083ae:	46bd      	mov	sp, r7
 80083b0:	b004      	add	sp, #16
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20000aa8 	.word	0x20000aa8

080083b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	e018      	b.n	80083f8 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80083c6:	4a10      	ldr	r2, [pc, #64]	; (8008408 <vQueueUnregisterQueue+0x50>)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	18d3      	adds	r3, r2, r3
 80083ce:	3304      	adds	r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d10c      	bne.n	80083f2 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80083d8:	4b0b      	ldr	r3, [pc, #44]	; (8008408 <vQueueUnregisterQueue+0x50>)
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	00d2      	lsls	r2, r2, #3
 80083de:	2100      	movs	r1, #0
 80083e0:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80083e2:	4a09      	ldr	r2, [pc, #36]	; (8008408 <vQueueUnregisterQueue+0x50>)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	18d3      	adds	r3, r2, r3
 80083ea:	3304      	adds	r3, #4
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
				break;
 80083f0:	e006      	b.n	8008400 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3301      	adds	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b07      	cmp	r3, #7
 80083fc:	d9e3      	bls.n	80083c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083fe:	46c0      	nop			; (mov r8, r8)
 8008400:	46c0      	nop			; (mov r8, r8)
 8008402:	46bd      	mov	sp, r7
 8008404:	b004      	add	sp, #16
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20000aa8 	.word	0x20000aa8

0800840c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800841c:	f001 fc10 	bl	8009c40 <vPortEnterCritical>
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2244      	movs	r2, #68	; 0x44
 8008424:	5c9b      	ldrb	r3, [r3, r2]
 8008426:	b25b      	sxtb	r3, r3
 8008428:	3301      	adds	r3, #1
 800842a:	d103      	bne.n	8008434 <vQueueWaitForMessageRestricted+0x28>
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2244      	movs	r2, #68	; 0x44
 8008430:	2100      	movs	r1, #0
 8008432:	5499      	strb	r1, [r3, r2]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2245      	movs	r2, #69	; 0x45
 8008438:	5c9b      	ldrb	r3, [r3, r2]
 800843a:	b25b      	sxtb	r3, r3
 800843c:	3301      	adds	r3, #1
 800843e:	d103      	bne.n	8008448 <vQueueWaitForMessageRestricted+0x3c>
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2245      	movs	r2, #69	; 0x45
 8008444:	2100      	movs	r1, #0
 8008446:	5499      	strb	r1, [r3, r2]
 8008448:	f001 fc0c 	bl	8009c64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	3324      	adds	r3, #36	; 0x24
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	0018      	movs	r0, r3
 800845e:	f000 fccd 	bl	8008dfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	0018      	movs	r0, r3
 8008466:	f7ff fef3 	bl	8008250 <prvUnlockQueue>
	}
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	46bd      	mov	sp, r7
 800846e:	b006      	add	sp, #24
 8008470:	bd80      	pop	{r7, pc}

08008472 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008472:	b590      	push	{r4, r7, lr}
 8008474:	b08d      	sub	sp, #52	; 0x34
 8008476:	af04      	add	r7, sp, #16
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	607a      	str	r2, [r7, #4]
 800847e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <xTaskCreateStatic+0x18>
 8008486:	b672      	cpsid	i
 8008488:	e7fe      	b.n	8008488 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <xTaskCreateStatic+0x22>
 8008490:	b672      	cpsid	i
 8008492:	e7fe      	b.n	8008492 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008494:	23bc      	movs	r3, #188	; 0xbc
 8008496:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2bbc      	cmp	r3, #188	; 0xbc
 800849c:	d001      	beq.n	80084a2 <xTaskCreateStatic+0x30>
 800849e:	b672      	cpsid	i
 80084a0:	e7fe      	b.n	80084a0 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084a2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d020      	beq.n	80084ec <xTaskCreateStatic+0x7a>
 80084aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01d      	beq.n	80084ec <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	22b9      	movs	r2, #185	; 0xb9
 80084be:	2102      	movs	r1, #2
 80084c0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084c2:	683c      	ldr	r4, [r7, #0]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	2300      	movs	r3, #0
 80084cc:	9303      	str	r3, [sp, #12]
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	9302      	str	r3, [sp, #8]
 80084d2:	2318      	movs	r3, #24
 80084d4:	18fb      	adds	r3, r7, r3
 80084d6:	9301      	str	r3, [sp, #4]
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	0023      	movs	r3, r4
 80084de:	f000 f859 	bl	8008594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	0018      	movs	r0, r3
 80084e6:	f000 f8f5 	bl	80086d4 <prvAddNewTaskToReadyList>
 80084ea:	e001      	b.n	80084f0 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80084ec:	2300      	movs	r3, #0
 80084ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084f0:	69bb      	ldr	r3, [r7, #24]
	}
 80084f2:	0018      	movs	r0, r3
 80084f4:	46bd      	mov	sp, r7
 80084f6:	b009      	add	sp, #36	; 0x24
 80084f8:	bd90      	pop	{r4, r7, pc}

080084fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084fa:	b590      	push	{r4, r7, lr}
 80084fc:	b08d      	sub	sp, #52	; 0x34
 80084fe:	af04      	add	r7, sp, #16
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	603b      	str	r3, [r7, #0]
 8008506:	1dbb      	adds	r3, r7, #6
 8008508:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800850a:	1dbb      	adds	r3, r7, #6
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	0018      	movs	r0, r3
 8008512:	f001 fc2d 	bl	8009d70 <pvPortMalloc>
 8008516:	0003      	movs	r3, r0
 8008518:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d010      	beq.n	8008542 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008520:	20bc      	movs	r0, #188	; 0xbc
 8008522:	f001 fc25 	bl	8009d70 <pvPortMalloc>
 8008526:	0003      	movs	r3, r0
 8008528:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	631a      	str	r2, [r3, #48]	; 0x30
 8008536:	e006      	b.n	8008546 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	0018      	movs	r0, r3
 800853c:	f001 fcbe 	bl	8009ebc <vPortFree>
 8008540:	e001      	b.n	8008546 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01a      	beq.n	8008582 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	22b9      	movs	r2, #185	; 0xb9
 8008550:	2100      	movs	r1, #0
 8008552:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008554:	1dbb      	adds	r3, r7, #6
 8008556:	881a      	ldrh	r2, [r3, #0]
 8008558:	683c      	ldr	r4, [r7, #0]
 800855a:	68b9      	ldr	r1, [r7, #8]
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	2300      	movs	r3, #0
 8008560:	9303      	str	r3, [sp, #12]
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	9302      	str	r3, [sp, #8]
 8008566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	0023      	movs	r3, r4
 8008570:	f000 f810 	bl	8008594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	0018      	movs	r0, r3
 8008578:	f000 f8ac 	bl	80086d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800857c:	2301      	movs	r3, #1
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	e002      	b.n	8008588 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008582:	2301      	movs	r3, #1
 8008584:	425b      	negs	r3, r3
 8008586:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008588:	69bb      	ldr	r3, [r7, #24]
	}
 800858a:	0018      	movs	r0, r3
 800858c:	46bd      	mov	sp, r7
 800858e:	b009      	add	sp, #36	; 0x24
 8008590:	bd90      	pop	{r4, r7, pc}
	...

08008594 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	001a      	movs	r2, r3
 80085ac:	21a5      	movs	r1, #165	; 0xa5
 80085ae:	f001 febd 	bl	800a32c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4942      	ldr	r1, [pc, #264]	; (80086c4 <prvInitialiseNewTask+0x130>)
 80085ba:	468c      	mov	ip, r1
 80085bc:	4463      	add	r3, ip
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	18d3      	adds	r3, r2, r3
 80085c2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2207      	movs	r2, #7
 80085c8:	4393      	bics	r3, r2
 80085ca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2207      	movs	r2, #7
 80085d0:	4013      	ands	r3, r2
 80085d2:	d001      	beq.n	80085d8 <prvInitialiseNewTask+0x44>
 80085d4:	b672      	cpsid	i
 80085d6:	e7fe      	b.n	80085d6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d020      	beq.n	8008620 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085de:	2300      	movs	r3, #0
 80085e0:	617b      	str	r3, [r7, #20]
 80085e2:	e013      	b.n	800860c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	18d3      	adds	r3, r2, r3
 80085ea:	7818      	ldrb	r0, [r3, #0]
 80085ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085ee:	2134      	movs	r1, #52	; 0x34
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	18d3      	adds	r3, r2, r3
 80085f4:	185b      	adds	r3, r3, r1
 80085f6:	1c02      	adds	r2, r0, #0
 80085f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	18d3      	adds	r3, r2, r3
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d006      	beq.n	8008614 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	3301      	adds	r3, #1
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	2b0f      	cmp	r3, #15
 8008610:	d9e8      	bls.n	80085e4 <prvInitialiseNewTask+0x50>
 8008612:	e000      	b.n	8008616 <prvInitialiseNewTask+0x82>
			{
				break;
 8008614:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	2243      	movs	r2, #67	; 0x43
 800861a:	2100      	movs	r1, #0
 800861c:	5499      	strb	r1, [r3, r2]
 800861e:	e003      	b.n	8008628 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	2234      	movs	r2, #52	; 0x34
 8008624:	2100      	movs	r1, #0
 8008626:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	2b37      	cmp	r3, #55	; 0x37
 800862c:	d901      	bls.n	8008632 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800862e:	2337      	movs	r3, #55	; 0x37
 8008630:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	6a3a      	ldr	r2, [r7, #32]
 8008636:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	6a3a      	ldr	r2, [r7, #32]
 800863c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008640:	2200      	movs	r2, #0
 8008642:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	3304      	adds	r3, #4
 8008648:	0018      	movs	r0, r3
 800864a:	f7fe ffdf 	bl	800760c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	3318      	adds	r3, #24
 8008652:	0018      	movs	r0, r3
 8008654:	f7fe ffda 	bl	800760c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800865c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	2238      	movs	r2, #56	; 0x38
 8008662:	1ad2      	subs	r2, r2, r3
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800866c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	22b4      	movs	r2, #180	; 0xb4
 8008672:	2100      	movs	r1, #0
 8008674:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008678:	22b8      	movs	r2, #184	; 0xb8
 800867a:	2100      	movs	r1, #0
 800867c:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	3354      	adds	r3, #84	; 0x54
 8008682:	2260      	movs	r2, #96	; 0x60
 8008684:	2100      	movs	r1, #0
 8008686:	0018      	movs	r0, r3
 8008688:	f001 fe50 	bl	800a32c <memset>
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	4a0e      	ldr	r2, [pc, #56]	; (80086c8 <prvInitialiseNewTask+0x134>)
 8008690:	659a      	str	r2, [r3, #88]	; 0x58
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <prvInitialiseNewTask+0x138>)
 8008696:	65da      	str	r2, [r3, #92]	; 0x5c
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	4a0d      	ldr	r2, [pc, #52]	; (80086d0 <prvInitialiseNewTask+0x13c>)
 800869c:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	68f9      	ldr	r1, [r7, #12]
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	0018      	movs	r0, r3
 80086a6:	f001 fa2f 	bl	8009b08 <pxPortInitialiseStack>
 80086aa:	0002      	movs	r2, r0
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086bc:	46c0      	nop			; (mov r8, r8)
 80086be:	46bd      	mov	sp, r7
 80086c0:	b006      	add	sp, #24
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	3fffffff 	.word	0x3fffffff
 80086c8:	0800f190 	.word	0x0800f190
 80086cc:	0800f1b0 	.word	0x0800f1b0
 80086d0:	0800f170 	.word	0x0800f170

080086d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086dc:	f001 fab0 	bl	8009c40 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086e0:	4b2a      	ldr	r3, [pc, #168]	; (800878c <prvAddNewTaskToReadyList+0xb8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	4b29      	ldr	r3, [pc, #164]	; (800878c <prvAddNewTaskToReadyList+0xb8>)
 80086e8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80086ea:	4b29      	ldr	r3, [pc, #164]	; (8008790 <prvAddNewTaskToReadyList+0xbc>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d109      	bne.n	8008706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086f2:	4b27      	ldr	r3, [pc, #156]	; (8008790 <prvAddNewTaskToReadyList+0xbc>)
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086f8:	4b24      	ldr	r3, [pc, #144]	; (800878c <prvAddNewTaskToReadyList+0xb8>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d110      	bne.n	8008722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008700:	f000 fc7c 	bl	8008ffc <prvInitialiseTaskLists>
 8008704:	e00d      	b.n	8008722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008706:	4b23      	ldr	r3, [pc, #140]	; (8008794 <prvAddNewTaskToReadyList+0xc0>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d109      	bne.n	8008722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800870e:	4b20      	ldr	r3, [pc, #128]	; (8008790 <prvAddNewTaskToReadyList+0xbc>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	429a      	cmp	r2, r3
 800871a:	d802      	bhi.n	8008722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800871c:	4b1c      	ldr	r3, [pc, #112]	; (8008790 <prvAddNewTaskToReadyList+0xbc>)
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008722:	4b1d      	ldr	r3, [pc, #116]	; (8008798 <prvAddNewTaskToReadyList+0xc4>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	4b1b      	ldr	r3, [pc, #108]	; (8008798 <prvAddNewTaskToReadyList+0xc4>)
 800872a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800872c:	4b1a      	ldr	r3, [pc, #104]	; (8008798 <prvAddNewTaskToReadyList+0xc4>)
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008738:	4b18      	ldr	r3, [pc, #96]	; (800879c <prvAddNewTaskToReadyList+0xc8>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d903      	bls.n	8008748 <prvAddNewTaskToReadyList+0x74>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008744:	4b15      	ldr	r3, [pc, #84]	; (800879c <prvAddNewTaskToReadyList+0xc8>)
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874c:	0013      	movs	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	189b      	adds	r3, r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4a12      	ldr	r2, [pc, #72]	; (80087a0 <prvAddNewTaskToReadyList+0xcc>)
 8008756:	189a      	adds	r2, r3, r2
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3304      	adds	r3, #4
 800875c:	0019      	movs	r1, r3
 800875e:	0010      	movs	r0, r2
 8008760:	f7fe ff5f 	bl	8007622 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008764:	f001 fa7e 	bl	8009c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008768:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <prvAddNewTaskToReadyList+0xc0>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d008      	beq.n	8008782 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <prvAddNewTaskToReadyList+0xbc>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877a:	429a      	cmp	r2, r3
 800877c:	d201      	bcs.n	8008782 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800877e:	f001 fa4f 	bl	8009c20 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008782:	46c0      	nop			; (mov r8, r8)
 8008784:	46bd      	mov	sp, r7
 8008786:	b002      	add	sp, #8
 8008788:	bd80      	pop	{r7, pc}
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	20000fbc 	.word	0x20000fbc
 8008790:	20000ae8 	.word	0x20000ae8
 8008794:	20000fc8 	.word	0x20000fc8
 8008798:	20000fd8 	.word	0x20000fd8
 800879c:	20000fc4 	.word	0x20000fc4
 80087a0:	20000aec 	.word	0x20000aec

080087a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d010      	beq.n	80087d8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087b6:	4b0d      	ldr	r3, [pc, #52]	; (80087ec <vTaskDelay+0x48>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <vTaskDelay+0x1e>
 80087be:	b672      	cpsid	i
 80087c0:	e7fe      	b.n	80087c0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80087c2:	f000 f94d 	bl	8008a60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2100      	movs	r1, #0
 80087ca:	0018      	movs	r0, r3
 80087cc:	f000 fe36 	bl	800943c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087d0:	f000 f952 	bl	8008a78 <xTaskResumeAll>
 80087d4:	0003      	movs	r3, r0
 80087d6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80087de:	f001 fa1f 	bl	8009c20 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087e2:	46c0      	nop			; (mov r8, r8)
 80087e4:	46bd      	mov	sp, r7
 80087e6:	b004      	add	sp, #16
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	20000fe4 	.word	0x20000fe4

080087f0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80087f8:	f001 fa22 	bl	8009c40 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d102      	bne.n	8008808 <vTaskSuspend+0x18>
 8008802:	4b29      	ldr	r3, [pc, #164]	; (80088a8 <vTaskSuspend+0xb8>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	e000      	b.n	800880a <vTaskSuspend+0x1a>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3304      	adds	r3, #4
 8008810:	0018      	movs	r0, r3
 8008812:	f7fe ff5e 	bl	80076d2 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881a:	2b00      	cmp	r3, #0
 800881c:	d004      	beq.n	8008828 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3318      	adds	r3, #24
 8008822:	0018      	movs	r0, r3
 8008824:	f7fe ff55 	bl	80076d2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	1d1a      	adds	r2, r3, #4
 800882c:	4b1f      	ldr	r3, [pc, #124]	; (80088ac <vTaskSuspend+0xbc>)
 800882e:	0011      	movs	r1, r2
 8008830:	0018      	movs	r0, r3
 8008832:	f7fe fef6 	bl	8007622 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	22b8      	movs	r2, #184	; 0xb8
 800883a:	5c9b      	ldrb	r3, [r3, r2]
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b01      	cmp	r3, #1
 8008840:	d103      	bne.n	800884a <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	22b8      	movs	r2, #184	; 0xb8
 8008846:	2100      	movs	r1, #0
 8008848:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800884a:	f001 fa0b 	bl	8009c64 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800884e:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <vTaskSuspend+0xc0>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008856:	f001 f9f3 	bl	8009c40 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800885a:	f000 fc6f 	bl	800913c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800885e:	f001 fa01 	bl	8009c64 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008862:	4b11      	ldr	r3, [pc, #68]	; (80088a8 <vTaskSuspend+0xb8>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	429a      	cmp	r2, r3
 800886a:	d118      	bne.n	800889e <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 800886c:	4b10      	ldr	r3, [pc, #64]	; (80088b0 <vTaskSuspend+0xc0>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d008      	beq.n	8008886 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008874:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <vTaskSuspend+0xc4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <vTaskSuspend+0x90>
 800887c:	b672      	cpsid	i
 800887e:	e7fe      	b.n	800887e <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8008880:	f001 f9ce 	bl	8009c20 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008884:	e00b      	b.n	800889e <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008886:	4b09      	ldr	r3, [pc, #36]	; (80088ac <vTaskSuspend+0xbc>)
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	4b0b      	ldr	r3, [pc, #44]	; (80088b8 <vTaskSuspend+0xc8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	429a      	cmp	r2, r3
 8008890:	d103      	bne.n	800889a <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8008892:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <vTaskSuspend+0xb8>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]
	}
 8008898:	e001      	b.n	800889e <vTaskSuspend+0xae>
					vTaskSwitchContext();
 800889a:	f000 fa37 	bl	8008d0c <vTaskSwitchContext>
	}
 800889e:	46c0      	nop			; (mov r8, r8)
 80088a0:	46bd      	mov	sp, r7
 80088a2:	b004      	add	sp, #16
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	46c0      	nop			; (mov r8, r8)
 80088a8:	20000ae8 	.word	0x20000ae8
 80088ac:	20000fa8 	.word	0x20000fa8
 80088b0:	20000fc8 	.word	0x20000fc8
 80088b4:	20000fe4 	.word	0x20000fe4
 80088b8:	20000fbc 	.word	0x20000fbc

080088bc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <prvTaskIsTaskSuspended+0x1a>
 80088d2:	b672      	cpsid	i
 80088d4:	e7fe      	b.n	80088d4 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	695a      	ldr	r2, [r3, #20]
 80088da:	4b09      	ldr	r3, [pc, #36]	; (8008900 <prvTaskIsTaskSuspended+0x44>)
 80088dc:	429a      	cmp	r2, r3
 80088de:	d10a      	bne.n	80088f6 <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088e4:	4b07      	ldr	r3, [pc, #28]	; (8008904 <prvTaskIsTaskSuspended+0x48>)
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d005      	beq.n	80088f6 <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 80088f2:	2301      	movs	r3, #1
 80088f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088f6:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80088f8:	0018      	movs	r0, r3
 80088fa:	46bd      	mov	sp, r7
 80088fc:	b004      	add	sp, #16
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	20000fa8 	.word	0x20000fa8
 8008904:	20000f7c 	.word	0x20000f7c

08008908 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <vTaskResume+0x16>
 800891a:	b672      	cpsid	i
 800891c:	e7fe      	b.n	800891c <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800891e:	4b1e      	ldr	r3, [pc, #120]	; (8008998 <vTaskResume+0x90>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	429a      	cmp	r2, r3
 8008926:	d032      	beq.n	800898e <vTaskResume+0x86>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d02f      	beq.n	800898e <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 800892e:	f001 f987 	bl	8009c40 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	0018      	movs	r0, r3
 8008936:	f7ff ffc1 	bl	80088bc <prvTaskIsTaskSuspended>
 800893a:	1e03      	subs	r3, r0, #0
 800893c:	d025      	beq.n	800898a <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3304      	adds	r3, #4
 8008942:	0018      	movs	r0, r3
 8008944:	f7fe fec5 	bl	80076d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894c:	4b13      	ldr	r3, [pc, #76]	; (800899c <vTaskResume+0x94>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	429a      	cmp	r2, r3
 8008952:	d903      	bls.n	800895c <vTaskResume+0x54>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4b10      	ldr	r3, [pc, #64]	; (800899c <vTaskResume+0x94>)
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008960:	0013      	movs	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	189b      	adds	r3, r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4a0d      	ldr	r2, [pc, #52]	; (80089a0 <vTaskResume+0x98>)
 800896a:	189a      	adds	r2, r3, r2
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3304      	adds	r3, #4
 8008970:	0019      	movs	r1, r3
 8008972:	0010      	movs	r0, r2
 8008974:	f7fe fe55 	bl	8007622 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897c:	4b06      	ldr	r3, [pc, #24]	; (8008998 <vTaskResume+0x90>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	429a      	cmp	r2, r3
 8008984:	d301      	bcc.n	800898a <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008986:	f001 f94b 	bl	8009c20 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800898a:	f001 f96b 	bl	8009c64 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800898e:	46c0      	nop			; (mov r8, r8)
 8008990:	46bd      	mov	sp, r7
 8008992:	b004      	add	sp, #16
 8008994:	bd80      	pop	{r7, pc}
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	20000ae8 	.word	0x20000ae8
 800899c:	20000fc4 	.word	0x20000fc4
 80089a0:	20000aec 	.word	0x20000aec

080089a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089a4:	b590      	push	{r4, r7, lr}
 80089a6:	b089      	sub	sp, #36	; 0x24
 80089a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089b2:	003a      	movs	r2, r7
 80089b4:	1d39      	adds	r1, r7, #4
 80089b6:	2308      	movs	r3, #8
 80089b8:	18fb      	adds	r3, r7, r3
 80089ba:	0018      	movs	r0, r3
 80089bc:	f7fe fdd8 	bl	8007570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089c0:	683c      	ldr	r4, [r7, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	491e      	ldr	r1, [pc, #120]	; (8008a40 <vTaskStartScheduler+0x9c>)
 80089c8:	481e      	ldr	r0, [pc, #120]	; (8008a44 <vTaskStartScheduler+0xa0>)
 80089ca:	9202      	str	r2, [sp, #8]
 80089cc:	9301      	str	r3, [sp, #4]
 80089ce:	2300      	movs	r3, #0
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	2300      	movs	r3, #0
 80089d4:	0022      	movs	r2, r4
 80089d6:	f7ff fd4c 	bl	8008472 <xTaskCreateStatic>
 80089da:	0002      	movs	r2, r0
 80089dc:	4b1a      	ldr	r3, [pc, #104]	; (8008a48 <vTaskStartScheduler+0xa4>)
 80089de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089e0:	4b19      	ldr	r3, [pc, #100]	; (8008a48 <vTaskStartScheduler+0xa4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089e8:	2301      	movs	r3, #1
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	e001      	b.n	80089f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d103      	bne.n	8008a00 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80089f8:	f000 fd74 	bl	80094e4 <xTimerCreateTimerTask>
 80089fc:	0003      	movs	r3, r0
 80089fe:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d113      	bne.n	8008a2e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8008a06:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a08:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <vTaskStartScheduler+0xa8>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3354      	adds	r3, #84	; 0x54
 8008a0e:	001a      	movs	r2, r3
 8008a10:	4b0f      	ldr	r3, [pc, #60]	; (8008a50 <vTaskStartScheduler+0xac>)
 8008a12:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a14:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <vTaskStartScheduler+0xb0>)
 8008a16:	2201      	movs	r2, #1
 8008a18:	4252      	negs	r2, r2
 8008a1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a1c:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <vTaskStartScheduler+0xb4>)
 8008a1e:	2201      	movs	r2, #1
 8008a20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a22:	4b0e      	ldr	r3, [pc, #56]	; (8008a5c <vTaskStartScheduler+0xb8>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a28:	f001 f8d6 	bl	8009bd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a2c:	e004      	b.n	8008a38 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3301      	adds	r3, #1
 8008a32:	d101      	bne.n	8008a38 <vTaskStartScheduler+0x94>
 8008a34:	b672      	cpsid	i
 8008a36:	e7fe      	b.n	8008a36 <vTaskStartScheduler+0x92>
}
 8008a38:	46c0      	nop			; (mov r8, r8)
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	b005      	add	sp, #20
 8008a3e:	bd90      	pop	{r4, r7, pc}
 8008a40:	0800eee0 	.word	0x0800eee0
 8008a44:	08008fdd 	.word	0x08008fdd
 8008a48:	20000fe0 	.word	0x20000fe0
 8008a4c:	20000ae8 	.word	0x20000ae8
 8008a50:	2000003c 	.word	0x2000003c
 8008a54:	20000fdc 	.word	0x20000fdc
 8008a58:	20000fc8 	.word	0x20000fc8
 8008a5c:	20000fc0 	.word	0x20000fc0

08008a60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008a64:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <vTaskSuspendAll+0x14>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	4b02      	ldr	r3, [pc, #8]	; (8008a74 <vTaskSuspendAll+0x14>)
 8008a6c:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8008a6e:	46c0      	nop			; (mov r8, r8)
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20000fe4 	.word	0x20000fe4

08008a78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a86:	4b3a      	ldr	r3, [pc, #232]	; (8008b70 <xTaskResumeAll+0xf8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <xTaskResumeAll+0x1a>
 8008a8e:	b672      	cpsid	i
 8008a90:	e7fe      	b.n	8008a90 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a92:	f001 f8d5 	bl	8009c40 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a96:	4b36      	ldr	r3, [pc, #216]	; (8008b70 <xTaskResumeAll+0xf8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	1e5a      	subs	r2, r3, #1
 8008a9c:	4b34      	ldr	r3, [pc, #208]	; (8008b70 <xTaskResumeAll+0xf8>)
 8008a9e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aa0:	4b33      	ldr	r3, [pc, #204]	; (8008b70 <xTaskResumeAll+0xf8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d15b      	bne.n	8008b60 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008aa8:	4b32      	ldr	r3, [pc, #200]	; (8008b74 <xTaskResumeAll+0xfc>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d057      	beq.n	8008b60 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ab0:	e02f      	b.n	8008b12 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab2:	4b31      	ldr	r3, [pc, #196]	; (8008b78 <xTaskResumeAll+0x100>)
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3318      	adds	r3, #24
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f7fe fe07 	bl	80076d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	0018      	movs	r0, r3
 8008aca:	f7fe fe02 	bl	80076d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad2:	4b2a      	ldr	r3, [pc, #168]	; (8008b7c <xTaskResumeAll+0x104>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d903      	bls.n	8008ae2 <xTaskResumeAll+0x6a>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ade:	4b27      	ldr	r3, [pc, #156]	; (8008b7c <xTaskResumeAll+0x104>)
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae6:	0013      	movs	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	189b      	adds	r3, r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4a24      	ldr	r2, [pc, #144]	; (8008b80 <xTaskResumeAll+0x108>)
 8008af0:	189a      	adds	r2, r3, r2
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3304      	adds	r3, #4
 8008af6:	0019      	movs	r1, r3
 8008af8:	0010      	movs	r0, r2
 8008afa:	f7fe fd92 	bl	8007622 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b02:	4b20      	ldr	r3, [pc, #128]	; (8008b84 <xTaskResumeAll+0x10c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d302      	bcc.n	8008b12 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008b0c:	4b1e      	ldr	r3, [pc, #120]	; (8008b88 <xTaskResumeAll+0x110>)
 8008b0e:	2201      	movs	r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b12:	4b19      	ldr	r3, [pc, #100]	; (8008b78 <xTaskResumeAll+0x100>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1cb      	bne.n	8008ab2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b20:	f000 fb0c 	bl	800913c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008b24:	4b19      	ldr	r3, [pc, #100]	; (8008b8c <xTaskResumeAll+0x114>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00f      	beq.n	8008b50 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b30:	f000 f83c 	bl	8008bac <xTaskIncrementTick>
 8008b34:	1e03      	subs	r3, r0, #0
 8008b36:	d002      	beq.n	8008b3e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008b38:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <xTaskResumeAll+0x110>)
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1f2      	bne.n	8008b30 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8008b4a:	4b10      	ldr	r3, [pc, #64]	; (8008b8c <xTaskResumeAll+0x114>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b50:	4b0d      	ldr	r3, [pc, #52]	; (8008b88 <xTaskResumeAll+0x110>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b5c:	f001 f860 	bl	8009c20 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b60:	f001 f880 	bl	8009c64 <vPortExitCritical>

	return xAlreadyYielded;
 8008b64:	68bb      	ldr	r3, [r7, #8]
}
 8008b66:	0018      	movs	r0, r3
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	b004      	add	sp, #16
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	46c0      	nop			; (mov r8, r8)
 8008b70:	20000fe4 	.word	0x20000fe4
 8008b74:	20000fbc 	.word	0x20000fbc
 8008b78:	20000f7c 	.word	0x20000f7c
 8008b7c:	20000fc4 	.word	0x20000fc4
 8008b80:	20000aec 	.word	0x20000aec
 8008b84:	20000ae8 	.word	0x20000ae8
 8008b88:	20000fd0 	.word	0x20000fd0
 8008b8c:	20000fcc 	.word	0x20000fcc

08008b90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b96:	4b04      	ldr	r3, [pc, #16]	; (8008ba8 <xTaskGetTickCount+0x18>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b9c:	687b      	ldr	r3, [r7, #4]
}
 8008b9e:	0018      	movs	r0, r3
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	b002      	add	sp, #8
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	46c0      	nop			; (mov r8, r8)
 8008ba8:	20000fc0 	.word	0x20000fc0

08008bac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bb6:	4b4a      	ldr	r3, [pc, #296]	; (8008ce0 <xTaskIncrementTick+0x134>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d000      	beq.n	8008bc0 <xTaskIncrementTick+0x14>
 8008bbe:	e07e      	b.n	8008cbe <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bc0:	4b48      	ldr	r3, [pc, #288]	; (8008ce4 <xTaskIncrementTick+0x138>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bc8:	4b46      	ldr	r3, [pc, #280]	; (8008ce4 <xTaskIncrementTick+0x138>)
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d117      	bne.n	8008c04 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bd4:	4b44      	ldr	r3, [pc, #272]	; (8008ce8 <xTaskIncrementTick+0x13c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <xTaskIncrementTick+0x36>
 8008bde:	b672      	cpsid	i
 8008be0:	e7fe      	b.n	8008be0 <xTaskIncrementTick+0x34>
 8008be2:	4b41      	ldr	r3, [pc, #260]	; (8008ce8 <xTaskIncrementTick+0x13c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	4b40      	ldr	r3, [pc, #256]	; (8008cec <xTaskIncrementTick+0x140>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	4b3e      	ldr	r3, [pc, #248]	; (8008ce8 <xTaskIncrementTick+0x13c>)
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	4b3e      	ldr	r3, [pc, #248]	; (8008cec <xTaskIncrementTick+0x140>)
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	4b3e      	ldr	r3, [pc, #248]	; (8008cf0 <xTaskIncrementTick+0x144>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	4b3c      	ldr	r3, [pc, #240]	; (8008cf0 <xTaskIncrementTick+0x144>)
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	f000 fa9c 	bl	800913c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c04:	4b3b      	ldr	r3, [pc, #236]	; (8008cf4 <xTaskIncrementTick+0x148>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d349      	bcc.n	8008ca2 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c0e:	4b36      	ldr	r3, [pc, #216]	; (8008ce8 <xTaskIncrementTick+0x13c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c18:	4b36      	ldr	r3, [pc, #216]	; (8008cf4 <xTaskIncrementTick+0x148>)
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	4252      	negs	r2, r2
 8008c1e:	601a      	str	r2, [r3, #0]
					break;
 8008c20:	e03f      	b.n	8008ca2 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c22:	4b31      	ldr	r3, [pc, #196]	; (8008ce8 <xTaskIncrementTick+0x13c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d203      	bcs.n	8008c42 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c3a:	4b2e      	ldr	r3, [pc, #184]	; (8008cf4 <xTaskIncrementTick+0x148>)
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c40:	e02f      	b.n	8008ca2 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	3304      	adds	r3, #4
 8008c46:	0018      	movs	r0, r3
 8008c48:	f7fe fd43 	bl	80076d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	3318      	adds	r3, #24
 8008c58:	0018      	movs	r0, r3
 8008c5a:	f7fe fd3a 	bl	80076d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c62:	4b25      	ldr	r3, [pc, #148]	; (8008cf8 <xTaskIncrementTick+0x14c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d903      	bls.n	8008c72 <xTaskIncrementTick+0xc6>
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6e:	4b22      	ldr	r3, [pc, #136]	; (8008cf8 <xTaskIncrementTick+0x14c>)
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c76:	0013      	movs	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	189b      	adds	r3, r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4a1f      	ldr	r2, [pc, #124]	; (8008cfc <xTaskIncrementTick+0x150>)
 8008c80:	189a      	adds	r2, r3, r2
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	3304      	adds	r3, #4
 8008c86:	0019      	movs	r1, r3
 8008c88:	0010      	movs	r0, r2
 8008c8a:	f7fe fcca 	bl	8007622 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c92:	4b1b      	ldr	r3, [pc, #108]	; (8008d00 <xTaskIncrementTick+0x154>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d3b8      	bcc.n	8008c0e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ca0:	e7b5      	b.n	8008c0e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ca2:	4b17      	ldr	r3, [pc, #92]	; (8008d00 <xTaskIncrementTick+0x154>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca8:	4914      	ldr	r1, [pc, #80]	; (8008cfc <xTaskIncrementTick+0x150>)
 8008caa:	0013      	movs	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	189b      	adds	r3, r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	585b      	ldr	r3, [r3, r1]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d907      	bls.n	8008cc8 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	617b      	str	r3, [r7, #20]
 8008cbc:	e004      	b.n	8008cc8 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008cbe:	4b11      	ldr	r3, [pc, #68]	; (8008d04 <xTaskIncrementTick+0x158>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <xTaskIncrementTick+0x158>)
 8008cc6:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008cc8:	4b0f      	ldr	r3, [pc, #60]	; (8008d08 <xTaskIncrementTick+0x15c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008cd4:	697b      	ldr	r3, [r7, #20]
}
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	b006      	add	sp, #24
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	46c0      	nop			; (mov r8, r8)
 8008ce0:	20000fe4 	.word	0x20000fe4
 8008ce4:	20000fc0 	.word	0x20000fc0
 8008ce8:	20000f74 	.word	0x20000f74
 8008cec:	20000f78 	.word	0x20000f78
 8008cf0:	20000fd4 	.word	0x20000fd4
 8008cf4:	20000fdc 	.word	0x20000fdc
 8008cf8:	20000fc4 	.word	0x20000fc4
 8008cfc:	20000aec 	.word	0x20000aec
 8008d00:	20000ae8 	.word	0x20000ae8
 8008d04:	20000fcc 	.word	0x20000fcc
 8008d08:	20000fd0 	.word	0x20000fd0

08008d0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d12:	4b25      	ldr	r3, [pc, #148]	; (8008da8 <vTaskSwitchContext+0x9c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d1a:	4b24      	ldr	r3, [pc, #144]	; (8008dac <vTaskSwitchContext+0xa0>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d20:	e03d      	b.n	8008d9e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8008d22:	4b22      	ldr	r3, [pc, #136]	; (8008dac <vTaskSwitchContext+0xa0>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d28:	4b21      	ldr	r3, [pc, #132]	; (8008db0 <vTaskSwitchContext+0xa4>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	607b      	str	r3, [r7, #4]
 8008d2e:	e007      	b.n	8008d40 <vTaskSwitchContext+0x34>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <vTaskSwitchContext+0x2e>
 8008d36:	b672      	cpsid	i
 8008d38:	e7fe      	b.n	8008d38 <vTaskSwitchContext+0x2c>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	607b      	str	r3, [r7, #4]
 8008d40:	491c      	ldr	r1, [pc, #112]	; (8008db4 <vTaskSwitchContext+0xa8>)
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	0013      	movs	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	189b      	adds	r3, r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	585b      	ldr	r3, [r3, r1]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d0ee      	beq.n	8008d30 <vTaskSwitchContext+0x24>
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	0013      	movs	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	189b      	adds	r3, r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4a15      	ldr	r2, [pc, #84]	; (8008db4 <vTaskSwitchContext+0xa8>)
 8008d5e:	189b      	adds	r3, r3, r2
 8008d60:	603b      	str	r3, [r7, #0]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	605a      	str	r2, [r3, #4]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	3308      	adds	r3, #8
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d104      	bne.n	8008d82 <vTaskSwitchContext+0x76>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	605a      	str	r2, [r3, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	4b0b      	ldr	r3, [pc, #44]	; (8008db8 <vTaskSwitchContext+0xac>)
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	4b08      	ldr	r3, [pc, #32]	; (8008db0 <vTaskSwitchContext+0xa4>)
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d92:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <vTaskSwitchContext+0xac>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3354      	adds	r3, #84	; 0x54
 8008d98:	001a      	movs	r2, r3
 8008d9a:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <vTaskSwitchContext+0xb0>)
 8008d9c:	601a      	str	r2, [r3, #0]
}
 8008d9e:	46c0      	nop			; (mov r8, r8)
 8008da0:	46bd      	mov	sp, r7
 8008da2:	b002      	add	sp, #8
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	46c0      	nop			; (mov r8, r8)
 8008da8:	20000fe4 	.word	0x20000fe4
 8008dac:	20000fd0 	.word	0x20000fd0
 8008db0:	20000fc4 	.word	0x20000fc4
 8008db4:	20000aec 	.word	0x20000aec
 8008db8:	20000ae8 	.word	0x20000ae8
 8008dbc:	2000003c 	.word	0x2000003c

08008dc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <vTaskPlaceOnEventList+0x14>
 8008dd0:	b672      	cpsid	i
 8008dd2:	e7fe      	b.n	8008dd2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dd4:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <vTaskPlaceOnEventList+0x38>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3318      	adds	r3, #24
 8008dda:	001a      	movs	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	0011      	movs	r1, r2
 8008de0:	0018      	movs	r0, r3
 8008de2:	f7fe fc40 	bl	8007666 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2101      	movs	r1, #1
 8008dea:	0018      	movs	r0, r3
 8008dec:	f000 fb26 	bl	800943c <prvAddCurrentTaskToDelayedList>
}
 8008df0:	46c0      	nop			; (mov r8, r8)
 8008df2:	46bd      	mov	sp, r7
 8008df4:	b002      	add	sp, #8
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20000ae8 	.word	0x20000ae8

08008dfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <vTaskPlaceOnEventListRestricted+0x16>
 8008e0e:	b672      	cpsid	i
 8008e10:	e7fe      	b.n	8008e10 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e12:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <vTaskPlaceOnEventListRestricted+0x48>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3318      	adds	r3, #24
 8008e18:	001a      	movs	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	0011      	movs	r1, r2
 8008e1e:	0018      	movs	r0, r3
 8008e20:	f7fe fbff 	bl	8007622 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	425b      	negs	r3, r3
 8008e2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	0011      	movs	r1, r2
 8008e36:	0018      	movs	r0, r3
 8008e38:	f000 fb00 	bl	800943c <prvAddCurrentTaskToDelayedList>
	}
 8008e3c:	46c0      	nop			; (mov r8, r8)
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	b004      	add	sp, #16
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	20000ae8 	.word	0x20000ae8

08008e48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <xTaskRemoveFromEventList+0x1a>
 8008e5e:	b672      	cpsid	i
 8008e60:	e7fe      	b.n	8008e60 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	3318      	adds	r3, #24
 8008e66:	0018      	movs	r0, r3
 8008e68:	f7fe fc33 	bl	80076d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ee8 <xTaskRemoveFromEventList+0xa0>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d11d      	bne.n	8008eb0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	3304      	adds	r3, #4
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f7fe fc2a 	bl	80076d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e82:	4b1a      	ldr	r3, [pc, #104]	; (8008eec <xTaskRemoveFromEventList+0xa4>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d903      	bls.n	8008e92 <xTaskRemoveFromEventList+0x4a>
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8e:	4b17      	ldr	r3, [pc, #92]	; (8008eec <xTaskRemoveFromEventList+0xa4>)
 8008e90:	601a      	str	r2, [r3, #0]
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e96:	0013      	movs	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	189b      	adds	r3, r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4a14      	ldr	r2, [pc, #80]	; (8008ef0 <xTaskRemoveFromEventList+0xa8>)
 8008ea0:	189a      	adds	r2, r3, r2
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	0019      	movs	r1, r3
 8008ea8:	0010      	movs	r0, r2
 8008eaa:	f7fe fbba 	bl	8007622 <vListInsertEnd>
 8008eae:	e007      	b.n	8008ec0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	3318      	adds	r3, #24
 8008eb4:	001a      	movs	r2, r3
 8008eb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ef4 <xTaskRemoveFromEventList+0xac>)
 8008eb8:	0011      	movs	r1, r2
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f7fe fbb1 	bl	8007622 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec4:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <xTaskRemoveFromEventList+0xb0>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d905      	bls.n	8008eda <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ed2:	4b0a      	ldr	r3, [pc, #40]	; (8008efc <xTaskRemoveFromEventList+0xb4>)
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	e001      	b.n	8008ede <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8008eda:	2300      	movs	r3, #0
 8008edc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008ede:	68fb      	ldr	r3, [r7, #12]
}
 8008ee0:	0018      	movs	r0, r3
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	b004      	add	sp, #16
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20000fe4 	.word	0x20000fe4
 8008eec:	20000fc4 	.word	0x20000fc4
 8008ef0:	20000aec 	.word	0x20000aec
 8008ef4:	20000f7c 	.word	0x20000f7c
 8008ef8:	20000ae8 	.word	0x20000ae8
 8008efc:	20000fd0 	.word	0x20000fd0

08008f00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f08:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <vTaskInternalSetTimeOutState+0x20>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f10:	4b04      	ldr	r3, [pc, #16]	; (8008f24 <vTaskInternalSetTimeOutState+0x24>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	605a      	str	r2, [r3, #4]
}
 8008f18:	46c0      	nop			; (mov r8, r8)
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	b002      	add	sp, #8
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20000fd4 	.word	0x20000fd4
 8008f24:	20000fc0 	.word	0x20000fc0

08008f28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <xTaskCheckForTimeOut+0x14>
 8008f38:	b672      	cpsid	i
 8008f3a:	e7fe      	b.n	8008f3a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <xTaskCheckForTimeOut+0x1e>
 8008f42:	b672      	cpsid	i
 8008f44:	e7fe      	b.n	8008f44 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8008f46:	f000 fe7b 	bl	8009c40 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f4a:	4b1d      	ldr	r3, [pc, #116]	; (8008fc0 <xTaskCheckForTimeOut+0x98>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	d102      	bne.n	8008f68 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	e024      	b.n	8008fb2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	4b15      	ldr	r3, [pc, #84]	; (8008fc4 <xTaskCheckForTimeOut+0x9c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d007      	beq.n	8008f84 <xTaskCheckForTimeOut+0x5c>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d302      	bcc.n	8008f84 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	617b      	str	r3, [r7, #20]
 8008f82:	e016      	b.n	8008fb2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d20c      	bcs.n	8008fa8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	1ad2      	subs	r2, r2, r3
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f7ff ffaf 	bl	8008f00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]
 8008fa6:	e004      	b.n	8008fb2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008fb2:	f000 fe57 	bl	8009c64 <vPortExitCritical>

	return xReturn;
 8008fb6:	697b      	ldr	r3, [r7, #20]
}
 8008fb8:	0018      	movs	r0, r3
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	b006      	add	sp, #24
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20000fc0 	.word	0x20000fc0
 8008fc4:	20000fd4 	.word	0x20000fd4

08008fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008fcc:	4b02      	ldr	r3, [pc, #8]	; (8008fd8 <vTaskMissedYield+0x10>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]
}
 8008fd2:	46c0      	nop			; (mov r8, r8)
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	20000fd0 	.word	0x20000fd0

08008fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fe4:	f000 f84e 	bl	8009084 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fe8:	4b03      	ldr	r3, [pc, #12]	; (8008ff8 <prvIdleTask+0x1c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d9f9      	bls.n	8008fe4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ff0:	f000 fe16 	bl	8009c20 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008ff4:	e7f6      	b.n	8008fe4 <prvIdleTask+0x8>
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	20000aec 	.word	0x20000aec

08008ffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009002:	2300      	movs	r3, #0
 8009004:	607b      	str	r3, [r7, #4]
 8009006:	e00c      	b.n	8009022 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	0013      	movs	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	189b      	adds	r3, r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4a14      	ldr	r2, [pc, #80]	; (8009064 <prvInitialiseTaskLists+0x68>)
 8009014:	189b      	adds	r3, r3, r2
 8009016:	0018      	movs	r0, r3
 8009018:	f7fe fada 	bl	80075d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3301      	adds	r3, #1
 8009020:	607b      	str	r3, [r7, #4]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b37      	cmp	r3, #55	; 0x37
 8009026:	d9ef      	bls.n	8009008 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009028:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <prvInitialiseTaskLists+0x6c>)
 800902a:	0018      	movs	r0, r3
 800902c:	f7fe fad0 	bl	80075d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009030:	4b0e      	ldr	r3, [pc, #56]	; (800906c <prvInitialiseTaskLists+0x70>)
 8009032:	0018      	movs	r0, r3
 8009034:	f7fe facc 	bl	80075d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009038:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <prvInitialiseTaskLists+0x74>)
 800903a:	0018      	movs	r0, r3
 800903c:	f7fe fac8 	bl	80075d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009040:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <prvInitialiseTaskLists+0x78>)
 8009042:	0018      	movs	r0, r3
 8009044:	f7fe fac4 	bl	80075d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009048:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <prvInitialiseTaskLists+0x7c>)
 800904a:	0018      	movs	r0, r3
 800904c:	f7fe fac0 	bl	80075d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009050:	4b0a      	ldr	r3, [pc, #40]	; (800907c <prvInitialiseTaskLists+0x80>)
 8009052:	4a05      	ldr	r2, [pc, #20]	; (8009068 <prvInitialiseTaskLists+0x6c>)
 8009054:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009056:	4b0a      	ldr	r3, [pc, #40]	; (8009080 <prvInitialiseTaskLists+0x84>)
 8009058:	4a04      	ldr	r2, [pc, #16]	; (800906c <prvInitialiseTaskLists+0x70>)
 800905a:	601a      	str	r2, [r3, #0]
}
 800905c:	46c0      	nop			; (mov r8, r8)
 800905e:	46bd      	mov	sp, r7
 8009060:	b002      	add	sp, #8
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20000aec 	.word	0x20000aec
 8009068:	20000f4c 	.word	0x20000f4c
 800906c:	20000f60 	.word	0x20000f60
 8009070:	20000f7c 	.word	0x20000f7c
 8009074:	20000f90 	.word	0x20000f90
 8009078:	20000fa8 	.word	0x20000fa8
 800907c:	20000f74 	.word	0x20000f74
 8009080:	20000f78 	.word	0x20000f78

08009084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800908a:	e01a      	b.n	80090c2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800908c:	f000 fdd8 	bl	8009c40 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009090:	4b10      	ldr	r3, [pc, #64]	; (80090d4 <prvCheckTasksWaitingTermination+0x50>)
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3304      	adds	r3, #4
 800909c:	0018      	movs	r0, r3
 800909e:	f7fe fb18 	bl	80076d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090a2:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <prvCheckTasksWaitingTermination+0x54>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	1e5a      	subs	r2, r3, #1
 80090a8:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <prvCheckTasksWaitingTermination+0x54>)
 80090aa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090ac:	4b0b      	ldr	r3, [pc, #44]	; (80090dc <prvCheckTasksWaitingTermination+0x58>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	1e5a      	subs	r2, r3, #1
 80090b2:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <prvCheckTasksWaitingTermination+0x58>)
 80090b4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80090b6:	f000 fdd5 	bl	8009c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	0018      	movs	r0, r3
 80090be:	f000 f80f 	bl	80090e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090c2:	4b06      	ldr	r3, [pc, #24]	; (80090dc <prvCheckTasksWaitingTermination+0x58>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e0      	bne.n	800908c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090ca:	46c0      	nop			; (mov r8, r8)
 80090cc:	46c0      	nop			; (mov r8, r8)
 80090ce:	46bd      	mov	sp, r7
 80090d0:	b002      	add	sp, #8
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	20000f90 	.word	0x20000f90
 80090d8:	20000fbc 	.word	0x20000fbc
 80090dc:	20000fa4 	.word	0x20000fa4

080090e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3354      	adds	r3, #84	; 0x54
 80090ec:	0018      	movs	r0, r3
 80090ee:	f002 f8d7 	bl	800b2a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	22b9      	movs	r2, #185	; 0xb9
 80090f6:	5c9b      	ldrb	r3, [r3, r2]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d109      	bne.n	8009110 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009100:	0018      	movs	r0, r3
 8009102:	f000 fedb 	bl	8009ebc <vPortFree>
				vPortFree( pxTCB );
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	0018      	movs	r0, r3
 800910a:	f000 fed7 	bl	8009ebc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800910e:	e010      	b.n	8009132 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	22b9      	movs	r2, #185	; 0xb9
 8009114:	5c9b      	ldrb	r3, [r3, r2]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d104      	bne.n	8009124 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	0018      	movs	r0, r3
 800911e:	f000 fecd 	bl	8009ebc <vPortFree>
	}
 8009122:	e006      	b.n	8009132 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	22b9      	movs	r2, #185	; 0xb9
 8009128:	5c9b      	ldrb	r3, [r3, r2]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d001      	beq.n	8009132 <prvDeleteTCB+0x52>
 800912e:	b672      	cpsid	i
 8009130:	e7fe      	b.n	8009130 <prvDeleteTCB+0x50>
	}
 8009132:	46c0      	nop			; (mov r8, r8)
 8009134:	46bd      	mov	sp, r7
 8009136:	b002      	add	sp, #8
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009142:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <prvResetNextTaskUnblockTime+0x34>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d104      	bne.n	8009156 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800914c:	4b09      	ldr	r3, [pc, #36]	; (8009174 <prvResetNextTaskUnblockTime+0x38>)
 800914e:	2201      	movs	r2, #1
 8009150:	4252      	negs	r2, r2
 8009152:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009154:	e008      	b.n	8009168 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009156:	4b06      	ldr	r3, [pc, #24]	; (8009170 <prvResetNextTaskUnblockTime+0x34>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	4b03      	ldr	r3, [pc, #12]	; (8009174 <prvResetNextTaskUnblockTime+0x38>)
 8009166:	601a      	str	r2, [r3, #0]
}
 8009168:	46c0      	nop			; (mov r8, r8)
 800916a:	46bd      	mov	sp, r7
 800916c:	b002      	add	sp, #8
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20000f74 	.word	0x20000f74
 8009174:	20000fdc 	.word	0x20000fdc

08009178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800917e:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <xTaskGetSchedulerState+0x30>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009186:	2301      	movs	r3, #1
 8009188:	607b      	str	r3, [r7, #4]
 800918a:	e008      	b.n	800919e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800918c:	4b07      	ldr	r3, [pc, #28]	; (80091ac <xTaskGetSchedulerState+0x34>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d102      	bne.n	800919a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009194:	2302      	movs	r3, #2
 8009196:	607b      	str	r3, [r7, #4]
 8009198:	e001      	b.n	800919e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800919a:	2300      	movs	r3, #0
 800919c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800919e:	687b      	ldr	r3, [r7, #4]
	}
 80091a0:	0018      	movs	r0, r3
 80091a2:	46bd      	mov	sp, r7
 80091a4:	b002      	add	sp, #8
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	20000fc8 	.word	0x20000fc8
 80091ac:	20000fe4 	.word	0x20000fe4

080091b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80091bc:	2300      	movs	r3, #0
 80091be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d051      	beq.n	800926a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ca:	4b2a      	ldr	r3, [pc, #168]	; (8009274 <xTaskPriorityInherit+0xc4>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d241      	bcs.n	8009258 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	db06      	blt.n	80091ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091dc:	4b25      	ldr	r3, [pc, #148]	; (8009274 <xTaskPriorityInherit+0xc4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	2238      	movs	r2, #56	; 0x38
 80091e4:	1ad2      	subs	r2, r2, r3
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	6959      	ldr	r1, [r3, #20]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f2:	0013      	movs	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	189b      	adds	r3, r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4a1f      	ldr	r2, [pc, #124]	; (8009278 <xTaskPriorityInherit+0xc8>)
 80091fc:	189b      	adds	r3, r3, r2
 80091fe:	4299      	cmp	r1, r3
 8009200:	d122      	bne.n	8009248 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	3304      	adds	r3, #4
 8009206:	0018      	movs	r0, r3
 8009208:	f7fe fa63 	bl	80076d2 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800920c:	4b19      	ldr	r3, [pc, #100]	; (8009274 <xTaskPriorityInherit+0xc4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921a:	4b18      	ldr	r3, [pc, #96]	; (800927c <xTaskPriorityInherit+0xcc>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d903      	bls.n	800922a <xTaskPriorityInherit+0x7a>
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009226:	4b15      	ldr	r3, [pc, #84]	; (800927c <xTaskPriorityInherit+0xcc>)
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922e:	0013      	movs	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	189b      	adds	r3, r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4a10      	ldr	r2, [pc, #64]	; (8009278 <xTaskPriorityInherit+0xc8>)
 8009238:	189a      	adds	r2, r3, r2
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	3304      	adds	r3, #4
 800923e:	0019      	movs	r1, r3
 8009240:	0010      	movs	r0, r2
 8009242:	f7fe f9ee 	bl	8007622 <vListInsertEnd>
 8009246:	e004      	b.n	8009252 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009248:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <xTaskPriorityInherit+0xc4>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009252:	2301      	movs	r3, #1
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	e008      	b.n	800926a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <xTaskPriorityInherit+0xc4>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009262:	429a      	cmp	r2, r3
 8009264:	d201      	bcs.n	800926a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009266:	2301      	movs	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800926a:	68fb      	ldr	r3, [r7, #12]
	}
 800926c:	0018      	movs	r0, r3
 800926e:	46bd      	mov	sp, r7
 8009270:	b004      	add	sp, #16
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20000ae8 	.word	0x20000ae8
 8009278:	20000aec 	.word	0x20000aec
 800927c:	20000fc4 	.word	0x20000fc4

08009280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d044      	beq.n	8009320 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009296:	4b25      	ldr	r3, [pc, #148]	; (800932c <xTaskPriorityDisinherit+0xac>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	429a      	cmp	r2, r3
 800929e:	d001      	beq.n	80092a4 <xTaskPriorityDisinherit+0x24>
 80092a0:	b672      	cpsid	i
 80092a2:	e7fe      	b.n	80092a2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <xTaskPriorityDisinherit+0x30>
 80092ac:	b672      	cpsid	i
 80092ae:	e7fe      	b.n	80092ae <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b4:	1e5a      	subs	r2, r3, #1
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d02c      	beq.n	8009320 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d128      	bne.n	8009320 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	3304      	adds	r3, #4
 80092d2:	0018      	movs	r0, r3
 80092d4:	f7fe f9fd 	bl	80076d2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	2238      	movs	r2, #56	; 0x38
 80092e6:	1ad2      	subs	r2, r2, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f0:	4b0f      	ldr	r3, [pc, #60]	; (8009330 <xTaskPriorityDisinherit+0xb0>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d903      	bls.n	8009300 <xTaskPriorityDisinherit+0x80>
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fc:	4b0c      	ldr	r3, [pc, #48]	; (8009330 <xTaskPriorityDisinherit+0xb0>)
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009304:	0013      	movs	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	189b      	adds	r3, r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4a09      	ldr	r2, [pc, #36]	; (8009334 <xTaskPriorityDisinherit+0xb4>)
 800930e:	189a      	adds	r2, r3, r2
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	3304      	adds	r3, #4
 8009314:	0019      	movs	r1, r3
 8009316:	0010      	movs	r0, r2
 8009318:	f7fe f983 	bl	8007622 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800931c:	2301      	movs	r3, #1
 800931e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009320:	68fb      	ldr	r3, [r7, #12]
	}
 8009322:	0018      	movs	r0, r3
 8009324:	46bd      	mov	sp, r7
 8009326:	b004      	add	sp, #16
 8009328:	bd80      	pop	{r7, pc}
 800932a:	46c0      	nop			; (mov r8, r8)
 800932c:	20000ae8 	.word	0x20000ae8
 8009330:	20000fc4 	.word	0x20000fc4
 8009334:	20000aec 	.word	0x20000aec

08009338 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009346:	2301      	movs	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d058      	beq.n	8009402 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <vTaskPriorityDisinheritAfterTimeout+0x24>
 8009358:	b672      	cpsid	i
 800935a:	e7fe      	b.n	800935a <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d902      	bls.n	800936c <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	e002      	b.n	8009372 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009370:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	429a      	cmp	r2, r3
 800937a:	d042      	beq.n	8009402 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	429a      	cmp	r2, r3
 8009384:	d13d      	bne.n	8009402 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009386:	4b21      	ldr	r3, [pc, #132]	; (800940c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	429a      	cmp	r2, r3
 800938e:	d101      	bne.n	8009394 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8009390:	b672      	cpsid	i
 8009392:	e7fe      	b.n	8009392 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	db04      	blt.n	80093b2 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2238      	movs	r2, #56	; 0x38
 80093ac:	1ad2      	subs	r2, r2, r3
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	6959      	ldr	r1, [r3, #20]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	0013      	movs	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	189b      	adds	r3, r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4a13      	ldr	r2, [pc, #76]	; (8009410 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80093c2:	189b      	adds	r3, r3, r2
 80093c4:	4299      	cmp	r1, r3
 80093c6:	d11c      	bne.n	8009402 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	3304      	adds	r3, #4
 80093cc:	0018      	movs	r0, r3
 80093ce:	f7fe f980 	bl	80076d2 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d6:	4b0f      	ldr	r3, [pc, #60]	; (8009414 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d903      	bls.n	80093e6 <vTaskPriorityDisinheritAfterTimeout+0xae>
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e2:	4b0c      	ldr	r3, [pc, #48]	; (8009414 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ea:	0013      	movs	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	189b      	adds	r3, r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4a07      	ldr	r2, [pc, #28]	; (8009410 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80093f4:	189a      	adds	r2, r3, r2
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	3304      	adds	r3, #4
 80093fa:	0019      	movs	r1, r3
 80093fc:	0010      	movs	r0, r2
 80093fe:	f7fe f910 	bl	8007622 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009402:	46c0      	nop			; (mov r8, r8)
 8009404:	46bd      	mov	sp, r7
 8009406:	b006      	add	sp, #24
 8009408:	bd80      	pop	{r7, pc}
 800940a:	46c0      	nop			; (mov r8, r8)
 800940c:	20000ae8 	.word	0x20000ae8
 8009410:	20000aec 	.word	0x20000aec
 8009414:	20000fc4 	.word	0x20000fc4

08009418 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009418:	b580      	push	{r7, lr}
 800941a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <pvTaskIncrementMutexHeldCount+0x20>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d004      	beq.n	800942e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009424:	4b04      	ldr	r3, [pc, #16]	; (8009438 <pvTaskIncrementMutexHeldCount+0x20>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800942a:	3201      	adds	r2, #1
 800942c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800942e:	4b02      	ldr	r3, [pc, #8]	; (8009438 <pvTaskIncrementMutexHeldCount+0x20>)
 8009430:	681b      	ldr	r3, [r3, #0]
	}
 8009432:	0018      	movs	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	20000ae8 	.word	0x20000ae8

0800943c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009446:	4b21      	ldr	r3, [pc, #132]	; (80094cc <prvAddCurrentTaskToDelayedList+0x90>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800944c:	4b20      	ldr	r3, [pc, #128]	; (80094d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3304      	adds	r3, #4
 8009452:	0018      	movs	r0, r3
 8009454:	f7fe f93d 	bl	80076d2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3301      	adds	r3, #1
 800945c:	d10b      	bne.n	8009476 <prvAddCurrentTaskToDelayedList+0x3a>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d008      	beq.n	8009476 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009464:	4b1a      	ldr	r3, [pc, #104]	; (80094d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	1d1a      	adds	r2, r3, #4
 800946a:	4b1a      	ldr	r3, [pc, #104]	; (80094d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800946c:	0011      	movs	r1, r2
 800946e:	0018      	movs	r0, r3
 8009470:	f7fe f8d7 	bl	8007622 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009474:	e026      	b.n	80094c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	18d3      	adds	r3, r2, r3
 800947c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800947e:	4b14      	ldr	r3, [pc, #80]	; (80094d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	429a      	cmp	r2, r3
 800948c:	d209      	bcs.n	80094a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800948e:	4b12      	ldr	r3, [pc, #72]	; (80094d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	4b0f      	ldr	r3, [pc, #60]	; (80094d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3304      	adds	r3, #4
 8009498:	0019      	movs	r1, r3
 800949a:	0010      	movs	r0, r2
 800949c:	f7fe f8e3 	bl	8007666 <vListInsert>
}
 80094a0:	e010      	b.n	80094c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094a2:	4b0e      	ldr	r3, [pc, #56]	; (80094dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	4b0a      	ldr	r3, [pc, #40]	; (80094d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3304      	adds	r3, #4
 80094ac:	0019      	movs	r1, r3
 80094ae:	0010      	movs	r0, r2
 80094b0:	f7fe f8d9 	bl	8007666 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094b4:	4b0a      	ldr	r3, [pc, #40]	; (80094e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d202      	bcs.n	80094c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094be:	4b08      	ldr	r3, [pc, #32]	; (80094e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	601a      	str	r2, [r3, #0]
}
 80094c4:	46c0      	nop			; (mov r8, r8)
 80094c6:	46bd      	mov	sp, r7
 80094c8:	b004      	add	sp, #16
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20000fc0 	.word	0x20000fc0
 80094d0:	20000ae8 	.word	0x20000ae8
 80094d4:	20000fa8 	.word	0x20000fa8
 80094d8:	20000f78 	.word	0x20000f78
 80094dc:	20000f74 	.word	0x20000f74
 80094e0:	20000fdc 	.word	0x20000fdc

080094e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094e4:	b590      	push	{r4, r7, lr}
 80094e6:	b089      	sub	sp, #36	; 0x24
 80094e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094ee:	f000 fac9 	bl	8009a84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094f2:	4b17      	ldr	r3, [pc, #92]	; (8009550 <xTimerCreateTimerTask+0x6c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d020      	beq.n	800953c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094fe:	2300      	movs	r3, #0
 8009500:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009502:	003a      	movs	r2, r7
 8009504:	1d39      	adds	r1, r7, #4
 8009506:	2308      	movs	r3, #8
 8009508:	18fb      	adds	r3, r7, r3
 800950a:	0018      	movs	r0, r3
 800950c:	f7fe f848 	bl	80075a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009510:	683c      	ldr	r4, [r7, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	490f      	ldr	r1, [pc, #60]	; (8009554 <xTimerCreateTimerTask+0x70>)
 8009518:	480f      	ldr	r0, [pc, #60]	; (8009558 <xTimerCreateTimerTask+0x74>)
 800951a:	9202      	str	r2, [sp, #8]
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	2302      	movs	r3, #2
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	2300      	movs	r3, #0
 8009524:	0022      	movs	r2, r4
 8009526:	f7fe ffa4 	bl	8008472 <xTaskCreateStatic>
 800952a:	0002      	movs	r2, r0
 800952c:	4b0b      	ldr	r3, [pc, #44]	; (800955c <xTimerCreateTimerTask+0x78>)
 800952e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009530:	4b0a      	ldr	r3, [pc, #40]	; (800955c <xTimerCreateTimerTask+0x78>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8009538:	2301      	movs	r3, #1
 800953a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <xTimerCreateTimerTask+0x62>
 8009542:	b672      	cpsid	i
 8009544:	e7fe      	b.n	8009544 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8009546:	68fb      	ldr	r3, [r7, #12]
}
 8009548:	0018      	movs	r0, r3
 800954a:	46bd      	mov	sp, r7
 800954c:	b005      	add	sp, #20
 800954e:	bd90      	pop	{r4, r7, pc}
 8009550:	20001018 	.word	0x20001018
 8009554:	0800eee8 	.word	0x0800eee8
 8009558:	0800967d 	.word	0x0800967d
 800955c:	2000101c 	.word	0x2000101c

08009560 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009560:	b590      	push	{r4, r7, lr}
 8009562:	b08b      	sub	sp, #44	; 0x2c
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800956e:	2300      	movs	r3, #0
 8009570:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <xTimerGenericCommand+0x1c>
 8009578:	b672      	cpsid	i
 800957a:	e7fe      	b.n	800957a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800957c:	4b1c      	ldr	r3, [pc, #112]	; (80095f0 <xTimerGenericCommand+0x90>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d030      	beq.n	80095e6 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009584:	2414      	movs	r4, #20
 8009586:	193b      	adds	r3, r7, r4
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800958c:	193b      	adds	r3, r7, r4
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009592:	193b      	adds	r3, r7, r4
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2b05      	cmp	r3, #5
 800959c:	dc19      	bgt.n	80095d2 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800959e:	f7ff fdeb 	bl	8009178 <xTaskGetSchedulerState>
 80095a2:	0003      	movs	r3, r0
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d109      	bne.n	80095bc <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095a8:	4b11      	ldr	r3, [pc, #68]	; (80095f0 <xTimerGenericCommand+0x90>)
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095ae:	1939      	adds	r1, r7, r4
 80095b0:	2300      	movs	r3, #0
 80095b2:	f7fe f9fe 	bl	80079b2 <xQueueGenericSend>
 80095b6:	0003      	movs	r3, r0
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
 80095ba:	e014      	b.n	80095e6 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095bc:	4b0c      	ldr	r3, [pc, #48]	; (80095f0 <xTimerGenericCommand+0x90>)
 80095be:	6818      	ldr	r0, [r3, #0]
 80095c0:	2314      	movs	r3, #20
 80095c2:	18f9      	adds	r1, r7, r3
 80095c4:	2300      	movs	r3, #0
 80095c6:	2200      	movs	r2, #0
 80095c8:	f7fe f9f3 	bl	80079b2 <xQueueGenericSend>
 80095cc:	0003      	movs	r3, r0
 80095ce:	627b      	str	r3, [r7, #36]	; 0x24
 80095d0:	e009      	b.n	80095e6 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095d2:	4b07      	ldr	r3, [pc, #28]	; (80095f0 <xTimerGenericCommand+0x90>)
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	2314      	movs	r3, #20
 80095da:	18f9      	adds	r1, r7, r3
 80095dc:	2300      	movs	r3, #0
 80095de:	f7fe faac 	bl	8007b3a <xQueueGenericSendFromISR>
 80095e2:	0003      	movs	r3, r0
 80095e4:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095e8:	0018      	movs	r0, r3
 80095ea:	46bd      	mov	sp, r7
 80095ec:	b00b      	add	sp, #44	; 0x2c
 80095ee:	bd90      	pop	{r4, r7, pc}
 80095f0:	20001018 	.word	0x20001018

080095f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af02      	add	r7, sp, #8
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fe:	4b1e      	ldr	r3, [pc, #120]	; (8009678 <prvProcessExpiredTimer+0x84>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	3304      	adds	r3, #4
 800960c:	0018      	movs	r0, r3
 800960e:	f7fe f860 	bl	80076d2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2228      	movs	r2, #40	; 0x28
 8009616:	5c9b      	ldrb	r3, [r3, r2]
 8009618:	001a      	movs	r2, r3
 800961a:	2304      	movs	r3, #4
 800961c:	4013      	ands	r3, r2
 800961e:	d019      	beq.n	8009654 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	699a      	ldr	r2, [r3, #24]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	18d1      	adds	r1, r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 f8c3 	bl	80097b8 <prvInsertTimerInActiveList>
 8009632:	1e03      	subs	r3, r0, #0
 8009634:	d017      	beq.n	8009666 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	2300      	movs	r3, #0
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	2300      	movs	r3, #0
 8009640:	2100      	movs	r1, #0
 8009642:	f7ff ff8d 	bl	8009560 <xTimerGenericCommand>
 8009646:	0003      	movs	r3, r0
 8009648:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <prvProcessExpiredTimer+0x72>
 8009650:	b672      	cpsid	i
 8009652:	e7fe      	b.n	8009652 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2228      	movs	r2, #40	; 0x28
 8009658:	5c9b      	ldrb	r3, [r3, r2]
 800965a:	2201      	movs	r2, #1
 800965c:	4393      	bics	r3, r2
 800965e:	b2d9      	uxtb	r1, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2228      	movs	r2, #40	; 0x28
 8009664:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	0010      	movs	r0, r2
 800966e:	4798      	blx	r3
}
 8009670:	46c0      	nop			; (mov r8, r8)
 8009672:	46bd      	mov	sp, r7
 8009674:	b004      	add	sp, #16
 8009676:	bd80      	pop	{r7, pc}
 8009678:	20001010 	.word	0x20001010

0800967c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009684:	2308      	movs	r3, #8
 8009686:	18fb      	adds	r3, r7, r3
 8009688:	0018      	movs	r0, r3
 800968a:	f000 f853 	bl	8009734 <prvGetNextExpireTime>
 800968e:	0003      	movs	r3, r0
 8009690:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	0011      	movs	r1, r2
 8009698:	0018      	movs	r0, r3
 800969a:	f000 f803 	bl	80096a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800969e:	f000 f8cd 	bl	800983c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096a2:	e7ef      	b.n	8009684 <prvTimerTask+0x8>

080096a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096ae:	f7ff f9d7 	bl	8008a60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096b2:	2308      	movs	r3, #8
 80096b4:	18fb      	adds	r3, r7, r3
 80096b6:	0018      	movs	r0, r3
 80096b8:	f000 f85e 	bl	8009778 <prvSampleTimeNow>
 80096bc:	0003      	movs	r3, r0
 80096be:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d12b      	bne.n	800971e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10c      	bne.n	80096e6 <prvProcessTimerOrBlockTask+0x42>
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d808      	bhi.n	80096e6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80096d4:	f7ff f9d0 	bl	8008a78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	0011      	movs	r1, r2
 80096de:	0018      	movs	r0, r3
 80096e0:	f7ff ff88 	bl	80095f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096e4:	e01d      	b.n	8009722 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d008      	beq.n	80096fe <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80096ec:	4b0f      	ldr	r3, [pc, #60]	; (800972c <prvProcessTimerOrBlockTask+0x88>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <prvProcessTimerOrBlockTask+0x56>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e000      	b.n	80096fc <prvProcessTimerOrBlockTask+0x58>
 80096fa:	2300      	movs	r3, #0
 80096fc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096fe:	4b0c      	ldr	r3, [pc, #48]	; (8009730 <prvProcessTimerOrBlockTask+0x8c>)
 8009700:	6818      	ldr	r0, [r3, #0]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	0019      	movs	r1, r3
 800970c:	f7fe fe7e 	bl	800840c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009710:	f7ff f9b2 	bl	8008a78 <xTaskResumeAll>
 8009714:	1e03      	subs	r3, r0, #0
 8009716:	d104      	bne.n	8009722 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8009718:	f000 fa82 	bl	8009c20 <vPortYield>
}
 800971c:	e001      	b.n	8009722 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800971e:	f7ff f9ab 	bl	8008a78 <xTaskResumeAll>
}
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	46bd      	mov	sp, r7
 8009726:	b004      	add	sp, #16
 8009728:	bd80      	pop	{r7, pc}
 800972a:	46c0      	nop			; (mov r8, r8)
 800972c:	20001014 	.word	0x20001014
 8009730:	20001018 	.word	0x20001018

08009734 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800973c:	4b0d      	ldr	r3, [pc, #52]	; (8009774 <prvGetNextExpireTime+0x40>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <prvGetNextExpireTime+0x16>
 8009746:	2201      	movs	r2, #1
 8009748:	e000      	b.n	800974c <prvGetNextExpireTime+0x18>
 800974a:	2200      	movs	r2, #0
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d105      	bne.n	8009764 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009758:	4b06      	ldr	r3, [pc, #24]	; (8009774 <prvGetNextExpireTime+0x40>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	e001      	b.n	8009768 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009764:	2300      	movs	r3, #0
 8009766:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009768:	68fb      	ldr	r3, [r7, #12]
}
 800976a:	0018      	movs	r0, r3
 800976c:	46bd      	mov	sp, r7
 800976e:	b004      	add	sp, #16
 8009770:	bd80      	pop	{r7, pc}
 8009772:	46c0      	nop			; (mov r8, r8)
 8009774:	20001010 	.word	0x20001010

08009778 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009780:	f7ff fa06 	bl	8008b90 <xTaskGetTickCount>
 8009784:	0003      	movs	r3, r0
 8009786:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8009788:	4b0a      	ldr	r3, [pc, #40]	; (80097b4 <prvSampleTimeNow+0x3c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	429a      	cmp	r2, r3
 8009790:	d205      	bcs.n	800979e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8009792:	f000 f919 	bl	80099c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	e002      	b.n	80097a4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097a4:	4b03      	ldr	r3, [pc, #12]	; (80097b4 <prvSampleTimeNow+0x3c>)
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80097aa:	68fb      	ldr	r3, [r7, #12]
}
 80097ac:	0018      	movs	r0, r3
 80097ae:	46bd      	mov	sp, r7
 80097b0:	b004      	add	sp, #16
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	20001020 	.word	0x20001020

080097b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d812      	bhi.n	8009804 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	1ad2      	subs	r2, r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d302      	bcc.n	80097f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097ec:	2301      	movs	r3, #1
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	e01b      	b.n	800982a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097f2:	4b10      	ldr	r3, [pc, #64]	; (8009834 <prvInsertTimerInActiveList+0x7c>)
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3304      	adds	r3, #4
 80097fa:	0019      	movs	r1, r3
 80097fc:	0010      	movs	r0, r2
 80097fe:	f7fd ff32 	bl	8007666 <vListInsert>
 8009802:	e012      	b.n	800982a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	429a      	cmp	r2, r3
 800980a:	d206      	bcs.n	800981a <prvInsertTimerInActiveList+0x62>
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	429a      	cmp	r2, r3
 8009812:	d302      	bcc.n	800981a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009814:	2301      	movs	r3, #1
 8009816:	617b      	str	r3, [r7, #20]
 8009818:	e007      	b.n	800982a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800981a:	4b07      	ldr	r3, [pc, #28]	; (8009838 <prvInsertTimerInActiveList+0x80>)
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	3304      	adds	r3, #4
 8009822:	0019      	movs	r1, r3
 8009824:	0010      	movs	r0, r2
 8009826:	f7fd ff1e 	bl	8007666 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800982a:	697b      	ldr	r3, [r7, #20]
}
 800982c:	0018      	movs	r0, r3
 800982e:	46bd      	mov	sp, r7
 8009830:	b006      	add	sp, #24
 8009832:	bd80      	pop	{r7, pc}
 8009834:	20001014 	.word	0x20001014
 8009838:	20001010 	.word	0x20001010

0800983c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800983c:	b590      	push	{r4, r7, lr}
 800983e:	b08d      	sub	sp, #52	; 0x34
 8009840:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009842:	e0ac      	b.n	800999e <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009844:	2208      	movs	r2, #8
 8009846:	18bb      	adds	r3, r7, r2
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	da0f      	bge.n	800986e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800984e:	18bb      	adds	r3, r7, r2
 8009850:	3304      	adds	r3, #4
 8009852:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <prvProcessReceivedCommands+0x22>
 800985a:	b672      	cpsid	i
 800985c:	e7fe      	b.n	800985c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	6858      	ldr	r0, [r3, #4]
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	0019      	movs	r1, r3
 800986c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800986e:	2208      	movs	r2, #8
 8009870:	18bb      	adds	r3, r7, r2
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	da00      	bge.n	800987a <prvProcessReceivedCommands+0x3e>
 8009878:	e090      	b.n	800999c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800987a:	18bb      	adds	r3, r7, r2
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d004      	beq.n	8009892 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009888:	6a3b      	ldr	r3, [r7, #32]
 800988a:	3304      	adds	r3, #4
 800988c:	0018      	movs	r0, r3
 800988e:	f7fd ff20 	bl	80076d2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009892:	1d3b      	adds	r3, r7, #4
 8009894:	0018      	movs	r0, r3
 8009896:	f7ff ff6f 	bl	8009778 <prvSampleTimeNow>
 800989a:	0003      	movs	r3, r0
 800989c:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800989e:	2308      	movs	r3, #8
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b09      	cmp	r3, #9
 80098a6:	d900      	bls.n	80098aa <prvProcessReceivedCommands+0x6e>
 80098a8:	e079      	b.n	800999e <prvProcessReceivedCommands+0x162>
 80098aa:	009a      	lsls	r2, r3, #2
 80098ac:	4b44      	ldr	r3, [pc, #272]	; (80099c0 <prvProcessReceivedCommands+0x184>)
 80098ae:	18d3      	adds	r3, r2, r3
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	2228      	movs	r2, #40	; 0x28
 80098b8:	5c9b      	ldrb	r3, [r3, r2]
 80098ba:	2201      	movs	r2, #1
 80098bc:	4313      	orrs	r3, r2
 80098be:	b2d9      	uxtb	r1, r3
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	2228      	movs	r2, #40	; 0x28
 80098c4:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098c6:	2408      	movs	r4, #8
 80098c8:	193b      	adds	r3, r7, r4
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	18d1      	adds	r1, r2, r3
 80098d2:	193b      	adds	r3, r7, r4
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	6a38      	ldr	r0, [r7, #32]
 80098da:	f7ff ff6d 	bl	80097b8 <prvInsertTimerInActiveList>
 80098de:	1e03      	subs	r3, r0, #0
 80098e0:	d05d      	beq.n	800999e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	6a3a      	ldr	r2, [r7, #32]
 80098e8:	0010      	movs	r0, r2
 80098ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	2228      	movs	r2, #40	; 0x28
 80098f0:	5c9b      	ldrb	r3, [r3, r2]
 80098f2:	001a      	movs	r2, r3
 80098f4:	2304      	movs	r3, #4
 80098f6:	4013      	ands	r3, r2
 80098f8:	d051      	beq.n	800999e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098fa:	193b      	adds	r3, r7, r4
 80098fc:	685a      	ldr	r2, [r3, #4]
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	18d2      	adds	r2, r2, r3
 8009904:	6a38      	ldr	r0, [r7, #32]
 8009906:	2300      	movs	r3, #0
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	2300      	movs	r3, #0
 800990c:	2100      	movs	r1, #0
 800990e:	f7ff fe27 	bl	8009560 <xTimerGenericCommand>
 8009912:	0003      	movs	r3, r0
 8009914:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d140      	bne.n	800999e <prvProcessReceivedCommands+0x162>
 800991c:	b672      	cpsid	i
 800991e:	e7fe      	b.n	800991e <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	2228      	movs	r2, #40	; 0x28
 8009924:	5c9b      	ldrb	r3, [r3, r2]
 8009926:	2201      	movs	r2, #1
 8009928:	4393      	bics	r3, r2
 800992a:	b2d9      	uxtb	r1, r3
 800992c:	6a3b      	ldr	r3, [r7, #32]
 800992e:	2228      	movs	r2, #40	; 0x28
 8009930:	5499      	strb	r1, [r3, r2]
					break;
 8009932:	e034      	b.n	800999e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	2228      	movs	r2, #40	; 0x28
 8009938:	5c9b      	ldrb	r3, [r3, r2]
 800993a:	2201      	movs	r2, #1
 800993c:	4313      	orrs	r3, r2
 800993e:	b2d9      	uxtb	r1, r3
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	2228      	movs	r2, #40	; 0x28
 8009944:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009946:	2308      	movs	r3, #8
 8009948:	18fb      	adds	r3, r7, r3
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d101      	bne.n	800995c <prvProcessReceivedCommands+0x120>
 8009958:	b672      	cpsid	i
 800995a:	e7fe      	b.n	800995a <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	699a      	ldr	r2, [r3, #24]
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	18d1      	adds	r1, r2, r3
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	6a38      	ldr	r0, [r7, #32]
 800996a:	f7ff ff25 	bl	80097b8 <prvInsertTimerInActiveList>
					break;
 800996e:	e016      	b.n	800999e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	2228      	movs	r2, #40	; 0x28
 8009974:	5c9b      	ldrb	r3, [r3, r2]
 8009976:	001a      	movs	r2, r3
 8009978:	2302      	movs	r3, #2
 800997a:	4013      	ands	r3, r2
 800997c:	d104      	bne.n	8009988 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	0018      	movs	r0, r3
 8009982:	f000 fa9b 	bl	8009ebc <vPortFree>
 8009986:	e00a      	b.n	800999e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	2228      	movs	r2, #40	; 0x28
 800998c:	5c9b      	ldrb	r3, [r3, r2]
 800998e:	2201      	movs	r2, #1
 8009990:	4393      	bics	r3, r2
 8009992:	b2d9      	uxtb	r1, r3
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	2228      	movs	r2, #40	; 0x28
 8009998:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800999a:	e000      	b.n	800999e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800999c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800999e:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <prvProcessReceivedCommands+0x188>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2208      	movs	r2, #8
 80099a4:	18b9      	adds	r1, r7, r2
 80099a6:	2200      	movs	r2, #0
 80099a8:	0018      	movs	r0, r3
 80099aa:	f7fe f99c 	bl	8007ce6 <xQueueReceive>
 80099ae:	1e03      	subs	r3, r0, #0
 80099b0:	d000      	beq.n	80099b4 <prvProcessReceivedCommands+0x178>
 80099b2:	e747      	b.n	8009844 <prvProcessReceivedCommands+0x8>
	}
}
 80099b4:	46c0      	nop			; (mov r8, r8)
 80099b6:	46c0      	nop			; (mov r8, r8)
 80099b8:	46bd      	mov	sp, r7
 80099ba:	b00b      	add	sp, #44	; 0x2c
 80099bc:	bd90      	pop	{r4, r7, pc}
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	0800f148 	.word	0x0800f148
 80099c4:	20001018 	.word	0x20001018

080099c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099ce:	e041      	b.n	8009a54 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099d0:	4b2a      	ldr	r3, [pc, #168]	; (8009a7c <prvSwitchTimerLists+0xb4>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099da:	4b28      	ldr	r3, [pc, #160]	; (8009a7c <prvSwitchTimerLists+0xb4>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	3304      	adds	r3, #4
 80099e8:	0018      	movs	r0, r3
 80099ea:	f7fd fe72 	bl	80076d2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	0010      	movs	r0, r2
 80099f6:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2228      	movs	r2, #40	; 0x28
 80099fc:	5c9b      	ldrb	r3, [r3, r2]
 80099fe:	001a      	movs	r2, r3
 8009a00:	2304      	movs	r3, #4
 8009a02:	4013      	ands	r3, r2
 8009a04:	d026      	beq.n	8009a54 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	18d3      	adds	r3, r2, r3
 8009a0e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d90e      	bls.n	8009a36 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a24:	4b15      	ldr	r3, [pc, #84]	; (8009a7c <prvSwitchTimerLists+0xb4>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	0019      	movs	r1, r3
 8009a2e:	0010      	movs	r0, r2
 8009a30:	f7fd fe19 	bl	8007666 <vListInsert>
 8009a34:	e00e      	b.n	8009a54 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	2100      	movs	r1, #0
 8009a42:	f7ff fd8d 	bl	8009560 <xTimerGenericCommand>
 8009a46:	0003      	movs	r3, r0
 8009a48:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <prvSwitchTimerLists+0x8c>
 8009a50:	b672      	cpsid	i
 8009a52:	e7fe      	b.n	8009a52 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a54:	4b09      	ldr	r3, [pc, #36]	; (8009a7c <prvSwitchTimerLists+0xb4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1b8      	bne.n	80099d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a5e:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <prvSwitchTimerLists+0xb4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a64:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <prvSwitchTimerLists+0xb8>)
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	4b04      	ldr	r3, [pc, #16]	; (8009a7c <prvSwitchTimerLists+0xb4>)
 8009a6a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8009a6c:	4b04      	ldr	r3, [pc, #16]	; (8009a80 <prvSwitchTimerLists+0xb8>)
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	601a      	str	r2, [r3, #0]
}
 8009a72:	46c0      	nop			; (mov r8, r8)
 8009a74:	46bd      	mov	sp, r7
 8009a76:	b006      	add	sp, #24
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	46c0      	nop			; (mov r8, r8)
 8009a7c:	20001010 	.word	0x20001010
 8009a80:	20001014 	.word	0x20001014

08009a84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a8a:	f000 f8d9 	bl	8009c40 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a8e:	4b16      	ldr	r3, [pc, #88]	; (8009ae8 <prvCheckForValidListAndQueue+0x64>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d123      	bne.n	8009ade <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a96:	4b15      	ldr	r3, [pc, #84]	; (8009aec <prvCheckForValidListAndQueue+0x68>)
 8009a98:	0018      	movs	r0, r3
 8009a9a:	f7fd fd99 	bl	80075d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a9e:	4b14      	ldr	r3, [pc, #80]	; (8009af0 <prvCheckForValidListAndQueue+0x6c>)
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	f7fd fd95 	bl	80075d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009aa6:	4b13      	ldr	r3, [pc, #76]	; (8009af4 <prvCheckForValidListAndQueue+0x70>)
 8009aa8:	4a10      	ldr	r2, [pc, #64]	; (8009aec <prvCheckForValidListAndQueue+0x68>)
 8009aaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009aac:	4b12      	ldr	r3, [pc, #72]	; (8009af8 <prvCheckForValidListAndQueue+0x74>)
 8009aae:	4a10      	ldr	r2, [pc, #64]	; (8009af0 <prvCheckForValidListAndQueue+0x6c>)
 8009ab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ab2:	4b12      	ldr	r3, [pc, #72]	; (8009afc <prvCheckForValidListAndQueue+0x78>)
 8009ab4:	4a12      	ldr	r2, [pc, #72]	; (8009b00 <prvCheckForValidListAndQueue+0x7c>)
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	9100      	str	r1, [sp, #0]
 8009aba:	2110      	movs	r1, #16
 8009abc:	200a      	movs	r0, #10
 8009abe:	f7fd fe84 	bl	80077ca <xQueueGenericCreateStatic>
 8009ac2:	0002      	movs	r2, r0
 8009ac4:	4b08      	ldr	r3, [pc, #32]	; (8009ae8 <prvCheckForValidListAndQueue+0x64>)
 8009ac6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ac8:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <prvCheckForValidListAndQueue+0x64>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d006      	beq.n	8009ade <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <prvCheckForValidListAndQueue+0x64>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a0b      	ldr	r2, [pc, #44]	; (8009b04 <prvCheckForValidListAndQueue+0x80>)
 8009ad6:	0011      	movs	r1, r2
 8009ad8:	0018      	movs	r0, r3
 8009ada:	f7fe fc45 	bl	8008368 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ade:	f000 f8c1 	bl	8009c64 <vPortExitCritical>
}
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	20001018 	.word	0x20001018
 8009aec:	20000fe8 	.word	0x20000fe8
 8009af0:	20000ffc 	.word	0x20000ffc
 8009af4:	20001010 	.word	0x20001010
 8009af8:	20001014 	.word	0x20001014
 8009afc:	200010c4 	.word	0x200010c4
 8009b00:	20001024 	.word	0x20001024
 8009b04:	0800eef0 	.word	0x0800eef0

08009b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3b04      	subs	r3, #4
 8009b18:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2280      	movs	r2, #128	; 0x80
 8009b1e:	0452      	lsls	r2, r2, #17
 8009b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3b04      	subs	r3, #4
 8009b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3b04      	subs	r3, #4
 8009b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b34:	4a08      	ldr	r2, [pc, #32]	; (8009b58 <pxPortInitialiseStack+0x50>)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3b14      	subs	r3, #20
 8009b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3b20      	subs	r3, #32
 8009b4a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
}
 8009b4e:	0018      	movs	r0, r3
 8009b50:	46bd      	mov	sp, r7
 8009b52:	b004      	add	sp, #16
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	46c0      	nop			; (mov r8, r8)
 8009b58:	08009b5d 	.word	0x08009b5d

08009b5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b66:	4b08      	ldr	r3, [pc, #32]	; (8009b88 <prvTaskExitError+0x2c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	d001      	beq.n	8009b72 <prvTaskExitError+0x16>
 8009b6e:	b672      	cpsid	i
 8009b70:	e7fe      	b.n	8009b70 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8009b72:	b672      	cpsid	i
	while( ulDummy == 0 )
 8009b74:	46c0      	nop			; (mov r8, r8)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d0fc      	beq.n	8009b76 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b7c:	46c0      	nop			; (mov r8, r8)
 8009b7e:	46c0      	nop			; (mov r8, r8)
 8009b80:	46bd      	mov	sp, r7
 8009b82:	b002      	add	sp, #8
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	46c0      	nop			; (mov r8, r8)
 8009b88:	20000038 	.word	0x20000038

08009b8c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009b90:	46c0      	nop			; (mov r8, r8)
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009ba0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8009ba0:	4a0b      	ldr	r2, [pc, #44]	; (8009bd0 <pxCurrentTCBConst2>)
 8009ba2:	6813      	ldr	r3, [r2, #0]
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	3020      	adds	r0, #32
 8009ba8:	f380 8809 	msr	PSP, r0
 8009bac:	2002      	movs	r0, #2
 8009bae:	f380 8814 	msr	CONTROL, r0
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8009bb8:	46ae      	mov	lr, r5
 8009bba:	bc08      	pop	{r3}
 8009bbc:	bc04      	pop	{r2}
 8009bbe:	b662      	cpsie	i
 8009bc0:	4718      	bx	r3
 8009bc2:	46c0      	nop			; (mov r8, r8)
 8009bc4:	46c0      	nop			; (mov r8, r8)
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	46c0      	nop			; (mov r8, r8)
 8009bca:	46c0      	nop			; (mov r8, r8)
 8009bcc:	46c0      	nop			; (mov r8, r8)
 8009bce:	46c0      	nop			; (mov r8, r8)

08009bd0 <pxCurrentTCBConst2>:
 8009bd0:	20000ae8 	.word	0x20000ae8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8009bd4:	46c0      	nop			; (mov r8, r8)
 8009bd6:	46c0      	nop			; (mov r8, r8)

08009bd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8009bdc:	4b0e      	ldr	r3, [pc, #56]	; (8009c18 <xPortStartScheduler+0x40>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <xPortStartScheduler+0x40>)
 8009be2:	21ff      	movs	r1, #255	; 0xff
 8009be4:	0409      	lsls	r1, r1, #16
 8009be6:	430a      	orrs	r2, r1
 8009be8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8009bea:	4b0b      	ldr	r3, [pc, #44]	; (8009c18 <xPortStartScheduler+0x40>)
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <xPortStartScheduler+0x40>)
 8009bf0:	21ff      	movs	r1, #255	; 0xff
 8009bf2:	0609      	lsls	r1, r1, #24
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8009bf8:	f000 f898 	bl	8009d2c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009bfc:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <xPortStartScheduler+0x44>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009c02:	f7ff ffcd 	bl	8009ba0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c06:	f7ff f881 	bl	8008d0c <vTaskSwitchContext>
	prvTaskExitError();
 8009c0a:	f7ff ffa7 	bl	8009b5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	0018      	movs	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	46c0      	nop			; (mov r8, r8)
 8009c18:	e000ed20 	.word	0xe000ed20
 8009c1c:	20000038 	.word	0x20000038

08009c20 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8009c24:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <vPortYield+0x1c>)
 8009c26:	2280      	movs	r2, #128	; 0x80
 8009c28:	0552      	lsls	r2, r2, #21
 8009c2a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8009c2c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009c30:	f3bf 8f6f 	isb	sy
}
 8009c34:	46c0      	nop			; (mov r8, r8)
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	46c0      	nop			; (mov r8, r8)
 8009c3c:	e000ed04 	.word	0xe000ed04

08009c40 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8009c44:	b672      	cpsid	i
    uxCriticalNesting++;
 8009c46:	4b06      	ldr	r3, [pc, #24]	; (8009c60 <vPortEnterCritical+0x20>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	4b04      	ldr	r3, [pc, #16]	; (8009c60 <vPortEnterCritical+0x20>)
 8009c4e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009c50:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009c54:	f3bf 8f6f 	isb	sy
}
 8009c58:	46c0      	nop			; (mov r8, r8)
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	46c0      	nop			; (mov r8, r8)
 8009c60:	20000038 	.word	0x20000038

08009c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c68:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <vPortExitCritical+0x2c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <vPortExitCritical+0x10>
 8009c70:	b672      	cpsid	i
 8009c72:	e7fe      	b.n	8009c72 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8009c74:	4b06      	ldr	r3, [pc, #24]	; (8009c90 <vPortExitCritical+0x2c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	1e5a      	subs	r2, r3, #1
 8009c7a:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <vPortExitCritical+0x2c>)
 8009c7c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8009c7e:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <vPortExitCritical+0x2c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d100      	bne.n	8009c88 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8009c86:	b662      	cpsie	i
    }
}
 8009c88:	46c0      	nop			; (mov r8, r8)
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	46c0      	nop			; (mov r8, r8)
 8009c90:	20000038 	.word	0x20000038

08009c94 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009c94:	f3ef 8010 	mrs	r0, PRIMASK
 8009c98:	b672      	cpsid	i
 8009c9a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8009c9c:	46c0      	nop			; (mov r8, r8)
 8009c9e:	0018      	movs	r0, r3

08009ca0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009ca0:	f380 8810 	msr	PRIMASK, r0
 8009ca4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8009ca6:	46c0      	nop			; (mov r8, r8)
	...

08009cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009cb0:	f3ef 8009 	mrs	r0, PSP
 8009cb4:	4b0e      	ldr	r3, [pc, #56]	; (8009cf0 <pxCurrentTCBConst>)
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	3820      	subs	r0, #32
 8009cba:	6010      	str	r0, [r2, #0]
 8009cbc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009cbe:	4644      	mov	r4, r8
 8009cc0:	464d      	mov	r5, r9
 8009cc2:	4656      	mov	r6, sl
 8009cc4:	465f      	mov	r7, fp
 8009cc6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009cc8:	b508      	push	{r3, lr}
 8009cca:	b672      	cpsid	i
 8009ccc:	f7ff f81e 	bl	8008d0c <vTaskSwitchContext>
 8009cd0:	b662      	cpsie	i
 8009cd2:	bc0c      	pop	{r2, r3}
 8009cd4:	6811      	ldr	r1, [r2, #0]
 8009cd6:	6808      	ldr	r0, [r1, #0]
 8009cd8:	3010      	adds	r0, #16
 8009cda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8009cdc:	46a0      	mov	r8, r4
 8009cde:	46a9      	mov	r9, r5
 8009ce0:	46b2      	mov	sl, r6
 8009ce2:	46bb      	mov	fp, r7
 8009ce4:	f380 8809 	msr	PSP, r0
 8009ce8:	3820      	subs	r0, #32
 8009cea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8009cec:	4718      	bx	r3
 8009cee:	46c0      	nop			; (mov r8, r8)

08009cf0 <pxCurrentTCBConst>:
 8009cf0:	20000ae8 	.word	0x20000ae8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8009cf4:	46c0      	nop			; (mov r8, r8)
 8009cf6:	46c0      	nop			; (mov r8, r8)

08009cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8009cfe:	f7ff ffc9 	bl	8009c94 <ulSetInterruptMaskFromISR>
 8009d02:	0003      	movs	r3, r0
 8009d04:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d06:	f7fe ff51 	bl	8008bac <xTaskIncrementTick>
 8009d0a:	1e03      	subs	r3, r0, #0
 8009d0c:	d003      	beq.n	8009d16 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8009d0e:	4b06      	ldr	r3, [pc, #24]	; (8009d28 <SysTick_Handler+0x30>)
 8009d10:	2280      	movs	r2, #128	; 0x80
 8009d12:	0552      	lsls	r2, r2, #21
 8009d14:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	0018      	movs	r0, r3
 8009d1a:	f7ff ffc1 	bl	8009ca0 <vClearInterruptMaskFromISR>
}
 8009d1e:	46c0      	nop			; (mov r8, r8)
 8009d20:	46bd      	mov	sp, r7
 8009d22:	b002      	add	sp, #8
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	46c0      	nop			; (mov r8, r8)
 8009d28:	e000ed04 	.word	0xe000ed04

08009d2c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8009d30:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <prvSetupTimerInterrupt+0x34>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8009d36:	4b0b      	ldr	r3, [pc, #44]	; (8009d64 <prvSetupTimerInterrupt+0x38>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d3c:	4b0a      	ldr	r3, [pc, #40]	; (8009d68 <prvSetupTimerInterrupt+0x3c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	22fa      	movs	r2, #250	; 0xfa
 8009d42:	0091      	lsls	r1, r2, #2
 8009d44:	0018      	movs	r0, r3
 8009d46:	f7f6 f9fb 	bl	8000140 <__udivsi3>
 8009d4a:	0003      	movs	r3, r0
 8009d4c:	001a      	movs	r2, r3
 8009d4e:	4b07      	ldr	r3, [pc, #28]	; (8009d6c <prvSetupTimerInterrupt+0x40>)
 8009d50:	3a01      	subs	r2, #1
 8009d52:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8009d54:	4b02      	ldr	r3, [pc, #8]	; (8009d60 <prvSetupTimerInterrupt+0x34>)
 8009d56:	2207      	movs	r2, #7
 8009d58:	601a      	str	r2, [r3, #0]
}
 8009d5a:	46c0      	nop			; (mov r8, r8)
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	e000e010 	.word	0xe000e010
 8009d64:	e000e018 	.word	0xe000e018
 8009d68:	2000002c 	.word	0x2000002c
 8009d6c:	e000e014 	.word	0xe000e014

08009d70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8009d7c:	f7fe fe70 	bl	8008a60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d80:	4b49      	ldr	r3, [pc, #292]	; (8009ea8 <pvPortMalloc+0x138>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d88:	f000 f8e0 	bl	8009f4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d8c:	4b47      	ldr	r3, [pc, #284]	; (8009eac <pvPortMalloc+0x13c>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	4013      	ands	r3, r2
 8009d94:	d000      	beq.n	8009d98 <pvPortMalloc+0x28>
 8009d96:	e079      	b.n	8009e8c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d012      	beq.n	8009dc4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8009d9e:	2208      	movs	r2, #8
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	189b      	adds	r3, r3, r2
 8009da4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2207      	movs	r2, #7
 8009daa:	4013      	ands	r3, r2
 8009dac:	d00a      	beq.n	8009dc4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2207      	movs	r2, #7
 8009db2:	4393      	bics	r3, r2
 8009db4:	3308      	adds	r3, #8
 8009db6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2207      	movs	r2, #7
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	d001      	beq.n	8009dc4 <pvPortMalloc+0x54>
 8009dc0:	b672      	cpsid	i
 8009dc2:	e7fe      	b.n	8009dc2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d060      	beq.n	8009e8c <pvPortMalloc+0x11c>
 8009dca:	4b39      	ldr	r3, [pc, #228]	; (8009eb0 <pvPortMalloc+0x140>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d85b      	bhi.n	8009e8c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009dd4:	4b37      	ldr	r3, [pc, #220]	; (8009eb4 <pvPortMalloc+0x144>)
 8009dd6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009dd8:	4b36      	ldr	r3, [pc, #216]	; (8009eb4 <pvPortMalloc+0x144>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dde:	e004      	b.n	8009dea <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d903      	bls.n	8009dfc <pvPortMalloc+0x8c>
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1f1      	bne.n	8009de0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009dfc:	4b2a      	ldr	r3, [pc, #168]	; (8009ea8 <pvPortMalloc+0x138>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d042      	beq.n	8009e8c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2208      	movs	r2, #8
 8009e0c:	189b      	adds	r3, r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	1ad2      	subs	r2, r2, r3
 8009e20:	2308      	movs	r3, #8
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d916      	bls.n	8009e56 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	18d3      	adds	r3, r2, r3
 8009e2e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2207      	movs	r2, #7
 8009e34:	4013      	ands	r3, r2
 8009e36:	d001      	beq.n	8009e3c <pvPortMalloc+0xcc>
 8009e38:	b672      	cpsid	i
 8009e3a:	e7fe      	b.n	8009e3a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	1ad2      	subs	r2, r2, r3
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	0018      	movs	r0, r3
 8009e52:	f000 f8db 	bl	800a00c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e56:	4b16      	ldr	r3, [pc, #88]	; (8009eb0 <pvPortMalloc+0x140>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	4b13      	ldr	r3, [pc, #76]	; (8009eb0 <pvPortMalloc+0x140>)
 8009e62:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e64:	4b12      	ldr	r3, [pc, #72]	; (8009eb0 <pvPortMalloc+0x140>)
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	4b13      	ldr	r3, [pc, #76]	; (8009eb8 <pvPortMalloc+0x148>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d203      	bcs.n	8009e78 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e70:	4b0f      	ldr	r3, [pc, #60]	; (8009eb0 <pvPortMalloc+0x140>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	4b10      	ldr	r3, [pc, #64]	; (8009eb8 <pvPortMalloc+0x148>)
 8009e76:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	4b0b      	ldr	r3, [pc, #44]	; (8009eac <pvPortMalloc+0x13c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	431a      	orrs	r2, r3
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e8c:	f7fe fdf4 	bl	8008a78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2207      	movs	r2, #7
 8009e94:	4013      	ands	r3, r2
 8009e96:	d001      	beq.n	8009e9c <pvPortMalloc+0x12c>
 8009e98:	b672      	cpsid	i
 8009e9a:	e7fe      	b.n	8009e9a <pvPortMalloc+0x12a>
	return pvReturn;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
}
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	b006      	add	sp, #24
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	46c0      	nop			; (mov r8, r8)
 8009ea8:	20001d1c 	.word	0x20001d1c
 8009eac:	20001d28 	.word	0x20001d28
 8009eb0:	20001d20 	.word	0x20001d20
 8009eb4:	20001d14 	.word	0x20001d14
 8009eb8:	20001d24 	.word	0x20001d24

08009ebc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d035      	beq.n	8009f3a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ece:	2308      	movs	r3, #8
 8009ed0:	425b      	negs	r3, r3
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	18d3      	adds	r3, r2, r3
 8009ed6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	4b18      	ldr	r3, [pc, #96]	; (8009f44 <vPortFree+0x88>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	d101      	bne.n	8009eec <vPortFree+0x30>
 8009ee8:	b672      	cpsid	i
 8009eea:	e7fe      	b.n	8009eea <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <vPortFree+0x3c>
 8009ef4:	b672      	cpsid	i
 8009ef6:	e7fe      	b.n	8009ef6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	4b11      	ldr	r3, [pc, #68]	; (8009f44 <vPortFree+0x88>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4013      	ands	r3, r2
 8009f02:	d01a      	beq.n	8009f3a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d116      	bne.n	8009f3a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	4b0c      	ldr	r3, [pc, #48]	; (8009f44 <vPortFree+0x88>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	43db      	mvns	r3, r3
 8009f16:	401a      	ands	r2, r3
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f1c:	f7fe fda0 	bl	8008a60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	4b08      	ldr	r3, [pc, #32]	; (8009f48 <vPortFree+0x8c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	18d2      	adds	r2, r2, r3
 8009f2a:	4b07      	ldr	r3, [pc, #28]	; (8009f48 <vPortFree+0x8c>)
 8009f2c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	0018      	movs	r0, r3
 8009f32:	f000 f86b 	bl	800a00c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f36:	f7fe fd9f 	bl	8008a78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f3a:	46c0      	nop			; (mov r8, r8)
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	b004      	add	sp, #16
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	46c0      	nop			; (mov r8, r8)
 8009f44:	20001d28 	.word	0x20001d28
 8009f48:	20001d20 	.word	0x20001d20

08009f4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f52:	23c0      	movs	r3, #192	; 0xc0
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f58:	4b26      	ldr	r3, [pc, #152]	; (8009ff4 <prvHeapInit+0xa8>)
 8009f5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2207      	movs	r2, #7
 8009f60:	4013      	ands	r3, r2
 8009f62:	d00c      	beq.n	8009f7e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	3307      	adds	r3, #7
 8009f68:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2207      	movs	r2, #7
 8009f6e:	4393      	bics	r3, r2
 8009f70:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	1ad2      	subs	r2, r2, r3
 8009f78:	4b1e      	ldr	r3, [pc, #120]	; (8009ff4 <prvHeapInit+0xa8>)
 8009f7a:	18d3      	adds	r3, r2, r3
 8009f7c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f82:	4b1d      	ldr	r3, [pc, #116]	; (8009ff8 <prvHeapInit+0xac>)
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f88:	4b1b      	ldr	r3, [pc, #108]	; (8009ff8 <prvHeapInit+0xac>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	18d3      	adds	r3, r2, r3
 8009f94:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f96:	2208      	movs	r2, #8
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	1a9b      	subs	r3, r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2207      	movs	r2, #7
 8009fa2:	4393      	bics	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	4b14      	ldr	r3, [pc, #80]	; (8009ffc <prvHeapInit+0xb0>)
 8009faa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8009fac:	4b13      	ldr	r3, [pc, #76]	; (8009ffc <prvHeapInit+0xb0>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fb4:	4b11      	ldr	r3, [pc, #68]	; (8009ffc <prvHeapInit+0xb0>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	1ad2      	subs	r2, r2, r3
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fca:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <prvHeapInit+0xb0>)
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	4b0a      	ldr	r3, [pc, #40]	; (800a000 <prvHeapInit+0xb4>)
 8009fd8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	4b09      	ldr	r3, [pc, #36]	; (800a004 <prvHeapInit+0xb8>)
 8009fe0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fe2:	4b09      	ldr	r3, [pc, #36]	; (800a008 <prvHeapInit+0xbc>)
 8009fe4:	2280      	movs	r2, #128	; 0x80
 8009fe6:	0612      	lsls	r2, r2, #24
 8009fe8:	601a      	str	r2, [r3, #0]
}
 8009fea:	46c0      	nop			; (mov r8, r8)
 8009fec:	46bd      	mov	sp, r7
 8009fee:	b004      	add	sp, #16
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	46c0      	nop			; (mov r8, r8)
 8009ff4:	20001114 	.word	0x20001114
 8009ff8:	20001d14 	.word	0x20001d14
 8009ffc:	20001d1c 	.word	0x20001d1c
 800a000:	20001d24 	.word	0x20001d24
 800a004:	20001d20 	.word	0x20001d20
 800a008:	20001d28 	.word	0x20001d28

0800a00c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a014:	4b27      	ldr	r3, [pc, #156]	; (800a0b4 <prvInsertBlockIntoFreeList+0xa8>)
 800a016:	60fb      	str	r3, [r7, #12]
 800a018:	e002      	b.n	800a020 <prvInsertBlockIntoFreeList+0x14>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	60fb      	str	r3, [r7, #12]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	429a      	cmp	r2, r3
 800a028:	d8f7      	bhi.n	800a01a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	18d3      	adds	r3, r2, r3
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d108      	bne.n	800a04e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	18d2      	adds	r2, r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	18d2      	adds	r2, r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d118      	bne.n	800a094 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	4b14      	ldr	r3, [pc, #80]	; (800a0b8 <prvInsertBlockIntoFreeList+0xac>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d00d      	beq.n	800a08a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	18d2      	adds	r2, r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	e008      	b.n	800a09c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a08a:	4b0b      	ldr	r3, [pc, #44]	; (800a0b8 <prvInsertBlockIntoFreeList+0xac>)
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	e003      	b.n	800a09c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d002      	beq.n	800a0aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0aa:	46c0      	nop			; (mov r8, r8)
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	b004      	add	sp, #16
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	46c0      	nop			; (mov r8, r8)
 800a0b4:	20001d14 	.word	0x20001d14
 800a0b8:	20001d1c 	.word	0x20001d1c

0800a0bc <__errno>:
 800a0bc:	4b01      	ldr	r3, [pc, #4]	; (800a0c4 <__errno+0x8>)
 800a0be:	6818      	ldr	r0, [r3, #0]
 800a0c0:	4770      	bx	lr
 800a0c2:	46c0      	nop			; (mov r8, r8)
 800a0c4:	2000003c 	.word	0x2000003c

0800a0c8 <std>:
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	b510      	push	{r4, lr}
 800a0cc:	0004      	movs	r4, r0
 800a0ce:	6003      	str	r3, [r0, #0]
 800a0d0:	6043      	str	r3, [r0, #4]
 800a0d2:	6083      	str	r3, [r0, #8]
 800a0d4:	8181      	strh	r1, [r0, #12]
 800a0d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a0d8:	0019      	movs	r1, r3
 800a0da:	81c2      	strh	r2, [r0, #14]
 800a0dc:	6103      	str	r3, [r0, #16]
 800a0de:	6143      	str	r3, [r0, #20]
 800a0e0:	6183      	str	r3, [r0, #24]
 800a0e2:	2208      	movs	r2, #8
 800a0e4:	305c      	adds	r0, #92	; 0x5c
 800a0e6:	f000 f921 	bl	800a32c <memset>
 800a0ea:	4b05      	ldr	r3, [pc, #20]	; (800a100 <std+0x38>)
 800a0ec:	6224      	str	r4, [r4, #32]
 800a0ee:	6263      	str	r3, [r4, #36]	; 0x24
 800a0f0:	4b04      	ldr	r3, [pc, #16]	; (800a104 <std+0x3c>)
 800a0f2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0f4:	4b04      	ldr	r3, [pc, #16]	; (800a108 <std+0x40>)
 800a0f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0f8:	4b04      	ldr	r3, [pc, #16]	; (800a10c <std+0x44>)
 800a0fa:	6323      	str	r3, [r4, #48]	; 0x30
 800a0fc:	bd10      	pop	{r4, pc}
 800a0fe:	46c0      	nop			; (mov r8, r8)
 800a100:	0800b3d9 	.word	0x0800b3d9
 800a104:	0800b401 	.word	0x0800b401
 800a108:	0800b439 	.word	0x0800b439
 800a10c:	0800b465 	.word	0x0800b465

0800a110 <_cleanup_r>:
 800a110:	b510      	push	{r4, lr}
 800a112:	4902      	ldr	r1, [pc, #8]	; (800a11c <_cleanup_r+0xc>)
 800a114:	f000 f8ba 	bl	800a28c <_fwalk_reent>
 800a118:	bd10      	pop	{r4, pc}
 800a11a:	46c0      	nop			; (mov r8, r8)
 800a11c:	0800d249 	.word	0x0800d249

0800a120 <__sfmoreglue>:
 800a120:	b570      	push	{r4, r5, r6, lr}
 800a122:	2568      	movs	r5, #104	; 0x68
 800a124:	1e4a      	subs	r2, r1, #1
 800a126:	4355      	muls	r5, r2
 800a128:	000e      	movs	r6, r1
 800a12a:	0029      	movs	r1, r5
 800a12c:	3174      	adds	r1, #116	; 0x74
 800a12e:	f000 f927 	bl	800a380 <_malloc_r>
 800a132:	1e04      	subs	r4, r0, #0
 800a134:	d008      	beq.n	800a148 <__sfmoreglue+0x28>
 800a136:	2100      	movs	r1, #0
 800a138:	002a      	movs	r2, r5
 800a13a:	6001      	str	r1, [r0, #0]
 800a13c:	6046      	str	r6, [r0, #4]
 800a13e:	300c      	adds	r0, #12
 800a140:	60a0      	str	r0, [r4, #8]
 800a142:	3268      	adds	r2, #104	; 0x68
 800a144:	f000 f8f2 	bl	800a32c <memset>
 800a148:	0020      	movs	r0, r4
 800a14a:	bd70      	pop	{r4, r5, r6, pc}

0800a14c <__sfp_lock_acquire>:
 800a14c:	b510      	push	{r4, lr}
 800a14e:	4802      	ldr	r0, [pc, #8]	; (800a158 <__sfp_lock_acquire+0xc>)
 800a150:	f000 f8e1 	bl	800a316 <__retarget_lock_acquire_recursive>
 800a154:	bd10      	pop	{r4, pc}
 800a156:	46c0      	nop			; (mov r8, r8)
 800a158:	20001d2d 	.word	0x20001d2d

0800a15c <__sfp_lock_release>:
 800a15c:	b510      	push	{r4, lr}
 800a15e:	4802      	ldr	r0, [pc, #8]	; (800a168 <__sfp_lock_release+0xc>)
 800a160:	f000 f8da 	bl	800a318 <__retarget_lock_release_recursive>
 800a164:	bd10      	pop	{r4, pc}
 800a166:	46c0      	nop			; (mov r8, r8)
 800a168:	20001d2d 	.word	0x20001d2d

0800a16c <__sinit_lock_acquire>:
 800a16c:	b510      	push	{r4, lr}
 800a16e:	4802      	ldr	r0, [pc, #8]	; (800a178 <__sinit_lock_acquire+0xc>)
 800a170:	f000 f8d1 	bl	800a316 <__retarget_lock_acquire_recursive>
 800a174:	bd10      	pop	{r4, pc}
 800a176:	46c0      	nop			; (mov r8, r8)
 800a178:	20001d2e 	.word	0x20001d2e

0800a17c <__sinit_lock_release>:
 800a17c:	b510      	push	{r4, lr}
 800a17e:	4802      	ldr	r0, [pc, #8]	; (800a188 <__sinit_lock_release+0xc>)
 800a180:	f000 f8ca 	bl	800a318 <__retarget_lock_release_recursive>
 800a184:	bd10      	pop	{r4, pc}
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	20001d2e 	.word	0x20001d2e

0800a18c <__sinit>:
 800a18c:	b513      	push	{r0, r1, r4, lr}
 800a18e:	0004      	movs	r4, r0
 800a190:	f7ff ffec 	bl	800a16c <__sinit_lock_acquire>
 800a194:	69a3      	ldr	r3, [r4, #24]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d002      	beq.n	800a1a0 <__sinit+0x14>
 800a19a:	f7ff ffef 	bl	800a17c <__sinit_lock_release>
 800a19e:	bd13      	pop	{r0, r1, r4, pc}
 800a1a0:	64a3      	str	r3, [r4, #72]	; 0x48
 800a1a2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a1a4:	6523      	str	r3, [r4, #80]	; 0x50
 800a1a6:	4b13      	ldr	r3, [pc, #76]	; (800a1f4 <__sinit+0x68>)
 800a1a8:	4a13      	ldr	r2, [pc, #76]	; (800a1f8 <__sinit+0x6c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	d101      	bne.n	800a1b8 <__sinit+0x2c>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	61a3      	str	r3, [r4, #24]
 800a1b8:	0020      	movs	r0, r4
 800a1ba:	f000 f81f 	bl	800a1fc <__sfp>
 800a1be:	6060      	str	r0, [r4, #4]
 800a1c0:	0020      	movs	r0, r4
 800a1c2:	f000 f81b 	bl	800a1fc <__sfp>
 800a1c6:	60a0      	str	r0, [r4, #8]
 800a1c8:	0020      	movs	r0, r4
 800a1ca:	f000 f817 	bl	800a1fc <__sfp>
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2104      	movs	r1, #4
 800a1d2:	60e0      	str	r0, [r4, #12]
 800a1d4:	6860      	ldr	r0, [r4, #4]
 800a1d6:	f7ff ff77 	bl	800a0c8 <std>
 800a1da:	2201      	movs	r2, #1
 800a1dc:	2109      	movs	r1, #9
 800a1de:	68a0      	ldr	r0, [r4, #8]
 800a1e0:	f7ff ff72 	bl	800a0c8 <std>
 800a1e4:	2202      	movs	r2, #2
 800a1e6:	2112      	movs	r1, #18
 800a1e8:	68e0      	ldr	r0, [r4, #12]
 800a1ea:	f7ff ff6d 	bl	800a0c8 <std>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	61a3      	str	r3, [r4, #24]
 800a1f2:	e7d2      	b.n	800a19a <__sinit+0xe>
 800a1f4:	0800f1d0 	.word	0x0800f1d0
 800a1f8:	0800a111 	.word	0x0800a111

0800a1fc <__sfp>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	0007      	movs	r7, r0
 800a200:	f7ff ffa4 	bl	800a14c <__sfp_lock_acquire>
 800a204:	4b1f      	ldr	r3, [pc, #124]	; (800a284 <__sfp+0x88>)
 800a206:	681e      	ldr	r6, [r3, #0]
 800a208:	69b3      	ldr	r3, [r6, #24]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d102      	bne.n	800a214 <__sfp+0x18>
 800a20e:	0030      	movs	r0, r6
 800a210:	f7ff ffbc 	bl	800a18c <__sinit>
 800a214:	3648      	adds	r6, #72	; 0x48
 800a216:	68b4      	ldr	r4, [r6, #8]
 800a218:	6873      	ldr	r3, [r6, #4]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	d504      	bpl.n	800a228 <__sfp+0x2c>
 800a21e:	6833      	ldr	r3, [r6, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d022      	beq.n	800a26a <__sfp+0x6e>
 800a224:	6836      	ldr	r6, [r6, #0]
 800a226:	e7f6      	b.n	800a216 <__sfp+0x1a>
 800a228:	220c      	movs	r2, #12
 800a22a:	5ea5      	ldrsh	r5, [r4, r2]
 800a22c:	2d00      	cmp	r5, #0
 800a22e:	d11a      	bne.n	800a266 <__sfp+0x6a>
 800a230:	0020      	movs	r0, r4
 800a232:	4b15      	ldr	r3, [pc, #84]	; (800a288 <__sfp+0x8c>)
 800a234:	3058      	adds	r0, #88	; 0x58
 800a236:	60e3      	str	r3, [r4, #12]
 800a238:	6665      	str	r5, [r4, #100]	; 0x64
 800a23a:	f000 f86b 	bl	800a314 <__retarget_lock_init_recursive>
 800a23e:	f7ff ff8d 	bl	800a15c <__sfp_lock_release>
 800a242:	0020      	movs	r0, r4
 800a244:	2208      	movs	r2, #8
 800a246:	0029      	movs	r1, r5
 800a248:	6025      	str	r5, [r4, #0]
 800a24a:	60a5      	str	r5, [r4, #8]
 800a24c:	6065      	str	r5, [r4, #4]
 800a24e:	6125      	str	r5, [r4, #16]
 800a250:	6165      	str	r5, [r4, #20]
 800a252:	61a5      	str	r5, [r4, #24]
 800a254:	305c      	adds	r0, #92	; 0x5c
 800a256:	f000 f869 	bl	800a32c <memset>
 800a25a:	6365      	str	r5, [r4, #52]	; 0x34
 800a25c:	63a5      	str	r5, [r4, #56]	; 0x38
 800a25e:	64a5      	str	r5, [r4, #72]	; 0x48
 800a260:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a262:	0020      	movs	r0, r4
 800a264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a266:	3468      	adds	r4, #104	; 0x68
 800a268:	e7d7      	b.n	800a21a <__sfp+0x1e>
 800a26a:	2104      	movs	r1, #4
 800a26c:	0038      	movs	r0, r7
 800a26e:	f7ff ff57 	bl	800a120 <__sfmoreglue>
 800a272:	1e04      	subs	r4, r0, #0
 800a274:	6030      	str	r0, [r6, #0]
 800a276:	d1d5      	bne.n	800a224 <__sfp+0x28>
 800a278:	f7ff ff70 	bl	800a15c <__sfp_lock_release>
 800a27c:	230c      	movs	r3, #12
 800a27e:	603b      	str	r3, [r7, #0]
 800a280:	e7ef      	b.n	800a262 <__sfp+0x66>
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	0800f1d0 	.word	0x0800f1d0
 800a288:	ffff0001 	.word	0xffff0001

0800a28c <_fwalk_reent>:
 800a28c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a28e:	0004      	movs	r4, r0
 800a290:	0006      	movs	r6, r0
 800a292:	2700      	movs	r7, #0
 800a294:	9101      	str	r1, [sp, #4]
 800a296:	3448      	adds	r4, #72	; 0x48
 800a298:	6863      	ldr	r3, [r4, #4]
 800a29a:	68a5      	ldr	r5, [r4, #8]
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	9b00      	ldr	r3, [sp, #0]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	d504      	bpl.n	800a2b0 <_fwalk_reent+0x24>
 800a2a6:	6824      	ldr	r4, [r4, #0]
 800a2a8:	2c00      	cmp	r4, #0
 800a2aa:	d1f5      	bne.n	800a298 <_fwalk_reent+0xc>
 800a2ac:	0038      	movs	r0, r7
 800a2ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2b0:	89ab      	ldrh	r3, [r5, #12]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d908      	bls.n	800a2c8 <_fwalk_reent+0x3c>
 800a2b6:	220e      	movs	r2, #14
 800a2b8:	5eab      	ldrsh	r3, [r5, r2]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	d004      	beq.n	800a2c8 <_fwalk_reent+0x3c>
 800a2be:	0029      	movs	r1, r5
 800a2c0:	0030      	movs	r0, r6
 800a2c2:	9b01      	ldr	r3, [sp, #4]
 800a2c4:	4798      	blx	r3
 800a2c6:	4307      	orrs	r7, r0
 800a2c8:	3568      	adds	r5, #104	; 0x68
 800a2ca:	e7e8      	b.n	800a29e <_fwalk_reent+0x12>

0800a2cc <__libc_init_array>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	2600      	movs	r6, #0
 800a2d0:	4d0c      	ldr	r5, [pc, #48]	; (800a304 <__libc_init_array+0x38>)
 800a2d2:	4c0d      	ldr	r4, [pc, #52]	; (800a308 <__libc_init_array+0x3c>)
 800a2d4:	1b64      	subs	r4, r4, r5
 800a2d6:	10a4      	asrs	r4, r4, #2
 800a2d8:	42a6      	cmp	r6, r4
 800a2da:	d109      	bne.n	800a2f0 <__libc_init_array+0x24>
 800a2dc:	2600      	movs	r6, #0
 800a2de:	f004 fd4f 	bl	800ed80 <_init>
 800a2e2:	4d0a      	ldr	r5, [pc, #40]	; (800a30c <__libc_init_array+0x40>)
 800a2e4:	4c0a      	ldr	r4, [pc, #40]	; (800a310 <__libc_init_array+0x44>)
 800a2e6:	1b64      	subs	r4, r4, r5
 800a2e8:	10a4      	asrs	r4, r4, #2
 800a2ea:	42a6      	cmp	r6, r4
 800a2ec:	d105      	bne.n	800a2fa <__libc_init_array+0x2e>
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	00b3      	lsls	r3, r6, #2
 800a2f2:	58eb      	ldr	r3, [r5, r3]
 800a2f4:	4798      	blx	r3
 800a2f6:	3601      	adds	r6, #1
 800a2f8:	e7ee      	b.n	800a2d8 <__libc_init_array+0xc>
 800a2fa:	00b3      	lsls	r3, r6, #2
 800a2fc:	58eb      	ldr	r3, [r5, r3]
 800a2fe:	4798      	blx	r3
 800a300:	3601      	adds	r6, #1
 800a302:	e7f2      	b.n	800a2ea <__libc_init_array+0x1e>
 800a304:	0800f61c 	.word	0x0800f61c
 800a308:	0800f61c 	.word	0x0800f61c
 800a30c:	0800f61c 	.word	0x0800f61c
 800a310:	0800f620 	.word	0x0800f620

0800a314 <__retarget_lock_init_recursive>:
 800a314:	4770      	bx	lr

0800a316 <__retarget_lock_acquire_recursive>:
 800a316:	4770      	bx	lr

0800a318 <__retarget_lock_release_recursive>:
 800a318:	4770      	bx	lr

0800a31a <memcpy>:
 800a31a:	2300      	movs	r3, #0
 800a31c:	b510      	push	{r4, lr}
 800a31e:	429a      	cmp	r2, r3
 800a320:	d100      	bne.n	800a324 <memcpy+0xa>
 800a322:	bd10      	pop	{r4, pc}
 800a324:	5ccc      	ldrb	r4, [r1, r3]
 800a326:	54c4      	strb	r4, [r0, r3]
 800a328:	3301      	adds	r3, #1
 800a32a:	e7f8      	b.n	800a31e <memcpy+0x4>

0800a32c <memset>:
 800a32c:	0003      	movs	r3, r0
 800a32e:	1882      	adds	r2, r0, r2
 800a330:	4293      	cmp	r3, r2
 800a332:	d100      	bne.n	800a336 <memset+0xa>
 800a334:	4770      	bx	lr
 800a336:	7019      	strb	r1, [r3, #0]
 800a338:	3301      	adds	r3, #1
 800a33a:	e7f9      	b.n	800a330 <memset+0x4>

0800a33c <sbrk_aligned>:
 800a33c:	b570      	push	{r4, r5, r6, lr}
 800a33e:	4e0f      	ldr	r6, [pc, #60]	; (800a37c <sbrk_aligned+0x40>)
 800a340:	000d      	movs	r5, r1
 800a342:	6831      	ldr	r1, [r6, #0]
 800a344:	0004      	movs	r4, r0
 800a346:	2900      	cmp	r1, #0
 800a348:	d102      	bne.n	800a350 <sbrk_aligned+0x14>
 800a34a:	f001 f80f 	bl	800b36c <_sbrk_r>
 800a34e:	6030      	str	r0, [r6, #0]
 800a350:	0029      	movs	r1, r5
 800a352:	0020      	movs	r0, r4
 800a354:	f001 f80a 	bl	800b36c <_sbrk_r>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d00a      	beq.n	800a372 <sbrk_aligned+0x36>
 800a35c:	2303      	movs	r3, #3
 800a35e:	1cc5      	adds	r5, r0, #3
 800a360:	439d      	bics	r5, r3
 800a362:	42a8      	cmp	r0, r5
 800a364:	d007      	beq.n	800a376 <sbrk_aligned+0x3a>
 800a366:	1a29      	subs	r1, r5, r0
 800a368:	0020      	movs	r0, r4
 800a36a:	f000 ffff 	bl	800b36c <_sbrk_r>
 800a36e:	1c43      	adds	r3, r0, #1
 800a370:	d101      	bne.n	800a376 <sbrk_aligned+0x3a>
 800a372:	2501      	movs	r5, #1
 800a374:	426d      	negs	r5, r5
 800a376:	0028      	movs	r0, r5
 800a378:	bd70      	pop	{r4, r5, r6, pc}
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	20001d34 	.word	0x20001d34

0800a380 <_malloc_r>:
 800a380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a382:	2203      	movs	r2, #3
 800a384:	1ccb      	adds	r3, r1, #3
 800a386:	4393      	bics	r3, r2
 800a388:	3308      	adds	r3, #8
 800a38a:	0006      	movs	r6, r0
 800a38c:	001f      	movs	r7, r3
 800a38e:	2b0c      	cmp	r3, #12
 800a390:	d232      	bcs.n	800a3f8 <_malloc_r+0x78>
 800a392:	270c      	movs	r7, #12
 800a394:	42b9      	cmp	r1, r7
 800a396:	d831      	bhi.n	800a3fc <_malloc_r+0x7c>
 800a398:	0030      	movs	r0, r6
 800a39a:	f003 fbb5 	bl	800db08 <__malloc_lock>
 800a39e:	4d32      	ldr	r5, [pc, #200]	; (800a468 <_malloc_r+0xe8>)
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	001c      	movs	r4, r3
 800a3a4:	2c00      	cmp	r4, #0
 800a3a6:	d12e      	bne.n	800a406 <_malloc_r+0x86>
 800a3a8:	0039      	movs	r1, r7
 800a3aa:	0030      	movs	r0, r6
 800a3ac:	f7ff ffc6 	bl	800a33c <sbrk_aligned>
 800a3b0:	0004      	movs	r4, r0
 800a3b2:	1c43      	adds	r3, r0, #1
 800a3b4:	d11e      	bne.n	800a3f4 <_malloc_r+0x74>
 800a3b6:	682c      	ldr	r4, [r5, #0]
 800a3b8:	0025      	movs	r5, r4
 800a3ba:	2d00      	cmp	r5, #0
 800a3bc:	d14a      	bne.n	800a454 <_malloc_r+0xd4>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	0029      	movs	r1, r5
 800a3c2:	18e3      	adds	r3, r4, r3
 800a3c4:	0030      	movs	r0, r6
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	f000 ffd0 	bl	800b36c <_sbrk_r>
 800a3cc:	9b01      	ldr	r3, [sp, #4]
 800a3ce:	4283      	cmp	r3, r0
 800a3d0:	d143      	bne.n	800a45a <_malloc_r+0xda>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	3703      	adds	r7, #3
 800a3d6:	1aff      	subs	r7, r7, r3
 800a3d8:	2303      	movs	r3, #3
 800a3da:	439f      	bics	r7, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	2f0c      	cmp	r7, #12
 800a3e0:	d200      	bcs.n	800a3e4 <_malloc_r+0x64>
 800a3e2:	270c      	movs	r7, #12
 800a3e4:	0039      	movs	r1, r7
 800a3e6:	0030      	movs	r0, r6
 800a3e8:	f7ff ffa8 	bl	800a33c <sbrk_aligned>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d034      	beq.n	800a45a <_malloc_r+0xda>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	19df      	adds	r7, r3, r7
 800a3f4:	6027      	str	r7, [r4, #0]
 800a3f6:	e013      	b.n	800a420 <_malloc_r+0xa0>
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dacb      	bge.n	800a394 <_malloc_r+0x14>
 800a3fc:	230c      	movs	r3, #12
 800a3fe:	2500      	movs	r5, #0
 800a400:	6033      	str	r3, [r6, #0]
 800a402:	0028      	movs	r0, r5
 800a404:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a406:	6822      	ldr	r2, [r4, #0]
 800a408:	1bd1      	subs	r1, r2, r7
 800a40a:	d420      	bmi.n	800a44e <_malloc_r+0xce>
 800a40c:	290b      	cmp	r1, #11
 800a40e:	d917      	bls.n	800a440 <_malloc_r+0xc0>
 800a410:	19e2      	adds	r2, r4, r7
 800a412:	6027      	str	r7, [r4, #0]
 800a414:	42a3      	cmp	r3, r4
 800a416:	d111      	bne.n	800a43c <_malloc_r+0xbc>
 800a418:	602a      	str	r2, [r5, #0]
 800a41a:	6863      	ldr	r3, [r4, #4]
 800a41c:	6011      	str	r1, [r2, #0]
 800a41e:	6053      	str	r3, [r2, #4]
 800a420:	0030      	movs	r0, r6
 800a422:	0025      	movs	r5, r4
 800a424:	f003 fb78 	bl	800db18 <__malloc_unlock>
 800a428:	2207      	movs	r2, #7
 800a42a:	350b      	adds	r5, #11
 800a42c:	1d23      	adds	r3, r4, #4
 800a42e:	4395      	bics	r5, r2
 800a430:	1aea      	subs	r2, r5, r3
 800a432:	429d      	cmp	r5, r3
 800a434:	d0e5      	beq.n	800a402 <_malloc_r+0x82>
 800a436:	1b5b      	subs	r3, r3, r5
 800a438:	50a3      	str	r3, [r4, r2]
 800a43a:	e7e2      	b.n	800a402 <_malloc_r+0x82>
 800a43c:	605a      	str	r2, [r3, #4]
 800a43e:	e7ec      	b.n	800a41a <_malloc_r+0x9a>
 800a440:	6862      	ldr	r2, [r4, #4]
 800a442:	42a3      	cmp	r3, r4
 800a444:	d101      	bne.n	800a44a <_malloc_r+0xca>
 800a446:	602a      	str	r2, [r5, #0]
 800a448:	e7ea      	b.n	800a420 <_malloc_r+0xa0>
 800a44a:	605a      	str	r2, [r3, #4]
 800a44c:	e7e8      	b.n	800a420 <_malloc_r+0xa0>
 800a44e:	0023      	movs	r3, r4
 800a450:	6864      	ldr	r4, [r4, #4]
 800a452:	e7a7      	b.n	800a3a4 <_malloc_r+0x24>
 800a454:	002c      	movs	r4, r5
 800a456:	686d      	ldr	r5, [r5, #4]
 800a458:	e7af      	b.n	800a3ba <_malloc_r+0x3a>
 800a45a:	230c      	movs	r3, #12
 800a45c:	0030      	movs	r0, r6
 800a45e:	6033      	str	r3, [r6, #0]
 800a460:	f003 fb5a 	bl	800db18 <__malloc_unlock>
 800a464:	e7cd      	b.n	800a402 <_malloc_r+0x82>
 800a466:	46c0      	nop			; (mov r8, r8)
 800a468:	20001d30 	.word	0x20001d30

0800a46c <__cvt>:
 800a46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a46e:	001e      	movs	r6, r3
 800a470:	2300      	movs	r3, #0
 800a472:	0014      	movs	r4, r2
 800a474:	b08b      	sub	sp, #44	; 0x2c
 800a476:	429e      	cmp	r6, r3
 800a478:	da04      	bge.n	800a484 <__cvt+0x18>
 800a47a:	2180      	movs	r1, #128	; 0x80
 800a47c:	0609      	lsls	r1, r1, #24
 800a47e:	1873      	adds	r3, r6, r1
 800a480:	001e      	movs	r6, r3
 800a482:	232d      	movs	r3, #45	; 0x2d
 800a484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a486:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a488:	7013      	strb	r3, [r2, #0]
 800a48a:	2320      	movs	r3, #32
 800a48c:	2203      	movs	r2, #3
 800a48e:	439f      	bics	r7, r3
 800a490:	2f46      	cmp	r7, #70	; 0x46
 800a492:	d007      	beq.n	800a4a4 <__cvt+0x38>
 800a494:	003b      	movs	r3, r7
 800a496:	3b45      	subs	r3, #69	; 0x45
 800a498:	4259      	negs	r1, r3
 800a49a:	414b      	adcs	r3, r1
 800a49c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a49e:	3a01      	subs	r2, #1
 800a4a0:	18cb      	adds	r3, r1, r3
 800a4a2:	9310      	str	r3, [sp, #64]	; 0x40
 800a4a4:	ab09      	add	r3, sp, #36	; 0x24
 800a4a6:	9304      	str	r3, [sp, #16]
 800a4a8:	ab08      	add	r3, sp, #32
 800a4aa:	9303      	str	r3, [sp, #12]
 800a4ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4ae:	9200      	str	r2, [sp, #0]
 800a4b0:	9302      	str	r3, [sp, #8]
 800a4b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4b4:	0022      	movs	r2, r4
 800a4b6:	9301      	str	r3, [sp, #4]
 800a4b8:	0033      	movs	r3, r6
 800a4ba:	f002 f81f 	bl	800c4fc <_dtoa_r>
 800a4be:	0005      	movs	r5, r0
 800a4c0:	2f47      	cmp	r7, #71	; 0x47
 800a4c2:	d102      	bne.n	800a4ca <__cvt+0x5e>
 800a4c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4c6:	07db      	lsls	r3, r3, #31
 800a4c8:	d528      	bpl.n	800a51c <__cvt+0xb0>
 800a4ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4cc:	18eb      	adds	r3, r5, r3
 800a4ce:	9307      	str	r3, [sp, #28]
 800a4d0:	2f46      	cmp	r7, #70	; 0x46
 800a4d2:	d114      	bne.n	800a4fe <__cvt+0x92>
 800a4d4:	782b      	ldrb	r3, [r5, #0]
 800a4d6:	2b30      	cmp	r3, #48	; 0x30
 800a4d8:	d10c      	bne.n	800a4f4 <__cvt+0x88>
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2300      	movs	r3, #0
 800a4de:	0020      	movs	r0, r4
 800a4e0:	0031      	movs	r1, r6
 800a4e2:	f7f5 ffb3 	bl	800044c <__aeabi_dcmpeq>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d104      	bne.n	800a4f4 <__cvt+0x88>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4ee:	1a9b      	subs	r3, r3, r2
 800a4f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4f6:	9a07      	ldr	r2, [sp, #28]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	18d3      	adds	r3, r2, r3
 800a4fc:	9307      	str	r3, [sp, #28]
 800a4fe:	2200      	movs	r2, #0
 800a500:	2300      	movs	r3, #0
 800a502:	0020      	movs	r0, r4
 800a504:	0031      	movs	r1, r6
 800a506:	f7f5 ffa1 	bl	800044c <__aeabi_dcmpeq>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d001      	beq.n	800a512 <__cvt+0xa6>
 800a50e:	9b07      	ldr	r3, [sp, #28]
 800a510:	9309      	str	r3, [sp, #36]	; 0x24
 800a512:	2230      	movs	r2, #48	; 0x30
 800a514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a516:	9907      	ldr	r1, [sp, #28]
 800a518:	428b      	cmp	r3, r1
 800a51a:	d306      	bcc.n	800a52a <__cvt+0xbe>
 800a51c:	0028      	movs	r0, r5
 800a51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a520:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a522:	1b5b      	subs	r3, r3, r5
 800a524:	6013      	str	r3, [r2, #0]
 800a526:	b00b      	add	sp, #44	; 0x2c
 800a528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a52a:	1c59      	adds	r1, r3, #1
 800a52c:	9109      	str	r1, [sp, #36]	; 0x24
 800a52e:	701a      	strb	r2, [r3, #0]
 800a530:	e7f0      	b.n	800a514 <__cvt+0xa8>

0800a532 <__exponent>:
 800a532:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a534:	1c83      	adds	r3, r0, #2
 800a536:	b087      	sub	sp, #28
 800a538:	9303      	str	r3, [sp, #12]
 800a53a:	0005      	movs	r5, r0
 800a53c:	000c      	movs	r4, r1
 800a53e:	232b      	movs	r3, #43	; 0x2b
 800a540:	7002      	strb	r2, [r0, #0]
 800a542:	2900      	cmp	r1, #0
 800a544:	da01      	bge.n	800a54a <__exponent+0x18>
 800a546:	424c      	negs	r4, r1
 800a548:	3302      	adds	r3, #2
 800a54a:	706b      	strb	r3, [r5, #1]
 800a54c:	2c09      	cmp	r4, #9
 800a54e:	dd31      	ble.n	800a5b4 <__exponent+0x82>
 800a550:	270a      	movs	r7, #10
 800a552:	ab04      	add	r3, sp, #16
 800a554:	1dde      	adds	r6, r3, #7
 800a556:	0020      	movs	r0, r4
 800a558:	0039      	movs	r1, r7
 800a55a:	9601      	str	r6, [sp, #4]
 800a55c:	f7f5 ff60 	bl	8000420 <__aeabi_idivmod>
 800a560:	3e01      	subs	r6, #1
 800a562:	3130      	adds	r1, #48	; 0x30
 800a564:	0020      	movs	r0, r4
 800a566:	7031      	strb	r1, [r6, #0]
 800a568:	0039      	movs	r1, r7
 800a56a:	9402      	str	r4, [sp, #8]
 800a56c:	f7f5 fe72 	bl	8000254 <__divsi3>
 800a570:	9b02      	ldr	r3, [sp, #8]
 800a572:	0004      	movs	r4, r0
 800a574:	2b63      	cmp	r3, #99	; 0x63
 800a576:	dcee      	bgt.n	800a556 <__exponent+0x24>
 800a578:	9b01      	ldr	r3, [sp, #4]
 800a57a:	3430      	adds	r4, #48	; 0x30
 800a57c:	1e9a      	subs	r2, r3, #2
 800a57e:	0013      	movs	r3, r2
 800a580:	9903      	ldr	r1, [sp, #12]
 800a582:	7014      	strb	r4, [r2, #0]
 800a584:	a804      	add	r0, sp, #16
 800a586:	3007      	adds	r0, #7
 800a588:	4298      	cmp	r0, r3
 800a58a:	d80e      	bhi.n	800a5aa <__exponent+0x78>
 800a58c:	ab04      	add	r3, sp, #16
 800a58e:	3307      	adds	r3, #7
 800a590:	2000      	movs	r0, #0
 800a592:	429a      	cmp	r2, r3
 800a594:	d804      	bhi.n	800a5a0 <__exponent+0x6e>
 800a596:	ab04      	add	r3, sp, #16
 800a598:	3009      	adds	r0, #9
 800a59a:	18c0      	adds	r0, r0, r3
 800a59c:	9b01      	ldr	r3, [sp, #4]
 800a59e:	1ac0      	subs	r0, r0, r3
 800a5a0:	9b03      	ldr	r3, [sp, #12]
 800a5a2:	1818      	adds	r0, r3, r0
 800a5a4:	1b40      	subs	r0, r0, r5
 800a5a6:	b007      	add	sp, #28
 800a5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5aa:	7818      	ldrb	r0, [r3, #0]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	7008      	strb	r0, [r1, #0]
 800a5b0:	3101      	adds	r1, #1
 800a5b2:	e7e7      	b.n	800a584 <__exponent+0x52>
 800a5b4:	2330      	movs	r3, #48	; 0x30
 800a5b6:	18e4      	adds	r4, r4, r3
 800a5b8:	70ab      	strb	r3, [r5, #2]
 800a5ba:	1d28      	adds	r0, r5, #4
 800a5bc:	70ec      	strb	r4, [r5, #3]
 800a5be:	e7f1      	b.n	800a5a4 <__exponent+0x72>

0800a5c0 <_printf_float>:
 800a5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5c2:	b095      	sub	sp, #84	; 0x54
 800a5c4:	000c      	movs	r4, r1
 800a5c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c8:	001e      	movs	r6, r3
 800a5ca:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a5cc:	0007      	movs	r7, r0
 800a5ce:	f003 f9ef 	bl	800d9b0 <_localeconv_r>
 800a5d2:	6803      	ldr	r3, [r0, #0]
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5d8:	f7f5 fd96 	bl	8000108 <strlen>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	9312      	str	r3, [sp, #72]	; 0x48
 800a5e0:	7e23      	ldrb	r3, [r4, #24]
 800a5e2:	2207      	movs	r2, #7
 800a5e4:	930a      	str	r3, [sp, #40]	; 0x28
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	900e      	str	r0, [sp, #56]	; 0x38
 800a5ea:	930d      	str	r3, [sp, #52]	; 0x34
 800a5ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a5ee:	682b      	ldr	r3, [r5, #0]
 800a5f0:	05c9      	lsls	r1, r1, #23
 800a5f2:	d547      	bpl.n	800a684 <_printf_float+0xc4>
 800a5f4:	189b      	adds	r3, r3, r2
 800a5f6:	4393      	bics	r3, r2
 800a5f8:	001a      	movs	r2, r3
 800a5fa:	3208      	adds	r2, #8
 800a5fc:	602a      	str	r2, [r5, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	64a2      	str	r2, [r4, #72]	; 0x48
 800a604:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a606:	2201      	movs	r2, #1
 800a608:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a60a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a60c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a60e:	006b      	lsls	r3, r5, #1
 800a610:	085b      	lsrs	r3, r3, #1
 800a612:	930f      	str	r3, [sp, #60]	; 0x3c
 800a614:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a616:	4ba7      	ldr	r3, [pc, #668]	; (800a8b4 <_printf_float+0x2f4>)
 800a618:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a61a:	4252      	negs	r2, r2
 800a61c:	f7f8 fb66 	bl	8002cec <__aeabi_dcmpun>
 800a620:	2800      	cmp	r0, #0
 800a622:	d131      	bne.n	800a688 <_printf_float+0xc8>
 800a624:	2201      	movs	r2, #1
 800a626:	4ba3      	ldr	r3, [pc, #652]	; (800a8b4 <_printf_float+0x2f4>)
 800a628:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a62a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a62c:	4252      	negs	r2, r2
 800a62e:	f7f5 ff1d 	bl	800046c <__aeabi_dcmple>
 800a632:	2800      	cmp	r0, #0
 800a634:	d128      	bne.n	800a688 <_printf_float+0xc8>
 800a636:	2200      	movs	r2, #0
 800a638:	2300      	movs	r3, #0
 800a63a:	0029      	movs	r1, r5
 800a63c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a63e:	f7f5 ff0b 	bl	8000458 <__aeabi_dcmplt>
 800a642:	2800      	cmp	r0, #0
 800a644:	d003      	beq.n	800a64e <_printf_float+0x8e>
 800a646:	0023      	movs	r3, r4
 800a648:	222d      	movs	r2, #45	; 0x2d
 800a64a:	3343      	adds	r3, #67	; 0x43
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a650:	4d99      	ldr	r5, [pc, #612]	; (800a8b8 <_printf_float+0x2f8>)
 800a652:	2b47      	cmp	r3, #71	; 0x47
 800a654:	d900      	bls.n	800a658 <_printf_float+0x98>
 800a656:	4d99      	ldr	r5, [pc, #612]	; (800a8bc <_printf_float+0x2fc>)
 800a658:	2303      	movs	r3, #3
 800a65a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a65c:	6123      	str	r3, [r4, #16]
 800a65e:	3301      	adds	r3, #1
 800a660:	439a      	bics	r2, r3
 800a662:	2300      	movs	r3, #0
 800a664:	6022      	str	r2, [r4, #0]
 800a666:	930b      	str	r3, [sp, #44]	; 0x2c
 800a668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a66a:	0021      	movs	r1, r4
 800a66c:	0038      	movs	r0, r7
 800a66e:	9600      	str	r6, [sp, #0]
 800a670:	aa13      	add	r2, sp, #76	; 0x4c
 800a672:	f000 f9e7 	bl	800aa44 <_printf_common>
 800a676:	1c43      	adds	r3, r0, #1
 800a678:	d000      	beq.n	800a67c <_printf_float+0xbc>
 800a67a:	e0a2      	b.n	800a7c2 <_printf_float+0x202>
 800a67c:	2001      	movs	r0, #1
 800a67e:	4240      	negs	r0, r0
 800a680:	b015      	add	sp, #84	; 0x54
 800a682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a684:	3307      	adds	r3, #7
 800a686:	e7b6      	b.n	800a5f6 <_printf_float+0x36>
 800a688:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a68a:	002b      	movs	r3, r5
 800a68c:	0010      	movs	r0, r2
 800a68e:	0029      	movs	r1, r5
 800a690:	f7f8 fb2c 	bl	8002cec <__aeabi_dcmpun>
 800a694:	2800      	cmp	r0, #0
 800a696:	d00b      	beq.n	800a6b0 <_printf_float+0xf0>
 800a698:	2d00      	cmp	r5, #0
 800a69a:	da03      	bge.n	800a6a4 <_printf_float+0xe4>
 800a69c:	0023      	movs	r3, r4
 800a69e:	222d      	movs	r2, #45	; 0x2d
 800a6a0:	3343      	adds	r3, #67	; 0x43
 800a6a2:	701a      	strb	r2, [r3, #0]
 800a6a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a6:	4d86      	ldr	r5, [pc, #536]	; (800a8c0 <_printf_float+0x300>)
 800a6a8:	2b47      	cmp	r3, #71	; 0x47
 800a6aa:	d9d5      	bls.n	800a658 <_printf_float+0x98>
 800a6ac:	4d85      	ldr	r5, [pc, #532]	; (800a8c4 <_printf_float+0x304>)
 800a6ae:	e7d3      	b.n	800a658 <_printf_float+0x98>
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6b4:	6863      	ldr	r3, [r4, #4]
 800a6b6:	4391      	bics	r1, r2
 800a6b8:	910f      	str	r1, [sp, #60]	; 0x3c
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	d149      	bne.n	800a752 <_printf_float+0x192>
 800a6be:	3307      	adds	r3, #7
 800a6c0:	6063      	str	r3, [r4, #4]
 800a6c2:	2380      	movs	r3, #128	; 0x80
 800a6c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	9206      	str	r2, [sp, #24]
 800a6ce:	aa12      	add	r2, sp, #72	; 0x48
 800a6d0:	9205      	str	r2, [sp, #20]
 800a6d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6d4:	a908      	add	r1, sp, #32
 800a6d6:	9204      	str	r2, [sp, #16]
 800a6d8:	aa11      	add	r2, sp, #68	; 0x44
 800a6da:	9203      	str	r2, [sp, #12]
 800a6dc:	2223      	movs	r2, #35	; 0x23
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	6863      	ldr	r3, [r4, #4]
 800a6e4:	1852      	adds	r2, r2, r1
 800a6e6:	9202      	str	r2, [sp, #8]
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	0038      	movs	r0, r7
 800a6ec:	002b      	movs	r3, r5
 800a6ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6f0:	f7ff febc 	bl	800a46c <__cvt>
 800a6f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6f6:	0005      	movs	r5, r0
 800a6f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a6fa:	2b47      	cmp	r3, #71	; 0x47
 800a6fc:	d108      	bne.n	800a710 <_printf_float+0x150>
 800a6fe:	1ccb      	adds	r3, r1, #3
 800a700:	db02      	blt.n	800a708 <_printf_float+0x148>
 800a702:	6863      	ldr	r3, [r4, #4]
 800a704:	4299      	cmp	r1, r3
 800a706:	dd48      	ble.n	800a79a <_printf_float+0x1da>
 800a708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a70a:	3b02      	subs	r3, #2
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	930a      	str	r3, [sp, #40]	; 0x28
 800a710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a712:	2b65      	cmp	r3, #101	; 0x65
 800a714:	d824      	bhi.n	800a760 <_printf_float+0x1a0>
 800a716:	0020      	movs	r0, r4
 800a718:	001a      	movs	r2, r3
 800a71a:	3901      	subs	r1, #1
 800a71c:	3050      	adds	r0, #80	; 0x50
 800a71e:	9111      	str	r1, [sp, #68]	; 0x44
 800a720:	f7ff ff07 	bl	800a532 <__exponent>
 800a724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a726:	900b      	str	r0, [sp, #44]	; 0x2c
 800a728:	1813      	adds	r3, r2, r0
 800a72a:	6123      	str	r3, [r4, #16]
 800a72c:	2a01      	cmp	r2, #1
 800a72e:	dc02      	bgt.n	800a736 <_printf_float+0x176>
 800a730:	6822      	ldr	r2, [r4, #0]
 800a732:	07d2      	lsls	r2, r2, #31
 800a734:	d501      	bpl.n	800a73a <_printf_float+0x17a>
 800a736:	3301      	adds	r3, #1
 800a738:	6123      	str	r3, [r4, #16]
 800a73a:	2323      	movs	r3, #35	; 0x23
 800a73c:	aa08      	add	r2, sp, #32
 800a73e:	189b      	adds	r3, r3, r2
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d100      	bne.n	800a748 <_printf_float+0x188>
 800a746:	e78f      	b.n	800a668 <_printf_float+0xa8>
 800a748:	0023      	movs	r3, r4
 800a74a:	222d      	movs	r2, #45	; 0x2d
 800a74c:	3343      	adds	r3, #67	; 0x43
 800a74e:	701a      	strb	r2, [r3, #0]
 800a750:	e78a      	b.n	800a668 <_printf_float+0xa8>
 800a752:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a754:	2a47      	cmp	r2, #71	; 0x47
 800a756:	d1b4      	bne.n	800a6c2 <_printf_float+0x102>
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1b2      	bne.n	800a6c2 <_printf_float+0x102>
 800a75c:	3301      	adds	r3, #1
 800a75e:	e7af      	b.n	800a6c0 <_printf_float+0x100>
 800a760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a762:	2b66      	cmp	r3, #102	; 0x66
 800a764:	d11b      	bne.n	800a79e <_printf_float+0x1de>
 800a766:	6863      	ldr	r3, [r4, #4]
 800a768:	2900      	cmp	r1, #0
 800a76a:	dd0d      	ble.n	800a788 <_printf_float+0x1c8>
 800a76c:	6121      	str	r1, [r4, #16]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d102      	bne.n	800a778 <_printf_float+0x1b8>
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	07d2      	lsls	r2, r2, #31
 800a776:	d502      	bpl.n	800a77e <_printf_float+0x1be>
 800a778:	3301      	adds	r3, #1
 800a77a:	1859      	adds	r1, r3, r1
 800a77c:	6121      	str	r1, [r4, #16]
 800a77e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a780:	65a3      	str	r3, [r4, #88]	; 0x58
 800a782:	2300      	movs	r3, #0
 800a784:	930b      	str	r3, [sp, #44]	; 0x2c
 800a786:	e7d8      	b.n	800a73a <_printf_float+0x17a>
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d103      	bne.n	800a794 <_printf_float+0x1d4>
 800a78c:	2201      	movs	r2, #1
 800a78e:	6821      	ldr	r1, [r4, #0]
 800a790:	4211      	tst	r1, r2
 800a792:	d000      	beq.n	800a796 <_printf_float+0x1d6>
 800a794:	1c9a      	adds	r2, r3, #2
 800a796:	6122      	str	r2, [r4, #16]
 800a798:	e7f1      	b.n	800a77e <_printf_float+0x1be>
 800a79a:	2367      	movs	r3, #103	; 0x67
 800a79c:	930a      	str	r3, [sp, #40]	; 0x28
 800a79e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	db06      	blt.n	800a7b4 <_printf_float+0x1f4>
 800a7a6:	6822      	ldr	r2, [r4, #0]
 800a7a8:	6123      	str	r3, [r4, #16]
 800a7aa:	07d2      	lsls	r2, r2, #31
 800a7ac:	d5e7      	bpl.n	800a77e <_printf_float+0x1be>
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	6123      	str	r3, [r4, #16]
 800a7b2:	e7e4      	b.n	800a77e <_printf_float+0x1be>
 800a7b4:	2101      	movs	r1, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	dc01      	bgt.n	800a7be <_printf_float+0x1fe>
 800a7ba:	1849      	adds	r1, r1, r1
 800a7bc:	1ac9      	subs	r1, r1, r3
 800a7be:	1852      	adds	r2, r2, r1
 800a7c0:	e7e9      	b.n	800a796 <_printf_float+0x1d6>
 800a7c2:	6822      	ldr	r2, [r4, #0]
 800a7c4:	0553      	lsls	r3, r2, #21
 800a7c6:	d407      	bmi.n	800a7d8 <_printf_float+0x218>
 800a7c8:	6923      	ldr	r3, [r4, #16]
 800a7ca:	002a      	movs	r2, r5
 800a7cc:	0038      	movs	r0, r7
 800a7ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7d0:	47b0      	blx	r6
 800a7d2:	1c43      	adds	r3, r0, #1
 800a7d4:	d128      	bne.n	800a828 <_printf_float+0x268>
 800a7d6:	e751      	b.n	800a67c <_printf_float+0xbc>
 800a7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7da:	2b65      	cmp	r3, #101	; 0x65
 800a7dc:	d800      	bhi.n	800a7e0 <_printf_float+0x220>
 800a7de:	e0e1      	b.n	800a9a4 <_printf_float+0x3e4>
 800a7e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a7e2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f7f5 fe30 	bl	800044c <__aeabi_dcmpeq>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d031      	beq.n	800a854 <_printf_float+0x294>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	0038      	movs	r0, r7
 800a7f4:	4a34      	ldr	r2, [pc, #208]	; (800a8c8 <_printf_float+0x308>)
 800a7f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7f8:	47b0      	blx	r6
 800a7fa:	1c43      	adds	r3, r0, #1
 800a7fc:	d100      	bne.n	800a800 <_printf_float+0x240>
 800a7fe:	e73d      	b.n	800a67c <_printf_float+0xbc>
 800a800:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a802:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a804:	4293      	cmp	r3, r2
 800a806:	db02      	blt.n	800a80e <_printf_float+0x24e>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	07db      	lsls	r3, r3, #31
 800a80c:	d50c      	bpl.n	800a828 <_printf_float+0x268>
 800a80e:	0038      	movs	r0, r7
 800a810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a812:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a814:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a816:	47b0      	blx	r6
 800a818:	2500      	movs	r5, #0
 800a81a:	1c43      	adds	r3, r0, #1
 800a81c:	d100      	bne.n	800a820 <_printf_float+0x260>
 800a81e:	e72d      	b.n	800a67c <_printf_float+0xbc>
 800a820:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a822:	3b01      	subs	r3, #1
 800a824:	42ab      	cmp	r3, r5
 800a826:	dc0a      	bgt.n	800a83e <_printf_float+0x27e>
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	079b      	lsls	r3, r3, #30
 800a82c:	d500      	bpl.n	800a830 <_printf_float+0x270>
 800a82e:	e106      	b.n	800aa3e <_printf_float+0x47e>
 800a830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a832:	68e0      	ldr	r0, [r4, #12]
 800a834:	4298      	cmp	r0, r3
 800a836:	db00      	blt.n	800a83a <_printf_float+0x27a>
 800a838:	e722      	b.n	800a680 <_printf_float+0xc0>
 800a83a:	0018      	movs	r0, r3
 800a83c:	e720      	b.n	800a680 <_printf_float+0xc0>
 800a83e:	0022      	movs	r2, r4
 800a840:	2301      	movs	r3, #1
 800a842:	0038      	movs	r0, r7
 800a844:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a846:	321a      	adds	r2, #26
 800a848:	47b0      	blx	r6
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	d100      	bne.n	800a850 <_printf_float+0x290>
 800a84e:	e715      	b.n	800a67c <_printf_float+0xbc>
 800a850:	3501      	adds	r5, #1
 800a852:	e7e5      	b.n	800a820 <_printf_float+0x260>
 800a854:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a856:	2b00      	cmp	r3, #0
 800a858:	dc38      	bgt.n	800a8cc <_printf_float+0x30c>
 800a85a:	2301      	movs	r3, #1
 800a85c:	0038      	movs	r0, r7
 800a85e:	4a1a      	ldr	r2, [pc, #104]	; (800a8c8 <_printf_float+0x308>)
 800a860:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a862:	47b0      	blx	r6
 800a864:	1c43      	adds	r3, r0, #1
 800a866:	d100      	bne.n	800a86a <_printf_float+0x2aa>
 800a868:	e708      	b.n	800a67c <_printf_float+0xbc>
 800a86a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a86c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a86e:	4313      	orrs	r3, r2
 800a870:	d102      	bne.n	800a878 <_printf_float+0x2b8>
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	07db      	lsls	r3, r3, #31
 800a876:	d5d7      	bpl.n	800a828 <_printf_float+0x268>
 800a878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a87a:	0038      	movs	r0, r7
 800a87c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a87e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a880:	47b0      	blx	r6
 800a882:	1c43      	adds	r3, r0, #1
 800a884:	d100      	bne.n	800a888 <_printf_float+0x2c8>
 800a886:	e6f9      	b.n	800a67c <_printf_float+0xbc>
 800a888:	2300      	movs	r3, #0
 800a88a:	930a      	str	r3, [sp, #40]	; 0x28
 800a88c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a88e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a890:	425b      	negs	r3, r3
 800a892:	4293      	cmp	r3, r2
 800a894:	dc01      	bgt.n	800a89a <_printf_float+0x2da>
 800a896:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a898:	e797      	b.n	800a7ca <_printf_float+0x20a>
 800a89a:	0022      	movs	r2, r4
 800a89c:	2301      	movs	r3, #1
 800a89e:	0038      	movs	r0, r7
 800a8a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8a2:	321a      	adds	r2, #26
 800a8a4:	47b0      	blx	r6
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	d100      	bne.n	800a8ac <_printf_float+0x2ec>
 800a8aa:	e6e7      	b.n	800a67c <_printf_float+0xbc>
 800a8ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	e7eb      	b.n	800a88a <_printf_float+0x2ca>
 800a8b2:	46c0      	nop			; (mov r8, r8)
 800a8b4:	7fefffff 	.word	0x7fefffff
 800a8b8:	0800f1d4 	.word	0x0800f1d4
 800a8bc:	0800f1d8 	.word	0x0800f1d8
 800a8c0:	0800f1dc 	.word	0x0800f1dc
 800a8c4:	0800f1e0 	.word	0x0800f1e0
 800a8c8:	0800f1e4 	.word	0x0800f1e4
 800a8cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8d0:	920a      	str	r2, [sp, #40]	; 0x28
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	dd00      	ble.n	800a8d8 <_printf_float+0x318>
 800a8d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	dc3c      	bgt.n	800a958 <_printf_float+0x398>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	930d      	str	r3, [sp, #52]	; 0x34
 800a8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e4:	43db      	mvns	r3, r3
 800a8e6:	17db      	asrs	r3, r3, #31
 800a8e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	dc34      	bgt.n	800a968 <_printf_float+0x3a8>
 800a8fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a900:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a902:	4293      	cmp	r3, r2
 800a904:	db3d      	blt.n	800a982 <_printf_float+0x3c2>
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	07db      	lsls	r3, r3, #31
 800a90a:	d43a      	bmi.n	800a982 <_printf_float+0x3c2>
 800a90c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a910:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	1a52      	subs	r2, r2, r1
 800a916:	920a      	str	r2, [sp, #40]	; 0x28
 800a918:	429a      	cmp	r2, r3
 800a91a:	dd00      	ble.n	800a91e <_printf_float+0x35e>
 800a91c:	930a      	str	r3, [sp, #40]	; 0x28
 800a91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a920:	2b00      	cmp	r3, #0
 800a922:	dc36      	bgt.n	800a992 <_printf_float+0x3d2>
 800a924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a926:	2500      	movs	r5, #0
 800a928:	43db      	mvns	r3, r3
 800a92a:	17db      	asrs	r3, r3, #31
 800a92c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a92e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a930:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a934:	1a9b      	subs	r3, r3, r2
 800a936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a938:	400a      	ands	r2, r1
 800a93a:	1a9b      	subs	r3, r3, r2
 800a93c:	42ab      	cmp	r3, r5
 800a93e:	dc00      	bgt.n	800a942 <_printf_float+0x382>
 800a940:	e772      	b.n	800a828 <_printf_float+0x268>
 800a942:	0022      	movs	r2, r4
 800a944:	2301      	movs	r3, #1
 800a946:	0038      	movs	r0, r7
 800a948:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a94a:	321a      	adds	r2, #26
 800a94c:	47b0      	blx	r6
 800a94e:	1c43      	adds	r3, r0, #1
 800a950:	d100      	bne.n	800a954 <_printf_float+0x394>
 800a952:	e693      	b.n	800a67c <_printf_float+0xbc>
 800a954:	3501      	adds	r5, #1
 800a956:	e7ea      	b.n	800a92e <_printf_float+0x36e>
 800a958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a95a:	002a      	movs	r2, r5
 800a95c:	0038      	movs	r0, r7
 800a95e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a960:	47b0      	blx	r6
 800a962:	1c43      	adds	r3, r0, #1
 800a964:	d1bb      	bne.n	800a8de <_printf_float+0x31e>
 800a966:	e689      	b.n	800a67c <_printf_float+0xbc>
 800a968:	0022      	movs	r2, r4
 800a96a:	2301      	movs	r3, #1
 800a96c:	0038      	movs	r0, r7
 800a96e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a970:	321a      	adds	r2, #26
 800a972:	47b0      	blx	r6
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d100      	bne.n	800a97a <_printf_float+0x3ba>
 800a978:	e680      	b.n	800a67c <_printf_float+0xbc>
 800a97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a97c:	3301      	adds	r3, #1
 800a97e:	930d      	str	r3, [sp, #52]	; 0x34
 800a980:	e7b3      	b.n	800a8ea <_printf_float+0x32a>
 800a982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a984:	0038      	movs	r0, r7
 800a986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a988:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a98a:	47b0      	blx	r6
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d1bd      	bne.n	800a90c <_printf_float+0x34c>
 800a990:	e674      	b.n	800a67c <_printf_float+0xbc>
 800a992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a994:	0038      	movs	r0, r7
 800a996:	18ea      	adds	r2, r5, r3
 800a998:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a99a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a99c:	47b0      	blx	r6
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	d1c0      	bne.n	800a924 <_printf_float+0x364>
 800a9a2:	e66b      	b.n	800a67c <_printf_float+0xbc>
 800a9a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	dc02      	bgt.n	800a9b0 <_printf_float+0x3f0>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	421a      	tst	r2, r3
 800a9ae:	d034      	beq.n	800aa1a <_printf_float+0x45a>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	002a      	movs	r2, r5
 800a9b4:	0038      	movs	r0, r7
 800a9b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9b8:	47b0      	blx	r6
 800a9ba:	1c43      	adds	r3, r0, #1
 800a9bc:	d100      	bne.n	800a9c0 <_printf_float+0x400>
 800a9be:	e65d      	b.n	800a67c <_printf_float+0xbc>
 800a9c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9c2:	0038      	movs	r0, r7
 800a9c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9c8:	47b0      	blx	r6
 800a9ca:	1c43      	adds	r3, r0, #1
 800a9cc:	d100      	bne.n	800a9d0 <_printf_float+0x410>
 800a9ce:	e655      	b.n	800a67c <_printf_float+0xbc>
 800a9d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a9d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f7f5 fd38 	bl	800044c <__aeabi_dcmpeq>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d11a      	bne.n	800aa16 <_printf_float+0x456>
 800a9e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9e2:	1c6a      	adds	r2, r5, #1
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	0038      	movs	r0, r7
 800a9e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9ea:	47b0      	blx	r6
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	d10e      	bne.n	800aa0e <_printf_float+0x44e>
 800a9f0:	e644      	b.n	800a67c <_printf_float+0xbc>
 800a9f2:	0022      	movs	r2, r4
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	0038      	movs	r0, r7
 800a9f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9fa:	321a      	adds	r2, #26
 800a9fc:	47b0      	blx	r6
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	d100      	bne.n	800aa04 <_printf_float+0x444>
 800aa02:	e63b      	b.n	800a67c <_printf_float+0xbc>
 800aa04:	3501      	adds	r5, #1
 800aa06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	42ab      	cmp	r3, r5
 800aa0c:	dcf1      	bgt.n	800a9f2 <_printf_float+0x432>
 800aa0e:	0022      	movs	r2, r4
 800aa10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa12:	3250      	adds	r2, #80	; 0x50
 800aa14:	e6da      	b.n	800a7cc <_printf_float+0x20c>
 800aa16:	2500      	movs	r5, #0
 800aa18:	e7f5      	b.n	800aa06 <_printf_float+0x446>
 800aa1a:	002a      	movs	r2, r5
 800aa1c:	e7e3      	b.n	800a9e6 <_printf_float+0x426>
 800aa1e:	0022      	movs	r2, r4
 800aa20:	2301      	movs	r3, #1
 800aa22:	0038      	movs	r0, r7
 800aa24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa26:	3219      	adds	r2, #25
 800aa28:	47b0      	blx	r6
 800aa2a:	1c43      	adds	r3, r0, #1
 800aa2c:	d100      	bne.n	800aa30 <_printf_float+0x470>
 800aa2e:	e625      	b.n	800a67c <_printf_float+0xbc>
 800aa30:	3501      	adds	r5, #1
 800aa32:	68e3      	ldr	r3, [r4, #12]
 800aa34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa36:	1a9b      	subs	r3, r3, r2
 800aa38:	42ab      	cmp	r3, r5
 800aa3a:	dcf0      	bgt.n	800aa1e <_printf_float+0x45e>
 800aa3c:	e6f8      	b.n	800a830 <_printf_float+0x270>
 800aa3e:	2500      	movs	r5, #0
 800aa40:	e7f7      	b.n	800aa32 <_printf_float+0x472>
 800aa42:	46c0      	nop			; (mov r8, r8)

0800aa44 <_printf_common>:
 800aa44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa46:	0015      	movs	r5, r2
 800aa48:	9301      	str	r3, [sp, #4]
 800aa4a:	688a      	ldr	r2, [r1, #8]
 800aa4c:	690b      	ldr	r3, [r1, #16]
 800aa4e:	000c      	movs	r4, r1
 800aa50:	9000      	str	r0, [sp, #0]
 800aa52:	4293      	cmp	r3, r2
 800aa54:	da00      	bge.n	800aa58 <_printf_common+0x14>
 800aa56:	0013      	movs	r3, r2
 800aa58:	0022      	movs	r2, r4
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	3243      	adds	r2, #67	; 0x43
 800aa5e:	7812      	ldrb	r2, [r2, #0]
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	d001      	beq.n	800aa68 <_printf_common+0x24>
 800aa64:	3301      	adds	r3, #1
 800aa66:	602b      	str	r3, [r5, #0]
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	069b      	lsls	r3, r3, #26
 800aa6c:	d502      	bpl.n	800aa74 <_printf_common+0x30>
 800aa6e:	682b      	ldr	r3, [r5, #0]
 800aa70:	3302      	adds	r3, #2
 800aa72:	602b      	str	r3, [r5, #0]
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	2306      	movs	r3, #6
 800aa78:	0017      	movs	r7, r2
 800aa7a:	401f      	ands	r7, r3
 800aa7c:	421a      	tst	r2, r3
 800aa7e:	d027      	beq.n	800aad0 <_printf_common+0x8c>
 800aa80:	0023      	movs	r3, r4
 800aa82:	3343      	adds	r3, #67	; 0x43
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	1e5a      	subs	r2, r3, #1
 800aa88:	4193      	sbcs	r3, r2
 800aa8a:	6822      	ldr	r2, [r4, #0]
 800aa8c:	0692      	lsls	r2, r2, #26
 800aa8e:	d430      	bmi.n	800aaf2 <_printf_common+0xae>
 800aa90:	0022      	movs	r2, r4
 800aa92:	9901      	ldr	r1, [sp, #4]
 800aa94:	9800      	ldr	r0, [sp, #0]
 800aa96:	9e08      	ldr	r6, [sp, #32]
 800aa98:	3243      	adds	r2, #67	; 0x43
 800aa9a:	47b0      	blx	r6
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d025      	beq.n	800aaec <_printf_common+0xa8>
 800aaa0:	2306      	movs	r3, #6
 800aaa2:	6820      	ldr	r0, [r4, #0]
 800aaa4:	682a      	ldr	r2, [r5, #0]
 800aaa6:	68e1      	ldr	r1, [r4, #12]
 800aaa8:	2500      	movs	r5, #0
 800aaaa:	4003      	ands	r3, r0
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	d103      	bne.n	800aab8 <_printf_common+0x74>
 800aab0:	1a8d      	subs	r5, r1, r2
 800aab2:	43eb      	mvns	r3, r5
 800aab4:	17db      	asrs	r3, r3, #31
 800aab6:	401d      	ands	r5, r3
 800aab8:	68a3      	ldr	r3, [r4, #8]
 800aaba:	6922      	ldr	r2, [r4, #16]
 800aabc:	4293      	cmp	r3, r2
 800aabe:	dd01      	ble.n	800aac4 <_printf_common+0x80>
 800aac0:	1a9b      	subs	r3, r3, r2
 800aac2:	18ed      	adds	r5, r5, r3
 800aac4:	2700      	movs	r7, #0
 800aac6:	42bd      	cmp	r5, r7
 800aac8:	d120      	bne.n	800ab0c <_printf_common+0xc8>
 800aaca:	2000      	movs	r0, #0
 800aacc:	e010      	b.n	800aaf0 <_printf_common+0xac>
 800aace:	3701      	adds	r7, #1
 800aad0:	68e3      	ldr	r3, [r4, #12]
 800aad2:	682a      	ldr	r2, [r5, #0]
 800aad4:	1a9b      	subs	r3, r3, r2
 800aad6:	42bb      	cmp	r3, r7
 800aad8:	ddd2      	ble.n	800aa80 <_printf_common+0x3c>
 800aada:	0022      	movs	r2, r4
 800aadc:	2301      	movs	r3, #1
 800aade:	9901      	ldr	r1, [sp, #4]
 800aae0:	9800      	ldr	r0, [sp, #0]
 800aae2:	9e08      	ldr	r6, [sp, #32]
 800aae4:	3219      	adds	r2, #25
 800aae6:	47b0      	blx	r6
 800aae8:	1c43      	adds	r3, r0, #1
 800aaea:	d1f0      	bne.n	800aace <_printf_common+0x8a>
 800aaec:	2001      	movs	r0, #1
 800aaee:	4240      	negs	r0, r0
 800aaf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aaf2:	2030      	movs	r0, #48	; 0x30
 800aaf4:	18e1      	adds	r1, r4, r3
 800aaf6:	3143      	adds	r1, #67	; 0x43
 800aaf8:	7008      	strb	r0, [r1, #0]
 800aafa:	0021      	movs	r1, r4
 800aafc:	1c5a      	adds	r2, r3, #1
 800aafe:	3145      	adds	r1, #69	; 0x45
 800ab00:	7809      	ldrb	r1, [r1, #0]
 800ab02:	18a2      	adds	r2, r4, r2
 800ab04:	3243      	adds	r2, #67	; 0x43
 800ab06:	3302      	adds	r3, #2
 800ab08:	7011      	strb	r1, [r2, #0]
 800ab0a:	e7c1      	b.n	800aa90 <_printf_common+0x4c>
 800ab0c:	0022      	movs	r2, r4
 800ab0e:	2301      	movs	r3, #1
 800ab10:	9901      	ldr	r1, [sp, #4]
 800ab12:	9800      	ldr	r0, [sp, #0]
 800ab14:	9e08      	ldr	r6, [sp, #32]
 800ab16:	321a      	adds	r2, #26
 800ab18:	47b0      	blx	r6
 800ab1a:	1c43      	adds	r3, r0, #1
 800ab1c:	d0e6      	beq.n	800aaec <_printf_common+0xa8>
 800ab1e:	3701      	adds	r7, #1
 800ab20:	e7d1      	b.n	800aac6 <_printf_common+0x82>
	...

0800ab24 <_printf_i>:
 800ab24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab26:	b08b      	sub	sp, #44	; 0x2c
 800ab28:	9206      	str	r2, [sp, #24]
 800ab2a:	000a      	movs	r2, r1
 800ab2c:	3243      	adds	r2, #67	; 0x43
 800ab2e:	9307      	str	r3, [sp, #28]
 800ab30:	9005      	str	r0, [sp, #20]
 800ab32:	9204      	str	r2, [sp, #16]
 800ab34:	7e0a      	ldrb	r2, [r1, #24]
 800ab36:	000c      	movs	r4, r1
 800ab38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab3a:	2a78      	cmp	r2, #120	; 0x78
 800ab3c:	d807      	bhi.n	800ab4e <_printf_i+0x2a>
 800ab3e:	2a62      	cmp	r2, #98	; 0x62
 800ab40:	d809      	bhi.n	800ab56 <_printf_i+0x32>
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	d100      	bne.n	800ab48 <_printf_i+0x24>
 800ab46:	e0c1      	b.n	800accc <_printf_i+0x1a8>
 800ab48:	2a58      	cmp	r2, #88	; 0x58
 800ab4a:	d100      	bne.n	800ab4e <_printf_i+0x2a>
 800ab4c:	e08c      	b.n	800ac68 <_printf_i+0x144>
 800ab4e:	0026      	movs	r6, r4
 800ab50:	3642      	adds	r6, #66	; 0x42
 800ab52:	7032      	strb	r2, [r6, #0]
 800ab54:	e022      	b.n	800ab9c <_printf_i+0x78>
 800ab56:	0010      	movs	r0, r2
 800ab58:	3863      	subs	r0, #99	; 0x63
 800ab5a:	2815      	cmp	r0, #21
 800ab5c:	d8f7      	bhi.n	800ab4e <_printf_i+0x2a>
 800ab5e:	f7f5 fae5 	bl	800012c <__gnu_thumb1_case_shi>
 800ab62:	0016      	.short	0x0016
 800ab64:	fff6001f 	.word	0xfff6001f
 800ab68:	fff6fff6 	.word	0xfff6fff6
 800ab6c:	001ffff6 	.word	0x001ffff6
 800ab70:	fff6fff6 	.word	0xfff6fff6
 800ab74:	fff6fff6 	.word	0xfff6fff6
 800ab78:	003600a8 	.word	0x003600a8
 800ab7c:	fff6009a 	.word	0xfff6009a
 800ab80:	00b9fff6 	.word	0x00b9fff6
 800ab84:	0036fff6 	.word	0x0036fff6
 800ab88:	fff6fff6 	.word	0xfff6fff6
 800ab8c:	009e      	.short	0x009e
 800ab8e:	0026      	movs	r6, r4
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	3642      	adds	r6, #66	; 0x42
 800ab94:	1d11      	adds	r1, r2, #4
 800ab96:	6019      	str	r1, [r3, #0]
 800ab98:	6813      	ldr	r3, [r2, #0]
 800ab9a:	7033      	strb	r3, [r6, #0]
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e0a7      	b.n	800acf0 <_printf_i+0x1cc>
 800aba0:	6808      	ldr	r0, [r1, #0]
 800aba2:	6819      	ldr	r1, [r3, #0]
 800aba4:	1d0a      	adds	r2, r1, #4
 800aba6:	0605      	lsls	r5, r0, #24
 800aba8:	d50b      	bpl.n	800abc2 <_printf_i+0x9e>
 800abaa:	680d      	ldr	r5, [r1, #0]
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	2d00      	cmp	r5, #0
 800abb0:	da03      	bge.n	800abba <_printf_i+0x96>
 800abb2:	232d      	movs	r3, #45	; 0x2d
 800abb4:	9a04      	ldr	r2, [sp, #16]
 800abb6:	426d      	negs	r5, r5
 800abb8:	7013      	strb	r3, [r2, #0]
 800abba:	4b61      	ldr	r3, [pc, #388]	; (800ad40 <_printf_i+0x21c>)
 800abbc:	270a      	movs	r7, #10
 800abbe:	9303      	str	r3, [sp, #12]
 800abc0:	e01b      	b.n	800abfa <_printf_i+0xd6>
 800abc2:	680d      	ldr	r5, [r1, #0]
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	0641      	lsls	r1, r0, #25
 800abc8:	d5f1      	bpl.n	800abae <_printf_i+0x8a>
 800abca:	b22d      	sxth	r5, r5
 800abcc:	e7ef      	b.n	800abae <_printf_i+0x8a>
 800abce:	680d      	ldr	r5, [r1, #0]
 800abd0:	6819      	ldr	r1, [r3, #0]
 800abd2:	1d08      	adds	r0, r1, #4
 800abd4:	6018      	str	r0, [r3, #0]
 800abd6:	062e      	lsls	r6, r5, #24
 800abd8:	d501      	bpl.n	800abde <_printf_i+0xba>
 800abda:	680d      	ldr	r5, [r1, #0]
 800abdc:	e003      	b.n	800abe6 <_printf_i+0xc2>
 800abde:	066d      	lsls	r5, r5, #25
 800abe0:	d5fb      	bpl.n	800abda <_printf_i+0xb6>
 800abe2:	680d      	ldr	r5, [r1, #0]
 800abe4:	b2ad      	uxth	r5, r5
 800abe6:	4b56      	ldr	r3, [pc, #344]	; (800ad40 <_printf_i+0x21c>)
 800abe8:	2708      	movs	r7, #8
 800abea:	9303      	str	r3, [sp, #12]
 800abec:	2a6f      	cmp	r2, #111	; 0x6f
 800abee:	d000      	beq.n	800abf2 <_printf_i+0xce>
 800abf0:	3702      	adds	r7, #2
 800abf2:	0023      	movs	r3, r4
 800abf4:	2200      	movs	r2, #0
 800abf6:	3343      	adds	r3, #67	; 0x43
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	6863      	ldr	r3, [r4, #4]
 800abfc:	60a3      	str	r3, [r4, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	db03      	blt.n	800ac0a <_printf_i+0xe6>
 800ac02:	2204      	movs	r2, #4
 800ac04:	6821      	ldr	r1, [r4, #0]
 800ac06:	4391      	bics	r1, r2
 800ac08:	6021      	str	r1, [r4, #0]
 800ac0a:	2d00      	cmp	r5, #0
 800ac0c:	d102      	bne.n	800ac14 <_printf_i+0xf0>
 800ac0e:	9e04      	ldr	r6, [sp, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00c      	beq.n	800ac2e <_printf_i+0x10a>
 800ac14:	9e04      	ldr	r6, [sp, #16]
 800ac16:	0028      	movs	r0, r5
 800ac18:	0039      	movs	r1, r7
 800ac1a:	f7f5 fb17 	bl	800024c <__aeabi_uidivmod>
 800ac1e:	9b03      	ldr	r3, [sp, #12]
 800ac20:	3e01      	subs	r6, #1
 800ac22:	5c5b      	ldrb	r3, [r3, r1]
 800ac24:	7033      	strb	r3, [r6, #0]
 800ac26:	002b      	movs	r3, r5
 800ac28:	0005      	movs	r5, r0
 800ac2a:	429f      	cmp	r7, r3
 800ac2c:	d9f3      	bls.n	800ac16 <_printf_i+0xf2>
 800ac2e:	2f08      	cmp	r7, #8
 800ac30:	d109      	bne.n	800ac46 <_printf_i+0x122>
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	07db      	lsls	r3, r3, #31
 800ac36:	d506      	bpl.n	800ac46 <_printf_i+0x122>
 800ac38:	6863      	ldr	r3, [r4, #4]
 800ac3a:	6922      	ldr	r2, [r4, #16]
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	dc02      	bgt.n	800ac46 <_printf_i+0x122>
 800ac40:	2330      	movs	r3, #48	; 0x30
 800ac42:	3e01      	subs	r6, #1
 800ac44:	7033      	strb	r3, [r6, #0]
 800ac46:	9b04      	ldr	r3, [sp, #16]
 800ac48:	1b9b      	subs	r3, r3, r6
 800ac4a:	6123      	str	r3, [r4, #16]
 800ac4c:	9b07      	ldr	r3, [sp, #28]
 800ac4e:	0021      	movs	r1, r4
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	9805      	ldr	r0, [sp, #20]
 800ac54:	9b06      	ldr	r3, [sp, #24]
 800ac56:	aa09      	add	r2, sp, #36	; 0x24
 800ac58:	f7ff fef4 	bl	800aa44 <_printf_common>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d14c      	bne.n	800acfa <_printf_i+0x1d6>
 800ac60:	2001      	movs	r0, #1
 800ac62:	4240      	negs	r0, r0
 800ac64:	b00b      	add	sp, #44	; 0x2c
 800ac66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac68:	3145      	adds	r1, #69	; 0x45
 800ac6a:	700a      	strb	r2, [r1, #0]
 800ac6c:	4a34      	ldr	r2, [pc, #208]	; (800ad40 <_printf_i+0x21c>)
 800ac6e:	9203      	str	r2, [sp, #12]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	6821      	ldr	r1, [r4, #0]
 800ac74:	ca20      	ldmia	r2!, {r5}
 800ac76:	601a      	str	r2, [r3, #0]
 800ac78:	0608      	lsls	r0, r1, #24
 800ac7a:	d516      	bpl.n	800acaa <_printf_i+0x186>
 800ac7c:	07cb      	lsls	r3, r1, #31
 800ac7e:	d502      	bpl.n	800ac86 <_printf_i+0x162>
 800ac80:	2320      	movs	r3, #32
 800ac82:	4319      	orrs	r1, r3
 800ac84:	6021      	str	r1, [r4, #0]
 800ac86:	2710      	movs	r7, #16
 800ac88:	2d00      	cmp	r5, #0
 800ac8a:	d1b2      	bne.n	800abf2 <_printf_i+0xce>
 800ac8c:	2320      	movs	r3, #32
 800ac8e:	6822      	ldr	r2, [r4, #0]
 800ac90:	439a      	bics	r2, r3
 800ac92:	6022      	str	r2, [r4, #0]
 800ac94:	e7ad      	b.n	800abf2 <_printf_i+0xce>
 800ac96:	2220      	movs	r2, #32
 800ac98:	6809      	ldr	r1, [r1, #0]
 800ac9a:	430a      	orrs	r2, r1
 800ac9c:	6022      	str	r2, [r4, #0]
 800ac9e:	0022      	movs	r2, r4
 800aca0:	2178      	movs	r1, #120	; 0x78
 800aca2:	3245      	adds	r2, #69	; 0x45
 800aca4:	7011      	strb	r1, [r2, #0]
 800aca6:	4a27      	ldr	r2, [pc, #156]	; (800ad44 <_printf_i+0x220>)
 800aca8:	e7e1      	b.n	800ac6e <_printf_i+0x14a>
 800acaa:	0648      	lsls	r0, r1, #25
 800acac:	d5e6      	bpl.n	800ac7c <_printf_i+0x158>
 800acae:	b2ad      	uxth	r5, r5
 800acb0:	e7e4      	b.n	800ac7c <_printf_i+0x158>
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	680d      	ldr	r5, [r1, #0]
 800acb6:	1d10      	adds	r0, r2, #4
 800acb8:	6949      	ldr	r1, [r1, #20]
 800acba:	6018      	str	r0, [r3, #0]
 800acbc:	6813      	ldr	r3, [r2, #0]
 800acbe:	062e      	lsls	r6, r5, #24
 800acc0:	d501      	bpl.n	800acc6 <_printf_i+0x1a2>
 800acc2:	6019      	str	r1, [r3, #0]
 800acc4:	e002      	b.n	800accc <_printf_i+0x1a8>
 800acc6:	066d      	lsls	r5, r5, #25
 800acc8:	d5fb      	bpl.n	800acc2 <_printf_i+0x19e>
 800acca:	8019      	strh	r1, [r3, #0]
 800accc:	2300      	movs	r3, #0
 800acce:	9e04      	ldr	r6, [sp, #16]
 800acd0:	6123      	str	r3, [r4, #16]
 800acd2:	e7bb      	b.n	800ac4c <_printf_i+0x128>
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	1d11      	adds	r1, r2, #4
 800acd8:	6019      	str	r1, [r3, #0]
 800acda:	6816      	ldr	r6, [r2, #0]
 800acdc:	2100      	movs	r1, #0
 800acde:	0030      	movs	r0, r6
 800ace0:	6862      	ldr	r2, [r4, #4]
 800ace2:	f002 ff05 	bl	800daf0 <memchr>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d001      	beq.n	800acee <_printf_i+0x1ca>
 800acea:	1b80      	subs	r0, r0, r6
 800acec:	6060      	str	r0, [r4, #4]
 800acee:	6863      	ldr	r3, [r4, #4]
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	2300      	movs	r3, #0
 800acf4:	9a04      	ldr	r2, [sp, #16]
 800acf6:	7013      	strb	r3, [r2, #0]
 800acf8:	e7a8      	b.n	800ac4c <_printf_i+0x128>
 800acfa:	6923      	ldr	r3, [r4, #16]
 800acfc:	0032      	movs	r2, r6
 800acfe:	9906      	ldr	r1, [sp, #24]
 800ad00:	9805      	ldr	r0, [sp, #20]
 800ad02:	9d07      	ldr	r5, [sp, #28]
 800ad04:	47a8      	blx	r5
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	d0aa      	beq.n	800ac60 <_printf_i+0x13c>
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	079b      	lsls	r3, r3, #30
 800ad0e:	d415      	bmi.n	800ad3c <_printf_i+0x218>
 800ad10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad12:	68e0      	ldr	r0, [r4, #12]
 800ad14:	4298      	cmp	r0, r3
 800ad16:	daa5      	bge.n	800ac64 <_printf_i+0x140>
 800ad18:	0018      	movs	r0, r3
 800ad1a:	e7a3      	b.n	800ac64 <_printf_i+0x140>
 800ad1c:	0022      	movs	r2, r4
 800ad1e:	2301      	movs	r3, #1
 800ad20:	9906      	ldr	r1, [sp, #24]
 800ad22:	9805      	ldr	r0, [sp, #20]
 800ad24:	9e07      	ldr	r6, [sp, #28]
 800ad26:	3219      	adds	r2, #25
 800ad28:	47b0      	blx	r6
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	d098      	beq.n	800ac60 <_printf_i+0x13c>
 800ad2e:	3501      	adds	r5, #1
 800ad30:	68e3      	ldr	r3, [r4, #12]
 800ad32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad34:	1a9b      	subs	r3, r3, r2
 800ad36:	42ab      	cmp	r3, r5
 800ad38:	dcf0      	bgt.n	800ad1c <_printf_i+0x1f8>
 800ad3a:	e7e9      	b.n	800ad10 <_printf_i+0x1ec>
 800ad3c:	2500      	movs	r5, #0
 800ad3e:	e7f7      	b.n	800ad30 <_printf_i+0x20c>
 800ad40:	0800f1e6 	.word	0x0800f1e6
 800ad44:	0800f1f7 	.word	0x0800f1f7

0800ad48 <_scanf_float>:
 800ad48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad4a:	b08b      	sub	sp, #44	; 0x2c
 800ad4c:	0015      	movs	r5, r2
 800ad4e:	9001      	str	r0, [sp, #4]
 800ad50:	22ae      	movs	r2, #174	; 0xae
 800ad52:	2000      	movs	r0, #0
 800ad54:	9306      	str	r3, [sp, #24]
 800ad56:	688b      	ldr	r3, [r1, #8]
 800ad58:	000e      	movs	r6, r1
 800ad5a:	1e59      	subs	r1, r3, #1
 800ad5c:	0052      	lsls	r2, r2, #1
 800ad5e:	9005      	str	r0, [sp, #20]
 800ad60:	4291      	cmp	r1, r2
 800ad62:	d905      	bls.n	800ad70 <_scanf_float+0x28>
 800ad64:	3b5e      	subs	r3, #94	; 0x5e
 800ad66:	3bff      	subs	r3, #255	; 0xff
 800ad68:	9305      	str	r3, [sp, #20]
 800ad6a:	235e      	movs	r3, #94	; 0x5e
 800ad6c:	33ff      	adds	r3, #255	; 0xff
 800ad6e:	60b3      	str	r3, [r6, #8]
 800ad70:	23f0      	movs	r3, #240	; 0xf0
 800ad72:	6832      	ldr	r2, [r6, #0]
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	4313      	orrs	r3, r2
 800ad78:	6033      	str	r3, [r6, #0]
 800ad7a:	0033      	movs	r3, r6
 800ad7c:	2400      	movs	r4, #0
 800ad7e:	331c      	adds	r3, #28
 800ad80:	001f      	movs	r7, r3
 800ad82:	9303      	str	r3, [sp, #12]
 800ad84:	9402      	str	r4, [sp, #8]
 800ad86:	9408      	str	r4, [sp, #32]
 800ad88:	9407      	str	r4, [sp, #28]
 800ad8a:	9400      	str	r4, [sp, #0]
 800ad8c:	9404      	str	r4, [sp, #16]
 800ad8e:	68b2      	ldr	r2, [r6, #8]
 800ad90:	2a00      	cmp	r2, #0
 800ad92:	d00a      	beq.n	800adaa <_scanf_float+0x62>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	2b4e      	cmp	r3, #78	; 0x4e
 800ad9a:	d844      	bhi.n	800ae26 <_scanf_float+0xde>
 800ad9c:	0018      	movs	r0, r3
 800ad9e:	2b40      	cmp	r3, #64	; 0x40
 800ada0:	d82c      	bhi.n	800adfc <_scanf_float+0xb4>
 800ada2:	382b      	subs	r0, #43	; 0x2b
 800ada4:	b2c1      	uxtb	r1, r0
 800ada6:	290e      	cmp	r1, #14
 800ada8:	d92a      	bls.n	800ae00 <_scanf_float+0xb8>
 800adaa:	9b00      	ldr	r3, [sp, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d003      	beq.n	800adb8 <_scanf_float+0x70>
 800adb0:	6832      	ldr	r2, [r6, #0]
 800adb2:	4ba4      	ldr	r3, [pc, #656]	; (800b044 <_scanf_float+0x2fc>)
 800adb4:	4013      	ands	r3, r2
 800adb6:	6033      	str	r3, [r6, #0]
 800adb8:	9b02      	ldr	r3, [sp, #8]
 800adba:	3b01      	subs	r3, #1
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d900      	bls.n	800adc2 <_scanf_float+0x7a>
 800adc0:	e0f9      	b.n	800afb6 <_scanf_float+0x26e>
 800adc2:	24be      	movs	r4, #190	; 0xbe
 800adc4:	0064      	lsls	r4, r4, #1
 800adc6:	9b03      	ldr	r3, [sp, #12]
 800adc8:	429f      	cmp	r7, r3
 800adca:	d900      	bls.n	800adce <_scanf_float+0x86>
 800adcc:	e0e9      	b.n	800afa2 <_scanf_float+0x25a>
 800adce:	2301      	movs	r3, #1
 800add0:	9302      	str	r3, [sp, #8]
 800add2:	e185      	b.n	800b0e0 <_scanf_float+0x398>
 800add4:	0018      	movs	r0, r3
 800add6:	3861      	subs	r0, #97	; 0x61
 800add8:	280d      	cmp	r0, #13
 800adda:	d8e6      	bhi.n	800adaa <_scanf_float+0x62>
 800addc:	f7f5 f9a6 	bl	800012c <__gnu_thumb1_case_shi>
 800ade0:	ffe50083 	.word	0xffe50083
 800ade4:	ffe5ffe5 	.word	0xffe5ffe5
 800ade8:	00a200b6 	.word	0x00a200b6
 800adec:	ffe5ffe5 	.word	0xffe5ffe5
 800adf0:	ffe50089 	.word	0xffe50089
 800adf4:	ffe5ffe5 	.word	0xffe5ffe5
 800adf8:	0065ffe5 	.word	0x0065ffe5
 800adfc:	3841      	subs	r0, #65	; 0x41
 800adfe:	e7eb      	b.n	800add8 <_scanf_float+0x90>
 800ae00:	280e      	cmp	r0, #14
 800ae02:	d8d2      	bhi.n	800adaa <_scanf_float+0x62>
 800ae04:	f7f5 f992 	bl	800012c <__gnu_thumb1_case_shi>
 800ae08:	ffd1004b 	.word	0xffd1004b
 800ae0c:	0098004b 	.word	0x0098004b
 800ae10:	0020ffd1 	.word	0x0020ffd1
 800ae14:	00400040 	.word	0x00400040
 800ae18:	00400040 	.word	0x00400040
 800ae1c:	00400040 	.word	0x00400040
 800ae20:	00400040 	.word	0x00400040
 800ae24:	0040      	.short	0x0040
 800ae26:	2b6e      	cmp	r3, #110	; 0x6e
 800ae28:	d809      	bhi.n	800ae3e <_scanf_float+0xf6>
 800ae2a:	2b60      	cmp	r3, #96	; 0x60
 800ae2c:	d8d2      	bhi.n	800add4 <_scanf_float+0x8c>
 800ae2e:	2b54      	cmp	r3, #84	; 0x54
 800ae30:	d07d      	beq.n	800af2e <_scanf_float+0x1e6>
 800ae32:	2b59      	cmp	r3, #89	; 0x59
 800ae34:	d1b9      	bne.n	800adaa <_scanf_float+0x62>
 800ae36:	2c07      	cmp	r4, #7
 800ae38:	d1b7      	bne.n	800adaa <_scanf_float+0x62>
 800ae3a:	2408      	movs	r4, #8
 800ae3c:	e02c      	b.n	800ae98 <_scanf_float+0x150>
 800ae3e:	2b74      	cmp	r3, #116	; 0x74
 800ae40:	d075      	beq.n	800af2e <_scanf_float+0x1e6>
 800ae42:	2b79      	cmp	r3, #121	; 0x79
 800ae44:	d0f7      	beq.n	800ae36 <_scanf_float+0xee>
 800ae46:	e7b0      	b.n	800adaa <_scanf_float+0x62>
 800ae48:	6831      	ldr	r1, [r6, #0]
 800ae4a:	05c8      	lsls	r0, r1, #23
 800ae4c:	d51c      	bpl.n	800ae88 <_scanf_float+0x140>
 800ae4e:	2380      	movs	r3, #128	; 0x80
 800ae50:	4399      	bics	r1, r3
 800ae52:	9b00      	ldr	r3, [sp, #0]
 800ae54:	6031      	str	r1, [r6, #0]
 800ae56:	3301      	adds	r3, #1
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	9b05      	ldr	r3, [sp, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d003      	beq.n	800ae68 <_scanf_float+0x120>
 800ae60:	3b01      	subs	r3, #1
 800ae62:	3201      	adds	r2, #1
 800ae64:	9305      	str	r3, [sp, #20]
 800ae66:	60b2      	str	r2, [r6, #8]
 800ae68:	68b3      	ldr	r3, [r6, #8]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	60b3      	str	r3, [r6, #8]
 800ae6e:	6933      	ldr	r3, [r6, #16]
 800ae70:	3301      	adds	r3, #1
 800ae72:	6133      	str	r3, [r6, #16]
 800ae74:	686b      	ldr	r3, [r5, #4]
 800ae76:	3b01      	subs	r3, #1
 800ae78:	606b      	str	r3, [r5, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	dc00      	bgt.n	800ae80 <_scanf_float+0x138>
 800ae7e:	e086      	b.n	800af8e <_scanf_float+0x246>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	3301      	adds	r3, #1
 800ae84:	602b      	str	r3, [r5, #0]
 800ae86:	e782      	b.n	800ad8e <_scanf_float+0x46>
 800ae88:	9a02      	ldr	r2, [sp, #8]
 800ae8a:	1912      	adds	r2, r2, r4
 800ae8c:	2a00      	cmp	r2, #0
 800ae8e:	d18c      	bne.n	800adaa <_scanf_float+0x62>
 800ae90:	4a6d      	ldr	r2, [pc, #436]	; (800b048 <_scanf_float+0x300>)
 800ae92:	6831      	ldr	r1, [r6, #0]
 800ae94:	400a      	ands	r2, r1
 800ae96:	6032      	str	r2, [r6, #0]
 800ae98:	703b      	strb	r3, [r7, #0]
 800ae9a:	3701      	adds	r7, #1
 800ae9c:	e7e4      	b.n	800ae68 <_scanf_float+0x120>
 800ae9e:	2180      	movs	r1, #128	; 0x80
 800aea0:	6832      	ldr	r2, [r6, #0]
 800aea2:	420a      	tst	r2, r1
 800aea4:	d081      	beq.n	800adaa <_scanf_float+0x62>
 800aea6:	438a      	bics	r2, r1
 800aea8:	e7f5      	b.n	800ae96 <_scanf_float+0x14e>
 800aeaa:	9a02      	ldr	r2, [sp, #8]
 800aeac:	2a00      	cmp	r2, #0
 800aeae:	d10f      	bne.n	800aed0 <_scanf_float+0x188>
 800aeb0:	9a00      	ldr	r2, [sp, #0]
 800aeb2:	2a00      	cmp	r2, #0
 800aeb4:	d10f      	bne.n	800aed6 <_scanf_float+0x18e>
 800aeb6:	6832      	ldr	r2, [r6, #0]
 800aeb8:	21e0      	movs	r1, #224	; 0xe0
 800aeba:	0010      	movs	r0, r2
 800aebc:	00c9      	lsls	r1, r1, #3
 800aebe:	4008      	ands	r0, r1
 800aec0:	4288      	cmp	r0, r1
 800aec2:	d108      	bne.n	800aed6 <_scanf_float+0x18e>
 800aec4:	4961      	ldr	r1, [pc, #388]	; (800b04c <_scanf_float+0x304>)
 800aec6:	400a      	ands	r2, r1
 800aec8:	6032      	str	r2, [r6, #0]
 800aeca:	2201      	movs	r2, #1
 800aecc:	9202      	str	r2, [sp, #8]
 800aece:	e7e3      	b.n	800ae98 <_scanf_float+0x150>
 800aed0:	9a02      	ldr	r2, [sp, #8]
 800aed2:	2a02      	cmp	r2, #2
 800aed4:	d059      	beq.n	800af8a <_scanf_float+0x242>
 800aed6:	2c01      	cmp	r4, #1
 800aed8:	d002      	beq.n	800aee0 <_scanf_float+0x198>
 800aeda:	2c04      	cmp	r4, #4
 800aedc:	d000      	beq.n	800aee0 <_scanf_float+0x198>
 800aede:	e764      	b.n	800adaa <_scanf_float+0x62>
 800aee0:	3401      	adds	r4, #1
 800aee2:	b2e4      	uxtb	r4, r4
 800aee4:	e7d8      	b.n	800ae98 <_scanf_float+0x150>
 800aee6:	9a02      	ldr	r2, [sp, #8]
 800aee8:	2a01      	cmp	r2, #1
 800aeea:	d000      	beq.n	800aeee <_scanf_float+0x1a6>
 800aeec:	e75d      	b.n	800adaa <_scanf_float+0x62>
 800aeee:	2202      	movs	r2, #2
 800aef0:	e7ec      	b.n	800aecc <_scanf_float+0x184>
 800aef2:	2c00      	cmp	r4, #0
 800aef4:	d110      	bne.n	800af18 <_scanf_float+0x1d0>
 800aef6:	9a00      	ldr	r2, [sp, #0]
 800aef8:	2a00      	cmp	r2, #0
 800aefa:	d000      	beq.n	800aefe <_scanf_float+0x1b6>
 800aefc:	e758      	b.n	800adb0 <_scanf_float+0x68>
 800aefe:	6832      	ldr	r2, [r6, #0]
 800af00:	21e0      	movs	r1, #224	; 0xe0
 800af02:	0010      	movs	r0, r2
 800af04:	00c9      	lsls	r1, r1, #3
 800af06:	4008      	ands	r0, r1
 800af08:	4288      	cmp	r0, r1
 800af0a:	d000      	beq.n	800af0e <_scanf_float+0x1c6>
 800af0c:	e754      	b.n	800adb8 <_scanf_float+0x70>
 800af0e:	494f      	ldr	r1, [pc, #316]	; (800b04c <_scanf_float+0x304>)
 800af10:	3401      	adds	r4, #1
 800af12:	400a      	ands	r2, r1
 800af14:	6032      	str	r2, [r6, #0]
 800af16:	e7bf      	b.n	800ae98 <_scanf_float+0x150>
 800af18:	21fd      	movs	r1, #253	; 0xfd
 800af1a:	1ee2      	subs	r2, r4, #3
 800af1c:	420a      	tst	r2, r1
 800af1e:	d000      	beq.n	800af22 <_scanf_float+0x1da>
 800af20:	e743      	b.n	800adaa <_scanf_float+0x62>
 800af22:	e7dd      	b.n	800aee0 <_scanf_float+0x198>
 800af24:	2c02      	cmp	r4, #2
 800af26:	d000      	beq.n	800af2a <_scanf_float+0x1e2>
 800af28:	e73f      	b.n	800adaa <_scanf_float+0x62>
 800af2a:	2403      	movs	r4, #3
 800af2c:	e7b4      	b.n	800ae98 <_scanf_float+0x150>
 800af2e:	2c06      	cmp	r4, #6
 800af30:	d000      	beq.n	800af34 <_scanf_float+0x1ec>
 800af32:	e73a      	b.n	800adaa <_scanf_float+0x62>
 800af34:	2407      	movs	r4, #7
 800af36:	e7af      	b.n	800ae98 <_scanf_float+0x150>
 800af38:	6832      	ldr	r2, [r6, #0]
 800af3a:	0591      	lsls	r1, r2, #22
 800af3c:	d400      	bmi.n	800af40 <_scanf_float+0x1f8>
 800af3e:	e734      	b.n	800adaa <_scanf_float+0x62>
 800af40:	4943      	ldr	r1, [pc, #268]	; (800b050 <_scanf_float+0x308>)
 800af42:	400a      	ands	r2, r1
 800af44:	6032      	str	r2, [r6, #0]
 800af46:	9a00      	ldr	r2, [sp, #0]
 800af48:	9204      	str	r2, [sp, #16]
 800af4a:	e7a5      	b.n	800ae98 <_scanf_float+0x150>
 800af4c:	21a0      	movs	r1, #160	; 0xa0
 800af4e:	2080      	movs	r0, #128	; 0x80
 800af50:	6832      	ldr	r2, [r6, #0]
 800af52:	00c9      	lsls	r1, r1, #3
 800af54:	4011      	ands	r1, r2
 800af56:	00c0      	lsls	r0, r0, #3
 800af58:	4281      	cmp	r1, r0
 800af5a:	d006      	beq.n	800af6a <_scanf_float+0x222>
 800af5c:	4202      	tst	r2, r0
 800af5e:	d100      	bne.n	800af62 <_scanf_float+0x21a>
 800af60:	e723      	b.n	800adaa <_scanf_float+0x62>
 800af62:	9900      	ldr	r1, [sp, #0]
 800af64:	2900      	cmp	r1, #0
 800af66:	d100      	bne.n	800af6a <_scanf_float+0x222>
 800af68:	e726      	b.n	800adb8 <_scanf_float+0x70>
 800af6a:	0591      	lsls	r1, r2, #22
 800af6c:	d404      	bmi.n	800af78 <_scanf_float+0x230>
 800af6e:	9900      	ldr	r1, [sp, #0]
 800af70:	9804      	ldr	r0, [sp, #16]
 800af72:	9708      	str	r7, [sp, #32]
 800af74:	1a09      	subs	r1, r1, r0
 800af76:	9107      	str	r1, [sp, #28]
 800af78:	4934      	ldr	r1, [pc, #208]	; (800b04c <_scanf_float+0x304>)
 800af7a:	400a      	ands	r2, r1
 800af7c:	21c0      	movs	r1, #192	; 0xc0
 800af7e:	0049      	lsls	r1, r1, #1
 800af80:	430a      	orrs	r2, r1
 800af82:	6032      	str	r2, [r6, #0]
 800af84:	2200      	movs	r2, #0
 800af86:	9200      	str	r2, [sp, #0]
 800af88:	e786      	b.n	800ae98 <_scanf_float+0x150>
 800af8a:	2203      	movs	r2, #3
 800af8c:	e79e      	b.n	800aecc <_scanf_float+0x184>
 800af8e:	23c0      	movs	r3, #192	; 0xc0
 800af90:	005b      	lsls	r3, r3, #1
 800af92:	0029      	movs	r1, r5
 800af94:	58f3      	ldr	r3, [r6, r3]
 800af96:	9801      	ldr	r0, [sp, #4]
 800af98:	4798      	blx	r3
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d100      	bne.n	800afa0 <_scanf_float+0x258>
 800af9e:	e6f6      	b.n	800ad8e <_scanf_float+0x46>
 800afa0:	e703      	b.n	800adaa <_scanf_float+0x62>
 800afa2:	3f01      	subs	r7, #1
 800afa4:	5933      	ldr	r3, [r6, r4]
 800afa6:	002a      	movs	r2, r5
 800afa8:	7839      	ldrb	r1, [r7, #0]
 800afaa:	9801      	ldr	r0, [sp, #4]
 800afac:	4798      	blx	r3
 800afae:	6933      	ldr	r3, [r6, #16]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	6133      	str	r3, [r6, #16]
 800afb4:	e707      	b.n	800adc6 <_scanf_float+0x7e>
 800afb6:	1e63      	subs	r3, r4, #1
 800afb8:	2b06      	cmp	r3, #6
 800afba:	d80e      	bhi.n	800afda <_scanf_float+0x292>
 800afbc:	9702      	str	r7, [sp, #8]
 800afbe:	2c02      	cmp	r4, #2
 800afc0:	d920      	bls.n	800b004 <_scanf_float+0x2bc>
 800afc2:	1be3      	subs	r3, r4, r7
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	9305      	str	r3, [sp, #20]
 800afc8:	9b02      	ldr	r3, [sp, #8]
 800afca:	9a05      	ldr	r2, [sp, #20]
 800afcc:	189b      	adds	r3, r3, r2
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d827      	bhi.n	800b024 <_scanf_float+0x2dc>
 800afd4:	3c03      	subs	r4, #3
 800afd6:	b2e4      	uxtb	r4, r4
 800afd8:	1b3f      	subs	r7, r7, r4
 800afda:	6833      	ldr	r3, [r6, #0]
 800afdc:	05da      	lsls	r2, r3, #23
 800afde:	d554      	bpl.n	800b08a <_scanf_float+0x342>
 800afe0:	055b      	lsls	r3, r3, #21
 800afe2:	d537      	bpl.n	800b054 <_scanf_float+0x30c>
 800afe4:	24be      	movs	r4, #190	; 0xbe
 800afe6:	0064      	lsls	r4, r4, #1
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	429f      	cmp	r7, r3
 800afec:	d800      	bhi.n	800aff0 <_scanf_float+0x2a8>
 800afee:	e6ee      	b.n	800adce <_scanf_float+0x86>
 800aff0:	3f01      	subs	r7, #1
 800aff2:	5933      	ldr	r3, [r6, r4]
 800aff4:	002a      	movs	r2, r5
 800aff6:	7839      	ldrb	r1, [r7, #0]
 800aff8:	9801      	ldr	r0, [sp, #4]
 800affa:	4798      	blx	r3
 800affc:	6933      	ldr	r3, [r6, #16]
 800affe:	3b01      	subs	r3, #1
 800b000:	6133      	str	r3, [r6, #16]
 800b002:	e7f1      	b.n	800afe8 <_scanf_float+0x2a0>
 800b004:	24be      	movs	r4, #190	; 0xbe
 800b006:	0064      	lsls	r4, r4, #1
 800b008:	9b03      	ldr	r3, [sp, #12]
 800b00a:	429f      	cmp	r7, r3
 800b00c:	d800      	bhi.n	800b010 <_scanf_float+0x2c8>
 800b00e:	e6de      	b.n	800adce <_scanf_float+0x86>
 800b010:	3f01      	subs	r7, #1
 800b012:	5933      	ldr	r3, [r6, r4]
 800b014:	002a      	movs	r2, r5
 800b016:	7839      	ldrb	r1, [r7, #0]
 800b018:	9801      	ldr	r0, [sp, #4]
 800b01a:	4798      	blx	r3
 800b01c:	6933      	ldr	r3, [r6, #16]
 800b01e:	3b01      	subs	r3, #1
 800b020:	6133      	str	r3, [r6, #16]
 800b022:	e7f1      	b.n	800b008 <_scanf_float+0x2c0>
 800b024:	9b02      	ldr	r3, [sp, #8]
 800b026:	002a      	movs	r2, r5
 800b028:	3b01      	subs	r3, #1
 800b02a:	7819      	ldrb	r1, [r3, #0]
 800b02c:	9302      	str	r3, [sp, #8]
 800b02e:	23be      	movs	r3, #190	; 0xbe
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	58f3      	ldr	r3, [r6, r3]
 800b034:	9801      	ldr	r0, [sp, #4]
 800b036:	9309      	str	r3, [sp, #36]	; 0x24
 800b038:	4798      	blx	r3
 800b03a:	6933      	ldr	r3, [r6, #16]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	6133      	str	r3, [r6, #16]
 800b040:	e7c2      	b.n	800afc8 <_scanf_float+0x280>
 800b042:	46c0      	nop			; (mov r8, r8)
 800b044:	fffffeff 	.word	0xfffffeff
 800b048:	fffffe7f 	.word	0xfffffe7f
 800b04c:	fffff87f 	.word	0xfffff87f
 800b050:	fffffd7f 	.word	0xfffffd7f
 800b054:	6933      	ldr	r3, [r6, #16]
 800b056:	1e7c      	subs	r4, r7, #1
 800b058:	7821      	ldrb	r1, [r4, #0]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	6133      	str	r3, [r6, #16]
 800b05e:	2965      	cmp	r1, #101	; 0x65
 800b060:	d00c      	beq.n	800b07c <_scanf_float+0x334>
 800b062:	2945      	cmp	r1, #69	; 0x45
 800b064:	d00a      	beq.n	800b07c <_scanf_float+0x334>
 800b066:	23be      	movs	r3, #190	; 0xbe
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	58f3      	ldr	r3, [r6, r3]
 800b06c:	002a      	movs	r2, r5
 800b06e:	9801      	ldr	r0, [sp, #4]
 800b070:	4798      	blx	r3
 800b072:	6933      	ldr	r3, [r6, #16]
 800b074:	1ebc      	subs	r4, r7, #2
 800b076:	3b01      	subs	r3, #1
 800b078:	7821      	ldrb	r1, [r4, #0]
 800b07a:	6133      	str	r3, [r6, #16]
 800b07c:	23be      	movs	r3, #190	; 0xbe
 800b07e:	005b      	lsls	r3, r3, #1
 800b080:	002a      	movs	r2, r5
 800b082:	58f3      	ldr	r3, [r6, r3]
 800b084:	9801      	ldr	r0, [sp, #4]
 800b086:	4798      	blx	r3
 800b088:	0027      	movs	r7, r4
 800b08a:	6832      	ldr	r2, [r6, #0]
 800b08c:	2310      	movs	r3, #16
 800b08e:	0011      	movs	r1, r2
 800b090:	4019      	ands	r1, r3
 800b092:	9102      	str	r1, [sp, #8]
 800b094:	421a      	tst	r2, r3
 800b096:	d158      	bne.n	800b14a <_scanf_float+0x402>
 800b098:	23c0      	movs	r3, #192	; 0xc0
 800b09a:	7039      	strb	r1, [r7, #0]
 800b09c:	6832      	ldr	r2, [r6, #0]
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	2280      	movs	r2, #128	; 0x80
 800b0a4:	00d2      	lsls	r2, r2, #3
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d11d      	bne.n	800b0e6 <_scanf_float+0x39e>
 800b0aa:	9b04      	ldr	r3, [sp, #16]
 800b0ac:	9a00      	ldr	r2, [sp, #0]
 800b0ae:	9900      	ldr	r1, [sp, #0]
 800b0b0:	1a9a      	subs	r2, r3, r2
 800b0b2:	428b      	cmp	r3, r1
 800b0b4:	d124      	bne.n	800b100 <_scanf_float+0x3b8>
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	9903      	ldr	r1, [sp, #12]
 800b0ba:	9801      	ldr	r0, [sp, #4]
 800b0bc:	f001 f804 	bl	800c0c8 <_strtod_r>
 800b0c0:	9b06      	ldr	r3, [sp, #24]
 800b0c2:	000d      	movs	r5, r1
 800b0c4:	6831      	ldr	r1, [r6, #0]
 800b0c6:	0004      	movs	r4, r0
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	078a      	lsls	r2, r1, #30
 800b0cc:	d525      	bpl.n	800b11a <_scanf_float+0x3d2>
 800b0ce:	1d1a      	adds	r2, r3, #4
 800b0d0:	9906      	ldr	r1, [sp, #24]
 800b0d2:	600a      	str	r2, [r1, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	601c      	str	r4, [r3, #0]
 800b0d8:	605d      	str	r5, [r3, #4]
 800b0da:	68f3      	ldr	r3, [r6, #12]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	60f3      	str	r3, [r6, #12]
 800b0e0:	9802      	ldr	r0, [sp, #8]
 800b0e2:	b00b      	add	sp, #44	; 0x2c
 800b0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0e6:	9b07      	ldr	r3, [sp, #28]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d0e4      	beq.n	800b0b6 <_scanf_float+0x36e>
 800b0ec:	9b08      	ldr	r3, [sp, #32]
 800b0ee:	9a02      	ldr	r2, [sp, #8]
 800b0f0:	1c59      	adds	r1, r3, #1
 800b0f2:	9801      	ldr	r0, [sp, #4]
 800b0f4:	230a      	movs	r3, #10
 800b0f6:	f001 f87d 	bl	800c1f4 <_strtol_r>
 800b0fa:	9b07      	ldr	r3, [sp, #28]
 800b0fc:	9f08      	ldr	r7, [sp, #32]
 800b0fe:	1ac2      	subs	r2, r0, r3
 800b100:	0033      	movs	r3, r6
 800b102:	3370      	adds	r3, #112	; 0x70
 800b104:	33ff      	adds	r3, #255	; 0xff
 800b106:	429f      	cmp	r7, r3
 800b108:	d302      	bcc.n	800b110 <_scanf_float+0x3c8>
 800b10a:	0037      	movs	r7, r6
 800b10c:	376f      	adds	r7, #111	; 0x6f
 800b10e:	37ff      	adds	r7, #255	; 0xff
 800b110:	0038      	movs	r0, r7
 800b112:	490f      	ldr	r1, [pc, #60]	; (800b150 <_scanf_float+0x408>)
 800b114:	f000 f940 	bl	800b398 <siprintf>
 800b118:	e7cd      	b.n	800b0b6 <_scanf_float+0x36e>
 800b11a:	1d1a      	adds	r2, r3, #4
 800b11c:	0749      	lsls	r1, r1, #29
 800b11e:	d4d7      	bmi.n	800b0d0 <_scanf_float+0x388>
 800b120:	9906      	ldr	r1, [sp, #24]
 800b122:	0020      	movs	r0, r4
 800b124:	600a      	str	r2, [r1, #0]
 800b126:	681f      	ldr	r7, [r3, #0]
 800b128:	0022      	movs	r2, r4
 800b12a:	002b      	movs	r3, r5
 800b12c:	0029      	movs	r1, r5
 800b12e:	f7f7 fddd 	bl	8002cec <__aeabi_dcmpun>
 800b132:	2800      	cmp	r0, #0
 800b134:	d004      	beq.n	800b140 <_scanf_float+0x3f8>
 800b136:	4807      	ldr	r0, [pc, #28]	; (800b154 <_scanf_float+0x40c>)
 800b138:	f000 f92a 	bl	800b390 <nanf>
 800b13c:	6038      	str	r0, [r7, #0]
 800b13e:	e7cc      	b.n	800b0da <_scanf_float+0x392>
 800b140:	0020      	movs	r0, r4
 800b142:	0029      	movs	r1, r5
 800b144:	f7f7 fe7c 	bl	8002e40 <__aeabi_d2f>
 800b148:	e7f8      	b.n	800b13c <_scanf_float+0x3f4>
 800b14a:	2300      	movs	r3, #0
 800b14c:	e640      	b.n	800add0 <_scanf_float+0x88>
 800b14e:	46c0      	nop			; (mov r8, r8)
 800b150:	0800f208 	.word	0x0800f208
 800b154:	0800f610 	.word	0x0800f610

0800b158 <iprintf>:
 800b158:	b40f      	push	{r0, r1, r2, r3}
 800b15a:	4b0b      	ldr	r3, [pc, #44]	; (800b188 <iprintf+0x30>)
 800b15c:	b513      	push	{r0, r1, r4, lr}
 800b15e:	681c      	ldr	r4, [r3, #0]
 800b160:	2c00      	cmp	r4, #0
 800b162:	d005      	beq.n	800b170 <iprintf+0x18>
 800b164:	69a3      	ldr	r3, [r4, #24]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d102      	bne.n	800b170 <iprintf+0x18>
 800b16a:	0020      	movs	r0, r4
 800b16c:	f7ff f80e 	bl	800a18c <__sinit>
 800b170:	ab05      	add	r3, sp, #20
 800b172:	0020      	movs	r0, r4
 800b174:	9a04      	ldr	r2, [sp, #16]
 800b176:	68a1      	ldr	r1, [r4, #8]
 800b178:	9301      	str	r3, [sp, #4]
 800b17a:	f003 fb9f 	bl	800e8bc <_vfiprintf_r>
 800b17e:	bc16      	pop	{r1, r2, r4}
 800b180:	bc08      	pop	{r3}
 800b182:	b004      	add	sp, #16
 800b184:	4718      	bx	r3
 800b186:	46c0      	nop			; (mov r8, r8)
 800b188:	2000003c 	.word	0x2000003c

0800b18c <_puts_r>:
 800b18c:	b570      	push	{r4, r5, r6, lr}
 800b18e:	0005      	movs	r5, r0
 800b190:	000e      	movs	r6, r1
 800b192:	2800      	cmp	r0, #0
 800b194:	d004      	beq.n	800b1a0 <_puts_r+0x14>
 800b196:	6983      	ldr	r3, [r0, #24]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <_puts_r+0x14>
 800b19c:	f7fe fff6 	bl	800a18c <__sinit>
 800b1a0:	69ab      	ldr	r3, [r5, #24]
 800b1a2:	68ac      	ldr	r4, [r5, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <_puts_r+0x22>
 800b1a8:	0028      	movs	r0, r5
 800b1aa:	f7fe ffef 	bl	800a18c <__sinit>
 800b1ae:	4b2d      	ldr	r3, [pc, #180]	; (800b264 <_puts_r+0xd8>)
 800b1b0:	429c      	cmp	r4, r3
 800b1b2:	d122      	bne.n	800b1fa <_puts_r+0x6e>
 800b1b4:	686c      	ldr	r4, [r5, #4]
 800b1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1b8:	07db      	lsls	r3, r3, #31
 800b1ba:	d405      	bmi.n	800b1c8 <_puts_r+0x3c>
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	059b      	lsls	r3, r3, #22
 800b1c0:	d402      	bmi.n	800b1c8 <_puts_r+0x3c>
 800b1c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1c4:	f7ff f8a7 	bl	800a316 <__retarget_lock_acquire_recursive>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	071b      	lsls	r3, r3, #28
 800b1cc:	d502      	bpl.n	800b1d4 <_puts_r+0x48>
 800b1ce:	6923      	ldr	r3, [r4, #16]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d129      	bne.n	800b228 <_puts_r+0x9c>
 800b1d4:	0021      	movs	r1, r4
 800b1d6:	0028      	movs	r0, r5
 800b1d8:	f001 f87a 	bl	800c2d0 <__swsetup_r>
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d023      	beq.n	800b228 <_puts_r+0x9c>
 800b1e0:	2501      	movs	r5, #1
 800b1e2:	426d      	negs	r5, r5
 800b1e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1e6:	07db      	lsls	r3, r3, #31
 800b1e8:	d405      	bmi.n	800b1f6 <_puts_r+0x6a>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	059b      	lsls	r3, r3, #22
 800b1ee:	d402      	bmi.n	800b1f6 <_puts_r+0x6a>
 800b1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1f2:	f7ff f891 	bl	800a318 <__retarget_lock_release_recursive>
 800b1f6:	0028      	movs	r0, r5
 800b1f8:	bd70      	pop	{r4, r5, r6, pc}
 800b1fa:	4b1b      	ldr	r3, [pc, #108]	; (800b268 <_puts_r+0xdc>)
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	d101      	bne.n	800b204 <_puts_r+0x78>
 800b200:	68ac      	ldr	r4, [r5, #8]
 800b202:	e7d8      	b.n	800b1b6 <_puts_r+0x2a>
 800b204:	4b19      	ldr	r3, [pc, #100]	; (800b26c <_puts_r+0xe0>)
 800b206:	429c      	cmp	r4, r3
 800b208:	d1d5      	bne.n	800b1b6 <_puts_r+0x2a>
 800b20a:	68ec      	ldr	r4, [r5, #12]
 800b20c:	e7d3      	b.n	800b1b6 <_puts_r+0x2a>
 800b20e:	3601      	adds	r6, #1
 800b210:	60a3      	str	r3, [r4, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	da04      	bge.n	800b220 <_puts_r+0x94>
 800b216:	69a2      	ldr	r2, [r4, #24]
 800b218:	429a      	cmp	r2, r3
 800b21a:	dc16      	bgt.n	800b24a <_puts_r+0xbe>
 800b21c:	290a      	cmp	r1, #10
 800b21e:	d014      	beq.n	800b24a <_puts_r+0xbe>
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	6022      	str	r2, [r4, #0]
 800b226:	7019      	strb	r1, [r3, #0]
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	7831      	ldrb	r1, [r6, #0]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	2900      	cmp	r1, #0
 800b230:	d1ed      	bne.n	800b20e <_puts_r+0x82>
 800b232:	60a3      	str	r3, [r4, #8]
 800b234:	2b00      	cmp	r3, #0
 800b236:	da0f      	bge.n	800b258 <_puts_r+0xcc>
 800b238:	0028      	movs	r0, r5
 800b23a:	0022      	movs	r2, r4
 800b23c:	310a      	adds	r1, #10
 800b23e:	f000 ffdd 	bl	800c1fc <__swbuf_r>
 800b242:	250a      	movs	r5, #10
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d1cd      	bne.n	800b1e4 <_puts_r+0x58>
 800b248:	e7ca      	b.n	800b1e0 <_puts_r+0x54>
 800b24a:	0022      	movs	r2, r4
 800b24c:	0028      	movs	r0, r5
 800b24e:	f000 ffd5 	bl	800c1fc <__swbuf_r>
 800b252:	1c43      	adds	r3, r0, #1
 800b254:	d1e8      	bne.n	800b228 <_puts_r+0x9c>
 800b256:	e7c3      	b.n	800b1e0 <_puts_r+0x54>
 800b258:	250a      	movs	r5, #10
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	1c5a      	adds	r2, r3, #1
 800b25e:	6022      	str	r2, [r4, #0]
 800b260:	701d      	strb	r5, [r3, #0]
 800b262:	e7bf      	b.n	800b1e4 <_puts_r+0x58>
 800b264:	0800f190 	.word	0x0800f190
 800b268:	0800f1b0 	.word	0x0800f1b0
 800b26c:	0800f170 	.word	0x0800f170

0800b270 <puts>:
 800b270:	b510      	push	{r4, lr}
 800b272:	4b03      	ldr	r3, [pc, #12]	; (800b280 <puts+0x10>)
 800b274:	0001      	movs	r1, r0
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	f7ff ff88 	bl	800b18c <_puts_r>
 800b27c:	bd10      	pop	{r4, pc}
 800b27e:	46c0      	nop			; (mov r8, r8)
 800b280:	2000003c 	.word	0x2000003c

0800b284 <cleanup_glue>:
 800b284:	b570      	push	{r4, r5, r6, lr}
 800b286:	000d      	movs	r5, r1
 800b288:	6809      	ldr	r1, [r1, #0]
 800b28a:	0004      	movs	r4, r0
 800b28c:	2900      	cmp	r1, #0
 800b28e:	d001      	beq.n	800b294 <cleanup_glue+0x10>
 800b290:	f7ff fff8 	bl	800b284 <cleanup_glue>
 800b294:	0029      	movs	r1, r5
 800b296:	0020      	movs	r0, r4
 800b298:	f003 f93c 	bl	800e514 <_free_r>
 800b29c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2a0 <_reclaim_reent>:
 800b2a0:	4b31      	ldr	r3, [pc, #196]	; (800b368 <_reclaim_reent+0xc8>)
 800b2a2:	b570      	push	{r4, r5, r6, lr}
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	0004      	movs	r4, r0
 800b2a8:	4283      	cmp	r3, r0
 800b2aa:	d049      	beq.n	800b340 <_reclaim_reent+0xa0>
 800b2ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00a      	beq.n	800b2c8 <_reclaim_reent+0x28>
 800b2b2:	2500      	movs	r5, #0
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	42ab      	cmp	r3, r5
 800b2b8:	d147      	bne.n	800b34a <_reclaim_reent+0xaa>
 800b2ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2bc:	6819      	ldr	r1, [r3, #0]
 800b2be:	2900      	cmp	r1, #0
 800b2c0:	d002      	beq.n	800b2c8 <_reclaim_reent+0x28>
 800b2c2:	0020      	movs	r0, r4
 800b2c4:	f003 f926 	bl	800e514 <_free_r>
 800b2c8:	6961      	ldr	r1, [r4, #20]
 800b2ca:	2900      	cmp	r1, #0
 800b2cc:	d002      	beq.n	800b2d4 <_reclaim_reent+0x34>
 800b2ce:	0020      	movs	r0, r4
 800b2d0:	f003 f920 	bl	800e514 <_free_r>
 800b2d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2d6:	2900      	cmp	r1, #0
 800b2d8:	d002      	beq.n	800b2e0 <_reclaim_reent+0x40>
 800b2da:	0020      	movs	r0, r4
 800b2dc:	f003 f91a 	bl	800e514 <_free_r>
 800b2e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b2e2:	2900      	cmp	r1, #0
 800b2e4:	d002      	beq.n	800b2ec <_reclaim_reent+0x4c>
 800b2e6:	0020      	movs	r0, r4
 800b2e8:	f003 f914 	bl	800e514 <_free_r>
 800b2ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b2ee:	2900      	cmp	r1, #0
 800b2f0:	d002      	beq.n	800b2f8 <_reclaim_reent+0x58>
 800b2f2:	0020      	movs	r0, r4
 800b2f4:	f003 f90e 	bl	800e514 <_free_r>
 800b2f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b2fa:	2900      	cmp	r1, #0
 800b2fc:	d002      	beq.n	800b304 <_reclaim_reent+0x64>
 800b2fe:	0020      	movs	r0, r4
 800b300:	f003 f908 	bl	800e514 <_free_r>
 800b304:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b306:	2900      	cmp	r1, #0
 800b308:	d002      	beq.n	800b310 <_reclaim_reent+0x70>
 800b30a:	0020      	movs	r0, r4
 800b30c:	f003 f902 	bl	800e514 <_free_r>
 800b310:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b312:	2900      	cmp	r1, #0
 800b314:	d002      	beq.n	800b31c <_reclaim_reent+0x7c>
 800b316:	0020      	movs	r0, r4
 800b318:	f003 f8fc 	bl	800e514 <_free_r>
 800b31c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b31e:	2900      	cmp	r1, #0
 800b320:	d002      	beq.n	800b328 <_reclaim_reent+0x88>
 800b322:	0020      	movs	r0, r4
 800b324:	f003 f8f6 	bl	800e514 <_free_r>
 800b328:	69a3      	ldr	r3, [r4, #24]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d008      	beq.n	800b340 <_reclaim_reent+0xa0>
 800b32e:	0020      	movs	r0, r4
 800b330:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b332:	4798      	blx	r3
 800b334:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b336:	2900      	cmp	r1, #0
 800b338:	d002      	beq.n	800b340 <_reclaim_reent+0xa0>
 800b33a:	0020      	movs	r0, r4
 800b33c:	f7ff ffa2 	bl	800b284 <cleanup_glue>
 800b340:	bd70      	pop	{r4, r5, r6, pc}
 800b342:	5949      	ldr	r1, [r1, r5]
 800b344:	2900      	cmp	r1, #0
 800b346:	d108      	bne.n	800b35a <_reclaim_reent+0xba>
 800b348:	3504      	adds	r5, #4
 800b34a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b34c:	68d9      	ldr	r1, [r3, #12]
 800b34e:	2d80      	cmp	r5, #128	; 0x80
 800b350:	d1f7      	bne.n	800b342 <_reclaim_reent+0xa2>
 800b352:	0020      	movs	r0, r4
 800b354:	f003 f8de 	bl	800e514 <_free_r>
 800b358:	e7af      	b.n	800b2ba <_reclaim_reent+0x1a>
 800b35a:	680e      	ldr	r6, [r1, #0]
 800b35c:	0020      	movs	r0, r4
 800b35e:	f003 f8d9 	bl	800e514 <_free_r>
 800b362:	0031      	movs	r1, r6
 800b364:	e7ee      	b.n	800b344 <_reclaim_reent+0xa4>
 800b366:	46c0      	nop			; (mov r8, r8)
 800b368:	2000003c 	.word	0x2000003c

0800b36c <_sbrk_r>:
 800b36c:	2300      	movs	r3, #0
 800b36e:	b570      	push	{r4, r5, r6, lr}
 800b370:	4d06      	ldr	r5, [pc, #24]	; (800b38c <_sbrk_r+0x20>)
 800b372:	0004      	movs	r4, r0
 800b374:	0008      	movs	r0, r1
 800b376:	602b      	str	r3, [r5, #0]
 800b378:	f7f8 faba 	bl	80038f0 <_sbrk>
 800b37c:	1c43      	adds	r3, r0, #1
 800b37e:	d103      	bne.n	800b388 <_sbrk_r+0x1c>
 800b380:	682b      	ldr	r3, [r5, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d000      	beq.n	800b388 <_sbrk_r+0x1c>
 800b386:	6023      	str	r3, [r4, #0]
 800b388:	bd70      	pop	{r4, r5, r6, pc}
 800b38a:	46c0      	nop			; (mov r8, r8)
 800b38c:	20001d38 	.word	0x20001d38

0800b390 <nanf>:
 800b390:	4800      	ldr	r0, [pc, #0]	; (800b394 <nanf+0x4>)
 800b392:	4770      	bx	lr
 800b394:	7fc00000 	.word	0x7fc00000

0800b398 <siprintf>:
 800b398:	b40e      	push	{r1, r2, r3}
 800b39a:	b500      	push	{lr}
 800b39c:	490b      	ldr	r1, [pc, #44]	; (800b3cc <siprintf+0x34>)
 800b39e:	b09c      	sub	sp, #112	; 0x70
 800b3a0:	ab1d      	add	r3, sp, #116	; 0x74
 800b3a2:	9002      	str	r0, [sp, #8]
 800b3a4:	9006      	str	r0, [sp, #24]
 800b3a6:	9107      	str	r1, [sp, #28]
 800b3a8:	9104      	str	r1, [sp, #16]
 800b3aa:	4809      	ldr	r0, [pc, #36]	; (800b3d0 <siprintf+0x38>)
 800b3ac:	4909      	ldr	r1, [pc, #36]	; (800b3d4 <siprintf+0x3c>)
 800b3ae:	cb04      	ldmia	r3!, {r2}
 800b3b0:	9105      	str	r1, [sp, #20]
 800b3b2:	6800      	ldr	r0, [r0, #0]
 800b3b4:	a902      	add	r1, sp, #8
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	f003 f958 	bl	800e66c <_svfiprintf_r>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	9a02      	ldr	r2, [sp, #8]
 800b3c0:	7013      	strb	r3, [r2, #0]
 800b3c2:	b01c      	add	sp, #112	; 0x70
 800b3c4:	bc08      	pop	{r3}
 800b3c6:	b003      	add	sp, #12
 800b3c8:	4718      	bx	r3
 800b3ca:	46c0      	nop			; (mov r8, r8)
 800b3cc:	7fffffff 	.word	0x7fffffff
 800b3d0:	2000003c 	.word	0x2000003c
 800b3d4:	ffff0208 	.word	0xffff0208

0800b3d8 <__sread>:
 800b3d8:	b570      	push	{r4, r5, r6, lr}
 800b3da:	000c      	movs	r4, r1
 800b3dc:	250e      	movs	r5, #14
 800b3de:	5f49      	ldrsh	r1, [r1, r5]
 800b3e0:	f003 fba6 	bl	800eb30 <_read_r>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	db03      	blt.n	800b3f0 <__sread+0x18>
 800b3e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b3ea:	181b      	adds	r3, r3, r0
 800b3ec:	6563      	str	r3, [r4, #84]	; 0x54
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}
 800b3f0:	89a3      	ldrh	r3, [r4, #12]
 800b3f2:	4a02      	ldr	r2, [pc, #8]	; (800b3fc <__sread+0x24>)
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	81a3      	strh	r3, [r4, #12]
 800b3f8:	e7f9      	b.n	800b3ee <__sread+0x16>
 800b3fa:	46c0      	nop			; (mov r8, r8)
 800b3fc:	ffffefff 	.word	0xffffefff

0800b400 <__swrite>:
 800b400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b402:	001f      	movs	r7, r3
 800b404:	898b      	ldrh	r3, [r1, #12]
 800b406:	0005      	movs	r5, r0
 800b408:	000c      	movs	r4, r1
 800b40a:	0016      	movs	r6, r2
 800b40c:	05db      	lsls	r3, r3, #23
 800b40e:	d505      	bpl.n	800b41c <__swrite+0x1c>
 800b410:	230e      	movs	r3, #14
 800b412:	5ec9      	ldrsh	r1, [r1, r3]
 800b414:	2200      	movs	r2, #0
 800b416:	2302      	movs	r3, #2
 800b418:	f002 face 	bl	800d9b8 <_lseek_r>
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	4a05      	ldr	r2, [pc, #20]	; (800b434 <__swrite+0x34>)
 800b420:	0028      	movs	r0, r5
 800b422:	4013      	ands	r3, r2
 800b424:	81a3      	strh	r3, [r4, #12]
 800b426:	0032      	movs	r2, r6
 800b428:	230e      	movs	r3, #14
 800b42a:	5ee1      	ldrsh	r1, [r4, r3]
 800b42c:	003b      	movs	r3, r7
 800b42e:	f000 ff3b 	bl	800c2a8 <_write_r>
 800b432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b434:	ffffefff 	.word	0xffffefff

0800b438 <__sseek>:
 800b438:	b570      	push	{r4, r5, r6, lr}
 800b43a:	000c      	movs	r4, r1
 800b43c:	250e      	movs	r5, #14
 800b43e:	5f49      	ldrsh	r1, [r1, r5]
 800b440:	f002 faba 	bl	800d9b8 <_lseek_r>
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	1c42      	adds	r2, r0, #1
 800b448:	d103      	bne.n	800b452 <__sseek+0x1a>
 800b44a:	4a05      	ldr	r2, [pc, #20]	; (800b460 <__sseek+0x28>)
 800b44c:	4013      	ands	r3, r2
 800b44e:	81a3      	strh	r3, [r4, #12]
 800b450:	bd70      	pop	{r4, r5, r6, pc}
 800b452:	2280      	movs	r2, #128	; 0x80
 800b454:	0152      	lsls	r2, r2, #5
 800b456:	4313      	orrs	r3, r2
 800b458:	81a3      	strh	r3, [r4, #12]
 800b45a:	6560      	str	r0, [r4, #84]	; 0x54
 800b45c:	e7f8      	b.n	800b450 <__sseek+0x18>
 800b45e:	46c0      	nop			; (mov r8, r8)
 800b460:	ffffefff 	.word	0xffffefff

0800b464 <__sclose>:
 800b464:	b510      	push	{r4, lr}
 800b466:	230e      	movs	r3, #14
 800b468:	5ec9      	ldrsh	r1, [r1, r3]
 800b46a:	f000 ffa9 	bl	800c3c0 <_close_r>
 800b46e:	bd10      	pop	{r4, pc}

0800b470 <sulp>:
 800b470:	b570      	push	{r4, r5, r6, lr}
 800b472:	0016      	movs	r6, r2
 800b474:	000d      	movs	r5, r1
 800b476:	f002 fedb 	bl	800e230 <__ulp>
 800b47a:	2e00      	cmp	r6, #0
 800b47c:	d00d      	beq.n	800b49a <sulp+0x2a>
 800b47e:	236b      	movs	r3, #107	; 0x6b
 800b480:	006a      	lsls	r2, r5, #1
 800b482:	0d52      	lsrs	r2, r2, #21
 800b484:	1a9b      	subs	r3, r3, r2
 800b486:	2b00      	cmp	r3, #0
 800b488:	dd07      	ble.n	800b49a <sulp+0x2a>
 800b48a:	2400      	movs	r4, #0
 800b48c:	4a03      	ldr	r2, [pc, #12]	; (800b49c <sulp+0x2c>)
 800b48e:	051b      	lsls	r3, r3, #20
 800b490:	189d      	adds	r5, r3, r2
 800b492:	002b      	movs	r3, r5
 800b494:	0022      	movs	r2, r4
 800b496:	f7f6 fe2b 	bl	80020f0 <__aeabi_dmul>
 800b49a:	bd70      	pop	{r4, r5, r6, pc}
 800b49c:	3ff00000 	.word	0x3ff00000

0800b4a0 <_strtod_l>:
 800b4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4a2:	001d      	movs	r5, r3
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	b0a5      	sub	sp, #148	; 0x94
 800b4a8:	9320      	str	r3, [sp, #128]	; 0x80
 800b4aa:	4bac      	ldr	r3, [pc, #688]	; (800b75c <_strtod_l+0x2bc>)
 800b4ac:	9005      	str	r0, [sp, #20]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	9108      	str	r1, [sp, #32]
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	9307      	str	r3, [sp, #28]
 800b4b6:	921b      	str	r2, [sp, #108]	; 0x6c
 800b4b8:	f7f4 fe26 	bl	8000108 <strlen>
 800b4bc:	2600      	movs	r6, #0
 800b4be:	0004      	movs	r4, r0
 800b4c0:	2700      	movs	r7, #0
 800b4c2:	9b08      	ldr	r3, [sp, #32]
 800b4c4:	931f      	str	r3, [sp, #124]	; 0x7c
 800b4c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b4c8:	7813      	ldrb	r3, [r2, #0]
 800b4ca:	2b2b      	cmp	r3, #43	; 0x2b
 800b4cc:	d058      	beq.n	800b580 <_strtod_l+0xe0>
 800b4ce:	d844      	bhi.n	800b55a <_strtod_l+0xba>
 800b4d0:	2b0d      	cmp	r3, #13
 800b4d2:	d83d      	bhi.n	800b550 <_strtod_l+0xb0>
 800b4d4:	2b08      	cmp	r3, #8
 800b4d6:	d83d      	bhi.n	800b554 <_strtod_l+0xb4>
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d047      	beq.n	800b56c <_strtod_l+0xcc>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	930e      	str	r3, [sp, #56]	; 0x38
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b4e4:	920a      	str	r2, [sp, #40]	; 0x28
 800b4e6:	9306      	str	r3, [sp, #24]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	2b30      	cmp	r3, #48	; 0x30
 800b4ec:	d000      	beq.n	800b4f0 <_strtod_l+0x50>
 800b4ee:	e07f      	b.n	800b5f0 <_strtod_l+0x150>
 800b4f0:	9b06      	ldr	r3, [sp, #24]
 800b4f2:	3220      	adds	r2, #32
 800b4f4:	785b      	ldrb	r3, [r3, #1]
 800b4f6:	4393      	bics	r3, r2
 800b4f8:	2b58      	cmp	r3, #88	; 0x58
 800b4fa:	d000      	beq.n	800b4fe <_strtod_l+0x5e>
 800b4fc:	e06e      	b.n	800b5dc <_strtod_l+0x13c>
 800b4fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b500:	9502      	str	r5, [sp, #8]
 800b502:	9301      	str	r3, [sp, #4]
 800b504:	ab20      	add	r3, sp, #128	; 0x80
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	4a95      	ldr	r2, [pc, #596]	; (800b760 <_strtod_l+0x2c0>)
 800b50a:	ab21      	add	r3, sp, #132	; 0x84
 800b50c:	9805      	ldr	r0, [sp, #20]
 800b50e:	a91f      	add	r1, sp, #124	; 0x7c
 800b510:	f001 ff44 	bl	800d39c <__gethex>
 800b514:	2307      	movs	r3, #7
 800b516:	0005      	movs	r5, r0
 800b518:	0004      	movs	r4, r0
 800b51a:	401d      	ands	r5, r3
 800b51c:	4218      	tst	r0, r3
 800b51e:	d006      	beq.n	800b52e <_strtod_l+0x8e>
 800b520:	2d06      	cmp	r5, #6
 800b522:	d12f      	bne.n	800b584 <_strtod_l+0xe4>
 800b524:	9b06      	ldr	r3, [sp, #24]
 800b526:	3301      	adds	r3, #1
 800b528:	931f      	str	r3, [sp, #124]	; 0x7c
 800b52a:	2300      	movs	r3, #0
 800b52c:	930e      	str	r3, [sp, #56]	; 0x38
 800b52e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <_strtod_l+0x9a>
 800b534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b536:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b538:	601a      	str	r2, [r3, #0]
 800b53a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d01c      	beq.n	800b57a <_strtod_l+0xda>
 800b540:	2380      	movs	r3, #128	; 0x80
 800b542:	0032      	movs	r2, r6
 800b544:	061b      	lsls	r3, r3, #24
 800b546:	18fb      	adds	r3, r7, r3
 800b548:	0010      	movs	r0, r2
 800b54a:	0019      	movs	r1, r3
 800b54c:	b025      	add	sp, #148	; 0x94
 800b54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b550:	2b20      	cmp	r3, #32
 800b552:	d1c3      	bne.n	800b4dc <_strtod_l+0x3c>
 800b554:	3201      	adds	r2, #1
 800b556:	921f      	str	r2, [sp, #124]	; 0x7c
 800b558:	e7b5      	b.n	800b4c6 <_strtod_l+0x26>
 800b55a:	2b2d      	cmp	r3, #45	; 0x2d
 800b55c:	d1be      	bne.n	800b4dc <_strtod_l+0x3c>
 800b55e:	3b2c      	subs	r3, #44	; 0x2c
 800b560:	930e      	str	r3, [sp, #56]	; 0x38
 800b562:	1c53      	adds	r3, r2, #1
 800b564:	931f      	str	r3, [sp, #124]	; 0x7c
 800b566:	7853      	ldrb	r3, [r2, #1]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1b9      	bne.n	800b4e0 <_strtod_l+0x40>
 800b56c:	9b08      	ldr	r3, [sp, #32]
 800b56e:	931f      	str	r3, [sp, #124]	; 0x7c
 800b570:	2300      	movs	r3, #0
 800b572:	930e      	str	r3, [sp, #56]	; 0x38
 800b574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1dc      	bne.n	800b534 <_strtod_l+0x94>
 800b57a:	0032      	movs	r2, r6
 800b57c:	003b      	movs	r3, r7
 800b57e:	e7e3      	b.n	800b548 <_strtod_l+0xa8>
 800b580:	2300      	movs	r3, #0
 800b582:	e7ed      	b.n	800b560 <_strtod_l+0xc0>
 800b584:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b586:	2a00      	cmp	r2, #0
 800b588:	d007      	beq.n	800b59a <_strtod_l+0xfa>
 800b58a:	2135      	movs	r1, #53	; 0x35
 800b58c:	a822      	add	r0, sp, #136	; 0x88
 800b58e:	f002 ff50 	bl	800e432 <__copybits>
 800b592:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b594:	9805      	ldr	r0, [sp, #20]
 800b596:	f002 fb0b 	bl	800dbb0 <_Bfree>
 800b59a:	1e68      	subs	r0, r5, #1
 800b59c:	2804      	cmp	r0, #4
 800b59e:	d806      	bhi.n	800b5ae <_strtod_l+0x10e>
 800b5a0:	f7f4 fdba 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b5a4:	1816030b 	.word	0x1816030b
 800b5a8:	0b          	.byte	0x0b
 800b5a9:	00          	.byte	0x00
 800b5aa:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800b5ac:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800b5ae:	0723      	lsls	r3, r4, #28
 800b5b0:	d5bd      	bpl.n	800b52e <_strtod_l+0x8e>
 800b5b2:	2380      	movs	r3, #128	; 0x80
 800b5b4:	061b      	lsls	r3, r3, #24
 800b5b6:	431f      	orrs	r7, r3
 800b5b8:	e7b9      	b.n	800b52e <_strtod_l+0x8e>
 800b5ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b5bc:	4a69      	ldr	r2, [pc, #420]	; (800b764 <_strtod_l+0x2c4>)
 800b5be:	496a      	ldr	r1, [pc, #424]	; (800b768 <_strtod_l+0x2c8>)
 800b5c0:	401a      	ands	r2, r3
 800b5c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5c4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800b5c6:	185b      	adds	r3, r3, r1
 800b5c8:	051b      	lsls	r3, r3, #20
 800b5ca:	431a      	orrs	r2, r3
 800b5cc:	0017      	movs	r7, r2
 800b5ce:	e7ee      	b.n	800b5ae <_strtod_l+0x10e>
 800b5d0:	4f66      	ldr	r7, [pc, #408]	; (800b76c <_strtod_l+0x2cc>)
 800b5d2:	e7ec      	b.n	800b5ae <_strtod_l+0x10e>
 800b5d4:	2601      	movs	r6, #1
 800b5d6:	4f66      	ldr	r7, [pc, #408]	; (800b770 <_strtod_l+0x2d0>)
 800b5d8:	4276      	negs	r6, r6
 800b5da:	e7e8      	b.n	800b5ae <_strtod_l+0x10e>
 800b5dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b5de:	1c5a      	adds	r2, r3, #1
 800b5e0:	921f      	str	r2, [sp, #124]	; 0x7c
 800b5e2:	785b      	ldrb	r3, [r3, #1]
 800b5e4:	2b30      	cmp	r3, #48	; 0x30
 800b5e6:	d0f9      	beq.n	800b5dc <_strtod_l+0x13c>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d0a0      	beq.n	800b52e <_strtod_l+0x8e>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b5f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b5f2:	220a      	movs	r2, #10
 800b5f4:	9310      	str	r3, [sp, #64]	; 0x40
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fe:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800b600:	7805      	ldrb	r5, [r0, #0]
 800b602:	002b      	movs	r3, r5
 800b604:	3b30      	subs	r3, #48	; 0x30
 800b606:	b2d9      	uxtb	r1, r3
 800b608:	2909      	cmp	r1, #9
 800b60a:	d927      	bls.n	800b65c <_strtod_l+0x1bc>
 800b60c:	0022      	movs	r2, r4
 800b60e:	9907      	ldr	r1, [sp, #28]
 800b610:	f003 faa8 	bl	800eb64 <strncmp>
 800b614:	2800      	cmp	r0, #0
 800b616:	d033      	beq.n	800b680 <_strtod_l+0x1e0>
 800b618:	2000      	movs	r0, #0
 800b61a:	002b      	movs	r3, r5
 800b61c:	4684      	mov	ip, r0
 800b61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b620:	900c      	str	r0, [sp, #48]	; 0x30
 800b622:	9206      	str	r2, [sp, #24]
 800b624:	2220      	movs	r2, #32
 800b626:	0019      	movs	r1, r3
 800b628:	4391      	bics	r1, r2
 800b62a:	000a      	movs	r2, r1
 800b62c:	2100      	movs	r1, #0
 800b62e:	9107      	str	r1, [sp, #28]
 800b630:	2a45      	cmp	r2, #69	; 0x45
 800b632:	d000      	beq.n	800b636 <_strtod_l+0x196>
 800b634:	e0c5      	b.n	800b7c2 <_strtod_l+0x322>
 800b636:	9b06      	ldr	r3, [sp, #24]
 800b638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b63a:	4303      	orrs	r3, r0
 800b63c:	4313      	orrs	r3, r2
 800b63e:	428b      	cmp	r3, r1
 800b640:	d094      	beq.n	800b56c <_strtod_l+0xcc>
 800b642:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b644:	9308      	str	r3, [sp, #32]
 800b646:	3301      	adds	r3, #1
 800b648:	931f      	str	r3, [sp, #124]	; 0x7c
 800b64a:	9b08      	ldr	r3, [sp, #32]
 800b64c:	785b      	ldrb	r3, [r3, #1]
 800b64e:	2b2b      	cmp	r3, #43	; 0x2b
 800b650:	d076      	beq.n	800b740 <_strtod_l+0x2a0>
 800b652:	000c      	movs	r4, r1
 800b654:	2b2d      	cmp	r3, #45	; 0x2d
 800b656:	d179      	bne.n	800b74c <_strtod_l+0x2ac>
 800b658:	2401      	movs	r4, #1
 800b65a:	e072      	b.n	800b742 <_strtod_l+0x2a2>
 800b65c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b65e:	2908      	cmp	r1, #8
 800b660:	dc09      	bgt.n	800b676 <_strtod_l+0x1d6>
 800b662:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b664:	4351      	muls	r1, r2
 800b666:	185b      	adds	r3, r3, r1
 800b668:	930b      	str	r3, [sp, #44]	; 0x2c
 800b66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b66c:	3001      	adds	r0, #1
 800b66e:	3301      	adds	r3, #1
 800b670:	9309      	str	r3, [sp, #36]	; 0x24
 800b672:	901f      	str	r0, [sp, #124]	; 0x7c
 800b674:	e7c3      	b.n	800b5fe <_strtod_l+0x15e>
 800b676:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b678:	4351      	muls	r1, r2
 800b67a:	185b      	adds	r3, r3, r1
 800b67c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b67e:	e7f4      	b.n	800b66a <_strtod_l+0x1ca>
 800b680:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b684:	191c      	adds	r4, r3, r4
 800b686:	941f      	str	r4, [sp, #124]	; 0x7c
 800b688:	7823      	ldrb	r3, [r4, #0]
 800b68a:	2a00      	cmp	r2, #0
 800b68c:	d039      	beq.n	800b702 <_strtod_l+0x262>
 800b68e:	900c      	str	r0, [sp, #48]	; 0x30
 800b690:	9206      	str	r2, [sp, #24]
 800b692:	001a      	movs	r2, r3
 800b694:	3a30      	subs	r2, #48	; 0x30
 800b696:	2a09      	cmp	r2, #9
 800b698:	d912      	bls.n	800b6c0 <_strtod_l+0x220>
 800b69a:	2201      	movs	r2, #1
 800b69c:	4694      	mov	ip, r2
 800b69e:	e7c1      	b.n	800b624 <_strtod_l+0x184>
 800b6a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	921f      	str	r2, [sp, #124]	; 0x7c
 800b6a8:	785b      	ldrb	r3, [r3, #1]
 800b6aa:	2b30      	cmp	r3, #48	; 0x30
 800b6ac:	d0f8      	beq.n	800b6a0 <_strtod_l+0x200>
 800b6ae:	001a      	movs	r2, r3
 800b6b0:	3a31      	subs	r2, #49	; 0x31
 800b6b2:	2a08      	cmp	r2, #8
 800b6b4:	d83f      	bhi.n	800b736 <_strtod_l+0x296>
 800b6b6:	900c      	str	r0, [sp, #48]	; 0x30
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b6bc:	9006      	str	r0, [sp, #24]
 800b6be:	9210      	str	r2, [sp, #64]	; 0x40
 800b6c0:	001a      	movs	r2, r3
 800b6c2:	1c41      	adds	r1, r0, #1
 800b6c4:	3a30      	subs	r2, #48	; 0x30
 800b6c6:	2b30      	cmp	r3, #48	; 0x30
 800b6c8:	d015      	beq.n	800b6f6 <_strtod_l+0x256>
 800b6ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6cc:	185b      	adds	r3, r3, r1
 800b6ce:	210a      	movs	r1, #10
 800b6d0:	930c      	str	r3, [sp, #48]	; 0x30
 800b6d2:	9b06      	ldr	r3, [sp, #24]
 800b6d4:	18c4      	adds	r4, r0, r3
 800b6d6:	42a3      	cmp	r3, r4
 800b6d8:	d115      	bne.n	800b706 <_strtod_l+0x266>
 800b6da:	9906      	ldr	r1, [sp, #24]
 800b6dc:	9b06      	ldr	r3, [sp, #24]
 800b6de:	3101      	adds	r1, #1
 800b6e0:	1809      	adds	r1, r1, r0
 800b6e2:	181b      	adds	r3, r3, r0
 800b6e4:	9106      	str	r1, [sp, #24]
 800b6e6:	2b08      	cmp	r3, #8
 800b6e8:	dc1b      	bgt.n	800b722 <_strtod_l+0x282>
 800b6ea:	230a      	movs	r3, #10
 800b6ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6ee:	434b      	muls	r3, r1
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	18d3      	adds	r3, r2, r3
 800b6f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6f8:	0008      	movs	r0, r1
 800b6fa:	1c5a      	adds	r2, r3, #1
 800b6fc:	921f      	str	r2, [sp, #124]	; 0x7c
 800b6fe:	785b      	ldrb	r3, [r3, #1]
 800b700:	e7c7      	b.n	800b692 <_strtod_l+0x1f2>
 800b702:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b704:	e7d1      	b.n	800b6aa <_strtod_l+0x20a>
 800b706:	2b08      	cmp	r3, #8
 800b708:	dc04      	bgt.n	800b714 <_strtod_l+0x274>
 800b70a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b70c:	434d      	muls	r5, r1
 800b70e:	950b      	str	r5, [sp, #44]	; 0x2c
 800b710:	3301      	adds	r3, #1
 800b712:	e7e0      	b.n	800b6d6 <_strtod_l+0x236>
 800b714:	1c5d      	adds	r5, r3, #1
 800b716:	2d10      	cmp	r5, #16
 800b718:	dcfa      	bgt.n	800b710 <_strtod_l+0x270>
 800b71a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b71c:	434d      	muls	r5, r1
 800b71e:	950f      	str	r5, [sp, #60]	; 0x3c
 800b720:	e7f6      	b.n	800b710 <_strtod_l+0x270>
 800b722:	9b06      	ldr	r3, [sp, #24]
 800b724:	2100      	movs	r1, #0
 800b726:	2b10      	cmp	r3, #16
 800b728:	dce5      	bgt.n	800b6f6 <_strtod_l+0x256>
 800b72a:	230a      	movs	r3, #10
 800b72c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b72e:	4343      	muls	r3, r0
 800b730:	18d3      	adds	r3, r2, r3
 800b732:	930f      	str	r3, [sp, #60]	; 0x3c
 800b734:	e7df      	b.n	800b6f6 <_strtod_l+0x256>
 800b736:	2200      	movs	r2, #0
 800b738:	920c      	str	r2, [sp, #48]	; 0x30
 800b73a:	9206      	str	r2, [sp, #24]
 800b73c:	3201      	adds	r2, #1
 800b73e:	e7ad      	b.n	800b69c <_strtod_l+0x1fc>
 800b740:	2400      	movs	r4, #0
 800b742:	9b08      	ldr	r3, [sp, #32]
 800b744:	3302      	adds	r3, #2
 800b746:	931f      	str	r3, [sp, #124]	; 0x7c
 800b748:	9b08      	ldr	r3, [sp, #32]
 800b74a:	789b      	ldrb	r3, [r3, #2]
 800b74c:	001a      	movs	r2, r3
 800b74e:	3a30      	subs	r2, #48	; 0x30
 800b750:	2a09      	cmp	r2, #9
 800b752:	d913      	bls.n	800b77c <_strtod_l+0x2dc>
 800b754:	9a08      	ldr	r2, [sp, #32]
 800b756:	921f      	str	r2, [sp, #124]	; 0x7c
 800b758:	2200      	movs	r2, #0
 800b75a:	e031      	b.n	800b7c0 <_strtod_l+0x320>
 800b75c:	0800f458 	.word	0x0800f458
 800b760:	0800f210 	.word	0x0800f210
 800b764:	ffefffff 	.word	0xffefffff
 800b768:	00000433 	.word	0x00000433
 800b76c:	7ff00000 	.word	0x7ff00000
 800b770:	7fffffff 	.word	0x7fffffff
 800b774:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b776:	1c5a      	adds	r2, r3, #1
 800b778:	921f      	str	r2, [sp, #124]	; 0x7c
 800b77a:	785b      	ldrb	r3, [r3, #1]
 800b77c:	2b30      	cmp	r3, #48	; 0x30
 800b77e:	d0f9      	beq.n	800b774 <_strtod_l+0x2d4>
 800b780:	2200      	movs	r2, #0
 800b782:	9207      	str	r2, [sp, #28]
 800b784:	001a      	movs	r2, r3
 800b786:	3a31      	subs	r2, #49	; 0x31
 800b788:	2a08      	cmp	r2, #8
 800b78a:	d81a      	bhi.n	800b7c2 <_strtod_l+0x322>
 800b78c:	3b30      	subs	r3, #48	; 0x30
 800b78e:	001a      	movs	r2, r3
 800b790:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b792:	9307      	str	r3, [sp, #28]
 800b794:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b796:	1c59      	adds	r1, r3, #1
 800b798:	911f      	str	r1, [sp, #124]	; 0x7c
 800b79a:	785b      	ldrb	r3, [r3, #1]
 800b79c:	001d      	movs	r5, r3
 800b79e:	3d30      	subs	r5, #48	; 0x30
 800b7a0:	2d09      	cmp	r5, #9
 800b7a2:	d939      	bls.n	800b818 <_strtod_l+0x378>
 800b7a4:	9d07      	ldr	r5, [sp, #28]
 800b7a6:	1b49      	subs	r1, r1, r5
 800b7a8:	4db0      	ldr	r5, [pc, #704]	; (800ba6c <_strtod_l+0x5cc>)
 800b7aa:	9507      	str	r5, [sp, #28]
 800b7ac:	2908      	cmp	r1, #8
 800b7ae:	dc03      	bgt.n	800b7b8 <_strtod_l+0x318>
 800b7b0:	9207      	str	r2, [sp, #28]
 800b7b2:	42aa      	cmp	r2, r5
 800b7b4:	dd00      	ble.n	800b7b8 <_strtod_l+0x318>
 800b7b6:	9507      	str	r5, [sp, #28]
 800b7b8:	2c00      	cmp	r4, #0
 800b7ba:	d002      	beq.n	800b7c2 <_strtod_l+0x322>
 800b7bc:	9a07      	ldr	r2, [sp, #28]
 800b7be:	4252      	negs	r2, r2
 800b7c0:	9207      	str	r2, [sp, #28]
 800b7c2:	9a06      	ldr	r2, [sp, #24]
 800b7c4:	2a00      	cmp	r2, #0
 800b7c6:	d14b      	bne.n	800b860 <_strtod_l+0x3c0>
 800b7c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7ca:	4310      	orrs	r0, r2
 800b7cc:	d000      	beq.n	800b7d0 <_strtod_l+0x330>
 800b7ce:	e6ae      	b.n	800b52e <_strtod_l+0x8e>
 800b7d0:	4662      	mov	r2, ip
 800b7d2:	2a00      	cmp	r2, #0
 800b7d4:	d000      	beq.n	800b7d8 <_strtod_l+0x338>
 800b7d6:	e6c9      	b.n	800b56c <_strtod_l+0xcc>
 800b7d8:	2b69      	cmp	r3, #105	; 0x69
 800b7da:	d025      	beq.n	800b828 <_strtod_l+0x388>
 800b7dc:	dc21      	bgt.n	800b822 <_strtod_l+0x382>
 800b7de:	2b49      	cmp	r3, #73	; 0x49
 800b7e0:	d022      	beq.n	800b828 <_strtod_l+0x388>
 800b7e2:	2b4e      	cmp	r3, #78	; 0x4e
 800b7e4:	d000      	beq.n	800b7e8 <_strtod_l+0x348>
 800b7e6:	e6c1      	b.n	800b56c <_strtod_l+0xcc>
 800b7e8:	49a1      	ldr	r1, [pc, #644]	; (800ba70 <_strtod_l+0x5d0>)
 800b7ea:	a81f      	add	r0, sp, #124	; 0x7c
 800b7ec:	f002 f824 	bl	800d838 <__match>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d100      	bne.n	800b7f6 <_strtod_l+0x356>
 800b7f4:	e6ba      	b.n	800b56c <_strtod_l+0xcc>
 800b7f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b28      	cmp	r3, #40	; 0x28
 800b7fc:	d12a      	bne.n	800b854 <_strtod_l+0x3b4>
 800b7fe:	499d      	ldr	r1, [pc, #628]	; (800ba74 <_strtod_l+0x5d4>)
 800b800:	aa22      	add	r2, sp, #136	; 0x88
 800b802:	a81f      	add	r0, sp, #124	; 0x7c
 800b804:	f002 f82c 	bl	800d860 <__hexnan>
 800b808:	2805      	cmp	r0, #5
 800b80a:	d123      	bne.n	800b854 <_strtod_l+0x3b4>
 800b80c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b80e:	4a9a      	ldr	r2, [pc, #616]	; (800ba78 <_strtod_l+0x5d8>)
 800b810:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800b812:	431a      	orrs	r2, r3
 800b814:	0017      	movs	r7, r2
 800b816:	e68a      	b.n	800b52e <_strtod_l+0x8e>
 800b818:	210a      	movs	r1, #10
 800b81a:	434a      	muls	r2, r1
 800b81c:	18d2      	adds	r2, r2, r3
 800b81e:	3a30      	subs	r2, #48	; 0x30
 800b820:	e7b8      	b.n	800b794 <_strtod_l+0x2f4>
 800b822:	2b6e      	cmp	r3, #110	; 0x6e
 800b824:	d0e0      	beq.n	800b7e8 <_strtod_l+0x348>
 800b826:	e6a1      	b.n	800b56c <_strtod_l+0xcc>
 800b828:	4994      	ldr	r1, [pc, #592]	; (800ba7c <_strtod_l+0x5dc>)
 800b82a:	a81f      	add	r0, sp, #124	; 0x7c
 800b82c:	f002 f804 	bl	800d838 <__match>
 800b830:	2800      	cmp	r0, #0
 800b832:	d100      	bne.n	800b836 <_strtod_l+0x396>
 800b834:	e69a      	b.n	800b56c <_strtod_l+0xcc>
 800b836:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b838:	4991      	ldr	r1, [pc, #580]	; (800ba80 <_strtod_l+0x5e0>)
 800b83a:	3b01      	subs	r3, #1
 800b83c:	a81f      	add	r0, sp, #124	; 0x7c
 800b83e:	931f      	str	r3, [sp, #124]	; 0x7c
 800b840:	f001 fffa 	bl	800d838 <__match>
 800b844:	2800      	cmp	r0, #0
 800b846:	d102      	bne.n	800b84e <_strtod_l+0x3ae>
 800b848:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b84a:	3301      	adds	r3, #1
 800b84c:	931f      	str	r3, [sp, #124]	; 0x7c
 800b84e:	2600      	movs	r6, #0
 800b850:	4f89      	ldr	r7, [pc, #548]	; (800ba78 <_strtod_l+0x5d8>)
 800b852:	e66c      	b.n	800b52e <_strtod_l+0x8e>
 800b854:	488b      	ldr	r0, [pc, #556]	; (800ba84 <_strtod_l+0x5e4>)
 800b856:	f003 f97f 	bl	800eb58 <nan>
 800b85a:	0006      	movs	r6, r0
 800b85c:	000f      	movs	r7, r1
 800b85e:	e666      	b.n	800b52e <_strtod_l+0x8e>
 800b860:	9b07      	ldr	r3, [sp, #28]
 800b862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b864:	1a9b      	subs	r3, r3, r2
 800b866:	930a      	str	r3, [sp, #40]	; 0x28
 800b868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d101      	bne.n	800b872 <_strtod_l+0x3d2>
 800b86e:	9b06      	ldr	r3, [sp, #24]
 800b870:	9309      	str	r3, [sp, #36]	; 0x24
 800b872:	9c06      	ldr	r4, [sp, #24]
 800b874:	2c10      	cmp	r4, #16
 800b876:	dd00      	ble.n	800b87a <_strtod_l+0x3da>
 800b878:	2410      	movs	r4, #16
 800b87a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b87c:	f7f7 faba 	bl	8002df4 <__aeabi_ui2d>
 800b880:	9b06      	ldr	r3, [sp, #24]
 800b882:	0006      	movs	r6, r0
 800b884:	000f      	movs	r7, r1
 800b886:	2b09      	cmp	r3, #9
 800b888:	dd15      	ble.n	800b8b6 <_strtod_l+0x416>
 800b88a:	0022      	movs	r2, r4
 800b88c:	4b7e      	ldr	r3, [pc, #504]	; (800ba88 <_strtod_l+0x5e8>)
 800b88e:	3a09      	subs	r2, #9
 800b890:	00d2      	lsls	r2, r2, #3
 800b892:	189b      	adds	r3, r3, r2
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	f7f6 fc2a 	bl	80020f0 <__aeabi_dmul>
 800b89c:	0006      	movs	r6, r0
 800b89e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b8a0:	000f      	movs	r7, r1
 800b8a2:	f7f7 faa7 	bl	8002df4 <__aeabi_ui2d>
 800b8a6:	0002      	movs	r2, r0
 800b8a8:	000b      	movs	r3, r1
 800b8aa:	0030      	movs	r0, r6
 800b8ac:	0039      	movs	r1, r7
 800b8ae:	f7f5 fce1 	bl	8001274 <__aeabi_dadd>
 800b8b2:	0006      	movs	r6, r0
 800b8b4:	000f      	movs	r7, r1
 800b8b6:	9b06      	ldr	r3, [sp, #24]
 800b8b8:	2b0f      	cmp	r3, #15
 800b8ba:	dc39      	bgt.n	800b930 <_strtod_l+0x490>
 800b8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d100      	bne.n	800b8c4 <_strtod_l+0x424>
 800b8c2:	e634      	b.n	800b52e <_strtod_l+0x8e>
 800b8c4:	dd24      	ble.n	800b910 <_strtod_l+0x470>
 800b8c6:	2b16      	cmp	r3, #22
 800b8c8:	dc09      	bgt.n	800b8de <_strtod_l+0x43e>
 800b8ca:	496f      	ldr	r1, [pc, #444]	; (800ba88 <_strtod_l+0x5e8>)
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	18c9      	adds	r1, r1, r3
 800b8d0:	0032      	movs	r2, r6
 800b8d2:	6808      	ldr	r0, [r1, #0]
 800b8d4:	6849      	ldr	r1, [r1, #4]
 800b8d6:	003b      	movs	r3, r7
 800b8d8:	f7f6 fc0a 	bl	80020f0 <__aeabi_dmul>
 800b8dc:	e7bd      	b.n	800b85a <_strtod_l+0x3ba>
 800b8de:	2325      	movs	r3, #37	; 0x25
 800b8e0:	9a06      	ldr	r2, [sp, #24]
 800b8e2:	1a9b      	subs	r3, r3, r2
 800b8e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	db22      	blt.n	800b930 <_strtod_l+0x490>
 800b8ea:	240f      	movs	r4, #15
 800b8ec:	9b06      	ldr	r3, [sp, #24]
 800b8ee:	4d66      	ldr	r5, [pc, #408]	; (800ba88 <_strtod_l+0x5e8>)
 800b8f0:	1ae4      	subs	r4, r4, r3
 800b8f2:	00e1      	lsls	r1, r4, #3
 800b8f4:	1869      	adds	r1, r5, r1
 800b8f6:	0032      	movs	r2, r6
 800b8f8:	6808      	ldr	r0, [r1, #0]
 800b8fa:	6849      	ldr	r1, [r1, #4]
 800b8fc:	003b      	movs	r3, r7
 800b8fe:	f7f6 fbf7 	bl	80020f0 <__aeabi_dmul>
 800b902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b904:	1b1c      	subs	r4, r3, r4
 800b906:	00e4      	lsls	r4, r4, #3
 800b908:	192c      	adds	r4, r5, r4
 800b90a:	6822      	ldr	r2, [r4, #0]
 800b90c:	6863      	ldr	r3, [r4, #4]
 800b90e:	e7e3      	b.n	800b8d8 <_strtod_l+0x438>
 800b910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b912:	3316      	adds	r3, #22
 800b914:	db0c      	blt.n	800b930 <_strtod_l+0x490>
 800b916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b918:	9a07      	ldr	r2, [sp, #28]
 800b91a:	0030      	movs	r0, r6
 800b91c:	1a9a      	subs	r2, r3, r2
 800b91e:	4b5a      	ldr	r3, [pc, #360]	; (800ba88 <_strtod_l+0x5e8>)
 800b920:	00d2      	lsls	r2, r2, #3
 800b922:	189b      	adds	r3, r3, r2
 800b924:	0039      	movs	r1, r7
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f7f5 ffdf 	bl	80018ec <__aeabi_ddiv>
 800b92e:	e794      	b.n	800b85a <_strtod_l+0x3ba>
 800b930:	9b06      	ldr	r3, [sp, #24]
 800b932:	1b1c      	subs	r4, r3, r4
 800b934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b936:	18e4      	adds	r4, r4, r3
 800b938:	2c00      	cmp	r4, #0
 800b93a:	dd72      	ble.n	800ba22 <_strtod_l+0x582>
 800b93c:	230f      	movs	r3, #15
 800b93e:	0021      	movs	r1, r4
 800b940:	4019      	ands	r1, r3
 800b942:	421c      	tst	r4, r3
 800b944:	d00a      	beq.n	800b95c <_strtod_l+0x4bc>
 800b946:	00cb      	lsls	r3, r1, #3
 800b948:	494f      	ldr	r1, [pc, #316]	; (800ba88 <_strtod_l+0x5e8>)
 800b94a:	0032      	movs	r2, r6
 800b94c:	18c9      	adds	r1, r1, r3
 800b94e:	6808      	ldr	r0, [r1, #0]
 800b950:	6849      	ldr	r1, [r1, #4]
 800b952:	003b      	movs	r3, r7
 800b954:	f7f6 fbcc 	bl	80020f0 <__aeabi_dmul>
 800b958:	0006      	movs	r6, r0
 800b95a:	000f      	movs	r7, r1
 800b95c:	230f      	movs	r3, #15
 800b95e:	439c      	bics	r4, r3
 800b960:	d04a      	beq.n	800b9f8 <_strtod_l+0x558>
 800b962:	3326      	adds	r3, #38	; 0x26
 800b964:	33ff      	adds	r3, #255	; 0xff
 800b966:	429c      	cmp	r4, r3
 800b968:	dd22      	ble.n	800b9b0 <_strtod_l+0x510>
 800b96a:	2300      	movs	r3, #0
 800b96c:	9306      	str	r3, [sp, #24]
 800b96e:	9307      	str	r3, [sp, #28]
 800b970:	930b      	str	r3, [sp, #44]	; 0x2c
 800b972:	9309      	str	r3, [sp, #36]	; 0x24
 800b974:	2322      	movs	r3, #34	; 0x22
 800b976:	2600      	movs	r6, #0
 800b978:	9a05      	ldr	r2, [sp, #20]
 800b97a:	4f3f      	ldr	r7, [pc, #252]	; (800ba78 <_strtod_l+0x5d8>)
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b980:	42b3      	cmp	r3, r6
 800b982:	d100      	bne.n	800b986 <_strtod_l+0x4e6>
 800b984:	e5d3      	b.n	800b52e <_strtod_l+0x8e>
 800b986:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b988:	9805      	ldr	r0, [sp, #20]
 800b98a:	f002 f911 	bl	800dbb0 <_Bfree>
 800b98e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b990:	9805      	ldr	r0, [sp, #20]
 800b992:	f002 f90d 	bl	800dbb0 <_Bfree>
 800b996:	9907      	ldr	r1, [sp, #28]
 800b998:	9805      	ldr	r0, [sp, #20]
 800b99a:	f002 f909 	bl	800dbb0 <_Bfree>
 800b99e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9a0:	9805      	ldr	r0, [sp, #20]
 800b9a2:	f002 f905 	bl	800dbb0 <_Bfree>
 800b9a6:	9906      	ldr	r1, [sp, #24]
 800b9a8:	9805      	ldr	r0, [sp, #20]
 800b9aa:	f002 f901 	bl	800dbb0 <_Bfree>
 800b9ae:	e5be      	b.n	800b52e <_strtod_l+0x8e>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	0030      	movs	r0, r6
 800b9b4:	0039      	movs	r1, r7
 800b9b6:	4d35      	ldr	r5, [pc, #212]	; (800ba8c <_strtod_l+0x5ec>)
 800b9b8:	1124      	asrs	r4, r4, #4
 800b9ba:	9308      	str	r3, [sp, #32]
 800b9bc:	2c01      	cmp	r4, #1
 800b9be:	dc1e      	bgt.n	800b9fe <_strtod_l+0x55e>
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d001      	beq.n	800b9c8 <_strtod_l+0x528>
 800b9c4:	0006      	movs	r6, r0
 800b9c6:	000f      	movs	r7, r1
 800b9c8:	4b31      	ldr	r3, [pc, #196]	; (800ba90 <_strtod_l+0x5f0>)
 800b9ca:	0032      	movs	r2, r6
 800b9cc:	18ff      	adds	r7, r7, r3
 800b9ce:	9b08      	ldr	r3, [sp, #32]
 800b9d0:	00dd      	lsls	r5, r3, #3
 800b9d2:	4b2e      	ldr	r3, [pc, #184]	; (800ba8c <_strtod_l+0x5ec>)
 800b9d4:	195d      	adds	r5, r3, r5
 800b9d6:	6828      	ldr	r0, [r5, #0]
 800b9d8:	6869      	ldr	r1, [r5, #4]
 800b9da:	003b      	movs	r3, r7
 800b9dc:	f7f6 fb88 	bl	80020f0 <__aeabi_dmul>
 800b9e0:	4b25      	ldr	r3, [pc, #148]	; (800ba78 <_strtod_l+0x5d8>)
 800b9e2:	4a2c      	ldr	r2, [pc, #176]	; (800ba94 <_strtod_l+0x5f4>)
 800b9e4:	0006      	movs	r6, r0
 800b9e6:	400b      	ands	r3, r1
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d8be      	bhi.n	800b96a <_strtod_l+0x4ca>
 800b9ec:	4a2a      	ldr	r2, [pc, #168]	; (800ba98 <_strtod_l+0x5f8>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d913      	bls.n	800ba1a <_strtod_l+0x57a>
 800b9f2:	2601      	movs	r6, #1
 800b9f4:	4f29      	ldr	r7, [pc, #164]	; (800ba9c <_strtod_l+0x5fc>)
 800b9f6:	4276      	negs	r6, r6
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	9308      	str	r3, [sp, #32]
 800b9fc:	e087      	b.n	800bb0e <_strtod_l+0x66e>
 800b9fe:	2201      	movs	r2, #1
 800ba00:	4214      	tst	r4, r2
 800ba02:	d004      	beq.n	800ba0e <_strtod_l+0x56e>
 800ba04:	682a      	ldr	r2, [r5, #0]
 800ba06:	686b      	ldr	r3, [r5, #4]
 800ba08:	f7f6 fb72 	bl	80020f0 <__aeabi_dmul>
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	9a08      	ldr	r2, [sp, #32]
 800ba10:	1064      	asrs	r4, r4, #1
 800ba12:	3201      	adds	r2, #1
 800ba14:	9208      	str	r2, [sp, #32]
 800ba16:	3508      	adds	r5, #8
 800ba18:	e7d0      	b.n	800b9bc <_strtod_l+0x51c>
 800ba1a:	23d4      	movs	r3, #212	; 0xd4
 800ba1c:	049b      	lsls	r3, r3, #18
 800ba1e:	18cf      	adds	r7, r1, r3
 800ba20:	e7ea      	b.n	800b9f8 <_strtod_l+0x558>
 800ba22:	2c00      	cmp	r4, #0
 800ba24:	d0e8      	beq.n	800b9f8 <_strtod_l+0x558>
 800ba26:	4264      	negs	r4, r4
 800ba28:	220f      	movs	r2, #15
 800ba2a:	0023      	movs	r3, r4
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	4214      	tst	r4, r2
 800ba30:	d00a      	beq.n	800ba48 <_strtod_l+0x5a8>
 800ba32:	00da      	lsls	r2, r3, #3
 800ba34:	4b14      	ldr	r3, [pc, #80]	; (800ba88 <_strtod_l+0x5e8>)
 800ba36:	0030      	movs	r0, r6
 800ba38:	189b      	adds	r3, r3, r2
 800ba3a:	0039      	movs	r1, r7
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	f7f5 ff54 	bl	80018ec <__aeabi_ddiv>
 800ba44:	0006      	movs	r6, r0
 800ba46:	000f      	movs	r7, r1
 800ba48:	1124      	asrs	r4, r4, #4
 800ba4a:	d0d5      	beq.n	800b9f8 <_strtod_l+0x558>
 800ba4c:	2c1f      	cmp	r4, #31
 800ba4e:	dd27      	ble.n	800baa0 <_strtod_l+0x600>
 800ba50:	2300      	movs	r3, #0
 800ba52:	9306      	str	r3, [sp, #24]
 800ba54:	9307      	str	r3, [sp, #28]
 800ba56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba58:	9309      	str	r3, [sp, #36]	; 0x24
 800ba5a:	2322      	movs	r3, #34	; 0x22
 800ba5c:	9a05      	ldr	r2, [sp, #20]
 800ba5e:	2600      	movs	r6, #0
 800ba60:	6013      	str	r3, [r2, #0]
 800ba62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba64:	2700      	movs	r7, #0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d18d      	bne.n	800b986 <_strtod_l+0x4e6>
 800ba6a:	e560      	b.n	800b52e <_strtod_l+0x8e>
 800ba6c:	00004e1f 	.word	0x00004e1f
 800ba70:	0800f1e1 	.word	0x0800f1e1
 800ba74:	0800f224 	.word	0x0800f224
 800ba78:	7ff00000 	.word	0x7ff00000
 800ba7c:	0800f1d9 	.word	0x0800f1d9
 800ba80:	0800f364 	.word	0x0800f364
 800ba84:	0800f610 	.word	0x0800f610
 800ba88:	0800f4f0 	.word	0x0800f4f0
 800ba8c:	0800f4c8 	.word	0x0800f4c8
 800ba90:	fcb00000 	.word	0xfcb00000
 800ba94:	7ca00000 	.word	0x7ca00000
 800ba98:	7c900000 	.word	0x7c900000
 800ba9c:	7fefffff 	.word	0x7fefffff
 800baa0:	2310      	movs	r3, #16
 800baa2:	0022      	movs	r2, r4
 800baa4:	401a      	ands	r2, r3
 800baa6:	9208      	str	r2, [sp, #32]
 800baa8:	421c      	tst	r4, r3
 800baaa:	d001      	beq.n	800bab0 <_strtod_l+0x610>
 800baac:	335a      	adds	r3, #90	; 0x5a
 800baae:	9308      	str	r3, [sp, #32]
 800bab0:	0030      	movs	r0, r6
 800bab2:	0039      	movs	r1, r7
 800bab4:	2300      	movs	r3, #0
 800bab6:	4dc5      	ldr	r5, [pc, #788]	; (800bdcc <_strtod_l+0x92c>)
 800bab8:	2201      	movs	r2, #1
 800baba:	4214      	tst	r4, r2
 800babc:	d004      	beq.n	800bac8 <_strtod_l+0x628>
 800babe:	682a      	ldr	r2, [r5, #0]
 800bac0:	686b      	ldr	r3, [r5, #4]
 800bac2:	f7f6 fb15 	bl	80020f0 <__aeabi_dmul>
 800bac6:	2301      	movs	r3, #1
 800bac8:	1064      	asrs	r4, r4, #1
 800baca:	3508      	adds	r5, #8
 800bacc:	2c00      	cmp	r4, #0
 800bace:	d1f3      	bne.n	800bab8 <_strtod_l+0x618>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <_strtod_l+0x638>
 800bad4:	0006      	movs	r6, r0
 800bad6:	000f      	movs	r7, r1
 800bad8:	9b08      	ldr	r3, [sp, #32]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00f      	beq.n	800bafe <_strtod_l+0x65e>
 800bade:	236b      	movs	r3, #107	; 0x6b
 800bae0:	007a      	lsls	r2, r7, #1
 800bae2:	0d52      	lsrs	r2, r2, #21
 800bae4:	0039      	movs	r1, r7
 800bae6:	1a9b      	subs	r3, r3, r2
 800bae8:	2b00      	cmp	r3, #0
 800baea:	dd08      	ble.n	800bafe <_strtod_l+0x65e>
 800baec:	2b1f      	cmp	r3, #31
 800baee:	dc00      	bgt.n	800baf2 <_strtod_l+0x652>
 800baf0:	e124      	b.n	800bd3c <_strtod_l+0x89c>
 800baf2:	2600      	movs	r6, #0
 800baf4:	2b34      	cmp	r3, #52	; 0x34
 800baf6:	dc00      	bgt.n	800bafa <_strtod_l+0x65a>
 800baf8:	e119      	b.n	800bd2e <_strtod_l+0x88e>
 800bafa:	27dc      	movs	r7, #220	; 0xdc
 800bafc:	04bf      	lsls	r7, r7, #18
 800bafe:	2200      	movs	r2, #0
 800bb00:	2300      	movs	r3, #0
 800bb02:	0030      	movs	r0, r6
 800bb04:	0039      	movs	r1, r7
 800bb06:	f7f4 fca1 	bl	800044c <__aeabi_dcmpeq>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d1a0      	bne.n	800ba50 <_strtod_l+0x5b0>
 800bb0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bb16:	9b06      	ldr	r3, [sp, #24]
 800bb18:	9805      	ldr	r0, [sp, #20]
 800bb1a:	f002 f8b1 	bl	800dc80 <__s2b>
 800bb1e:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d100      	bne.n	800bb26 <_strtod_l+0x686>
 800bb24:	e721      	b.n	800b96a <_strtod_l+0x4ca>
 800bb26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb28:	9907      	ldr	r1, [sp, #28]
 800bb2a:	17da      	asrs	r2, r3, #31
 800bb2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb2e:	1a5b      	subs	r3, r3, r1
 800bb30:	401a      	ands	r2, r3
 800bb32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb34:	9215      	str	r2, [sp, #84]	; 0x54
 800bb36:	43db      	mvns	r3, r3
 800bb38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb3a:	17db      	asrs	r3, r3, #31
 800bb3c:	401a      	ands	r2, r3
 800bb3e:	2300      	movs	r3, #0
 800bb40:	921a      	str	r2, [sp, #104]	; 0x68
 800bb42:	9306      	str	r3, [sp, #24]
 800bb44:	9307      	str	r3, [sp, #28]
 800bb46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb48:	9805      	ldr	r0, [sp, #20]
 800bb4a:	6859      	ldr	r1, [r3, #4]
 800bb4c:	f001 ffec 	bl	800db28 <_Balloc>
 800bb50:	9009      	str	r0, [sp, #36]	; 0x24
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d100      	bne.n	800bb58 <_strtod_l+0x6b8>
 800bb56:	e70d      	b.n	800b974 <_strtod_l+0x4d4>
 800bb58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	310c      	adds	r1, #12
 800bb60:	1c9a      	adds	r2, r3, #2
 800bb62:	0092      	lsls	r2, r2, #2
 800bb64:	300c      	adds	r0, #12
 800bb66:	930c      	str	r3, [sp, #48]	; 0x30
 800bb68:	f7fe fbd7 	bl	800a31a <memcpy>
 800bb6c:	ab22      	add	r3, sp, #136	; 0x88
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	ab21      	add	r3, sp, #132	; 0x84
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	0032      	movs	r2, r6
 800bb76:	003b      	movs	r3, r7
 800bb78:	9805      	ldr	r0, [sp, #20]
 800bb7a:	9612      	str	r6, [sp, #72]	; 0x48
 800bb7c:	9713      	str	r7, [sp, #76]	; 0x4c
 800bb7e:	f002 fbcb 	bl	800e318 <__d2b>
 800bb82:	9020      	str	r0, [sp, #128]	; 0x80
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d100      	bne.n	800bb8a <_strtod_l+0x6ea>
 800bb88:	e6f4      	b.n	800b974 <_strtod_l+0x4d4>
 800bb8a:	2101      	movs	r1, #1
 800bb8c:	9805      	ldr	r0, [sp, #20]
 800bb8e:	f002 f90b 	bl	800dda8 <__i2b>
 800bb92:	9007      	str	r0, [sp, #28]
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d100      	bne.n	800bb9a <_strtod_l+0x6fa>
 800bb98:	e6ec      	b.n	800b974 <_strtod_l+0x4d4>
 800bb9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bb9e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bba0:	1ad4      	subs	r4, r2, r3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	db01      	blt.n	800bbaa <_strtod_l+0x70a>
 800bba6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800bba8:	195d      	adds	r5, r3, r5
 800bbaa:	9908      	ldr	r1, [sp, #32]
 800bbac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bbae:	1a5b      	subs	r3, r3, r1
 800bbb0:	2136      	movs	r1, #54	; 0x36
 800bbb2:	189b      	adds	r3, r3, r2
 800bbb4:	1a8a      	subs	r2, r1, r2
 800bbb6:	4986      	ldr	r1, [pc, #536]	; (800bdd0 <_strtod_l+0x930>)
 800bbb8:	2001      	movs	r0, #1
 800bbba:	468c      	mov	ip, r1
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	9110      	str	r1, [sp, #64]	; 0x40
 800bbc2:	9014      	str	r0, [sp, #80]	; 0x50
 800bbc4:	4563      	cmp	r3, ip
 800bbc6:	da07      	bge.n	800bbd8 <_strtod_l+0x738>
 800bbc8:	4661      	mov	r1, ip
 800bbca:	1ac9      	subs	r1, r1, r3
 800bbcc:	1a52      	subs	r2, r2, r1
 800bbce:	291f      	cmp	r1, #31
 800bbd0:	dd00      	ble.n	800bbd4 <_strtod_l+0x734>
 800bbd2:	e0b8      	b.n	800bd46 <_strtod_l+0x8a6>
 800bbd4:	4088      	lsls	r0, r1
 800bbd6:	9014      	str	r0, [sp, #80]	; 0x50
 800bbd8:	18ab      	adds	r3, r5, r2
 800bbda:	930c      	str	r3, [sp, #48]	; 0x30
 800bbdc:	18a4      	adds	r4, r4, r2
 800bbde:	9b08      	ldr	r3, [sp, #32]
 800bbe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbe2:	191c      	adds	r4, r3, r4
 800bbe4:	002b      	movs	r3, r5
 800bbe6:	4295      	cmp	r5, r2
 800bbe8:	dd00      	ble.n	800bbec <_strtod_l+0x74c>
 800bbea:	0013      	movs	r3, r2
 800bbec:	42a3      	cmp	r3, r4
 800bbee:	dd00      	ble.n	800bbf2 <_strtod_l+0x752>
 800bbf0:	0023      	movs	r3, r4
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	dd04      	ble.n	800bc00 <_strtod_l+0x760>
 800bbf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbf8:	1ae4      	subs	r4, r4, r3
 800bbfa:	1ad2      	subs	r2, r2, r3
 800bbfc:	920c      	str	r2, [sp, #48]	; 0x30
 800bbfe:	1aed      	subs	r5, r5, r3
 800bc00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	dd17      	ble.n	800bc36 <_strtod_l+0x796>
 800bc06:	001a      	movs	r2, r3
 800bc08:	9907      	ldr	r1, [sp, #28]
 800bc0a:	9805      	ldr	r0, [sp, #20]
 800bc0c:	f002 f992 	bl	800df34 <__pow5mult>
 800bc10:	9007      	str	r0, [sp, #28]
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d100      	bne.n	800bc18 <_strtod_l+0x778>
 800bc16:	e6ad      	b.n	800b974 <_strtod_l+0x4d4>
 800bc18:	0001      	movs	r1, r0
 800bc1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bc1c:	9805      	ldr	r0, [sp, #20]
 800bc1e:	f002 f8d9 	bl	800ddd4 <__multiply>
 800bc22:	900f      	str	r0, [sp, #60]	; 0x3c
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d100      	bne.n	800bc2a <_strtod_l+0x78a>
 800bc28:	e6a4      	b.n	800b974 <_strtod_l+0x4d4>
 800bc2a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bc2c:	9805      	ldr	r0, [sp, #20]
 800bc2e:	f001 ffbf 	bl	800dbb0 <_Bfree>
 800bc32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc34:	9320      	str	r3, [sp, #128]	; 0x80
 800bc36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	dd00      	ble.n	800bc3e <_strtod_l+0x79e>
 800bc3c:	e089      	b.n	800bd52 <_strtod_l+0x8b2>
 800bc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	dd08      	ble.n	800bc56 <_strtod_l+0x7b6>
 800bc44:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bc46:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc48:	9805      	ldr	r0, [sp, #20]
 800bc4a:	f002 f973 	bl	800df34 <__pow5mult>
 800bc4e:	9009      	str	r0, [sp, #36]	; 0x24
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d100      	bne.n	800bc56 <_strtod_l+0x7b6>
 800bc54:	e68e      	b.n	800b974 <_strtod_l+0x4d4>
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	dd08      	ble.n	800bc6c <_strtod_l+0x7cc>
 800bc5a:	0022      	movs	r2, r4
 800bc5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc5e:	9805      	ldr	r0, [sp, #20]
 800bc60:	f002 f9c4 	bl	800dfec <__lshift>
 800bc64:	9009      	str	r0, [sp, #36]	; 0x24
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d100      	bne.n	800bc6c <_strtod_l+0x7cc>
 800bc6a:	e683      	b.n	800b974 <_strtod_l+0x4d4>
 800bc6c:	2d00      	cmp	r5, #0
 800bc6e:	dd08      	ble.n	800bc82 <_strtod_l+0x7e2>
 800bc70:	002a      	movs	r2, r5
 800bc72:	9907      	ldr	r1, [sp, #28]
 800bc74:	9805      	ldr	r0, [sp, #20]
 800bc76:	f002 f9b9 	bl	800dfec <__lshift>
 800bc7a:	9007      	str	r0, [sp, #28]
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d100      	bne.n	800bc82 <_strtod_l+0x7e2>
 800bc80:	e678      	b.n	800b974 <_strtod_l+0x4d4>
 800bc82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc84:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bc86:	9805      	ldr	r0, [sp, #20]
 800bc88:	f002 fa3a 	bl	800e100 <__mdiff>
 800bc8c:	9006      	str	r0, [sp, #24]
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d100      	bne.n	800bc94 <_strtod_l+0x7f4>
 800bc92:	e66f      	b.n	800b974 <_strtod_l+0x4d4>
 800bc94:	2200      	movs	r2, #0
 800bc96:	68c3      	ldr	r3, [r0, #12]
 800bc98:	9907      	ldr	r1, [sp, #28]
 800bc9a:	60c2      	str	r2, [r0, #12]
 800bc9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc9e:	f002 fa13 	bl	800e0c8 <__mcmp>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	da5f      	bge.n	800bd66 <_strtod_l+0x8c6>
 800bca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bca8:	4333      	orrs	r3, r6
 800bcaa:	d000      	beq.n	800bcae <_strtod_l+0x80e>
 800bcac:	e08a      	b.n	800bdc4 <_strtod_l+0x924>
 800bcae:	033b      	lsls	r3, r7, #12
 800bcb0:	d000      	beq.n	800bcb4 <_strtod_l+0x814>
 800bcb2:	e087      	b.n	800bdc4 <_strtod_l+0x924>
 800bcb4:	22d6      	movs	r2, #214	; 0xd6
 800bcb6:	4b47      	ldr	r3, [pc, #284]	; (800bdd4 <_strtod_l+0x934>)
 800bcb8:	04d2      	lsls	r2, r2, #19
 800bcba:	403b      	ands	r3, r7
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d800      	bhi.n	800bcc2 <_strtod_l+0x822>
 800bcc0:	e080      	b.n	800bdc4 <_strtod_l+0x924>
 800bcc2:	9b06      	ldr	r3, [sp, #24]
 800bcc4:	695b      	ldr	r3, [r3, #20]
 800bcc6:	930a      	str	r3, [sp, #40]	; 0x28
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d104      	bne.n	800bcd6 <_strtod_l+0x836>
 800bccc:	9b06      	ldr	r3, [sp, #24]
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	930a      	str	r3, [sp, #40]	; 0x28
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	dd76      	ble.n	800bdc4 <_strtod_l+0x924>
 800bcd6:	9906      	ldr	r1, [sp, #24]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	9805      	ldr	r0, [sp, #20]
 800bcdc:	f002 f986 	bl	800dfec <__lshift>
 800bce0:	9907      	ldr	r1, [sp, #28]
 800bce2:	9006      	str	r0, [sp, #24]
 800bce4:	f002 f9f0 	bl	800e0c8 <__mcmp>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	dd6b      	ble.n	800bdc4 <_strtod_l+0x924>
 800bcec:	9908      	ldr	r1, [sp, #32]
 800bcee:	003b      	movs	r3, r7
 800bcf0:	4a38      	ldr	r2, [pc, #224]	; (800bdd4 <_strtod_l+0x934>)
 800bcf2:	2900      	cmp	r1, #0
 800bcf4:	d100      	bne.n	800bcf8 <_strtod_l+0x858>
 800bcf6:	e092      	b.n	800be1e <_strtod_l+0x97e>
 800bcf8:	0011      	movs	r1, r2
 800bcfa:	20d6      	movs	r0, #214	; 0xd6
 800bcfc:	4039      	ands	r1, r7
 800bcfe:	04c0      	lsls	r0, r0, #19
 800bd00:	4281      	cmp	r1, r0
 800bd02:	dd00      	ble.n	800bd06 <_strtod_l+0x866>
 800bd04:	e08b      	b.n	800be1e <_strtod_l+0x97e>
 800bd06:	23dc      	movs	r3, #220	; 0xdc
 800bd08:	049b      	lsls	r3, r3, #18
 800bd0a:	4299      	cmp	r1, r3
 800bd0c:	dc00      	bgt.n	800bd10 <_strtod_l+0x870>
 800bd0e:	e6a4      	b.n	800ba5a <_strtod_l+0x5ba>
 800bd10:	0030      	movs	r0, r6
 800bd12:	0039      	movs	r1, r7
 800bd14:	2200      	movs	r2, #0
 800bd16:	4b30      	ldr	r3, [pc, #192]	; (800bdd8 <_strtod_l+0x938>)
 800bd18:	f7f6 f9ea 	bl	80020f0 <__aeabi_dmul>
 800bd1c:	0006      	movs	r6, r0
 800bd1e:	000f      	movs	r7, r1
 800bd20:	4308      	orrs	r0, r1
 800bd22:	d000      	beq.n	800bd26 <_strtod_l+0x886>
 800bd24:	e62f      	b.n	800b986 <_strtod_l+0x4e6>
 800bd26:	2322      	movs	r3, #34	; 0x22
 800bd28:	9a05      	ldr	r2, [sp, #20]
 800bd2a:	6013      	str	r3, [r2, #0]
 800bd2c:	e62b      	b.n	800b986 <_strtod_l+0x4e6>
 800bd2e:	234b      	movs	r3, #75	; 0x4b
 800bd30:	1a9a      	subs	r2, r3, r2
 800bd32:	3b4c      	subs	r3, #76	; 0x4c
 800bd34:	4093      	lsls	r3, r2
 800bd36:	4019      	ands	r1, r3
 800bd38:	000f      	movs	r7, r1
 800bd3a:	e6e0      	b.n	800bafe <_strtod_l+0x65e>
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	4252      	negs	r2, r2
 800bd40:	409a      	lsls	r2, r3
 800bd42:	4016      	ands	r6, r2
 800bd44:	e6db      	b.n	800bafe <_strtod_l+0x65e>
 800bd46:	4925      	ldr	r1, [pc, #148]	; (800bddc <_strtod_l+0x93c>)
 800bd48:	1acb      	subs	r3, r1, r3
 800bd4a:	0001      	movs	r1, r0
 800bd4c:	4099      	lsls	r1, r3
 800bd4e:	9110      	str	r1, [sp, #64]	; 0x40
 800bd50:	e741      	b.n	800bbd6 <_strtod_l+0x736>
 800bd52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd54:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bd56:	9805      	ldr	r0, [sp, #20]
 800bd58:	f002 f948 	bl	800dfec <__lshift>
 800bd5c:	9020      	str	r0, [sp, #128]	; 0x80
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d000      	beq.n	800bd64 <_strtod_l+0x8c4>
 800bd62:	e76c      	b.n	800bc3e <_strtod_l+0x79e>
 800bd64:	e606      	b.n	800b974 <_strtod_l+0x4d4>
 800bd66:	970c      	str	r7, [sp, #48]	; 0x30
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d176      	bne.n	800be5a <_strtod_l+0x9ba>
 800bd6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd6e:	033b      	lsls	r3, r7, #12
 800bd70:	0b1b      	lsrs	r3, r3, #12
 800bd72:	2a00      	cmp	r2, #0
 800bd74:	d038      	beq.n	800bde8 <_strtod_l+0x948>
 800bd76:	4a1a      	ldr	r2, [pc, #104]	; (800bde0 <_strtod_l+0x940>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d138      	bne.n	800bdee <_strtod_l+0x94e>
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	9b08      	ldr	r3, [sp, #32]
 800bd80:	4252      	negs	r2, r2
 800bd82:	0031      	movs	r1, r6
 800bd84:	0010      	movs	r0, r2
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00b      	beq.n	800bda2 <_strtod_l+0x902>
 800bd8a:	24d4      	movs	r4, #212	; 0xd4
 800bd8c:	4b11      	ldr	r3, [pc, #68]	; (800bdd4 <_strtod_l+0x934>)
 800bd8e:	0010      	movs	r0, r2
 800bd90:	403b      	ands	r3, r7
 800bd92:	04e4      	lsls	r4, r4, #19
 800bd94:	42a3      	cmp	r3, r4
 800bd96:	d804      	bhi.n	800bda2 <_strtod_l+0x902>
 800bd98:	306c      	adds	r0, #108	; 0x6c
 800bd9a:	0d1b      	lsrs	r3, r3, #20
 800bd9c:	1ac3      	subs	r3, r0, r3
 800bd9e:	409a      	lsls	r2, r3
 800bda0:	0010      	movs	r0, r2
 800bda2:	4281      	cmp	r1, r0
 800bda4:	d123      	bne.n	800bdee <_strtod_l+0x94e>
 800bda6:	4b0f      	ldr	r3, [pc, #60]	; (800bde4 <_strtod_l+0x944>)
 800bda8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d102      	bne.n	800bdb4 <_strtod_l+0x914>
 800bdae:	1c4b      	adds	r3, r1, #1
 800bdb0:	d100      	bne.n	800bdb4 <_strtod_l+0x914>
 800bdb2:	e5df      	b.n	800b974 <_strtod_l+0x4d4>
 800bdb4:	4b07      	ldr	r3, [pc, #28]	; (800bdd4 <_strtod_l+0x934>)
 800bdb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdb8:	2600      	movs	r6, #0
 800bdba:	401a      	ands	r2, r3
 800bdbc:	0013      	movs	r3, r2
 800bdbe:	2280      	movs	r2, #128	; 0x80
 800bdc0:	0352      	lsls	r2, r2, #13
 800bdc2:	189f      	adds	r7, r3, r2
 800bdc4:	9b08      	ldr	r3, [sp, #32]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d1a2      	bne.n	800bd10 <_strtod_l+0x870>
 800bdca:	e5dc      	b.n	800b986 <_strtod_l+0x4e6>
 800bdcc:	0800f238 	.word	0x0800f238
 800bdd0:	fffffc02 	.word	0xfffffc02
 800bdd4:	7ff00000 	.word	0x7ff00000
 800bdd8:	39500000 	.word	0x39500000
 800bddc:	fffffbe2 	.word	0xfffffbe2
 800bde0:	000fffff 	.word	0x000fffff
 800bde4:	7fefffff 	.word	0x7fefffff
 800bde8:	4333      	orrs	r3, r6
 800bdea:	d100      	bne.n	800bdee <_strtod_l+0x94e>
 800bdec:	e77e      	b.n	800bcec <_strtod_l+0x84c>
 800bdee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d01d      	beq.n	800be30 <_strtod_l+0x990>
 800bdf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bdf8:	4213      	tst	r3, r2
 800bdfa:	d0e3      	beq.n	800bdc4 <_strtod_l+0x924>
 800bdfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdfe:	0030      	movs	r0, r6
 800be00:	0039      	movs	r1, r7
 800be02:	9a08      	ldr	r2, [sp, #32]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d017      	beq.n	800be38 <_strtod_l+0x998>
 800be08:	f7ff fb32 	bl	800b470 <sulp>
 800be0c:	0002      	movs	r2, r0
 800be0e:	000b      	movs	r3, r1
 800be10:	9812      	ldr	r0, [sp, #72]	; 0x48
 800be12:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800be14:	f7f5 fa2e 	bl	8001274 <__aeabi_dadd>
 800be18:	0006      	movs	r6, r0
 800be1a:	000f      	movs	r7, r1
 800be1c:	e7d2      	b.n	800bdc4 <_strtod_l+0x924>
 800be1e:	2601      	movs	r6, #1
 800be20:	4013      	ands	r3, r2
 800be22:	4a99      	ldr	r2, [pc, #612]	; (800c088 <_strtod_l+0xbe8>)
 800be24:	4276      	negs	r6, r6
 800be26:	189b      	adds	r3, r3, r2
 800be28:	4a98      	ldr	r2, [pc, #608]	; (800c08c <_strtod_l+0xbec>)
 800be2a:	431a      	orrs	r2, r3
 800be2c:	0017      	movs	r7, r2
 800be2e:	e7c9      	b.n	800bdc4 <_strtod_l+0x924>
 800be30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be32:	4233      	tst	r3, r6
 800be34:	d0c6      	beq.n	800bdc4 <_strtod_l+0x924>
 800be36:	e7e1      	b.n	800bdfc <_strtod_l+0x95c>
 800be38:	f7ff fb1a 	bl	800b470 <sulp>
 800be3c:	0002      	movs	r2, r0
 800be3e:	000b      	movs	r3, r1
 800be40:	9812      	ldr	r0, [sp, #72]	; 0x48
 800be42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800be44:	f7f6 fbc0 	bl	80025c8 <__aeabi_dsub>
 800be48:	2200      	movs	r2, #0
 800be4a:	2300      	movs	r3, #0
 800be4c:	0006      	movs	r6, r0
 800be4e:	000f      	movs	r7, r1
 800be50:	f7f4 fafc 	bl	800044c <__aeabi_dcmpeq>
 800be54:	2800      	cmp	r0, #0
 800be56:	d0b5      	beq.n	800bdc4 <_strtod_l+0x924>
 800be58:	e5ff      	b.n	800ba5a <_strtod_l+0x5ba>
 800be5a:	9907      	ldr	r1, [sp, #28]
 800be5c:	9806      	ldr	r0, [sp, #24]
 800be5e:	f002 fabf 	bl	800e3e0 <__ratio>
 800be62:	2380      	movs	r3, #128	; 0x80
 800be64:	2200      	movs	r2, #0
 800be66:	05db      	lsls	r3, r3, #23
 800be68:	0004      	movs	r4, r0
 800be6a:	000d      	movs	r5, r1
 800be6c:	f7f4 fafe 	bl	800046c <__aeabi_dcmple>
 800be70:	2800      	cmp	r0, #0
 800be72:	d075      	beq.n	800bf60 <_strtod_l+0xac0>
 800be74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be76:	2b00      	cmp	r3, #0
 800be78:	d047      	beq.n	800bf0a <_strtod_l+0xa6a>
 800be7a:	2300      	movs	r3, #0
 800be7c:	4c84      	ldr	r4, [pc, #528]	; (800c090 <_strtod_l+0xbf0>)
 800be7e:	2500      	movs	r5, #0
 800be80:	9310      	str	r3, [sp, #64]	; 0x40
 800be82:	9411      	str	r4, [sp, #68]	; 0x44
 800be84:	4c82      	ldr	r4, [pc, #520]	; (800c090 <_strtod_l+0xbf0>)
 800be86:	4a83      	ldr	r2, [pc, #524]	; (800c094 <_strtod_l+0xbf4>)
 800be88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be8a:	4013      	ands	r3, r2
 800be8c:	9314      	str	r3, [sp, #80]	; 0x50
 800be8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be90:	4b81      	ldr	r3, [pc, #516]	; (800c098 <_strtod_l+0xbf8>)
 800be92:	429a      	cmp	r2, r3
 800be94:	d000      	beq.n	800be98 <_strtod_l+0x9f8>
 800be96:	e0ac      	b.n	800bff2 <_strtod_l+0xb52>
 800be98:	4a80      	ldr	r2, [pc, #512]	; (800c09c <_strtod_l+0xbfc>)
 800be9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be9c:	4694      	mov	ip, r2
 800be9e:	4463      	add	r3, ip
 800bea0:	001f      	movs	r7, r3
 800bea2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bea4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bea6:	0030      	movs	r0, r6
 800bea8:	0039      	movs	r1, r7
 800beaa:	920c      	str	r2, [sp, #48]	; 0x30
 800beac:	930d      	str	r3, [sp, #52]	; 0x34
 800beae:	f002 f9bf 	bl	800e230 <__ulp>
 800beb2:	0002      	movs	r2, r0
 800beb4:	000b      	movs	r3, r1
 800beb6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800beb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800beba:	f7f6 f919 	bl	80020f0 <__aeabi_dmul>
 800bebe:	0032      	movs	r2, r6
 800bec0:	003b      	movs	r3, r7
 800bec2:	f7f5 f9d7 	bl	8001274 <__aeabi_dadd>
 800bec6:	4a73      	ldr	r2, [pc, #460]	; (800c094 <_strtod_l+0xbf4>)
 800bec8:	4b75      	ldr	r3, [pc, #468]	; (800c0a0 <_strtod_l+0xc00>)
 800beca:	0006      	movs	r6, r0
 800becc:	400a      	ands	r2, r1
 800bece:	429a      	cmp	r2, r3
 800bed0:	d95e      	bls.n	800bf90 <_strtod_l+0xaf0>
 800bed2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bed4:	4b73      	ldr	r3, [pc, #460]	; (800c0a4 <_strtod_l+0xc04>)
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d103      	bne.n	800bee2 <_strtod_l+0xa42>
 800beda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bedc:	3301      	adds	r3, #1
 800bede:	d100      	bne.n	800bee2 <_strtod_l+0xa42>
 800bee0:	e548      	b.n	800b974 <_strtod_l+0x4d4>
 800bee2:	2601      	movs	r6, #1
 800bee4:	4f6f      	ldr	r7, [pc, #444]	; (800c0a4 <_strtod_l+0xc04>)
 800bee6:	4276      	negs	r6, r6
 800bee8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800beea:	9805      	ldr	r0, [sp, #20]
 800beec:	f001 fe60 	bl	800dbb0 <_Bfree>
 800bef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bef2:	9805      	ldr	r0, [sp, #20]
 800bef4:	f001 fe5c 	bl	800dbb0 <_Bfree>
 800bef8:	9907      	ldr	r1, [sp, #28]
 800befa:	9805      	ldr	r0, [sp, #20]
 800befc:	f001 fe58 	bl	800dbb0 <_Bfree>
 800bf00:	9906      	ldr	r1, [sp, #24]
 800bf02:	9805      	ldr	r0, [sp, #20]
 800bf04:	f001 fe54 	bl	800dbb0 <_Bfree>
 800bf08:	e61d      	b.n	800bb46 <_strtod_l+0x6a6>
 800bf0a:	2e00      	cmp	r6, #0
 800bf0c:	d11c      	bne.n	800bf48 <_strtod_l+0xaa8>
 800bf0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf10:	031b      	lsls	r3, r3, #12
 800bf12:	d11f      	bne.n	800bf54 <_strtod_l+0xab4>
 800bf14:	2200      	movs	r2, #0
 800bf16:	0020      	movs	r0, r4
 800bf18:	0029      	movs	r1, r5
 800bf1a:	4b5d      	ldr	r3, [pc, #372]	; (800c090 <_strtod_l+0xbf0>)
 800bf1c:	f7f4 fa9c 	bl	8000458 <__aeabi_dcmplt>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d11a      	bne.n	800bf5a <_strtod_l+0xaba>
 800bf24:	0020      	movs	r0, r4
 800bf26:	0029      	movs	r1, r5
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4b5f      	ldr	r3, [pc, #380]	; (800c0a8 <_strtod_l+0xc08>)
 800bf2c:	f7f6 f8e0 	bl	80020f0 <__aeabi_dmul>
 800bf30:	0005      	movs	r5, r0
 800bf32:	000c      	movs	r4, r1
 800bf34:	2380      	movs	r3, #128	; 0x80
 800bf36:	061b      	lsls	r3, r3, #24
 800bf38:	18e3      	adds	r3, r4, r3
 800bf3a:	951c      	str	r5, [sp, #112]	; 0x70
 800bf3c:	931d      	str	r3, [sp, #116]	; 0x74
 800bf3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bf40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf42:	9210      	str	r2, [sp, #64]	; 0x40
 800bf44:	9311      	str	r3, [sp, #68]	; 0x44
 800bf46:	e79e      	b.n	800be86 <_strtod_l+0x9e6>
 800bf48:	2e01      	cmp	r6, #1
 800bf4a:	d103      	bne.n	800bf54 <_strtod_l+0xab4>
 800bf4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d100      	bne.n	800bf54 <_strtod_l+0xab4>
 800bf52:	e582      	b.n	800ba5a <_strtod_l+0x5ba>
 800bf54:	2300      	movs	r3, #0
 800bf56:	4c55      	ldr	r4, [pc, #340]	; (800c0ac <_strtod_l+0xc0c>)
 800bf58:	e791      	b.n	800be7e <_strtod_l+0x9de>
 800bf5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf5c:	4c52      	ldr	r4, [pc, #328]	; (800c0a8 <_strtod_l+0xc08>)
 800bf5e:	e7e9      	b.n	800bf34 <_strtod_l+0xa94>
 800bf60:	2200      	movs	r2, #0
 800bf62:	0020      	movs	r0, r4
 800bf64:	0029      	movs	r1, r5
 800bf66:	4b50      	ldr	r3, [pc, #320]	; (800c0a8 <_strtod_l+0xc08>)
 800bf68:	f7f6 f8c2 	bl	80020f0 <__aeabi_dmul>
 800bf6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf6e:	0005      	movs	r5, r0
 800bf70:	000b      	movs	r3, r1
 800bf72:	000c      	movs	r4, r1
 800bf74:	2a00      	cmp	r2, #0
 800bf76:	d107      	bne.n	800bf88 <_strtod_l+0xae8>
 800bf78:	2280      	movs	r2, #128	; 0x80
 800bf7a:	0612      	lsls	r2, r2, #24
 800bf7c:	188b      	adds	r3, r1, r2
 800bf7e:	9016      	str	r0, [sp, #88]	; 0x58
 800bf80:	9317      	str	r3, [sp, #92]	; 0x5c
 800bf82:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bf84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf86:	e7dc      	b.n	800bf42 <_strtod_l+0xaa2>
 800bf88:	0002      	movs	r2, r0
 800bf8a:	9216      	str	r2, [sp, #88]	; 0x58
 800bf8c:	9317      	str	r3, [sp, #92]	; 0x5c
 800bf8e:	e7f8      	b.n	800bf82 <_strtod_l+0xae2>
 800bf90:	23d4      	movs	r3, #212	; 0xd4
 800bf92:	049b      	lsls	r3, r3, #18
 800bf94:	18cf      	adds	r7, r1, r3
 800bf96:	9b08      	ldr	r3, [sp, #32]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1a5      	bne.n	800bee8 <_strtod_l+0xa48>
 800bf9c:	4b3d      	ldr	r3, [pc, #244]	; (800c094 <_strtod_l+0xbf4>)
 800bf9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfa0:	403b      	ands	r3, r7
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d1a0      	bne.n	800bee8 <_strtod_l+0xa48>
 800bfa6:	0028      	movs	r0, r5
 800bfa8:	0021      	movs	r1, r4
 800bfaa:	f7f4 fb3b 	bl	8000624 <__aeabi_d2lz>
 800bfae:	f7f4 fb75 	bl	800069c <__aeabi_l2d>
 800bfb2:	0002      	movs	r2, r0
 800bfb4:	000b      	movs	r3, r1
 800bfb6:	0028      	movs	r0, r5
 800bfb8:	0021      	movs	r1, r4
 800bfba:	f7f6 fb05 	bl	80025c8 <__aeabi_dsub>
 800bfbe:	033b      	lsls	r3, r7, #12
 800bfc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bfc2:	0b1b      	lsrs	r3, r3, #12
 800bfc4:	4333      	orrs	r3, r6
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	0004      	movs	r4, r0
 800bfca:	000d      	movs	r5, r1
 800bfcc:	4a38      	ldr	r2, [pc, #224]	; (800c0b0 <_strtod_l+0xc10>)
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d055      	beq.n	800c07e <_strtod_l+0xbde>
 800bfd2:	4b38      	ldr	r3, [pc, #224]	; (800c0b4 <_strtod_l+0xc14>)
 800bfd4:	f7f4 fa40 	bl	8000458 <__aeabi_dcmplt>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d000      	beq.n	800bfde <_strtod_l+0xb3e>
 800bfdc:	e4d3      	b.n	800b986 <_strtod_l+0x4e6>
 800bfde:	0020      	movs	r0, r4
 800bfe0:	0029      	movs	r1, r5
 800bfe2:	4a35      	ldr	r2, [pc, #212]	; (800c0b8 <_strtod_l+0xc18>)
 800bfe4:	4b30      	ldr	r3, [pc, #192]	; (800c0a8 <_strtod_l+0xc08>)
 800bfe6:	f7f4 fa4b 	bl	8000480 <__aeabi_dcmpgt>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d100      	bne.n	800bff0 <_strtod_l+0xb50>
 800bfee:	e77b      	b.n	800bee8 <_strtod_l+0xa48>
 800bff0:	e4c9      	b.n	800b986 <_strtod_l+0x4e6>
 800bff2:	9b08      	ldr	r3, [sp, #32]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d02b      	beq.n	800c050 <_strtod_l+0xbb0>
 800bff8:	23d4      	movs	r3, #212	; 0xd4
 800bffa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bffc:	04db      	lsls	r3, r3, #19
 800bffe:	429a      	cmp	r2, r3
 800c000:	d826      	bhi.n	800c050 <_strtod_l+0xbb0>
 800c002:	0028      	movs	r0, r5
 800c004:	0021      	movs	r1, r4
 800c006:	4a2d      	ldr	r2, [pc, #180]	; (800c0bc <_strtod_l+0xc1c>)
 800c008:	4b2d      	ldr	r3, [pc, #180]	; (800c0c0 <_strtod_l+0xc20>)
 800c00a:	f7f4 fa2f 	bl	800046c <__aeabi_dcmple>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d017      	beq.n	800c042 <_strtod_l+0xba2>
 800c012:	0028      	movs	r0, r5
 800c014:	0021      	movs	r1, r4
 800c016:	f7f4 fae7 	bl	80005e8 <__aeabi_d2uiz>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d100      	bne.n	800c020 <_strtod_l+0xb80>
 800c01e:	3001      	adds	r0, #1
 800c020:	f7f6 fee8 	bl	8002df4 <__aeabi_ui2d>
 800c024:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c026:	0005      	movs	r5, r0
 800c028:	000b      	movs	r3, r1
 800c02a:	000c      	movs	r4, r1
 800c02c:	2a00      	cmp	r2, #0
 800c02e:	d122      	bne.n	800c076 <_strtod_l+0xbd6>
 800c030:	2280      	movs	r2, #128	; 0x80
 800c032:	0612      	lsls	r2, r2, #24
 800c034:	188b      	adds	r3, r1, r2
 800c036:	9018      	str	r0, [sp, #96]	; 0x60
 800c038:	9319      	str	r3, [sp, #100]	; 0x64
 800c03a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c03c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c03e:	9210      	str	r2, [sp, #64]	; 0x40
 800c040:	9311      	str	r3, [sp, #68]	; 0x44
 800c042:	22d6      	movs	r2, #214	; 0xd6
 800c044:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c046:	04d2      	lsls	r2, r2, #19
 800c048:	189b      	adds	r3, r3, r2
 800c04a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c04c:	1a9b      	subs	r3, r3, r2
 800c04e:	9311      	str	r3, [sp, #68]	; 0x44
 800c050:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c052:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c054:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800c056:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800c058:	f002 f8ea 	bl	800e230 <__ulp>
 800c05c:	0002      	movs	r2, r0
 800c05e:	000b      	movs	r3, r1
 800c060:	0030      	movs	r0, r6
 800c062:	0039      	movs	r1, r7
 800c064:	f7f6 f844 	bl	80020f0 <__aeabi_dmul>
 800c068:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c06a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c06c:	f7f5 f902 	bl	8001274 <__aeabi_dadd>
 800c070:	0006      	movs	r6, r0
 800c072:	000f      	movs	r7, r1
 800c074:	e78f      	b.n	800bf96 <_strtod_l+0xaf6>
 800c076:	0002      	movs	r2, r0
 800c078:	9218      	str	r2, [sp, #96]	; 0x60
 800c07a:	9319      	str	r3, [sp, #100]	; 0x64
 800c07c:	e7dd      	b.n	800c03a <_strtod_l+0xb9a>
 800c07e:	4b11      	ldr	r3, [pc, #68]	; (800c0c4 <_strtod_l+0xc24>)
 800c080:	f7f4 f9ea 	bl	8000458 <__aeabi_dcmplt>
 800c084:	e7b1      	b.n	800bfea <_strtod_l+0xb4a>
 800c086:	46c0      	nop			; (mov r8, r8)
 800c088:	fff00000 	.word	0xfff00000
 800c08c:	000fffff 	.word	0x000fffff
 800c090:	3ff00000 	.word	0x3ff00000
 800c094:	7ff00000 	.word	0x7ff00000
 800c098:	7fe00000 	.word	0x7fe00000
 800c09c:	fcb00000 	.word	0xfcb00000
 800c0a0:	7c9fffff 	.word	0x7c9fffff
 800c0a4:	7fefffff 	.word	0x7fefffff
 800c0a8:	3fe00000 	.word	0x3fe00000
 800c0ac:	bff00000 	.word	0xbff00000
 800c0b0:	94a03595 	.word	0x94a03595
 800c0b4:	3fdfffff 	.word	0x3fdfffff
 800c0b8:	35afe535 	.word	0x35afe535
 800c0bc:	ffc00000 	.word	0xffc00000
 800c0c0:	41dfffff 	.word	0x41dfffff
 800c0c4:	3fcfffff 	.word	0x3fcfffff

0800c0c8 <_strtod_r>:
 800c0c8:	b510      	push	{r4, lr}
 800c0ca:	4b02      	ldr	r3, [pc, #8]	; (800c0d4 <_strtod_r+0xc>)
 800c0cc:	f7ff f9e8 	bl	800b4a0 <_strtod_l>
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	46c0      	nop			; (mov r8, r8)
 800c0d4:	200000a4 	.word	0x200000a4

0800c0d8 <_strtol_l.constprop.0>:
 800c0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0da:	b087      	sub	sp, #28
 800c0dc:	001e      	movs	r6, r3
 800c0de:	9005      	str	r0, [sp, #20]
 800c0e0:	9101      	str	r1, [sp, #4]
 800c0e2:	9202      	str	r2, [sp, #8]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d045      	beq.n	800c174 <_strtol_l.constprop.0+0x9c>
 800c0e8:	000b      	movs	r3, r1
 800c0ea:	2e24      	cmp	r6, #36	; 0x24
 800c0ec:	d842      	bhi.n	800c174 <_strtol_l.constprop.0+0x9c>
 800c0ee:	4a3f      	ldr	r2, [pc, #252]	; (800c1ec <_strtol_l.constprop.0+0x114>)
 800c0f0:	2108      	movs	r1, #8
 800c0f2:	4694      	mov	ip, r2
 800c0f4:	001a      	movs	r2, r3
 800c0f6:	4660      	mov	r0, ip
 800c0f8:	7814      	ldrb	r4, [r2, #0]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	5d00      	ldrb	r0, [r0, r4]
 800c0fe:	001d      	movs	r5, r3
 800c100:	0007      	movs	r7, r0
 800c102:	400f      	ands	r7, r1
 800c104:	4208      	tst	r0, r1
 800c106:	d1f5      	bne.n	800c0f4 <_strtol_l.constprop.0+0x1c>
 800c108:	2c2d      	cmp	r4, #45	; 0x2d
 800c10a:	d13a      	bne.n	800c182 <_strtol_l.constprop.0+0xaa>
 800c10c:	2701      	movs	r7, #1
 800c10e:	781c      	ldrb	r4, [r3, #0]
 800c110:	1c95      	adds	r5, r2, #2
 800c112:	2e00      	cmp	r6, #0
 800c114:	d065      	beq.n	800c1e2 <_strtol_l.constprop.0+0x10a>
 800c116:	2e10      	cmp	r6, #16
 800c118:	d109      	bne.n	800c12e <_strtol_l.constprop.0+0x56>
 800c11a:	2c30      	cmp	r4, #48	; 0x30
 800c11c:	d107      	bne.n	800c12e <_strtol_l.constprop.0+0x56>
 800c11e:	2220      	movs	r2, #32
 800c120:	782b      	ldrb	r3, [r5, #0]
 800c122:	4393      	bics	r3, r2
 800c124:	2b58      	cmp	r3, #88	; 0x58
 800c126:	d157      	bne.n	800c1d8 <_strtol_l.constprop.0+0x100>
 800c128:	2610      	movs	r6, #16
 800c12a:	786c      	ldrb	r4, [r5, #1]
 800c12c:	3502      	adds	r5, #2
 800c12e:	4b30      	ldr	r3, [pc, #192]	; (800c1f0 <_strtol_l.constprop.0+0x118>)
 800c130:	0031      	movs	r1, r6
 800c132:	18fb      	adds	r3, r7, r3
 800c134:	0018      	movs	r0, r3
 800c136:	9303      	str	r3, [sp, #12]
 800c138:	f7f4 f888 	bl	800024c <__aeabi_uidivmod>
 800c13c:	2300      	movs	r3, #0
 800c13e:	2201      	movs	r2, #1
 800c140:	4684      	mov	ip, r0
 800c142:	0018      	movs	r0, r3
 800c144:	9104      	str	r1, [sp, #16]
 800c146:	4252      	negs	r2, r2
 800c148:	0021      	movs	r1, r4
 800c14a:	3930      	subs	r1, #48	; 0x30
 800c14c:	2909      	cmp	r1, #9
 800c14e:	d81d      	bhi.n	800c18c <_strtol_l.constprop.0+0xb4>
 800c150:	000c      	movs	r4, r1
 800c152:	42a6      	cmp	r6, r4
 800c154:	dd28      	ble.n	800c1a8 <_strtol_l.constprop.0+0xd0>
 800c156:	2b00      	cmp	r3, #0
 800c158:	db24      	blt.n	800c1a4 <_strtol_l.constprop.0+0xcc>
 800c15a:	0013      	movs	r3, r2
 800c15c:	4584      	cmp	ip, r0
 800c15e:	d306      	bcc.n	800c16e <_strtol_l.constprop.0+0x96>
 800c160:	d102      	bne.n	800c168 <_strtol_l.constprop.0+0x90>
 800c162:	9904      	ldr	r1, [sp, #16]
 800c164:	42a1      	cmp	r1, r4
 800c166:	db02      	blt.n	800c16e <_strtol_l.constprop.0+0x96>
 800c168:	2301      	movs	r3, #1
 800c16a:	4370      	muls	r0, r6
 800c16c:	1820      	adds	r0, r4, r0
 800c16e:	782c      	ldrb	r4, [r5, #0]
 800c170:	3501      	adds	r5, #1
 800c172:	e7e9      	b.n	800c148 <_strtol_l.constprop.0+0x70>
 800c174:	f7fd ffa2 	bl	800a0bc <__errno>
 800c178:	2316      	movs	r3, #22
 800c17a:	6003      	str	r3, [r0, #0]
 800c17c:	2000      	movs	r0, #0
 800c17e:	b007      	add	sp, #28
 800c180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c182:	2c2b      	cmp	r4, #43	; 0x2b
 800c184:	d1c5      	bne.n	800c112 <_strtol_l.constprop.0+0x3a>
 800c186:	781c      	ldrb	r4, [r3, #0]
 800c188:	1c95      	adds	r5, r2, #2
 800c18a:	e7c2      	b.n	800c112 <_strtol_l.constprop.0+0x3a>
 800c18c:	0021      	movs	r1, r4
 800c18e:	3941      	subs	r1, #65	; 0x41
 800c190:	2919      	cmp	r1, #25
 800c192:	d801      	bhi.n	800c198 <_strtol_l.constprop.0+0xc0>
 800c194:	3c37      	subs	r4, #55	; 0x37
 800c196:	e7dc      	b.n	800c152 <_strtol_l.constprop.0+0x7a>
 800c198:	0021      	movs	r1, r4
 800c19a:	3961      	subs	r1, #97	; 0x61
 800c19c:	2919      	cmp	r1, #25
 800c19e:	d803      	bhi.n	800c1a8 <_strtol_l.constprop.0+0xd0>
 800c1a0:	3c57      	subs	r4, #87	; 0x57
 800c1a2:	e7d6      	b.n	800c152 <_strtol_l.constprop.0+0x7a>
 800c1a4:	0013      	movs	r3, r2
 800c1a6:	e7e2      	b.n	800c16e <_strtol_l.constprop.0+0x96>
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	da09      	bge.n	800c1c0 <_strtol_l.constprop.0+0xe8>
 800c1ac:	2322      	movs	r3, #34	; 0x22
 800c1ae:	9a05      	ldr	r2, [sp, #20]
 800c1b0:	9803      	ldr	r0, [sp, #12]
 800c1b2:	6013      	str	r3, [r2, #0]
 800c1b4:	9b02      	ldr	r3, [sp, #8]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d0e1      	beq.n	800c17e <_strtol_l.constprop.0+0xa6>
 800c1ba:	1e6b      	subs	r3, r5, #1
 800c1bc:	9301      	str	r3, [sp, #4]
 800c1be:	e007      	b.n	800c1d0 <_strtol_l.constprop.0+0xf8>
 800c1c0:	2f00      	cmp	r7, #0
 800c1c2:	d000      	beq.n	800c1c6 <_strtol_l.constprop.0+0xee>
 800c1c4:	4240      	negs	r0, r0
 800c1c6:	9a02      	ldr	r2, [sp, #8]
 800c1c8:	2a00      	cmp	r2, #0
 800c1ca:	d0d8      	beq.n	800c17e <_strtol_l.constprop.0+0xa6>
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1f4      	bne.n	800c1ba <_strtol_l.constprop.0+0xe2>
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	9a01      	ldr	r2, [sp, #4]
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	e7d2      	b.n	800c17e <_strtol_l.constprop.0+0xa6>
 800c1d8:	2430      	movs	r4, #48	; 0x30
 800c1da:	2e00      	cmp	r6, #0
 800c1dc:	d1a7      	bne.n	800c12e <_strtol_l.constprop.0+0x56>
 800c1de:	3608      	adds	r6, #8
 800c1e0:	e7a5      	b.n	800c12e <_strtol_l.constprop.0+0x56>
 800c1e2:	2c30      	cmp	r4, #48	; 0x30
 800c1e4:	d09b      	beq.n	800c11e <_strtol_l.constprop.0+0x46>
 800c1e6:	260a      	movs	r6, #10
 800c1e8:	e7a1      	b.n	800c12e <_strtol_l.constprop.0+0x56>
 800c1ea:	46c0      	nop			; (mov r8, r8)
 800c1ec:	0800f261 	.word	0x0800f261
 800c1f0:	7fffffff 	.word	0x7fffffff

0800c1f4 <_strtol_r>:
 800c1f4:	b510      	push	{r4, lr}
 800c1f6:	f7ff ff6f 	bl	800c0d8 <_strtol_l.constprop.0>
 800c1fa:	bd10      	pop	{r4, pc}

0800c1fc <__swbuf_r>:
 800c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fe:	0005      	movs	r5, r0
 800c200:	000e      	movs	r6, r1
 800c202:	0014      	movs	r4, r2
 800c204:	2800      	cmp	r0, #0
 800c206:	d004      	beq.n	800c212 <__swbuf_r+0x16>
 800c208:	6983      	ldr	r3, [r0, #24]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <__swbuf_r+0x16>
 800c20e:	f7fd ffbd 	bl	800a18c <__sinit>
 800c212:	4b22      	ldr	r3, [pc, #136]	; (800c29c <__swbuf_r+0xa0>)
 800c214:	429c      	cmp	r4, r3
 800c216:	d12e      	bne.n	800c276 <__swbuf_r+0x7a>
 800c218:	686c      	ldr	r4, [r5, #4]
 800c21a:	69a3      	ldr	r3, [r4, #24]
 800c21c:	60a3      	str	r3, [r4, #8]
 800c21e:	89a3      	ldrh	r3, [r4, #12]
 800c220:	071b      	lsls	r3, r3, #28
 800c222:	d532      	bpl.n	800c28a <__swbuf_r+0x8e>
 800c224:	6923      	ldr	r3, [r4, #16]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d02f      	beq.n	800c28a <__swbuf_r+0x8e>
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	6922      	ldr	r2, [r4, #16]
 800c22e:	b2f7      	uxtb	r7, r6
 800c230:	1a98      	subs	r0, r3, r2
 800c232:	6963      	ldr	r3, [r4, #20]
 800c234:	b2f6      	uxtb	r6, r6
 800c236:	4283      	cmp	r3, r0
 800c238:	dc05      	bgt.n	800c246 <__swbuf_r+0x4a>
 800c23a:	0021      	movs	r1, r4
 800c23c:	0028      	movs	r0, r5
 800c23e:	f001 f803 	bl	800d248 <_fflush_r>
 800c242:	2800      	cmp	r0, #0
 800c244:	d127      	bne.n	800c296 <__swbuf_r+0x9a>
 800c246:	68a3      	ldr	r3, [r4, #8]
 800c248:	3001      	adds	r0, #1
 800c24a:	3b01      	subs	r3, #1
 800c24c:	60a3      	str	r3, [r4, #8]
 800c24e:	6823      	ldr	r3, [r4, #0]
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	6022      	str	r2, [r4, #0]
 800c254:	701f      	strb	r7, [r3, #0]
 800c256:	6963      	ldr	r3, [r4, #20]
 800c258:	4283      	cmp	r3, r0
 800c25a:	d004      	beq.n	800c266 <__swbuf_r+0x6a>
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	07db      	lsls	r3, r3, #31
 800c260:	d507      	bpl.n	800c272 <__swbuf_r+0x76>
 800c262:	2e0a      	cmp	r6, #10
 800c264:	d105      	bne.n	800c272 <__swbuf_r+0x76>
 800c266:	0021      	movs	r1, r4
 800c268:	0028      	movs	r0, r5
 800c26a:	f000 ffed 	bl	800d248 <_fflush_r>
 800c26e:	2800      	cmp	r0, #0
 800c270:	d111      	bne.n	800c296 <__swbuf_r+0x9a>
 800c272:	0030      	movs	r0, r6
 800c274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c276:	4b0a      	ldr	r3, [pc, #40]	; (800c2a0 <__swbuf_r+0xa4>)
 800c278:	429c      	cmp	r4, r3
 800c27a:	d101      	bne.n	800c280 <__swbuf_r+0x84>
 800c27c:	68ac      	ldr	r4, [r5, #8]
 800c27e:	e7cc      	b.n	800c21a <__swbuf_r+0x1e>
 800c280:	4b08      	ldr	r3, [pc, #32]	; (800c2a4 <__swbuf_r+0xa8>)
 800c282:	429c      	cmp	r4, r3
 800c284:	d1c9      	bne.n	800c21a <__swbuf_r+0x1e>
 800c286:	68ec      	ldr	r4, [r5, #12]
 800c288:	e7c7      	b.n	800c21a <__swbuf_r+0x1e>
 800c28a:	0021      	movs	r1, r4
 800c28c:	0028      	movs	r0, r5
 800c28e:	f000 f81f 	bl	800c2d0 <__swsetup_r>
 800c292:	2800      	cmp	r0, #0
 800c294:	d0c9      	beq.n	800c22a <__swbuf_r+0x2e>
 800c296:	2601      	movs	r6, #1
 800c298:	4276      	negs	r6, r6
 800c29a:	e7ea      	b.n	800c272 <__swbuf_r+0x76>
 800c29c:	0800f190 	.word	0x0800f190
 800c2a0:	0800f1b0 	.word	0x0800f1b0
 800c2a4:	0800f170 	.word	0x0800f170

0800c2a8 <_write_r>:
 800c2a8:	b570      	push	{r4, r5, r6, lr}
 800c2aa:	0004      	movs	r4, r0
 800c2ac:	0008      	movs	r0, r1
 800c2ae:	0011      	movs	r1, r2
 800c2b0:	001a      	movs	r2, r3
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	4d05      	ldr	r5, [pc, #20]	; (800c2cc <_write_r+0x24>)
 800c2b6:	602b      	str	r3, [r5, #0]
 800c2b8:	f7f7 fad1 	bl	800385e <_write>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d103      	bne.n	800c2c8 <_write_r+0x20>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d000      	beq.n	800c2c8 <_write_r+0x20>
 800c2c6:	6023      	str	r3, [r4, #0]
 800c2c8:	bd70      	pop	{r4, r5, r6, pc}
 800c2ca:	46c0      	nop			; (mov r8, r8)
 800c2cc:	20001d38 	.word	0x20001d38

0800c2d0 <__swsetup_r>:
 800c2d0:	4b37      	ldr	r3, [pc, #220]	; (800c3b0 <__swsetup_r+0xe0>)
 800c2d2:	b570      	push	{r4, r5, r6, lr}
 800c2d4:	681d      	ldr	r5, [r3, #0]
 800c2d6:	0006      	movs	r6, r0
 800c2d8:	000c      	movs	r4, r1
 800c2da:	2d00      	cmp	r5, #0
 800c2dc:	d005      	beq.n	800c2ea <__swsetup_r+0x1a>
 800c2de:	69ab      	ldr	r3, [r5, #24]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d102      	bne.n	800c2ea <__swsetup_r+0x1a>
 800c2e4:	0028      	movs	r0, r5
 800c2e6:	f7fd ff51 	bl	800a18c <__sinit>
 800c2ea:	4b32      	ldr	r3, [pc, #200]	; (800c3b4 <__swsetup_r+0xe4>)
 800c2ec:	429c      	cmp	r4, r3
 800c2ee:	d10f      	bne.n	800c310 <__swsetup_r+0x40>
 800c2f0:	686c      	ldr	r4, [r5, #4]
 800c2f2:	230c      	movs	r3, #12
 800c2f4:	5ee2      	ldrsh	r2, [r4, r3]
 800c2f6:	b293      	uxth	r3, r2
 800c2f8:	0711      	lsls	r1, r2, #28
 800c2fa:	d42d      	bmi.n	800c358 <__swsetup_r+0x88>
 800c2fc:	06d9      	lsls	r1, r3, #27
 800c2fe:	d411      	bmi.n	800c324 <__swsetup_r+0x54>
 800c300:	2309      	movs	r3, #9
 800c302:	2001      	movs	r0, #1
 800c304:	6033      	str	r3, [r6, #0]
 800c306:	3337      	adds	r3, #55	; 0x37
 800c308:	4313      	orrs	r3, r2
 800c30a:	81a3      	strh	r3, [r4, #12]
 800c30c:	4240      	negs	r0, r0
 800c30e:	bd70      	pop	{r4, r5, r6, pc}
 800c310:	4b29      	ldr	r3, [pc, #164]	; (800c3b8 <__swsetup_r+0xe8>)
 800c312:	429c      	cmp	r4, r3
 800c314:	d101      	bne.n	800c31a <__swsetup_r+0x4a>
 800c316:	68ac      	ldr	r4, [r5, #8]
 800c318:	e7eb      	b.n	800c2f2 <__swsetup_r+0x22>
 800c31a:	4b28      	ldr	r3, [pc, #160]	; (800c3bc <__swsetup_r+0xec>)
 800c31c:	429c      	cmp	r4, r3
 800c31e:	d1e8      	bne.n	800c2f2 <__swsetup_r+0x22>
 800c320:	68ec      	ldr	r4, [r5, #12]
 800c322:	e7e6      	b.n	800c2f2 <__swsetup_r+0x22>
 800c324:	075b      	lsls	r3, r3, #29
 800c326:	d513      	bpl.n	800c350 <__swsetup_r+0x80>
 800c328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c32a:	2900      	cmp	r1, #0
 800c32c:	d008      	beq.n	800c340 <__swsetup_r+0x70>
 800c32e:	0023      	movs	r3, r4
 800c330:	3344      	adds	r3, #68	; 0x44
 800c332:	4299      	cmp	r1, r3
 800c334:	d002      	beq.n	800c33c <__swsetup_r+0x6c>
 800c336:	0030      	movs	r0, r6
 800c338:	f002 f8ec 	bl	800e514 <_free_r>
 800c33c:	2300      	movs	r3, #0
 800c33e:	6363      	str	r3, [r4, #52]	; 0x34
 800c340:	2224      	movs	r2, #36	; 0x24
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	4393      	bics	r3, r2
 800c346:	81a3      	strh	r3, [r4, #12]
 800c348:	2300      	movs	r3, #0
 800c34a:	6063      	str	r3, [r4, #4]
 800c34c:	6923      	ldr	r3, [r4, #16]
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	2308      	movs	r3, #8
 800c352:	89a2      	ldrh	r2, [r4, #12]
 800c354:	4313      	orrs	r3, r2
 800c356:	81a3      	strh	r3, [r4, #12]
 800c358:	6923      	ldr	r3, [r4, #16]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10b      	bne.n	800c376 <__swsetup_r+0xa6>
 800c35e:	21a0      	movs	r1, #160	; 0xa0
 800c360:	2280      	movs	r2, #128	; 0x80
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	0089      	lsls	r1, r1, #2
 800c366:	0092      	lsls	r2, r2, #2
 800c368:	400b      	ands	r3, r1
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d003      	beq.n	800c376 <__swsetup_r+0xa6>
 800c36e:	0021      	movs	r1, r4
 800c370:	0030      	movs	r0, r6
 800c372:	f001 fb5d 	bl	800da30 <__smakebuf_r>
 800c376:	220c      	movs	r2, #12
 800c378:	5ea3      	ldrsh	r3, [r4, r2]
 800c37a:	2001      	movs	r0, #1
 800c37c:	001a      	movs	r2, r3
 800c37e:	b299      	uxth	r1, r3
 800c380:	4002      	ands	r2, r0
 800c382:	4203      	tst	r3, r0
 800c384:	d00f      	beq.n	800c3a6 <__swsetup_r+0xd6>
 800c386:	2200      	movs	r2, #0
 800c388:	60a2      	str	r2, [r4, #8]
 800c38a:	6962      	ldr	r2, [r4, #20]
 800c38c:	4252      	negs	r2, r2
 800c38e:	61a2      	str	r2, [r4, #24]
 800c390:	2000      	movs	r0, #0
 800c392:	6922      	ldr	r2, [r4, #16]
 800c394:	4282      	cmp	r2, r0
 800c396:	d1ba      	bne.n	800c30e <__swsetup_r+0x3e>
 800c398:	060a      	lsls	r2, r1, #24
 800c39a:	d5b8      	bpl.n	800c30e <__swsetup_r+0x3e>
 800c39c:	2240      	movs	r2, #64	; 0x40
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	81a3      	strh	r3, [r4, #12]
 800c3a2:	3801      	subs	r0, #1
 800c3a4:	e7b3      	b.n	800c30e <__swsetup_r+0x3e>
 800c3a6:	0788      	lsls	r0, r1, #30
 800c3a8:	d400      	bmi.n	800c3ac <__swsetup_r+0xdc>
 800c3aa:	6962      	ldr	r2, [r4, #20]
 800c3ac:	60a2      	str	r2, [r4, #8]
 800c3ae:	e7ef      	b.n	800c390 <__swsetup_r+0xc0>
 800c3b0:	2000003c 	.word	0x2000003c
 800c3b4:	0800f190 	.word	0x0800f190
 800c3b8:	0800f1b0 	.word	0x0800f1b0
 800c3bc:	0800f170 	.word	0x0800f170

0800c3c0 <_close_r>:
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	b570      	push	{r4, r5, r6, lr}
 800c3c4:	4d06      	ldr	r5, [pc, #24]	; (800c3e0 <_close_r+0x20>)
 800c3c6:	0004      	movs	r4, r0
 800c3c8:	0008      	movs	r0, r1
 800c3ca:	602b      	str	r3, [r5, #0]
 800c3cc:	f7f7 fa63 	bl	8003896 <_close>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	d103      	bne.n	800c3dc <_close_r+0x1c>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d000      	beq.n	800c3dc <_close_r+0x1c>
 800c3da:	6023      	str	r3, [r4, #0]
 800c3dc:	bd70      	pop	{r4, r5, r6, pc}
 800c3de:	46c0      	nop			; (mov r8, r8)
 800c3e0:	20001d38 	.word	0x20001d38

0800c3e4 <quorem>:
 800c3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e6:	0006      	movs	r6, r0
 800c3e8:	690b      	ldr	r3, [r1, #16]
 800c3ea:	6932      	ldr	r2, [r6, #16]
 800c3ec:	b087      	sub	sp, #28
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	9103      	str	r1, [sp, #12]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	db65      	blt.n	800c4c2 <quorem+0xde>
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	009c      	lsls	r4, r3, #2
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	000b      	movs	r3, r1
 800c3fe:	3314      	adds	r3, #20
 800c400:	9305      	str	r3, [sp, #20]
 800c402:	191b      	adds	r3, r3, r4
 800c404:	9304      	str	r3, [sp, #16]
 800c406:	0033      	movs	r3, r6
 800c408:	3314      	adds	r3, #20
 800c40a:	9302      	str	r3, [sp, #8]
 800c40c:	191c      	adds	r4, r3, r4
 800c40e:	9b04      	ldr	r3, [sp, #16]
 800c410:	6827      	ldr	r7, [r4, #0]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	0038      	movs	r0, r7
 800c416:	1c5d      	adds	r5, r3, #1
 800c418:	0029      	movs	r1, r5
 800c41a:	9301      	str	r3, [sp, #4]
 800c41c:	f7f3 fe90 	bl	8000140 <__udivsi3>
 800c420:	9001      	str	r0, [sp, #4]
 800c422:	42af      	cmp	r7, r5
 800c424:	d324      	bcc.n	800c470 <quorem+0x8c>
 800c426:	2500      	movs	r5, #0
 800c428:	46ac      	mov	ip, r5
 800c42a:	9802      	ldr	r0, [sp, #8]
 800c42c:	9f05      	ldr	r7, [sp, #20]
 800c42e:	cf08      	ldmia	r7!, {r3}
 800c430:	9a01      	ldr	r2, [sp, #4]
 800c432:	b299      	uxth	r1, r3
 800c434:	4351      	muls	r1, r2
 800c436:	0c1b      	lsrs	r3, r3, #16
 800c438:	4353      	muls	r3, r2
 800c43a:	1949      	adds	r1, r1, r5
 800c43c:	0c0a      	lsrs	r2, r1, #16
 800c43e:	189b      	adds	r3, r3, r2
 800c440:	6802      	ldr	r2, [r0, #0]
 800c442:	b289      	uxth	r1, r1
 800c444:	b292      	uxth	r2, r2
 800c446:	4462      	add	r2, ip
 800c448:	1a52      	subs	r2, r2, r1
 800c44a:	6801      	ldr	r1, [r0, #0]
 800c44c:	0c1d      	lsrs	r5, r3, #16
 800c44e:	0c09      	lsrs	r1, r1, #16
 800c450:	b29b      	uxth	r3, r3
 800c452:	1acb      	subs	r3, r1, r3
 800c454:	1411      	asrs	r1, r2, #16
 800c456:	185b      	adds	r3, r3, r1
 800c458:	1419      	asrs	r1, r3, #16
 800c45a:	b292      	uxth	r2, r2
 800c45c:	041b      	lsls	r3, r3, #16
 800c45e:	431a      	orrs	r2, r3
 800c460:	9b04      	ldr	r3, [sp, #16]
 800c462:	468c      	mov	ip, r1
 800c464:	c004      	stmia	r0!, {r2}
 800c466:	42bb      	cmp	r3, r7
 800c468:	d2e1      	bcs.n	800c42e <quorem+0x4a>
 800c46a:	6823      	ldr	r3, [r4, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d030      	beq.n	800c4d2 <quorem+0xee>
 800c470:	0030      	movs	r0, r6
 800c472:	9903      	ldr	r1, [sp, #12]
 800c474:	f001 fe28 	bl	800e0c8 <__mcmp>
 800c478:	2800      	cmp	r0, #0
 800c47a:	db21      	blt.n	800c4c0 <quorem+0xdc>
 800c47c:	0030      	movs	r0, r6
 800c47e:	2400      	movs	r4, #0
 800c480:	9b01      	ldr	r3, [sp, #4]
 800c482:	9903      	ldr	r1, [sp, #12]
 800c484:	3301      	adds	r3, #1
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	3014      	adds	r0, #20
 800c48a:	3114      	adds	r1, #20
 800c48c:	6803      	ldr	r3, [r0, #0]
 800c48e:	c920      	ldmia	r1!, {r5}
 800c490:	b29a      	uxth	r2, r3
 800c492:	1914      	adds	r4, r2, r4
 800c494:	b2aa      	uxth	r2, r5
 800c496:	1aa2      	subs	r2, r4, r2
 800c498:	0c1b      	lsrs	r3, r3, #16
 800c49a:	0c2d      	lsrs	r5, r5, #16
 800c49c:	1414      	asrs	r4, r2, #16
 800c49e:	1b5b      	subs	r3, r3, r5
 800c4a0:	191b      	adds	r3, r3, r4
 800c4a2:	141c      	asrs	r4, r3, #16
 800c4a4:	b292      	uxth	r2, r2
 800c4a6:	041b      	lsls	r3, r3, #16
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	c008      	stmia	r0!, {r3}
 800c4ac:	9b04      	ldr	r3, [sp, #16]
 800c4ae:	428b      	cmp	r3, r1
 800c4b0:	d2ec      	bcs.n	800c48c <quorem+0xa8>
 800c4b2:	9b00      	ldr	r3, [sp, #0]
 800c4b4:	9a02      	ldr	r2, [sp, #8]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	18d3      	adds	r3, r2, r3
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	2a00      	cmp	r2, #0
 800c4be:	d015      	beq.n	800c4ec <quorem+0x108>
 800c4c0:	9801      	ldr	r0, [sp, #4]
 800c4c2:	b007      	add	sp, #28
 800c4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c6:	6823      	ldr	r3, [r4, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d106      	bne.n	800c4da <quorem+0xf6>
 800c4cc:	9b00      	ldr	r3, [sp, #0]
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	9b02      	ldr	r3, [sp, #8]
 800c4d4:	3c04      	subs	r4, #4
 800c4d6:	42a3      	cmp	r3, r4
 800c4d8:	d3f5      	bcc.n	800c4c6 <quorem+0xe2>
 800c4da:	9b00      	ldr	r3, [sp, #0]
 800c4dc:	6133      	str	r3, [r6, #16]
 800c4de:	e7c7      	b.n	800c470 <quorem+0x8c>
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	d106      	bne.n	800c4f4 <quorem+0x110>
 800c4e6:	9a00      	ldr	r2, [sp, #0]
 800c4e8:	3a01      	subs	r2, #1
 800c4ea:	9200      	str	r2, [sp, #0]
 800c4ec:	9a02      	ldr	r2, [sp, #8]
 800c4ee:	3b04      	subs	r3, #4
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d3f5      	bcc.n	800c4e0 <quorem+0xfc>
 800c4f4:	9b00      	ldr	r3, [sp, #0]
 800c4f6:	6133      	str	r3, [r6, #16]
 800c4f8:	e7e2      	b.n	800c4c0 <quorem+0xdc>
	...

0800c4fc <_dtoa_r>:
 800c4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4fe:	b09d      	sub	sp, #116	; 0x74
 800c500:	9202      	str	r2, [sp, #8]
 800c502:	9303      	str	r3, [sp, #12]
 800c504:	9b02      	ldr	r3, [sp, #8]
 800c506:	9c03      	ldr	r4, [sp, #12]
 800c508:	9308      	str	r3, [sp, #32]
 800c50a:	9409      	str	r4, [sp, #36]	; 0x24
 800c50c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c50e:	0007      	movs	r7, r0
 800c510:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800c512:	2c00      	cmp	r4, #0
 800c514:	d10e      	bne.n	800c534 <_dtoa_r+0x38>
 800c516:	2010      	movs	r0, #16
 800c518:	f001 face 	bl	800dab8 <malloc>
 800c51c:	1e02      	subs	r2, r0, #0
 800c51e:	6278      	str	r0, [r7, #36]	; 0x24
 800c520:	d104      	bne.n	800c52c <_dtoa_r+0x30>
 800c522:	21ea      	movs	r1, #234	; 0xea
 800c524:	4bc7      	ldr	r3, [pc, #796]	; (800c844 <_dtoa_r+0x348>)
 800c526:	48c8      	ldr	r0, [pc, #800]	; (800c848 <_dtoa_r+0x34c>)
 800c528:	f002 fb3c 	bl	800eba4 <__assert_func>
 800c52c:	6044      	str	r4, [r0, #4]
 800c52e:	6084      	str	r4, [r0, #8]
 800c530:	6004      	str	r4, [r0, #0]
 800c532:	60c4      	str	r4, [r0, #12]
 800c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c536:	6819      	ldr	r1, [r3, #0]
 800c538:	2900      	cmp	r1, #0
 800c53a:	d00a      	beq.n	800c552 <_dtoa_r+0x56>
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	2301      	movs	r3, #1
 800c540:	4093      	lsls	r3, r2
 800c542:	604a      	str	r2, [r1, #4]
 800c544:	608b      	str	r3, [r1, #8]
 800c546:	0038      	movs	r0, r7
 800c548:	f001 fb32 	bl	800dbb0 <_Bfree>
 800c54c:	2200      	movs	r2, #0
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c550:	601a      	str	r2, [r3, #0]
 800c552:	9b03      	ldr	r3, [sp, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	da20      	bge.n	800c59a <_dtoa_r+0x9e>
 800c558:	2301      	movs	r3, #1
 800c55a:	602b      	str	r3, [r5, #0]
 800c55c:	9b03      	ldr	r3, [sp, #12]
 800c55e:	005b      	lsls	r3, r3, #1
 800c560:	085b      	lsrs	r3, r3, #1
 800c562:	9309      	str	r3, [sp, #36]	; 0x24
 800c564:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c566:	4bb9      	ldr	r3, [pc, #740]	; (800c84c <_dtoa_r+0x350>)
 800c568:	4ab8      	ldr	r2, [pc, #736]	; (800c84c <_dtoa_r+0x350>)
 800c56a:	402b      	ands	r3, r5
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d117      	bne.n	800c5a0 <_dtoa_r+0xa4>
 800c570:	4bb7      	ldr	r3, [pc, #732]	; (800c850 <_dtoa_r+0x354>)
 800c572:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c574:	0328      	lsls	r0, r5, #12
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	9b02      	ldr	r3, [sp, #8]
 800c57a:	0b00      	lsrs	r0, r0, #12
 800c57c:	4318      	orrs	r0, r3
 800c57e:	d101      	bne.n	800c584 <_dtoa_r+0x88>
 800c580:	f000 fdbf 	bl	800d102 <_dtoa_r+0xc06>
 800c584:	48b3      	ldr	r0, [pc, #716]	; (800c854 <_dtoa_r+0x358>)
 800c586:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c588:	9006      	str	r0, [sp, #24]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d002      	beq.n	800c594 <_dtoa_r+0x98>
 800c58e:	4bb2      	ldr	r3, [pc, #712]	; (800c858 <_dtoa_r+0x35c>)
 800c590:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c592:	6013      	str	r3, [r2, #0]
 800c594:	9806      	ldr	r0, [sp, #24]
 800c596:	b01d      	add	sp, #116	; 0x74
 800c598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c59a:	2300      	movs	r3, #0
 800c59c:	602b      	str	r3, [r5, #0]
 800c59e:	e7e1      	b.n	800c564 <_dtoa_r+0x68>
 800c5a0:	9b08      	ldr	r3, [sp, #32]
 800c5a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c5a4:	9312      	str	r3, [sp, #72]	; 0x48
 800c5a6:	9413      	str	r4, [sp, #76]	; 0x4c
 800c5a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c5aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	f7f3 ff4c 	bl	800044c <__aeabi_dcmpeq>
 800c5b4:	1e04      	subs	r4, r0, #0
 800c5b6:	d009      	beq.n	800c5cc <_dtoa_r+0xd0>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c5bc:	6013      	str	r3, [r2, #0]
 800c5be:	4ba7      	ldr	r3, [pc, #668]	; (800c85c <_dtoa_r+0x360>)
 800c5c0:	9306      	str	r3, [sp, #24]
 800c5c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d0e5      	beq.n	800c594 <_dtoa_r+0x98>
 800c5c8:	4ba5      	ldr	r3, [pc, #660]	; (800c860 <_dtoa_r+0x364>)
 800c5ca:	e7e1      	b.n	800c590 <_dtoa_r+0x94>
 800c5cc:	ab1a      	add	r3, sp, #104	; 0x68
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	ab1b      	add	r3, sp, #108	; 0x6c
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	0038      	movs	r0, r7
 800c5d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c5d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c5da:	f001 fe9d 	bl	800e318 <__d2b>
 800c5de:	006e      	lsls	r6, r5, #1
 800c5e0:	9005      	str	r0, [sp, #20]
 800c5e2:	0d76      	lsrs	r6, r6, #21
 800c5e4:	d100      	bne.n	800c5e8 <_dtoa_r+0xec>
 800c5e6:	e07c      	b.n	800c6e2 <_dtoa_r+0x1e6>
 800c5e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c5ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c5ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c5ee:	4a9d      	ldr	r2, [pc, #628]	; (800c864 <_dtoa_r+0x368>)
 800c5f0:	031b      	lsls	r3, r3, #12
 800c5f2:	0b1b      	lsrs	r3, r3, #12
 800c5f4:	431a      	orrs	r2, r3
 800c5f6:	0011      	movs	r1, r2
 800c5f8:	4b9b      	ldr	r3, [pc, #620]	; (800c868 <_dtoa_r+0x36c>)
 800c5fa:	9418      	str	r4, [sp, #96]	; 0x60
 800c5fc:	18f6      	adds	r6, r6, r3
 800c5fe:	2200      	movs	r2, #0
 800c600:	4b9a      	ldr	r3, [pc, #616]	; (800c86c <_dtoa_r+0x370>)
 800c602:	f7f5 ffe1 	bl	80025c8 <__aeabi_dsub>
 800c606:	4a9a      	ldr	r2, [pc, #616]	; (800c870 <_dtoa_r+0x374>)
 800c608:	4b9a      	ldr	r3, [pc, #616]	; (800c874 <_dtoa_r+0x378>)
 800c60a:	f7f5 fd71 	bl	80020f0 <__aeabi_dmul>
 800c60e:	4a9a      	ldr	r2, [pc, #616]	; (800c878 <_dtoa_r+0x37c>)
 800c610:	4b9a      	ldr	r3, [pc, #616]	; (800c87c <_dtoa_r+0x380>)
 800c612:	f7f4 fe2f 	bl	8001274 <__aeabi_dadd>
 800c616:	0004      	movs	r4, r0
 800c618:	0030      	movs	r0, r6
 800c61a:	000d      	movs	r5, r1
 800c61c:	f7f6 fbba 	bl	8002d94 <__aeabi_i2d>
 800c620:	4a97      	ldr	r2, [pc, #604]	; (800c880 <_dtoa_r+0x384>)
 800c622:	4b98      	ldr	r3, [pc, #608]	; (800c884 <_dtoa_r+0x388>)
 800c624:	f7f5 fd64 	bl	80020f0 <__aeabi_dmul>
 800c628:	0002      	movs	r2, r0
 800c62a:	000b      	movs	r3, r1
 800c62c:	0020      	movs	r0, r4
 800c62e:	0029      	movs	r1, r5
 800c630:	f7f4 fe20 	bl	8001274 <__aeabi_dadd>
 800c634:	0004      	movs	r4, r0
 800c636:	000d      	movs	r5, r1
 800c638:	f7f6 fb76 	bl	8002d28 <__aeabi_d2iz>
 800c63c:	2200      	movs	r2, #0
 800c63e:	9002      	str	r0, [sp, #8]
 800c640:	2300      	movs	r3, #0
 800c642:	0020      	movs	r0, r4
 800c644:	0029      	movs	r1, r5
 800c646:	f7f3 ff07 	bl	8000458 <__aeabi_dcmplt>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d00b      	beq.n	800c666 <_dtoa_r+0x16a>
 800c64e:	9802      	ldr	r0, [sp, #8]
 800c650:	f7f6 fba0 	bl	8002d94 <__aeabi_i2d>
 800c654:	002b      	movs	r3, r5
 800c656:	0022      	movs	r2, r4
 800c658:	f7f3 fef8 	bl	800044c <__aeabi_dcmpeq>
 800c65c:	4243      	negs	r3, r0
 800c65e:	4158      	adcs	r0, r3
 800c660:	9b02      	ldr	r3, [sp, #8]
 800c662:	1a1b      	subs	r3, r3, r0
 800c664:	9302      	str	r3, [sp, #8]
 800c666:	2301      	movs	r3, #1
 800c668:	9316      	str	r3, [sp, #88]	; 0x58
 800c66a:	9b02      	ldr	r3, [sp, #8]
 800c66c:	2b16      	cmp	r3, #22
 800c66e:	d80f      	bhi.n	800c690 <_dtoa_r+0x194>
 800c670:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c672:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c674:	00da      	lsls	r2, r3, #3
 800c676:	4b84      	ldr	r3, [pc, #528]	; (800c888 <_dtoa_r+0x38c>)
 800c678:	189b      	adds	r3, r3, r2
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	f7f3 feeb 	bl	8000458 <__aeabi_dcmplt>
 800c682:	2800      	cmp	r0, #0
 800c684:	d049      	beq.n	800c71a <_dtoa_r+0x21e>
 800c686:	9b02      	ldr	r3, [sp, #8]
 800c688:	3b01      	subs	r3, #1
 800c68a:	9302      	str	r3, [sp, #8]
 800c68c:	2300      	movs	r3, #0
 800c68e:	9316      	str	r3, [sp, #88]	; 0x58
 800c690:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c692:	1b9e      	subs	r6, r3, r6
 800c694:	2300      	movs	r3, #0
 800c696:	930a      	str	r3, [sp, #40]	; 0x28
 800c698:	0033      	movs	r3, r6
 800c69a:	3b01      	subs	r3, #1
 800c69c:	930d      	str	r3, [sp, #52]	; 0x34
 800c69e:	d504      	bpl.n	800c6aa <_dtoa_r+0x1ae>
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	1b9b      	subs	r3, r3, r6
 800c6a4:	930a      	str	r3, [sp, #40]	; 0x28
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	930d      	str	r3, [sp, #52]	; 0x34
 800c6aa:	9b02      	ldr	r3, [sp, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	db36      	blt.n	800c71e <_dtoa_r+0x222>
 800c6b0:	9a02      	ldr	r2, [sp, #8]
 800c6b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6b4:	4694      	mov	ip, r2
 800c6b6:	4463      	add	r3, ip
 800c6b8:	930d      	str	r3, [sp, #52]	; 0x34
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9215      	str	r2, [sp, #84]	; 0x54
 800c6be:	930e      	str	r3, [sp, #56]	; 0x38
 800c6c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6c2:	2401      	movs	r4, #1
 800c6c4:	2b09      	cmp	r3, #9
 800c6c6:	d864      	bhi.n	800c792 <_dtoa_r+0x296>
 800c6c8:	2b05      	cmp	r3, #5
 800c6ca:	dd02      	ble.n	800c6d2 <_dtoa_r+0x1d6>
 800c6cc:	2400      	movs	r4, #0
 800c6ce:	3b04      	subs	r3, #4
 800c6d0:	9322      	str	r3, [sp, #136]	; 0x88
 800c6d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6d4:	1e98      	subs	r0, r3, #2
 800c6d6:	2803      	cmp	r0, #3
 800c6d8:	d864      	bhi.n	800c7a4 <_dtoa_r+0x2a8>
 800c6da:	f7f3 fd1d 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c6de:	3829      	.short	0x3829
 800c6e0:	5836      	.short	0x5836
 800c6e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c6e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c6e6:	189e      	adds	r6, r3, r2
 800c6e8:	4b68      	ldr	r3, [pc, #416]	; (800c88c <_dtoa_r+0x390>)
 800c6ea:	18f2      	adds	r2, r6, r3
 800c6ec:	2a20      	cmp	r2, #32
 800c6ee:	dd0f      	ble.n	800c710 <_dtoa_r+0x214>
 800c6f0:	2340      	movs	r3, #64	; 0x40
 800c6f2:	1a9b      	subs	r3, r3, r2
 800c6f4:	409d      	lsls	r5, r3
 800c6f6:	4b66      	ldr	r3, [pc, #408]	; (800c890 <_dtoa_r+0x394>)
 800c6f8:	9802      	ldr	r0, [sp, #8]
 800c6fa:	18f3      	adds	r3, r6, r3
 800c6fc:	40d8      	lsrs	r0, r3
 800c6fe:	4328      	orrs	r0, r5
 800c700:	f7f6 fb78 	bl	8002df4 <__aeabi_ui2d>
 800c704:	2301      	movs	r3, #1
 800c706:	4c63      	ldr	r4, [pc, #396]	; (800c894 <_dtoa_r+0x398>)
 800c708:	3e01      	subs	r6, #1
 800c70a:	1909      	adds	r1, r1, r4
 800c70c:	9318      	str	r3, [sp, #96]	; 0x60
 800c70e:	e776      	b.n	800c5fe <_dtoa_r+0x102>
 800c710:	2320      	movs	r3, #32
 800c712:	9802      	ldr	r0, [sp, #8]
 800c714:	1a9b      	subs	r3, r3, r2
 800c716:	4098      	lsls	r0, r3
 800c718:	e7f2      	b.n	800c700 <_dtoa_r+0x204>
 800c71a:	9016      	str	r0, [sp, #88]	; 0x58
 800c71c:	e7b8      	b.n	800c690 <_dtoa_r+0x194>
 800c71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c720:	9a02      	ldr	r2, [sp, #8]
 800c722:	1a9b      	subs	r3, r3, r2
 800c724:	930a      	str	r3, [sp, #40]	; 0x28
 800c726:	4253      	negs	r3, r2
 800c728:	930e      	str	r3, [sp, #56]	; 0x38
 800c72a:	2300      	movs	r3, #0
 800c72c:	9315      	str	r3, [sp, #84]	; 0x54
 800c72e:	e7c7      	b.n	800c6c0 <_dtoa_r+0x1c4>
 800c730:	2300      	movs	r3, #0
 800c732:	930f      	str	r3, [sp, #60]	; 0x3c
 800c734:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c736:	930c      	str	r3, [sp, #48]	; 0x30
 800c738:	9307      	str	r3, [sp, #28]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	dc13      	bgt.n	800c766 <_dtoa_r+0x26a>
 800c73e:	2301      	movs	r3, #1
 800c740:	001a      	movs	r2, r3
 800c742:	930c      	str	r3, [sp, #48]	; 0x30
 800c744:	9307      	str	r3, [sp, #28]
 800c746:	9223      	str	r2, [sp, #140]	; 0x8c
 800c748:	e00d      	b.n	800c766 <_dtoa_r+0x26a>
 800c74a:	2301      	movs	r3, #1
 800c74c:	e7f1      	b.n	800c732 <_dtoa_r+0x236>
 800c74e:	2300      	movs	r3, #0
 800c750:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c752:	930f      	str	r3, [sp, #60]	; 0x3c
 800c754:	4694      	mov	ip, r2
 800c756:	9b02      	ldr	r3, [sp, #8]
 800c758:	4463      	add	r3, ip
 800c75a:	930c      	str	r3, [sp, #48]	; 0x30
 800c75c:	3301      	adds	r3, #1
 800c75e:	9307      	str	r3, [sp, #28]
 800c760:	2b00      	cmp	r3, #0
 800c762:	dc00      	bgt.n	800c766 <_dtoa_r+0x26a>
 800c764:	2301      	movs	r3, #1
 800c766:	2200      	movs	r2, #0
 800c768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c76a:	6042      	str	r2, [r0, #4]
 800c76c:	3204      	adds	r2, #4
 800c76e:	0015      	movs	r5, r2
 800c770:	3514      	adds	r5, #20
 800c772:	6841      	ldr	r1, [r0, #4]
 800c774:	429d      	cmp	r5, r3
 800c776:	d919      	bls.n	800c7ac <_dtoa_r+0x2b0>
 800c778:	0038      	movs	r0, r7
 800c77a:	f001 f9d5 	bl	800db28 <_Balloc>
 800c77e:	9006      	str	r0, [sp, #24]
 800c780:	2800      	cmp	r0, #0
 800c782:	d117      	bne.n	800c7b4 <_dtoa_r+0x2b8>
 800c784:	21d5      	movs	r1, #213	; 0xd5
 800c786:	0002      	movs	r2, r0
 800c788:	4b43      	ldr	r3, [pc, #268]	; (800c898 <_dtoa_r+0x39c>)
 800c78a:	0049      	lsls	r1, r1, #1
 800c78c:	e6cb      	b.n	800c526 <_dtoa_r+0x2a>
 800c78e:	2301      	movs	r3, #1
 800c790:	e7de      	b.n	800c750 <_dtoa_r+0x254>
 800c792:	2300      	movs	r3, #0
 800c794:	940f      	str	r4, [sp, #60]	; 0x3c
 800c796:	9322      	str	r3, [sp, #136]	; 0x88
 800c798:	3b01      	subs	r3, #1
 800c79a:	930c      	str	r3, [sp, #48]	; 0x30
 800c79c:	9307      	str	r3, [sp, #28]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	3313      	adds	r3, #19
 800c7a2:	e7d0      	b.n	800c746 <_dtoa_r+0x24a>
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7a8:	3b02      	subs	r3, #2
 800c7aa:	e7f6      	b.n	800c79a <_dtoa_r+0x29e>
 800c7ac:	3101      	adds	r1, #1
 800c7ae:	6041      	str	r1, [r0, #4]
 800c7b0:	0052      	lsls	r2, r2, #1
 800c7b2:	e7dc      	b.n	800c76e <_dtoa_r+0x272>
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b6:	9a06      	ldr	r2, [sp, #24]
 800c7b8:	601a      	str	r2, [r3, #0]
 800c7ba:	9b07      	ldr	r3, [sp, #28]
 800c7bc:	2b0e      	cmp	r3, #14
 800c7be:	d900      	bls.n	800c7c2 <_dtoa_r+0x2c6>
 800c7c0:	e0eb      	b.n	800c99a <_dtoa_r+0x49e>
 800c7c2:	2c00      	cmp	r4, #0
 800c7c4:	d100      	bne.n	800c7c8 <_dtoa_r+0x2cc>
 800c7c6:	e0e8      	b.n	800c99a <_dtoa_r+0x49e>
 800c7c8:	9b02      	ldr	r3, [sp, #8]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	dd68      	ble.n	800c8a0 <_dtoa_r+0x3a4>
 800c7ce:	001a      	movs	r2, r3
 800c7d0:	210f      	movs	r1, #15
 800c7d2:	4b2d      	ldr	r3, [pc, #180]	; (800c888 <_dtoa_r+0x38c>)
 800c7d4:	400a      	ands	r2, r1
 800c7d6:	00d2      	lsls	r2, r2, #3
 800c7d8:	189b      	adds	r3, r3, r2
 800c7da:	681d      	ldr	r5, [r3, #0]
 800c7dc:	685e      	ldr	r6, [r3, #4]
 800c7de:	9b02      	ldr	r3, [sp, #8]
 800c7e0:	111c      	asrs	r4, r3, #4
 800c7e2:	2302      	movs	r3, #2
 800c7e4:	9310      	str	r3, [sp, #64]	; 0x40
 800c7e6:	9b02      	ldr	r3, [sp, #8]
 800c7e8:	05db      	lsls	r3, r3, #23
 800c7ea:	d50b      	bpl.n	800c804 <_dtoa_r+0x308>
 800c7ec:	4b2b      	ldr	r3, [pc, #172]	; (800c89c <_dtoa_r+0x3a0>)
 800c7ee:	400c      	ands	r4, r1
 800c7f0:	6a1a      	ldr	r2, [r3, #32]
 800c7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c7f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c7f8:	f7f5 f878 	bl	80018ec <__aeabi_ddiv>
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	9008      	str	r0, [sp, #32]
 800c800:	9109      	str	r1, [sp, #36]	; 0x24
 800c802:	9310      	str	r3, [sp, #64]	; 0x40
 800c804:	4b25      	ldr	r3, [pc, #148]	; (800c89c <_dtoa_r+0x3a0>)
 800c806:	9314      	str	r3, [sp, #80]	; 0x50
 800c808:	2c00      	cmp	r4, #0
 800c80a:	d108      	bne.n	800c81e <_dtoa_r+0x322>
 800c80c:	9808      	ldr	r0, [sp, #32]
 800c80e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c810:	002a      	movs	r2, r5
 800c812:	0033      	movs	r3, r6
 800c814:	f7f5 f86a 	bl	80018ec <__aeabi_ddiv>
 800c818:	9008      	str	r0, [sp, #32]
 800c81a:	9109      	str	r1, [sp, #36]	; 0x24
 800c81c:	e05c      	b.n	800c8d8 <_dtoa_r+0x3dc>
 800c81e:	2301      	movs	r3, #1
 800c820:	421c      	tst	r4, r3
 800c822:	d00b      	beq.n	800c83c <_dtoa_r+0x340>
 800c824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c826:	0028      	movs	r0, r5
 800c828:	3301      	adds	r3, #1
 800c82a:	9310      	str	r3, [sp, #64]	; 0x40
 800c82c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c82e:	0031      	movs	r1, r6
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	f7f5 fc5c 	bl	80020f0 <__aeabi_dmul>
 800c838:	0005      	movs	r5, r0
 800c83a:	000e      	movs	r6, r1
 800c83c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c83e:	1064      	asrs	r4, r4, #1
 800c840:	3308      	adds	r3, #8
 800c842:	e7e0      	b.n	800c806 <_dtoa_r+0x30a>
 800c844:	0800f36e 	.word	0x0800f36e
 800c848:	0800f385 	.word	0x0800f385
 800c84c:	7ff00000 	.word	0x7ff00000
 800c850:	0000270f 	.word	0x0000270f
 800c854:	0800f36a 	.word	0x0800f36a
 800c858:	0800f36d 	.word	0x0800f36d
 800c85c:	0800f1e4 	.word	0x0800f1e4
 800c860:	0800f1e5 	.word	0x0800f1e5
 800c864:	3ff00000 	.word	0x3ff00000
 800c868:	fffffc01 	.word	0xfffffc01
 800c86c:	3ff80000 	.word	0x3ff80000
 800c870:	636f4361 	.word	0x636f4361
 800c874:	3fd287a7 	.word	0x3fd287a7
 800c878:	8b60c8b3 	.word	0x8b60c8b3
 800c87c:	3fc68a28 	.word	0x3fc68a28
 800c880:	509f79fb 	.word	0x509f79fb
 800c884:	3fd34413 	.word	0x3fd34413
 800c888:	0800f4f0 	.word	0x0800f4f0
 800c88c:	00000432 	.word	0x00000432
 800c890:	00000412 	.word	0x00000412
 800c894:	fe100000 	.word	0xfe100000
 800c898:	0800f3e0 	.word	0x0800f3e0
 800c89c:	0800f4c8 	.word	0x0800f4c8
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	9310      	str	r3, [sp, #64]	; 0x40
 800c8a4:	9b02      	ldr	r3, [sp, #8]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d016      	beq.n	800c8d8 <_dtoa_r+0x3dc>
 800c8aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c8ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c8ae:	425c      	negs	r4, r3
 800c8b0:	230f      	movs	r3, #15
 800c8b2:	4ab6      	ldr	r2, [pc, #728]	; (800cb8c <_dtoa_r+0x690>)
 800c8b4:	4023      	ands	r3, r4
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	18d3      	adds	r3, r2, r3
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	f7f5 fc17 	bl	80020f0 <__aeabi_dmul>
 800c8c2:	2601      	movs	r6, #1
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	9008      	str	r0, [sp, #32]
 800c8c8:	9109      	str	r1, [sp, #36]	; 0x24
 800c8ca:	4db1      	ldr	r5, [pc, #708]	; (800cb90 <_dtoa_r+0x694>)
 800c8cc:	1124      	asrs	r4, r4, #4
 800c8ce:	2c00      	cmp	r4, #0
 800c8d0:	d000      	beq.n	800c8d4 <_dtoa_r+0x3d8>
 800c8d2:	e094      	b.n	800c9fe <_dtoa_r+0x502>
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d19f      	bne.n	800c818 <_dtoa_r+0x31c>
 800c8d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d100      	bne.n	800c8e0 <_dtoa_r+0x3e4>
 800c8de:	e09b      	b.n	800ca18 <_dtoa_r+0x51c>
 800c8e0:	9c08      	ldr	r4, [sp, #32]
 800c8e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	0020      	movs	r0, r4
 800c8e8:	0029      	movs	r1, r5
 800c8ea:	4baa      	ldr	r3, [pc, #680]	; (800cb94 <_dtoa_r+0x698>)
 800c8ec:	f7f3 fdb4 	bl	8000458 <__aeabi_dcmplt>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d100      	bne.n	800c8f6 <_dtoa_r+0x3fa>
 800c8f4:	e090      	b.n	800ca18 <_dtoa_r+0x51c>
 800c8f6:	9b07      	ldr	r3, [sp, #28]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d100      	bne.n	800c8fe <_dtoa_r+0x402>
 800c8fc:	e08c      	b.n	800ca18 <_dtoa_r+0x51c>
 800c8fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c900:	2b00      	cmp	r3, #0
 800c902:	dd46      	ble.n	800c992 <_dtoa_r+0x496>
 800c904:	9b02      	ldr	r3, [sp, #8]
 800c906:	2200      	movs	r2, #0
 800c908:	0020      	movs	r0, r4
 800c90a:	0029      	movs	r1, r5
 800c90c:	1e5e      	subs	r6, r3, #1
 800c90e:	4ba2      	ldr	r3, [pc, #648]	; (800cb98 <_dtoa_r+0x69c>)
 800c910:	f7f5 fbee 	bl	80020f0 <__aeabi_dmul>
 800c914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c916:	9008      	str	r0, [sp, #32]
 800c918:	9109      	str	r1, [sp, #36]	; 0x24
 800c91a:	3301      	adds	r3, #1
 800c91c:	9310      	str	r3, [sp, #64]	; 0x40
 800c91e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c920:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c922:	9c08      	ldr	r4, [sp, #32]
 800c924:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c926:	9314      	str	r3, [sp, #80]	; 0x50
 800c928:	f7f6 fa34 	bl	8002d94 <__aeabi_i2d>
 800c92c:	0022      	movs	r2, r4
 800c92e:	002b      	movs	r3, r5
 800c930:	f7f5 fbde 	bl	80020f0 <__aeabi_dmul>
 800c934:	2200      	movs	r2, #0
 800c936:	4b99      	ldr	r3, [pc, #612]	; (800cb9c <_dtoa_r+0x6a0>)
 800c938:	f7f4 fc9c 	bl	8001274 <__aeabi_dadd>
 800c93c:	9010      	str	r0, [sp, #64]	; 0x40
 800c93e:	9111      	str	r1, [sp, #68]	; 0x44
 800c940:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c942:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c944:	9208      	str	r2, [sp, #32]
 800c946:	9309      	str	r3, [sp, #36]	; 0x24
 800c948:	4a95      	ldr	r2, [pc, #596]	; (800cba0 <_dtoa_r+0x6a4>)
 800c94a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c94c:	4694      	mov	ip, r2
 800c94e:	4463      	add	r3, ip
 800c950:	9317      	str	r3, [sp, #92]	; 0x5c
 800c952:	9309      	str	r3, [sp, #36]	; 0x24
 800c954:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c956:	2b00      	cmp	r3, #0
 800c958:	d161      	bne.n	800ca1e <_dtoa_r+0x522>
 800c95a:	2200      	movs	r2, #0
 800c95c:	0020      	movs	r0, r4
 800c95e:	0029      	movs	r1, r5
 800c960:	4b90      	ldr	r3, [pc, #576]	; (800cba4 <_dtoa_r+0x6a8>)
 800c962:	f7f5 fe31 	bl	80025c8 <__aeabi_dsub>
 800c966:	9a08      	ldr	r2, [sp, #32]
 800c968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c96a:	0004      	movs	r4, r0
 800c96c:	000d      	movs	r5, r1
 800c96e:	f7f3 fd87 	bl	8000480 <__aeabi_dcmpgt>
 800c972:	2800      	cmp	r0, #0
 800c974:	d000      	beq.n	800c978 <_dtoa_r+0x47c>
 800c976:	e2af      	b.n	800ced8 <_dtoa_r+0x9dc>
 800c978:	488b      	ldr	r0, [pc, #556]	; (800cba8 <_dtoa_r+0x6ac>)
 800c97a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c97c:	4684      	mov	ip, r0
 800c97e:	4461      	add	r1, ip
 800c980:	000b      	movs	r3, r1
 800c982:	0020      	movs	r0, r4
 800c984:	0029      	movs	r1, r5
 800c986:	9a08      	ldr	r2, [sp, #32]
 800c988:	f7f3 fd66 	bl	8000458 <__aeabi_dcmplt>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	d000      	beq.n	800c992 <_dtoa_r+0x496>
 800c990:	e29f      	b.n	800ced2 <_dtoa_r+0x9d6>
 800c992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c994:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c996:	9308      	str	r3, [sp, #32]
 800c998:	9409      	str	r4, [sp, #36]	; 0x24
 800c99a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	da00      	bge.n	800c9a2 <_dtoa_r+0x4a6>
 800c9a0:	e172      	b.n	800cc88 <_dtoa_r+0x78c>
 800c9a2:	9a02      	ldr	r2, [sp, #8]
 800c9a4:	2a0e      	cmp	r2, #14
 800c9a6:	dd00      	ble.n	800c9aa <_dtoa_r+0x4ae>
 800c9a8:	e16e      	b.n	800cc88 <_dtoa_r+0x78c>
 800c9aa:	4b78      	ldr	r3, [pc, #480]	; (800cb8c <_dtoa_r+0x690>)
 800c9ac:	00d2      	lsls	r2, r2, #3
 800c9ae:	189b      	adds	r3, r3, r2
 800c9b0:	685c      	ldr	r4, [r3, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	930a      	str	r3, [sp, #40]	; 0x28
 800c9b6:	940b      	str	r4, [sp, #44]	; 0x2c
 800c9b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	db00      	blt.n	800c9c0 <_dtoa_r+0x4c4>
 800c9be:	e0f7      	b.n	800cbb0 <_dtoa_r+0x6b4>
 800c9c0:	9b07      	ldr	r3, [sp, #28]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dd00      	ble.n	800c9c8 <_dtoa_r+0x4cc>
 800c9c6:	e0f3      	b.n	800cbb0 <_dtoa_r+0x6b4>
 800c9c8:	d000      	beq.n	800c9cc <_dtoa_r+0x4d0>
 800c9ca:	e282      	b.n	800ced2 <_dtoa_r+0x9d6>
 800c9cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	4b74      	ldr	r3, [pc, #464]	; (800cba4 <_dtoa_r+0x6a8>)
 800c9d4:	f7f5 fb8c 	bl	80020f0 <__aeabi_dmul>
 800c9d8:	9a08      	ldr	r2, [sp, #32]
 800c9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9dc:	f7f3 fd5a 	bl	8000494 <__aeabi_dcmpge>
 800c9e0:	9e07      	ldr	r6, [sp, #28]
 800c9e2:	0035      	movs	r5, r6
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d000      	beq.n	800c9ea <_dtoa_r+0x4ee>
 800c9e8:	e259      	b.n	800ce9e <_dtoa_r+0x9a2>
 800c9ea:	9b06      	ldr	r3, [sp, #24]
 800c9ec:	9a06      	ldr	r2, [sp, #24]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	9308      	str	r3, [sp, #32]
 800c9f2:	2331      	movs	r3, #49	; 0x31
 800c9f4:	7013      	strb	r3, [r2, #0]
 800c9f6:	9b02      	ldr	r3, [sp, #8]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	9302      	str	r3, [sp, #8]
 800c9fc:	e254      	b.n	800cea8 <_dtoa_r+0x9ac>
 800c9fe:	4234      	tst	r4, r6
 800ca00:	d007      	beq.n	800ca12 <_dtoa_r+0x516>
 800ca02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca04:	3301      	adds	r3, #1
 800ca06:	9310      	str	r3, [sp, #64]	; 0x40
 800ca08:	682a      	ldr	r2, [r5, #0]
 800ca0a:	686b      	ldr	r3, [r5, #4]
 800ca0c:	f7f5 fb70 	bl	80020f0 <__aeabi_dmul>
 800ca10:	0033      	movs	r3, r6
 800ca12:	1064      	asrs	r4, r4, #1
 800ca14:	3508      	adds	r5, #8
 800ca16:	e75a      	b.n	800c8ce <_dtoa_r+0x3d2>
 800ca18:	9e02      	ldr	r6, [sp, #8]
 800ca1a:	9b07      	ldr	r3, [sp, #28]
 800ca1c:	e780      	b.n	800c920 <_dtoa_r+0x424>
 800ca1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ca22:	1e5a      	subs	r2, r3, #1
 800ca24:	4b59      	ldr	r3, [pc, #356]	; (800cb8c <_dtoa_r+0x690>)
 800ca26:	00d2      	lsls	r2, r2, #3
 800ca28:	189b      	adds	r3, r3, r2
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	2900      	cmp	r1, #0
 800ca30:	d051      	beq.n	800cad6 <_dtoa_r+0x5da>
 800ca32:	2000      	movs	r0, #0
 800ca34:	495d      	ldr	r1, [pc, #372]	; (800cbac <_dtoa_r+0x6b0>)
 800ca36:	f7f4 ff59 	bl	80018ec <__aeabi_ddiv>
 800ca3a:	9a08      	ldr	r2, [sp, #32]
 800ca3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca3e:	f7f5 fdc3 	bl	80025c8 <__aeabi_dsub>
 800ca42:	9a06      	ldr	r2, [sp, #24]
 800ca44:	9b06      	ldr	r3, [sp, #24]
 800ca46:	4694      	mov	ip, r2
 800ca48:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca4c:	9010      	str	r0, [sp, #64]	; 0x40
 800ca4e:	9111      	str	r1, [sp, #68]	; 0x44
 800ca50:	4463      	add	r3, ip
 800ca52:	9319      	str	r3, [sp, #100]	; 0x64
 800ca54:	0029      	movs	r1, r5
 800ca56:	0020      	movs	r0, r4
 800ca58:	f7f6 f966 	bl	8002d28 <__aeabi_d2iz>
 800ca5c:	9014      	str	r0, [sp, #80]	; 0x50
 800ca5e:	f7f6 f999 	bl	8002d94 <__aeabi_i2d>
 800ca62:	0002      	movs	r2, r0
 800ca64:	000b      	movs	r3, r1
 800ca66:	0020      	movs	r0, r4
 800ca68:	0029      	movs	r1, r5
 800ca6a:	f7f5 fdad 	bl	80025c8 <__aeabi_dsub>
 800ca6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca72:	3301      	adds	r3, #1
 800ca74:	9308      	str	r3, [sp, #32]
 800ca76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca78:	0004      	movs	r4, r0
 800ca7a:	3330      	adds	r3, #48	; 0x30
 800ca7c:	7013      	strb	r3, [r2, #0]
 800ca7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca82:	000d      	movs	r5, r1
 800ca84:	f7f3 fce8 	bl	8000458 <__aeabi_dcmplt>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d175      	bne.n	800cb78 <_dtoa_r+0x67c>
 800ca8c:	0022      	movs	r2, r4
 800ca8e:	002b      	movs	r3, r5
 800ca90:	2000      	movs	r0, #0
 800ca92:	4940      	ldr	r1, [pc, #256]	; (800cb94 <_dtoa_r+0x698>)
 800ca94:	f7f5 fd98 	bl	80025c8 <__aeabi_dsub>
 800ca98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca9c:	f7f3 fcdc 	bl	8000458 <__aeabi_dcmplt>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d000      	beq.n	800caa6 <_dtoa_r+0x5aa>
 800caa4:	e0d2      	b.n	800cc4c <_dtoa_r+0x750>
 800caa6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800caa8:	9a08      	ldr	r2, [sp, #32]
 800caaa:	4293      	cmp	r3, r2
 800caac:	d100      	bne.n	800cab0 <_dtoa_r+0x5b4>
 800caae:	e770      	b.n	800c992 <_dtoa_r+0x496>
 800cab0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cab2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cab4:	2200      	movs	r2, #0
 800cab6:	4b38      	ldr	r3, [pc, #224]	; (800cb98 <_dtoa_r+0x69c>)
 800cab8:	f7f5 fb1a 	bl	80020f0 <__aeabi_dmul>
 800cabc:	4b36      	ldr	r3, [pc, #216]	; (800cb98 <_dtoa_r+0x69c>)
 800cabe:	9010      	str	r0, [sp, #64]	; 0x40
 800cac0:	9111      	str	r1, [sp, #68]	; 0x44
 800cac2:	2200      	movs	r2, #0
 800cac4:	0020      	movs	r0, r4
 800cac6:	0029      	movs	r1, r5
 800cac8:	f7f5 fb12 	bl	80020f0 <__aeabi_dmul>
 800cacc:	9b08      	ldr	r3, [sp, #32]
 800cace:	0004      	movs	r4, r0
 800cad0:	000d      	movs	r5, r1
 800cad2:	9317      	str	r3, [sp, #92]	; 0x5c
 800cad4:	e7be      	b.n	800ca54 <_dtoa_r+0x558>
 800cad6:	9808      	ldr	r0, [sp, #32]
 800cad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cada:	f7f5 fb09 	bl	80020f0 <__aeabi_dmul>
 800cade:	9a06      	ldr	r2, [sp, #24]
 800cae0:	9b06      	ldr	r3, [sp, #24]
 800cae2:	4694      	mov	ip, r2
 800cae4:	9308      	str	r3, [sp, #32]
 800cae6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cae8:	9010      	str	r0, [sp, #64]	; 0x40
 800caea:	9111      	str	r1, [sp, #68]	; 0x44
 800caec:	4463      	add	r3, ip
 800caee:	9319      	str	r3, [sp, #100]	; 0x64
 800caf0:	0029      	movs	r1, r5
 800caf2:	0020      	movs	r0, r4
 800caf4:	f7f6 f918 	bl	8002d28 <__aeabi_d2iz>
 800caf8:	9017      	str	r0, [sp, #92]	; 0x5c
 800cafa:	f7f6 f94b 	bl	8002d94 <__aeabi_i2d>
 800cafe:	0002      	movs	r2, r0
 800cb00:	000b      	movs	r3, r1
 800cb02:	0020      	movs	r0, r4
 800cb04:	0029      	movs	r1, r5
 800cb06:	f7f5 fd5f 	bl	80025c8 <__aeabi_dsub>
 800cb0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb0c:	9a08      	ldr	r2, [sp, #32]
 800cb0e:	3330      	adds	r3, #48	; 0x30
 800cb10:	7013      	strb	r3, [r2, #0]
 800cb12:	0013      	movs	r3, r2
 800cb14:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cb16:	3301      	adds	r3, #1
 800cb18:	0004      	movs	r4, r0
 800cb1a:	000d      	movs	r5, r1
 800cb1c:	9308      	str	r3, [sp, #32]
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d12c      	bne.n	800cb7c <_dtoa_r+0x680>
 800cb22:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cb24:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cb26:	9a06      	ldr	r2, [sp, #24]
 800cb28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb2a:	4694      	mov	ip, r2
 800cb2c:	4463      	add	r3, ip
 800cb2e:	2200      	movs	r2, #0
 800cb30:	9308      	str	r3, [sp, #32]
 800cb32:	4b1e      	ldr	r3, [pc, #120]	; (800cbac <_dtoa_r+0x6b0>)
 800cb34:	f7f4 fb9e 	bl	8001274 <__aeabi_dadd>
 800cb38:	0002      	movs	r2, r0
 800cb3a:	000b      	movs	r3, r1
 800cb3c:	0020      	movs	r0, r4
 800cb3e:	0029      	movs	r1, r5
 800cb40:	f7f3 fc9e 	bl	8000480 <__aeabi_dcmpgt>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d000      	beq.n	800cb4a <_dtoa_r+0x64e>
 800cb48:	e080      	b.n	800cc4c <_dtoa_r+0x750>
 800cb4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cb4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb4e:	2000      	movs	r0, #0
 800cb50:	4916      	ldr	r1, [pc, #88]	; (800cbac <_dtoa_r+0x6b0>)
 800cb52:	f7f5 fd39 	bl	80025c8 <__aeabi_dsub>
 800cb56:	0002      	movs	r2, r0
 800cb58:	000b      	movs	r3, r1
 800cb5a:	0020      	movs	r0, r4
 800cb5c:	0029      	movs	r1, r5
 800cb5e:	f7f3 fc7b 	bl	8000458 <__aeabi_dcmplt>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d100      	bne.n	800cb68 <_dtoa_r+0x66c>
 800cb66:	e714      	b.n	800c992 <_dtoa_r+0x496>
 800cb68:	9b08      	ldr	r3, [sp, #32]
 800cb6a:	001a      	movs	r2, r3
 800cb6c:	3a01      	subs	r2, #1
 800cb6e:	9208      	str	r2, [sp, #32]
 800cb70:	7812      	ldrb	r2, [r2, #0]
 800cb72:	2a30      	cmp	r2, #48	; 0x30
 800cb74:	d0f8      	beq.n	800cb68 <_dtoa_r+0x66c>
 800cb76:	9308      	str	r3, [sp, #32]
 800cb78:	9602      	str	r6, [sp, #8]
 800cb7a:	e055      	b.n	800cc28 <_dtoa_r+0x72c>
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	4b06      	ldr	r3, [pc, #24]	; (800cb98 <_dtoa_r+0x69c>)
 800cb80:	f7f5 fab6 	bl	80020f0 <__aeabi_dmul>
 800cb84:	0004      	movs	r4, r0
 800cb86:	000d      	movs	r5, r1
 800cb88:	e7b2      	b.n	800caf0 <_dtoa_r+0x5f4>
 800cb8a:	46c0      	nop			; (mov r8, r8)
 800cb8c:	0800f4f0 	.word	0x0800f4f0
 800cb90:	0800f4c8 	.word	0x0800f4c8
 800cb94:	3ff00000 	.word	0x3ff00000
 800cb98:	40240000 	.word	0x40240000
 800cb9c:	401c0000 	.word	0x401c0000
 800cba0:	fcc00000 	.word	0xfcc00000
 800cba4:	40140000 	.word	0x40140000
 800cba8:	7cc00000 	.word	0x7cc00000
 800cbac:	3fe00000 	.word	0x3fe00000
 800cbb0:	9b07      	ldr	r3, [sp, #28]
 800cbb2:	9e06      	ldr	r6, [sp, #24]
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	199b      	adds	r3, r3, r6
 800cbb8:	930c      	str	r3, [sp, #48]	; 0x30
 800cbba:	9c08      	ldr	r4, [sp, #32]
 800cbbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cbbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbc2:	0020      	movs	r0, r4
 800cbc4:	0029      	movs	r1, r5
 800cbc6:	f7f4 fe91 	bl	80018ec <__aeabi_ddiv>
 800cbca:	f7f6 f8ad 	bl	8002d28 <__aeabi_d2iz>
 800cbce:	9007      	str	r0, [sp, #28]
 800cbd0:	f7f6 f8e0 	bl	8002d94 <__aeabi_i2d>
 800cbd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbd8:	f7f5 fa8a 	bl	80020f0 <__aeabi_dmul>
 800cbdc:	0002      	movs	r2, r0
 800cbde:	000b      	movs	r3, r1
 800cbe0:	0020      	movs	r0, r4
 800cbe2:	0029      	movs	r1, r5
 800cbe4:	f7f5 fcf0 	bl	80025c8 <__aeabi_dsub>
 800cbe8:	0033      	movs	r3, r6
 800cbea:	9a07      	ldr	r2, [sp, #28]
 800cbec:	3601      	adds	r6, #1
 800cbee:	3230      	adds	r2, #48	; 0x30
 800cbf0:	701a      	strb	r2, [r3, #0]
 800cbf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbf4:	9608      	str	r6, [sp, #32]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d139      	bne.n	800cc6e <_dtoa_r+0x772>
 800cbfa:	0002      	movs	r2, r0
 800cbfc:	000b      	movs	r3, r1
 800cbfe:	f7f4 fb39 	bl	8001274 <__aeabi_dadd>
 800cc02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc06:	0004      	movs	r4, r0
 800cc08:	000d      	movs	r5, r1
 800cc0a:	f7f3 fc39 	bl	8000480 <__aeabi_dcmpgt>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	d11b      	bne.n	800cc4a <_dtoa_r+0x74e>
 800cc12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc16:	0020      	movs	r0, r4
 800cc18:	0029      	movs	r1, r5
 800cc1a:	f7f3 fc17 	bl	800044c <__aeabi_dcmpeq>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d002      	beq.n	800cc28 <_dtoa_r+0x72c>
 800cc22:	9b07      	ldr	r3, [sp, #28]
 800cc24:	07db      	lsls	r3, r3, #31
 800cc26:	d410      	bmi.n	800cc4a <_dtoa_r+0x74e>
 800cc28:	0038      	movs	r0, r7
 800cc2a:	9905      	ldr	r1, [sp, #20]
 800cc2c:	f000 ffc0 	bl	800dbb0 <_Bfree>
 800cc30:	2300      	movs	r3, #0
 800cc32:	9a08      	ldr	r2, [sp, #32]
 800cc34:	9802      	ldr	r0, [sp, #8]
 800cc36:	7013      	strb	r3, [r2, #0]
 800cc38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	6018      	str	r0, [r3, #0]
 800cc3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d100      	bne.n	800cc46 <_dtoa_r+0x74a>
 800cc44:	e4a6      	b.n	800c594 <_dtoa_r+0x98>
 800cc46:	601a      	str	r2, [r3, #0]
 800cc48:	e4a4      	b.n	800c594 <_dtoa_r+0x98>
 800cc4a:	9e02      	ldr	r6, [sp, #8]
 800cc4c:	9b08      	ldr	r3, [sp, #32]
 800cc4e:	9308      	str	r3, [sp, #32]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	781a      	ldrb	r2, [r3, #0]
 800cc54:	2a39      	cmp	r2, #57	; 0x39
 800cc56:	d106      	bne.n	800cc66 <_dtoa_r+0x76a>
 800cc58:	9a06      	ldr	r2, [sp, #24]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d1f7      	bne.n	800cc4e <_dtoa_r+0x752>
 800cc5e:	2230      	movs	r2, #48	; 0x30
 800cc60:	9906      	ldr	r1, [sp, #24]
 800cc62:	3601      	adds	r6, #1
 800cc64:	700a      	strb	r2, [r1, #0]
 800cc66:	781a      	ldrb	r2, [r3, #0]
 800cc68:	3201      	adds	r2, #1
 800cc6a:	701a      	strb	r2, [r3, #0]
 800cc6c:	e784      	b.n	800cb78 <_dtoa_r+0x67c>
 800cc6e:	2200      	movs	r2, #0
 800cc70:	4baa      	ldr	r3, [pc, #680]	; (800cf1c <_dtoa_r+0xa20>)
 800cc72:	f7f5 fa3d 	bl	80020f0 <__aeabi_dmul>
 800cc76:	2200      	movs	r2, #0
 800cc78:	2300      	movs	r3, #0
 800cc7a:	0004      	movs	r4, r0
 800cc7c:	000d      	movs	r5, r1
 800cc7e:	f7f3 fbe5 	bl	800044c <__aeabi_dcmpeq>
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d09b      	beq.n	800cbbe <_dtoa_r+0x6c2>
 800cc86:	e7cf      	b.n	800cc28 <_dtoa_r+0x72c>
 800cc88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc8a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cc8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cc8e:	2d00      	cmp	r5, #0
 800cc90:	d012      	beq.n	800ccb8 <_dtoa_r+0x7bc>
 800cc92:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cc94:	2a01      	cmp	r2, #1
 800cc96:	dc66      	bgt.n	800cd66 <_dtoa_r+0x86a>
 800cc98:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cc9a:	2a00      	cmp	r2, #0
 800cc9c:	d05d      	beq.n	800cd5a <_dtoa_r+0x85e>
 800cc9e:	4aa0      	ldr	r2, [pc, #640]	; (800cf20 <_dtoa_r+0xa24>)
 800cca0:	189b      	adds	r3, r3, r2
 800cca2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cca4:	2101      	movs	r1, #1
 800cca6:	18d2      	adds	r2, r2, r3
 800cca8:	920a      	str	r2, [sp, #40]	; 0x28
 800ccaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccac:	0038      	movs	r0, r7
 800ccae:	18d3      	adds	r3, r2, r3
 800ccb0:	930d      	str	r3, [sp, #52]	; 0x34
 800ccb2:	f001 f879 	bl	800dda8 <__i2b>
 800ccb6:	0005      	movs	r5, r0
 800ccb8:	2c00      	cmp	r4, #0
 800ccba:	dd0e      	ble.n	800ccda <_dtoa_r+0x7de>
 800ccbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	dd0b      	ble.n	800ccda <_dtoa_r+0x7de>
 800ccc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccc4:	0023      	movs	r3, r4
 800ccc6:	4294      	cmp	r4, r2
 800ccc8:	dd00      	ble.n	800cccc <_dtoa_r+0x7d0>
 800ccca:	0013      	movs	r3, r2
 800cccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccce:	1ae4      	subs	r4, r4, r3
 800ccd0:	1ad2      	subs	r2, r2, r3
 800ccd2:	920a      	str	r2, [sp, #40]	; 0x28
 800ccd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	930d      	str	r3, [sp, #52]	; 0x34
 800ccda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d01f      	beq.n	800cd20 <_dtoa_r+0x824>
 800cce0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d054      	beq.n	800cd90 <_dtoa_r+0x894>
 800cce6:	2e00      	cmp	r6, #0
 800cce8:	dd11      	ble.n	800cd0e <_dtoa_r+0x812>
 800ccea:	0029      	movs	r1, r5
 800ccec:	0032      	movs	r2, r6
 800ccee:	0038      	movs	r0, r7
 800ccf0:	f001 f920 	bl	800df34 <__pow5mult>
 800ccf4:	9a05      	ldr	r2, [sp, #20]
 800ccf6:	0001      	movs	r1, r0
 800ccf8:	0005      	movs	r5, r0
 800ccfa:	0038      	movs	r0, r7
 800ccfc:	f001 f86a 	bl	800ddd4 <__multiply>
 800cd00:	9905      	ldr	r1, [sp, #20]
 800cd02:	9014      	str	r0, [sp, #80]	; 0x50
 800cd04:	0038      	movs	r0, r7
 800cd06:	f000 ff53 	bl	800dbb0 <_Bfree>
 800cd0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd0c:	9305      	str	r3, [sp, #20]
 800cd0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd10:	1b9a      	subs	r2, r3, r6
 800cd12:	42b3      	cmp	r3, r6
 800cd14:	d004      	beq.n	800cd20 <_dtoa_r+0x824>
 800cd16:	0038      	movs	r0, r7
 800cd18:	9905      	ldr	r1, [sp, #20]
 800cd1a:	f001 f90b 	bl	800df34 <__pow5mult>
 800cd1e:	9005      	str	r0, [sp, #20]
 800cd20:	2101      	movs	r1, #1
 800cd22:	0038      	movs	r0, r7
 800cd24:	f001 f840 	bl	800dda8 <__i2b>
 800cd28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd2a:	0006      	movs	r6, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	dd31      	ble.n	800cd94 <_dtoa_r+0x898>
 800cd30:	001a      	movs	r2, r3
 800cd32:	0001      	movs	r1, r0
 800cd34:	0038      	movs	r0, r7
 800cd36:	f001 f8fd 	bl	800df34 <__pow5mult>
 800cd3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd3c:	0006      	movs	r6, r0
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	dd2d      	ble.n	800cd9e <_dtoa_r+0x8a2>
 800cd42:	2300      	movs	r3, #0
 800cd44:	930e      	str	r3, [sp, #56]	; 0x38
 800cd46:	6933      	ldr	r3, [r6, #16]
 800cd48:	3303      	adds	r3, #3
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	18f3      	adds	r3, r6, r3
 800cd4e:	6858      	ldr	r0, [r3, #4]
 800cd50:	f000 ffe2 	bl	800dd18 <__hi0bits>
 800cd54:	2320      	movs	r3, #32
 800cd56:	1a18      	subs	r0, r3, r0
 800cd58:	e039      	b.n	800cdce <_dtoa_r+0x8d2>
 800cd5a:	2336      	movs	r3, #54	; 0x36
 800cd5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cd5e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cd60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cd62:	1a9b      	subs	r3, r3, r2
 800cd64:	e79d      	b.n	800cca2 <_dtoa_r+0x7a6>
 800cd66:	9b07      	ldr	r3, [sp, #28]
 800cd68:	1e5e      	subs	r6, r3, #1
 800cd6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd6c:	42b3      	cmp	r3, r6
 800cd6e:	db07      	blt.n	800cd80 <_dtoa_r+0x884>
 800cd70:	1b9e      	subs	r6, r3, r6
 800cd72:	9b07      	ldr	r3, [sp, #28]
 800cd74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	da93      	bge.n	800cca2 <_dtoa_r+0x7a6>
 800cd7a:	1ae4      	subs	r4, r4, r3
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	e790      	b.n	800cca2 <_dtoa_r+0x7a6>
 800cd80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cd84:	1af3      	subs	r3, r6, r3
 800cd86:	18d3      	adds	r3, r2, r3
 800cd88:	960e      	str	r6, [sp, #56]	; 0x38
 800cd8a:	9315      	str	r3, [sp, #84]	; 0x54
 800cd8c:	2600      	movs	r6, #0
 800cd8e:	e7f0      	b.n	800cd72 <_dtoa_r+0x876>
 800cd90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd92:	e7c0      	b.n	800cd16 <_dtoa_r+0x81a>
 800cd94:	2300      	movs	r3, #0
 800cd96:	930e      	str	r3, [sp, #56]	; 0x38
 800cd98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	dc13      	bgt.n	800cdc6 <_dtoa_r+0x8ca>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	930e      	str	r3, [sp, #56]	; 0x38
 800cda2:	9b08      	ldr	r3, [sp, #32]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d10e      	bne.n	800cdc6 <_dtoa_r+0x8ca>
 800cda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdaa:	031b      	lsls	r3, r3, #12
 800cdac:	d10b      	bne.n	800cdc6 <_dtoa_r+0x8ca>
 800cdae:	4b5d      	ldr	r3, [pc, #372]	; (800cf24 <_dtoa_r+0xa28>)
 800cdb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdb2:	4213      	tst	r3, r2
 800cdb4:	d007      	beq.n	800cdc6 <_dtoa_r+0x8ca>
 800cdb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdb8:	3301      	adds	r3, #1
 800cdba:	930a      	str	r3, [sp, #40]	; 0x28
 800cdbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	930d      	str	r3, [sp, #52]	; 0x34
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	930e      	str	r3, [sp, #56]	; 0x38
 800cdc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdc8:	2001      	movs	r0, #1
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1bb      	bne.n	800cd46 <_dtoa_r+0x84a>
 800cdce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdd0:	221f      	movs	r2, #31
 800cdd2:	1818      	adds	r0, r3, r0
 800cdd4:	0003      	movs	r3, r0
 800cdd6:	4013      	ands	r3, r2
 800cdd8:	4210      	tst	r0, r2
 800cdda:	d046      	beq.n	800ce6a <_dtoa_r+0x96e>
 800cddc:	3201      	adds	r2, #1
 800cdde:	1ad2      	subs	r2, r2, r3
 800cde0:	2a04      	cmp	r2, #4
 800cde2:	dd3f      	ble.n	800ce64 <_dtoa_r+0x968>
 800cde4:	221c      	movs	r2, #28
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdea:	18e4      	adds	r4, r4, r3
 800cdec:	18d2      	adds	r2, r2, r3
 800cdee:	920a      	str	r2, [sp, #40]	; 0x28
 800cdf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cdf2:	18d3      	adds	r3, r2, r3
 800cdf4:	930d      	str	r3, [sp, #52]	; 0x34
 800cdf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	dd05      	ble.n	800ce08 <_dtoa_r+0x90c>
 800cdfc:	001a      	movs	r2, r3
 800cdfe:	0038      	movs	r0, r7
 800ce00:	9905      	ldr	r1, [sp, #20]
 800ce02:	f001 f8f3 	bl	800dfec <__lshift>
 800ce06:	9005      	str	r0, [sp, #20]
 800ce08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	dd05      	ble.n	800ce1a <_dtoa_r+0x91e>
 800ce0e:	0031      	movs	r1, r6
 800ce10:	001a      	movs	r2, r3
 800ce12:	0038      	movs	r0, r7
 800ce14:	f001 f8ea 	bl	800dfec <__lshift>
 800ce18:	0006      	movs	r6, r0
 800ce1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d026      	beq.n	800ce6e <_dtoa_r+0x972>
 800ce20:	0031      	movs	r1, r6
 800ce22:	9805      	ldr	r0, [sp, #20]
 800ce24:	f001 f950 	bl	800e0c8 <__mcmp>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	da20      	bge.n	800ce6e <_dtoa_r+0x972>
 800ce2c:	9b02      	ldr	r3, [sp, #8]
 800ce2e:	220a      	movs	r2, #10
 800ce30:	3b01      	subs	r3, #1
 800ce32:	9302      	str	r3, [sp, #8]
 800ce34:	0038      	movs	r0, r7
 800ce36:	2300      	movs	r3, #0
 800ce38:	9905      	ldr	r1, [sp, #20]
 800ce3a:	f000 fedd 	bl	800dbf8 <__multadd>
 800ce3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce40:	9005      	str	r0, [sp, #20]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d100      	bne.n	800ce48 <_dtoa_r+0x94c>
 800ce46:	e166      	b.n	800d116 <_dtoa_r+0xc1a>
 800ce48:	2300      	movs	r3, #0
 800ce4a:	0029      	movs	r1, r5
 800ce4c:	220a      	movs	r2, #10
 800ce4e:	0038      	movs	r0, r7
 800ce50:	f000 fed2 	bl	800dbf8 <__multadd>
 800ce54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce56:	0005      	movs	r5, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	dc47      	bgt.n	800ceec <_dtoa_r+0x9f0>
 800ce5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	dc0d      	bgt.n	800ce7e <_dtoa_r+0x982>
 800ce62:	e043      	b.n	800ceec <_dtoa_r+0x9f0>
 800ce64:	2a04      	cmp	r2, #4
 800ce66:	d0c6      	beq.n	800cdf6 <_dtoa_r+0x8fa>
 800ce68:	0013      	movs	r3, r2
 800ce6a:	331c      	adds	r3, #28
 800ce6c:	e7bc      	b.n	800cde8 <_dtoa_r+0x8ec>
 800ce6e:	9b07      	ldr	r3, [sp, #28]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	dc35      	bgt.n	800cee0 <_dtoa_r+0x9e4>
 800ce74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce76:	2b02      	cmp	r3, #2
 800ce78:	dd32      	ble.n	800cee0 <_dtoa_r+0x9e4>
 800ce7a:	9b07      	ldr	r3, [sp, #28]
 800ce7c:	930c      	str	r3, [sp, #48]	; 0x30
 800ce7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10c      	bne.n	800ce9e <_dtoa_r+0x9a2>
 800ce84:	0031      	movs	r1, r6
 800ce86:	2205      	movs	r2, #5
 800ce88:	0038      	movs	r0, r7
 800ce8a:	f000 feb5 	bl	800dbf8 <__multadd>
 800ce8e:	0006      	movs	r6, r0
 800ce90:	0001      	movs	r1, r0
 800ce92:	9805      	ldr	r0, [sp, #20]
 800ce94:	f001 f918 	bl	800e0c8 <__mcmp>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	dd00      	ble.n	800ce9e <_dtoa_r+0x9a2>
 800ce9c:	e5a5      	b.n	800c9ea <_dtoa_r+0x4ee>
 800ce9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cea0:	43db      	mvns	r3, r3
 800cea2:	9302      	str	r3, [sp, #8]
 800cea4:	9b06      	ldr	r3, [sp, #24]
 800cea6:	9308      	str	r3, [sp, #32]
 800cea8:	2400      	movs	r4, #0
 800ceaa:	0031      	movs	r1, r6
 800ceac:	0038      	movs	r0, r7
 800ceae:	f000 fe7f 	bl	800dbb0 <_Bfree>
 800ceb2:	2d00      	cmp	r5, #0
 800ceb4:	d100      	bne.n	800ceb8 <_dtoa_r+0x9bc>
 800ceb6:	e6b7      	b.n	800cc28 <_dtoa_r+0x72c>
 800ceb8:	2c00      	cmp	r4, #0
 800ceba:	d005      	beq.n	800cec8 <_dtoa_r+0x9cc>
 800cebc:	42ac      	cmp	r4, r5
 800cebe:	d003      	beq.n	800cec8 <_dtoa_r+0x9cc>
 800cec0:	0021      	movs	r1, r4
 800cec2:	0038      	movs	r0, r7
 800cec4:	f000 fe74 	bl	800dbb0 <_Bfree>
 800cec8:	0029      	movs	r1, r5
 800ceca:	0038      	movs	r0, r7
 800cecc:	f000 fe70 	bl	800dbb0 <_Bfree>
 800ced0:	e6aa      	b.n	800cc28 <_dtoa_r+0x72c>
 800ced2:	2600      	movs	r6, #0
 800ced4:	0035      	movs	r5, r6
 800ced6:	e7e2      	b.n	800ce9e <_dtoa_r+0x9a2>
 800ced8:	9602      	str	r6, [sp, #8]
 800ceda:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800cedc:	0035      	movs	r5, r6
 800cede:	e584      	b.n	800c9ea <_dtoa_r+0x4ee>
 800cee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d100      	bne.n	800cee8 <_dtoa_r+0x9ec>
 800cee6:	e0ce      	b.n	800d086 <_dtoa_r+0xb8a>
 800cee8:	9b07      	ldr	r3, [sp, #28]
 800ceea:	930c      	str	r3, [sp, #48]	; 0x30
 800ceec:	2c00      	cmp	r4, #0
 800ceee:	dd05      	ble.n	800cefc <_dtoa_r+0xa00>
 800cef0:	0029      	movs	r1, r5
 800cef2:	0022      	movs	r2, r4
 800cef4:	0038      	movs	r0, r7
 800cef6:	f001 f879 	bl	800dfec <__lshift>
 800cefa:	0005      	movs	r5, r0
 800cefc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cefe:	0028      	movs	r0, r5
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d022      	beq.n	800cf4a <_dtoa_r+0xa4e>
 800cf04:	0038      	movs	r0, r7
 800cf06:	6869      	ldr	r1, [r5, #4]
 800cf08:	f000 fe0e 	bl	800db28 <_Balloc>
 800cf0c:	1e04      	subs	r4, r0, #0
 800cf0e:	d10f      	bne.n	800cf30 <_dtoa_r+0xa34>
 800cf10:	0002      	movs	r2, r0
 800cf12:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <_dtoa_r+0xa2c>)
 800cf14:	4905      	ldr	r1, [pc, #20]	; (800cf2c <_dtoa_r+0xa30>)
 800cf16:	f7ff fb06 	bl	800c526 <_dtoa_r+0x2a>
 800cf1a:	46c0      	nop			; (mov r8, r8)
 800cf1c:	40240000 	.word	0x40240000
 800cf20:	00000433 	.word	0x00000433
 800cf24:	7ff00000 	.word	0x7ff00000
 800cf28:	0800f3e0 	.word	0x0800f3e0
 800cf2c:	000002ea 	.word	0x000002ea
 800cf30:	0029      	movs	r1, r5
 800cf32:	692b      	ldr	r3, [r5, #16]
 800cf34:	310c      	adds	r1, #12
 800cf36:	1c9a      	adds	r2, r3, #2
 800cf38:	0092      	lsls	r2, r2, #2
 800cf3a:	300c      	adds	r0, #12
 800cf3c:	f7fd f9ed 	bl	800a31a <memcpy>
 800cf40:	2201      	movs	r2, #1
 800cf42:	0021      	movs	r1, r4
 800cf44:	0038      	movs	r0, r7
 800cf46:	f001 f851 	bl	800dfec <__lshift>
 800cf4a:	9b06      	ldr	r3, [sp, #24]
 800cf4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf4e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf50:	3b01      	subs	r3, #1
 800cf52:	189b      	adds	r3, r3, r2
 800cf54:	2201      	movs	r2, #1
 800cf56:	002c      	movs	r4, r5
 800cf58:	0005      	movs	r5, r0
 800cf5a:	9314      	str	r3, [sp, #80]	; 0x50
 800cf5c:	9b08      	ldr	r3, [sp, #32]
 800cf5e:	4013      	ands	r3, r2
 800cf60:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf62:	0031      	movs	r1, r6
 800cf64:	9805      	ldr	r0, [sp, #20]
 800cf66:	f7ff fa3d 	bl	800c3e4 <quorem>
 800cf6a:	0003      	movs	r3, r0
 800cf6c:	0021      	movs	r1, r4
 800cf6e:	3330      	adds	r3, #48	; 0x30
 800cf70:	900d      	str	r0, [sp, #52]	; 0x34
 800cf72:	9805      	ldr	r0, [sp, #20]
 800cf74:	9307      	str	r3, [sp, #28]
 800cf76:	f001 f8a7 	bl	800e0c8 <__mcmp>
 800cf7a:	002a      	movs	r2, r5
 800cf7c:	900e      	str	r0, [sp, #56]	; 0x38
 800cf7e:	0031      	movs	r1, r6
 800cf80:	0038      	movs	r0, r7
 800cf82:	f001 f8bd 	bl	800e100 <__mdiff>
 800cf86:	68c3      	ldr	r3, [r0, #12]
 800cf88:	9008      	str	r0, [sp, #32]
 800cf8a:	9310      	str	r3, [sp, #64]	; 0x40
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	930c      	str	r3, [sp, #48]	; 0x30
 800cf90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d104      	bne.n	800cfa0 <_dtoa_r+0xaa4>
 800cf96:	0001      	movs	r1, r0
 800cf98:	9805      	ldr	r0, [sp, #20]
 800cf9a:	f001 f895 	bl	800e0c8 <__mcmp>
 800cf9e:	900c      	str	r0, [sp, #48]	; 0x30
 800cfa0:	0038      	movs	r0, r7
 800cfa2:	9908      	ldr	r1, [sp, #32]
 800cfa4:	f000 fe04 	bl	800dbb0 <_Bfree>
 800cfa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfac:	3301      	adds	r3, #1
 800cfae:	9308      	str	r3, [sp, #32]
 800cfb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	d10c      	bne.n	800cfd4 <_dtoa_r+0xad8>
 800cfba:	9b07      	ldr	r3, [sp, #28]
 800cfbc:	2b39      	cmp	r3, #57	; 0x39
 800cfbe:	d026      	beq.n	800d00e <_dtoa_r+0xb12>
 800cfc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	dd02      	ble.n	800cfcc <_dtoa_r+0xad0>
 800cfc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfc8:	3331      	adds	r3, #49	; 0x31
 800cfca:	9307      	str	r3, [sp, #28]
 800cfcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfce:	9a07      	ldr	r2, [sp, #28]
 800cfd0:	701a      	strb	r2, [r3, #0]
 800cfd2:	e76a      	b.n	800ceaa <_dtoa_r+0x9ae>
 800cfd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	db04      	blt.n	800cfe4 <_dtoa_r+0xae8>
 800cfda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	d11f      	bne.n	800d024 <_dtoa_r+0xb28>
 800cfe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	ddf0      	ble.n	800cfcc <_dtoa_r+0xad0>
 800cfea:	9905      	ldr	r1, [sp, #20]
 800cfec:	2201      	movs	r2, #1
 800cfee:	0038      	movs	r0, r7
 800cff0:	f000 fffc 	bl	800dfec <__lshift>
 800cff4:	0031      	movs	r1, r6
 800cff6:	9005      	str	r0, [sp, #20]
 800cff8:	f001 f866 	bl	800e0c8 <__mcmp>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	dc03      	bgt.n	800d008 <_dtoa_r+0xb0c>
 800d000:	d1e4      	bne.n	800cfcc <_dtoa_r+0xad0>
 800d002:	9b07      	ldr	r3, [sp, #28]
 800d004:	07db      	lsls	r3, r3, #31
 800d006:	d5e1      	bpl.n	800cfcc <_dtoa_r+0xad0>
 800d008:	9b07      	ldr	r3, [sp, #28]
 800d00a:	2b39      	cmp	r3, #57	; 0x39
 800d00c:	d1db      	bne.n	800cfc6 <_dtoa_r+0xaca>
 800d00e:	2339      	movs	r3, #57	; 0x39
 800d010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d012:	7013      	strb	r3, [r2, #0]
 800d014:	9b08      	ldr	r3, [sp, #32]
 800d016:	9308      	str	r3, [sp, #32]
 800d018:	3b01      	subs	r3, #1
 800d01a:	781a      	ldrb	r2, [r3, #0]
 800d01c:	2a39      	cmp	r2, #57	; 0x39
 800d01e:	d068      	beq.n	800d0f2 <_dtoa_r+0xbf6>
 800d020:	3201      	adds	r2, #1
 800d022:	e7d5      	b.n	800cfd0 <_dtoa_r+0xad4>
 800d024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d026:	2b00      	cmp	r3, #0
 800d028:	dd07      	ble.n	800d03a <_dtoa_r+0xb3e>
 800d02a:	9b07      	ldr	r3, [sp, #28]
 800d02c:	2b39      	cmp	r3, #57	; 0x39
 800d02e:	d0ee      	beq.n	800d00e <_dtoa_r+0xb12>
 800d030:	9b07      	ldr	r3, [sp, #28]
 800d032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d034:	3301      	adds	r3, #1
 800d036:	7013      	strb	r3, [r2, #0]
 800d038:	e737      	b.n	800ceaa <_dtoa_r+0x9ae>
 800d03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d03c:	9a07      	ldr	r2, [sp, #28]
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d044:	4293      	cmp	r3, r2
 800d046:	d03e      	beq.n	800d0c6 <_dtoa_r+0xbca>
 800d048:	2300      	movs	r3, #0
 800d04a:	220a      	movs	r2, #10
 800d04c:	9905      	ldr	r1, [sp, #20]
 800d04e:	0038      	movs	r0, r7
 800d050:	f000 fdd2 	bl	800dbf8 <__multadd>
 800d054:	2300      	movs	r3, #0
 800d056:	9005      	str	r0, [sp, #20]
 800d058:	220a      	movs	r2, #10
 800d05a:	0021      	movs	r1, r4
 800d05c:	0038      	movs	r0, r7
 800d05e:	42ac      	cmp	r4, r5
 800d060:	d106      	bne.n	800d070 <_dtoa_r+0xb74>
 800d062:	f000 fdc9 	bl	800dbf8 <__multadd>
 800d066:	0004      	movs	r4, r0
 800d068:	0005      	movs	r5, r0
 800d06a:	9b08      	ldr	r3, [sp, #32]
 800d06c:	930a      	str	r3, [sp, #40]	; 0x28
 800d06e:	e778      	b.n	800cf62 <_dtoa_r+0xa66>
 800d070:	f000 fdc2 	bl	800dbf8 <__multadd>
 800d074:	0029      	movs	r1, r5
 800d076:	0004      	movs	r4, r0
 800d078:	2300      	movs	r3, #0
 800d07a:	220a      	movs	r2, #10
 800d07c:	0038      	movs	r0, r7
 800d07e:	f000 fdbb 	bl	800dbf8 <__multadd>
 800d082:	0005      	movs	r5, r0
 800d084:	e7f1      	b.n	800d06a <_dtoa_r+0xb6e>
 800d086:	9b07      	ldr	r3, [sp, #28]
 800d088:	930c      	str	r3, [sp, #48]	; 0x30
 800d08a:	2400      	movs	r4, #0
 800d08c:	0031      	movs	r1, r6
 800d08e:	9805      	ldr	r0, [sp, #20]
 800d090:	f7ff f9a8 	bl	800c3e4 <quorem>
 800d094:	9b06      	ldr	r3, [sp, #24]
 800d096:	3030      	adds	r0, #48	; 0x30
 800d098:	5518      	strb	r0, [r3, r4]
 800d09a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d09c:	3401      	adds	r4, #1
 800d09e:	9007      	str	r0, [sp, #28]
 800d0a0:	42a3      	cmp	r3, r4
 800d0a2:	dd07      	ble.n	800d0b4 <_dtoa_r+0xbb8>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	220a      	movs	r2, #10
 800d0a8:	0038      	movs	r0, r7
 800d0aa:	9905      	ldr	r1, [sp, #20]
 800d0ac:	f000 fda4 	bl	800dbf8 <__multadd>
 800d0b0:	9005      	str	r0, [sp, #20]
 800d0b2:	e7eb      	b.n	800d08c <_dtoa_r+0xb90>
 800d0b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	dd00      	ble.n	800d0be <_dtoa_r+0xbc2>
 800d0bc:	0018      	movs	r0, r3
 800d0be:	2400      	movs	r4, #0
 800d0c0:	9b06      	ldr	r3, [sp, #24]
 800d0c2:	181b      	adds	r3, r3, r0
 800d0c4:	9308      	str	r3, [sp, #32]
 800d0c6:	9905      	ldr	r1, [sp, #20]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	0038      	movs	r0, r7
 800d0cc:	f000 ff8e 	bl	800dfec <__lshift>
 800d0d0:	0031      	movs	r1, r6
 800d0d2:	9005      	str	r0, [sp, #20]
 800d0d4:	f000 fff8 	bl	800e0c8 <__mcmp>
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	dc9b      	bgt.n	800d014 <_dtoa_r+0xb18>
 800d0dc:	d102      	bne.n	800d0e4 <_dtoa_r+0xbe8>
 800d0de:	9b07      	ldr	r3, [sp, #28]
 800d0e0:	07db      	lsls	r3, r3, #31
 800d0e2:	d497      	bmi.n	800d014 <_dtoa_r+0xb18>
 800d0e4:	9b08      	ldr	r3, [sp, #32]
 800d0e6:	9308      	str	r3, [sp, #32]
 800d0e8:	3b01      	subs	r3, #1
 800d0ea:	781a      	ldrb	r2, [r3, #0]
 800d0ec:	2a30      	cmp	r2, #48	; 0x30
 800d0ee:	d0fa      	beq.n	800d0e6 <_dtoa_r+0xbea>
 800d0f0:	e6db      	b.n	800ceaa <_dtoa_r+0x9ae>
 800d0f2:	9a06      	ldr	r2, [sp, #24]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d18e      	bne.n	800d016 <_dtoa_r+0xb1a>
 800d0f8:	9b02      	ldr	r3, [sp, #8]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	9302      	str	r3, [sp, #8]
 800d0fe:	2331      	movs	r3, #49	; 0x31
 800d100:	e799      	b.n	800d036 <_dtoa_r+0xb3a>
 800d102:	4b09      	ldr	r3, [pc, #36]	; (800d128 <_dtoa_r+0xc2c>)
 800d104:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d106:	9306      	str	r3, [sp, #24]
 800d108:	4b08      	ldr	r3, [pc, #32]	; (800d12c <_dtoa_r+0xc30>)
 800d10a:	2a00      	cmp	r2, #0
 800d10c:	d001      	beq.n	800d112 <_dtoa_r+0xc16>
 800d10e:	f7ff fa3f 	bl	800c590 <_dtoa_r+0x94>
 800d112:	f7ff fa3f 	bl	800c594 <_dtoa_r+0x98>
 800d116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d118:	2b00      	cmp	r3, #0
 800d11a:	dcb6      	bgt.n	800d08a <_dtoa_r+0xb8e>
 800d11c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d11e:	2b02      	cmp	r3, #2
 800d120:	dd00      	ble.n	800d124 <_dtoa_r+0xc28>
 800d122:	e6ac      	b.n	800ce7e <_dtoa_r+0x982>
 800d124:	e7b1      	b.n	800d08a <_dtoa_r+0xb8e>
 800d126:	46c0      	nop			; (mov r8, r8)
 800d128:	0800f361 	.word	0x0800f361
 800d12c:	0800f369 	.word	0x0800f369

0800d130 <__sflush_r>:
 800d130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d132:	898b      	ldrh	r3, [r1, #12]
 800d134:	0005      	movs	r5, r0
 800d136:	000c      	movs	r4, r1
 800d138:	071a      	lsls	r2, r3, #28
 800d13a:	d45f      	bmi.n	800d1fc <__sflush_r+0xcc>
 800d13c:	684a      	ldr	r2, [r1, #4]
 800d13e:	2a00      	cmp	r2, #0
 800d140:	dc04      	bgt.n	800d14c <__sflush_r+0x1c>
 800d142:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d144:	2a00      	cmp	r2, #0
 800d146:	dc01      	bgt.n	800d14c <__sflush_r+0x1c>
 800d148:	2000      	movs	r0, #0
 800d14a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d14c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d14e:	2f00      	cmp	r7, #0
 800d150:	d0fa      	beq.n	800d148 <__sflush_r+0x18>
 800d152:	2200      	movs	r2, #0
 800d154:	2180      	movs	r1, #128	; 0x80
 800d156:	682e      	ldr	r6, [r5, #0]
 800d158:	602a      	str	r2, [r5, #0]
 800d15a:	001a      	movs	r2, r3
 800d15c:	0149      	lsls	r1, r1, #5
 800d15e:	400a      	ands	r2, r1
 800d160:	420b      	tst	r3, r1
 800d162:	d034      	beq.n	800d1ce <__sflush_r+0x9e>
 800d164:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d166:	89a3      	ldrh	r3, [r4, #12]
 800d168:	075b      	lsls	r3, r3, #29
 800d16a:	d506      	bpl.n	800d17a <__sflush_r+0x4a>
 800d16c:	6863      	ldr	r3, [r4, #4]
 800d16e:	1ac0      	subs	r0, r0, r3
 800d170:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <__sflush_r+0x4a>
 800d176:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d178:	1ac0      	subs	r0, r0, r3
 800d17a:	0002      	movs	r2, r0
 800d17c:	6a21      	ldr	r1, [r4, #32]
 800d17e:	2300      	movs	r3, #0
 800d180:	0028      	movs	r0, r5
 800d182:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d184:	47b8      	blx	r7
 800d186:	89a1      	ldrh	r1, [r4, #12]
 800d188:	1c43      	adds	r3, r0, #1
 800d18a:	d106      	bne.n	800d19a <__sflush_r+0x6a>
 800d18c:	682b      	ldr	r3, [r5, #0]
 800d18e:	2b1d      	cmp	r3, #29
 800d190:	d831      	bhi.n	800d1f6 <__sflush_r+0xc6>
 800d192:	4a2c      	ldr	r2, [pc, #176]	; (800d244 <__sflush_r+0x114>)
 800d194:	40da      	lsrs	r2, r3
 800d196:	07d3      	lsls	r3, r2, #31
 800d198:	d52d      	bpl.n	800d1f6 <__sflush_r+0xc6>
 800d19a:	2300      	movs	r3, #0
 800d19c:	6063      	str	r3, [r4, #4]
 800d19e:	6923      	ldr	r3, [r4, #16]
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	04cb      	lsls	r3, r1, #19
 800d1a4:	d505      	bpl.n	800d1b2 <__sflush_r+0x82>
 800d1a6:	1c43      	adds	r3, r0, #1
 800d1a8:	d102      	bne.n	800d1b0 <__sflush_r+0x80>
 800d1aa:	682b      	ldr	r3, [r5, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d100      	bne.n	800d1b2 <__sflush_r+0x82>
 800d1b0:	6560      	str	r0, [r4, #84]	; 0x54
 800d1b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1b4:	602e      	str	r6, [r5, #0]
 800d1b6:	2900      	cmp	r1, #0
 800d1b8:	d0c6      	beq.n	800d148 <__sflush_r+0x18>
 800d1ba:	0023      	movs	r3, r4
 800d1bc:	3344      	adds	r3, #68	; 0x44
 800d1be:	4299      	cmp	r1, r3
 800d1c0:	d002      	beq.n	800d1c8 <__sflush_r+0x98>
 800d1c2:	0028      	movs	r0, r5
 800d1c4:	f001 f9a6 	bl	800e514 <_free_r>
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	6360      	str	r0, [r4, #52]	; 0x34
 800d1cc:	e7bd      	b.n	800d14a <__sflush_r+0x1a>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	0028      	movs	r0, r5
 800d1d2:	6a21      	ldr	r1, [r4, #32]
 800d1d4:	47b8      	blx	r7
 800d1d6:	1c43      	adds	r3, r0, #1
 800d1d8:	d1c5      	bne.n	800d166 <__sflush_r+0x36>
 800d1da:	682b      	ldr	r3, [r5, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d0c2      	beq.n	800d166 <__sflush_r+0x36>
 800d1e0:	2b1d      	cmp	r3, #29
 800d1e2:	d001      	beq.n	800d1e8 <__sflush_r+0xb8>
 800d1e4:	2b16      	cmp	r3, #22
 800d1e6:	d101      	bne.n	800d1ec <__sflush_r+0xbc>
 800d1e8:	602e      	str	r6, [r5, #0]
 800d1ea:	e7ad      	b.n	800d148 <__sflush_r+0x18>
 800d1ec:	2340      	movs	r3, #64	; 0x40
 800d1ee:	89a2      	ldrh	r2, [r4, #12]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	81a3      	strh	r3, [r4, #12]
 800d1f4:	e7a9      	b.n	800d14a <__sflush_r+0x1a>
 800d1f6:	2340      	movs	r3, #64	; 0x40
 800d1f8:	430b      	orrs	r3, r1
 800d1fa:	e7fa      	b.n	800d1f2 <__sflush_r+0xc2>
 800d1fc:	690f      	ldr	r7, [r1, #16]
 800d1fe:	2f00      	cmp	r7, #0
 800d200:	d0a2      	beq.n	800d148 <__sflush_r+0x18>
 800d202:	680a      	ldr	r2, [r1, #0]
 800d204:	600f      	str	r7, [r1, #0]
 800d206:	1bd2      	subs	r2, r2, r7
 800d208:	9201      	str	r2, [sp, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	079b      	lsls	r3, r3, #30
 800d20e:	d100      	bne.n	800d212 <__sflush_r+0xe2>
 800d210:	694a      	ldr	r2, [r1, #20]
 800d212:	60a2      	str	r2, [r4, #8]
 800d214:	9b01      	ldr	r3, [sp, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	dc00      	bgt.n	800d21c <__sflush_r+0xec>
 800d21a:	e795      	b.n	800d148 <__sflush_r+0x18>
 800d21c:	003a      	movs	r2, r7
 800d21e:	0028      	movs	r0, r5
 800d220:	9b01      	ldr	r3, [sp, #4]
 800d222:	6a21      	ldr	r1, [r4, #32]
 800d224:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d226:	47b0      	blx	r6
 800d228:	2800      	cmp	r0, #0
 800d22a:	dc06      	bgt.n	800d23a <__sflush_r+0x10a>
 800d22c:	2340      	movs	r3, #64	; 0x40
 800d22e:	2001      	movs	r0, #1
 800d230:	89a2      	ldrh	r2, [r4, #12]
 800d232:	4240      	negs	r0, r0
 800d234:	4313      	orrs	r3, r2
 800d236:	81a3      	strh	r3, [r4, #12]
 800d238:	e787      	b.n	800d14a <__sflush_r+0x1a>
 800d23a:	9b01      	ldr	r3, [sp, #4]
 800d23c:	183f      	adds	r7, r7, r0
 800d23e:	1a1b      	subs	r3, r3, r0
 800d240:	9301      	str	r3, [sp, #4]
 800d242:	e7e7      	b.n	800d214 <__sflush_r+0xe4>
 800d244:	20400001 	.word	0x20400001

0800d248 <_fflush_r>:
 800d248:	690b      	ldr	r3, [r1, #16]
 800d24a:	b570      	push	{r4, r5, r6, lr}
 800d24c:	0005      	movs	r5, r0
 800d24e:	000c      	movs	r4, r1
 800d250:	2b00      	cmp	r3, #0
 800d252:	d102      	bne.n	800d25a <_fflush_r+0x12>
 800d254:	2500      	movs	r5, #0
 800d256:	0028      	movs	r0, r5
 800d258:	bd70      	pop	{r4, r5, r6, pc}
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d004      	beq.n	800d268 <_fflush_r+0x20>
 800d25e:	6983      	ldr	r3, [r0, #24]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d101      	bne.n	800d268 <_fflush_r+0x20>
 800d264:	f7fc ff92 	bl	800a18c <__sinit>
 800d268:	4b14      	ldr	r3, [pc, #80]	; (800d2bc <_fflush_r+0x74>)
 800d26a:	429c      	cmp	r4, r3
 800d26c:	d11b      	bne.n	800d2a6 <_fflush_r+0x5e>
 800d26e:	686c      	ldr	r4, [r5, #4]
 800d270:	220c      	movs	r2, #12
 800d272:	5ea3      	ldrsh	r3, [r4, r2]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d0ed      	beq.n	800d254 <_fflush_r+0xc>
 800d278:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d27a:	07d2      	lsls	r2, r2, #31
 800d27c:	d404      	bmi.n	800d288 <_fflush_r+0x40>
 800d27e:	059b      	lsls	r3, r3, #22
 800d280:	d402      	bmi.n	800d288 <_fflush_r+0x40>
 800d282:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d284:	f7fd f847 	bl	800a316 <__retarget_lock_acquire_recursive>
 800d288:	0028      	movs	r0, r5
 800d28a:	0021      	movs	r1, r4
 800d28c:	f7ff ff50 	bl	800d130 <__sflush_r>
 800d290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d292:	0005      	movs	r5, r0
 800d294:	07db      	lsls	r3, r3, #31
 800d296:	d4de      	bmi.n	800d256 <_fflush_r+0xe>
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	059b      	lsls	r3, r3, #22
 800d29c:	d4db      	bmi.n	800d256 <_fflush_r+0xe>
 800d29e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2a0:	f7fd f83a 	bl	800a318 <__retarget_lock_release_recursive>
 800d2a4:	e7d7      	b.n	800d256 <_fflush_r+0xe>
 800d2a6:	4b06      	ldr	r3, [pc, #24]	; (800d2c0 <_fflush_r+0x78>)
 800d2a8:	429c      	cmp	r4, r3
 800d2aa:	d101      	bne.n	800d2b0 <_fflush_r+0x68>
 800d2ac:	68ac      	ldr	r4, [r5, #8]
 800d2ae:	e7df      	b.n	800d270 <_fflush_r+0x28>
 800d2b0:	4b04      	ldr	r3, [pc, #16]	; (800d2c4 <_fflush_r+0x7c>)
 800d2b2:	429c      	cmp	r4, r3
 800d2b4:	d1dc      	bne.n	800d270 <_fflush_r+0x28>
 800d2b6:	68ec      	ldr	r4, [r5, #12]
 800d2b8:	e7da      	b.n	800d270 <_fflush_r+0x28>
 800d2ba:	46c0      	nop			; (mov r8, r8)
 800d2bc:	0800f190 	.word	0x0800f190
 800d2c0:	0800f1b0 	.word	0x0800f1b0
 800d2c4:	0800f170 	.word	0x0800f170

0800d2c8 <rshift>:
 800d2c8:	0002      	movs	r2, r0
 800d2ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2cc:	6904      	ldr	r4, [r0, #16]
 800d2ce:	3214      	adds	r2, #20
 800d2d0:	0013      	movs	r3, r2
 800d2d2:	b085      	sub	sp, #20
 800d2d4:	114f      	asrs	r7, r1, #5
 800d2d6:	42bc      	cmp	r4, r7
 800d2d8:	dd31      	ble.n	800d33e <rshift+0x76>
 800d2da:	00bb      	lsls	r3, r7, #2
 800d2dc:	18d3      	adds	r3, r2, r3
 800d2de:	261f      	movs	r6, #31
 800d2e0:	9301      	str	r3, [sp, #4]
 800d2e2:	000b      	movs	r3, r1
 800d2e4:	00a5      	lsls	r5, r4, #2
 800d2e6:	4033      	ands	r3, r6
 800d2e8:	1955      	adds	r5, r2, r5
 800d2ea:	9302      	str	r3, [sp, #8]
 800d2ec:	4231      	tst	r1, r6
 800d2ee:	d10c      	bne.n	800d30a <rshift+0x42>
 800d2f0:	0016      	movs	r6, r2
 800d2f2:	9901      	ldr	r1, [sp, #4]
 800d2f4:	428d      	cmp	r5, r1
 800d2f6:	d838      	bhi.n	800d36a <rshift+0xa2>
 800d2f8:	9901      	ldr	r1, [sp, #4]
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	3903      	subs	r1, #3
 800d2fe:	428d      	cmp	r5, r1
 800d300:	d301      	bcc.n	800d306 <rshift+0x3e>
 800d302:	1be3      	subs	r3, r4, r7
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	18d3      	adds	r3, r2, r3
 800d308:	e019      	b.n	800d33e <rshift+0x76>
 800d30a:	2120      	movs	r1, #32
 800d30c:	9b02      	ldr	r3, [sp, #8]
 800d30e:	9e01      	ldr	r6, [sp, #4]
 800d310:	1acb      	subs	r3, r1, r3
 800d312:	9303      	str	r3, [sp, #12]
 800d314:	ce02      	ldmia	r6!, {r1}
 800d316:	9b02      	ldr	r3, [sp, #8]
 800d318:	4694      	mov	ip, r2
 800d31a:	40d9      	lsrs	r1, r3
 800d31c:	9100      	str	r1, [sp, #0]
 800d31e:	42b5      	cmp	r5, r6
 800d320:	d816      	bhi.n	800d350 <rshift+0x88>
 800d322:	9e01      	ldr	r6, [sp, #4]
 800d324:	2300      	movs	r3, #0
 800d326:	3601      	adds	r6, #1
 800d328:	42b5      	cmp	r5, r6
 800d32a:	d302      	bcc.n	800d332 <rshift+0x6a>
 800d32c:	1be3      	subs	r3, r4, r7
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	3b04      	subs	r3, #4
 800d332:	9900      	ldr	r1, [sp, #0]
 800d334:	18d3      	adds	r3, r2, r3
 800d336:	6019      	str	r1, [r3, #0]
 800d338:	2900      	cmp	r1, #0
 800d33a:	d000      	beq.n	800d33e <rshift+0x76>
 800d33c:	3304      	adds	r3, #4
 800d33e:	1a99      	subs	r1, r3, r2
 800d340:	1089      	asrs	r1, r1, #2
 800d342:	6101      	str	r1, [r0, #16]
 800d344:	4293      	cmp	r3, r2
 800d346:	d101      	bne.n	800d34c <rshift+0x84>
 800d348:	2300      	movs	r3, #0
 800d34a:	6143      	str	r3, [r0, #20]
 800d34c:	b005      	add	sp, #20
 800d34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d350:	6833      	ldr	r3, [r6, #0]
 800d352:	9903      	ldr	r1, [sp, #12]
 800d354:	408b      	lsls	r3, r1
 800d356:	9900      	ldr	r1, [sp, #0]
 800d358:	4319      	orrs	r1, r3
 800d35a:	4663      	mov	r3, ip
 800d35c:	c302      	stmia	r3!, {r1}
 800d35e:	469c      	mov	ip, r3
 800d360:	ce02      	ldmia	r6!, {r1}
 800d362:	9b02      	ldr	r3, [sp, #8]
 800d364:	40d9      	lsrs	r1, r3
 800d366:	9100      	str	r1, [sp, #0]
 800d368:	e7d9      	b.n	800d31e <rshift+0x56>
 800d36a:	c908      	ldmia	r1!, {r3}
 800d36c:	c608      	stmia	r6!, {r3}
 800d36e:	e7c1      	b.n	800d2f4 <rshift+0x2c>

0800d370 <__hexdig_fun>:
 800d370:	0002      	movs	r2, r0
 800d372:	3a30      	subs	r2, #48	; 0x30
 800d374:	0003      	movs	r3, r0
 800d376:	2a09      	cmp	r2, #9
 800d378:	d802      	bhi.n	800d380 <__hexdig_fun+0x10>
 800d37a:	3b20      	subs	r3, #32
 800d37c:	b2d8      	uxtb	r0, r3
 800d37e:	4770      	bx	lr
 800d380:	0002      	movs	r2, r0
 800d382:	3a61      	subs	r2, #97	; 0x61
 800d384:	2a05      	cmp	r2, #5
 800d386:	d801      	bhi.n	800d38c <__hexdig_fun+0x1c>
 800d388:	3b47      	subs	r3, #71	; 0x47
 800d38a:	e7f7      	b.n	800d37c <__hexdig_fun+0xc>
 800d38c:	001a      	movs	r2, r3
 800d38e:	3a41      	subs	r2, #65	; 0x41
 800d390:	2000      	movs	r0, #0
 800d392:	2a05      	cmp	r2, #5
 800d394:	d8f3      	bhi.n	800d37e <__hexdig_fun+0xe>
 800d396:	3b27      	subs	r3, #39	; 0x27
 800d398:	e7f0      	b.n	800d37c <__hexdig_fun+0xc>
	...

0800d39c <__gethex>:
 800d39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d39e:	b08d      	sub	sp, #52	; 0x34
 800d3a0:	930a      	str	r3, [sp, #40]	; 0x28
 800d3a2:	4bbf      	ldr	r3, [pc, #764]	; (800d6a0 <__gethex+0x304>)
 800d3a4:	9005      	str	r0, [sp, #20]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	9109      	str	r1, [sp, #36]	; 0x24
 800d3aa:	0018      	movs	r0, r3
 800d3ac:	9202      	str	r2, [sp, #8]
 800d3ae:	9307      	str	r3, [sp, #28]
 800d3b0:	f7f2 feaa 	bl	8000108 <strlen>
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	9b07      	ldr	r3, [sp, #28]
 800d3b8:	4252      	negs	r2, r2
 800d3ba:	181b      	adds	r3, r3, r0
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	9003      	str	r0, [sp, #12]
 800d3c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3c6:	6819      	ldr	r1, [r3, #0]
 800d3c8:	1c8b      	adds	r3, r1, #2
 800d3ca:	1a52      	subs	r2, r2, r1
 800d3cc:	18d1      	adds	r1, r2, r3
 800d3ce:	9301      	str	r3, [sp, #4]
 800d3d0:	9108      	str	r1, [sp, #32]
 800d3d2:	9901      	ldr	r1, [sp, #4]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	7808      	ldrb	r0, [r1, #0]
 800d3d8:	2830      	cmp	r0, #48	; 0x30
 800d3da:	d0f7      	beq.n	800d3cc <__gethex+0x30>
 800d3dc:	f7ff ffc8 	bl	800d370 <__hexdig_fun>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	001c      	movs	r4, r3
 800d3e4:	9304      	str	r3, [sp, #16]
 800d3e6:	4298      	cmp	r0, r3
 800d3e8:	d11f      	bne.n	800d42a <__gethex+0x8e>
 800d3ea:	9a03      	ldr	r2, [sp, #12]
 800d3ec:	9907      	ldr	r1, [sp, #28]
 800d3ee:	9801      	ldr	r0, [sp, #4]
 800d3f0:	f001 fbb8 	bl	800eb64 <strncmp>
 800d3f4:	0007      	movs	r7, r0
 800d3f6:	42a0      	cmp	r0, r4
 800d3f8:	d000      	beq.n	800d3fc <__gethex+0x60>
 800d3fa:	e06b      	b.n	800d4d4 <__gethex+0x138>
 800d3fc:	9b01      	ldr	r3, [sp, #4]
 800d3fe:	9a03      	ldr	r2, [sp, #12]
 800d400:	5c98      	ldrb	r0, [r3, r2]
 800d402:	189d      	adds	r5, r3, r2
 800d404:	f7ff ffb4 	bl	800d370 <__hexdig_fun>
 800d408:	2301      	movs	r3, #1
 800d40a:	9304      	str	r3, [sp, #16]
 800d40c:	42a0      	cmp	r0, r4
 800d40e:	d030      	beq.n	800d472 <__gethex+0xd6>
 800d410:	9501      	str	r5, [sp, #4]
 800d412:	9b01      	ldr	r3, [sp, #4]
 800d414:	7818      	ldrb	r0, [r3, #0]
 800d416:	2830      	cmp	r0, #48	; 0x30
 800d418:	d009      	beq.n	800d42e <__gethex+0x92>
 800d41a:	f7ff ffa9 	bl	800d370 <__hexdig_fun>
 800d41e:	4242      	negs	r2, r0
 800d420:	4142      	adcs	r2, r0
 800d422:	2301      	movs	r3, #1
 800d424:	002c      	movs	r4, r5
 800d426:	9204      	str	r2, [sp, #16]
 800d428:	9308      	str	r3, [sp, #32]
 800d42a:	9d01      	ldr	r5, [sp, #4]
 800d42c:	e004      	b.n	800d438 <__gethex+0x9c>
 800d42e:	9b01      	ldr	r3, [sp, #4]
 800d430:	3301      	adds	r3, #1
 800d432:	9301      	str	r3, [sp, #4]
 800d434:	e7ed      	b.n	800d412 <__gethex+0x76>
 800d436:	3501      	adds	r5, #1
 800d438:	7828      	ldrb	r0, [r5, #0]
 800d43a:	f7ff ff99 	bl	800d370 <__hexdig_fun>
 800d43e:	1e07      	subs	r7, r0, #0
 800d440:	d1f9      	bne.n	800d436 <__gethex+0x9a>
 800d442:	0028      	movs	r0, r5
 800d444:	9a03      	ldr	r2, [sp, #12]
 800d446:	9907      	ldr	r1, [sp, #28]
 800d448:	f001 fb8c 	bl	800eb64 <strncmp>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d10e      	bne.n	800d46e <__gethex+0xd2>
 800d450:	2c00      	cmp	r4, #0
 800d452:	d107      	bne.n	800d464 <__gethex+0xc8>
 800d454:	9b03      	ldr	r3, [sp, #12]
 800d456:	18ed      	adds	r5, r5, r3
 800d458:	002c      	movs	r4, r5
 800d45a:	7828      	ldrb	r0, [r5, #0]
 800d45c:	f7ff ff88 	bl	800d370 <__hexdig_fun>
 800d460:	2800      	cmp	r0, #0
 800d462:	d102      	bne.n	800d46a <__gethex+0xce>
 800d464:	1b64      	subs	r4, r4, r5
 800d466:	00a7      	lsls	r7, r4, #2
 800d468:	e003      	b.n	800d472 <__gethex+0xd6>
 800d46a:	3501      	adds	r5, #1
 800d46c:	e7f5      	b.n	800d45a <__gethex+0xbe>
 800d46e:	2c00      	cmp	r4, #0
 800d470:	d1f8      	bne.n	800d464 <__gethex+0xc8>
 800d472:	2220      	movs	r2, #32
 800d474:	782b      	ldrb	r3, [r5, #0]
 800d476:	002e      	movs	r6, r5
 800d478:	4393      	bics	r3, r2
 800d47a:	2b50      	cmp	r3, #80	; 0x50
 800d47c:	d11d      	bne.n	800d4ba <__gethex+0x11e>
 800d47e:	786b      	ldrb	r3, [r5, #1]
 800d480:	2b2b      	cmp	r3, #43	; 0x2b
 800d482:	d02c      	beq.n	800d4de <__gethex+0x142>
 800d484:	2b2d      	cmp	r3, #45	; 0x2d
 800d486:	d02e      	beq.n	800d4e6 <__gethex+0x14a>
 800d488:	2300      	movs	r3, #0
 800d48a:	1c6e      	adds	r6, r5, #1
 800d48c:	9306      	str	r3, [sp, #24]
 800d48e:	7830      	ldrb	r0, [r6, #0]
 800d490:	f7ff ff6e 	bl	800d370 <__hexdig_fun>
 800d494:	1e43      	subs	r3, r0, #1
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b18      	cmp	r3, #24
 800d49a:	d82b      	bhi.n	800d4f4 <__gethex+0x158>
 800d49c:	3810      	subs	r0, #16
 800d49e:	0004      	movs	r4, r0
 800d4a0:	7870      	ldrb	r0, [r6, #1]
 800d4a2:	f7ff ff65 	bl	800d370 <__hexdig_fun>
 800d4a6:	1e43      	subs	r3, r0, #1
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	3601      	adds	r6, #1
 800d4ac:	2b18      	cmp	r3, #24
 800d4ae:	d91c      	bls.n	800d4ea <__gethex+0x14e>
 800d4b0:	9b06      	ldr	r3, [sp, #24]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d000      	beq.n	800d4b8 <__gethex+0x11c>
 800d4b6:	4264      	negs	r4, r4
 800d4b8:	193f      	adds	r7, r7, r4
 800d4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4bc:	601e      	str	r6, [r3, #0]
 800d4be:	9b04      	ldr	r3, [sp, #16]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d019      	beq.n	800d4f8 <__gethex+0x15c>
 800d4c4:	2600      	movs	r6, #0
 800d4c6:	9b08      	ldr	r3, [sp, #32]
 800d4c8:	42b3      	cmp	r3, r6
 800d4ca:	d100      	bne.n	800d4ce <__gethex+0x132>
 800d4cc:	3606      	adds	r6, #6
 800d4ce:	0030      	movs	r0, r6
 800d4d0:	b00d      	add	sp, #52	; 0x34
 800d4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	2700      	movs	r7, #0
 800d4d8:	9d01      	ldr	r5, [sp, #4]
 800d4da:	9304      	str	r3, [sp, #16]
 800d4dc:	e7c9      	b.n	800d472 <__gethex+0xd6>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	9306      	str	r3, [sp, #24]
 800d4e2:	1cae      	adds	r6, r5, #2
 800d4e4:	e7d3      	b.n	800d48e <__gethex+0xf2>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e7fa      	b.n	800d4e0 <__gethex+0x144>
 800d4ea:	230a      	movs	r3, #10
 800d4ec:	435c      	muls	r4, r3
 800d4ee:	1824      	adds	r4, r4, r0
 800d4f0:	3c10      	subs	r4, #16
 800d4f2:	e7d5      	b.n	800d4a0 <__gethex+0x104>
 800d4f4:	002e      	movs	r6, r5
 800d4f6:	e7e0      	b.n	800d4ba <__gethex+0x11e>
 800d4f8:	9b01      	ldr	r3, [sp, #4]
 800d4fa:	9904      	ldr	r1, [sp, #16]
 800d4fc:	1aeb      	subs	r3, r5, r3
 800d4fe:	3b01      	subs	r3, #1
 800d500:	2b07      	cmp	r3, #7
 800d502:	dc0a      	bgt.n	800d51a <__gethex+0x17e>
 800d504:	9805      	ldr	r0, [sp, #20]
 800d506:	f000 fb0f 	bl	800db28 <_Balloc>
 800d50a:	1e04      	subs	r4, r0, #0
 800d50c:	d108      	bne.n	800d520 <__gethex+0x184>
 800d50e:	0002      	movs	r2, r0
 800d510:	21de      	movs	r1, #222	; 0xde
 800d512:	4b64      	ldr	r3, [pc, #400]	; (800d6a4 <__gethex+0x308>)
 800d514:	4864      	ldr	r0, [pc, #400]	; (800d6a8 <__gethex+0x30c>)
 800d516:	f001 fb45 	bl	800eba4 <__assert_func>
 800d51a:	3101      	adds	r1, #1
 800d51c:	105b      	asrs	r3, r3, #1
 800d51e:	e7ef      	b.n	800d500 <__gethex+0x164>
 800d520:	0003      	movs	r3, r0
 800d522:	3314      	adds	r3, #20
 800d524:	9304      	str	r3, [sp, #16]
 800d526:	9309      	str	r3, [sp, #36]	; 0x24
 800d528:	2300      	movs	r3, #0
 800d52a:	001e      	movs	r6, r3
 800d52c:	9306      	str	r3, [sp, #24]
 800d52e:	9b01      	ldr	r3, [sp, #4]
 800d530:	42ab      	cmp	r3, r5
 800d532:	d340      	bcc.n	800d5b6 <__gethex+0x21a>
 800d534:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d536:	9b04      	ldr	r3, [sp, #16]
 800d538:	c540      	stmia	r5!, {r6}
 800d53a:	1aed      	subs	r5, r5, r3
 800d53c:	10ad      	asrs	r5, r5, #2
 800d53e:	0030      	movs	r0, r6
 800d540:	6125      	str	r5, [r4, #16]
 800d542:	f000 fbe9 	bl	800dd18 <__hi0bits>
 800d546:	9b02      	ldr	r3, [sp, #8]
 800d548:	016d      	lsls	r5, r5, #5
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	1a2e      	subs	r6, r5, r0
 800d54e:	9301      	str	r3, [sp, #4]
 800d550:	429e      	cmp	r6, r3
 800d552:	dd5a      	ble.n	800d60a <__gethex+0x26e>
 800d554:	1af6      	subs	r6, r6, r3
 800d556:	0031      	movs	r1, r6
 800d558:	0020      	movs	r0, r4
 800d55a:	f000 ff8b 	bl	800e474 <__any_on>
 800d55e:	1e05      	subs	r5, r0, #0
 800d560:	d016      	beq.n	800d590 <__gethex+0x1f4>
 800d562:	2501      	movs	r5, #1
 800d564:	211f      	movs	r1, #31
 800d566:	0028      	movs	r0, r5
 800d568:	1e73      	subs	r3, r6, #1
 800d56a:	4019      	ands	r1, r3
 800d56c:	4088      	lsls	r0, r1
 800d56e:	0001      	movs	r1, r0
 800d570:	115a      	asrs	r2, r3, #5
 800d572:	9804      	ldr	r0, [sp, #16]
 800d574:	0092      	lsls	r2, r2, #2
 800d576:	5812      	ldr	r2, [r2, r0]
 800d578:	420a      	tst	r2, r1
 800d57a:	d009      	beq.n	800d590 <__gethex+0x1f4>
 800d57c:	42ab      	cmp	r3, r5
 800d57e:	dd06      	ble.n	800d58e <__gethex+0x1f2>
 800d580:	0020      	movs	r0, r4
 800d582:	1eb1      	subs	r1, r6, #2
 800d584:	f000 ff76 	bl	800e474 <__any_on>
 800d588:	3502      	adds	r5, #2
 800d58a:	2800      	cmp	r0, #0
 800d58c:	d100      	bne.n	800d590 <__gethex+0x1f4>
 800d58e:	2502      	movs	r5, #2
 800d590:	0031      	movs	r1, r6
 800d592:	0020      	movs	r0, r4
 800d594:	f7ff fe98 	bl	800d2c8 <rshift>
 800d598:	19bf      	adds	r7, r7, r6
 800d59a:	9b02      	ldr	r3, [sp, #8]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	9303      	str	r3, [sp, #12]
 800d5a0:	42bb      	cmp	r3, r7
 800d5a2:	da42      	bge.n	800d62a <__gethex+0x28e>
 800d5a4:	0021      	movs	r1, r4
 800d5a6:	9805      	ldr	r0, [sp, #20]
 800d5a8:	f000 fb02 	bl	800dbb0 <_Bfree>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d5b0:	26a3      	movs	r6, #163	; 0xa3
 800d5b2:	6013      	str	r3, [r2, #0]
 800d5b4:	e78b      	b.n	800d4ce <__gethex+0x132>
 800d5b6:	1e6b      	subs	r3, r5, #1
 800d5b8:	9308      	str	r3, [sp, #32]
 800d5ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d014      	beq.n	800d5ec <__gethex+0x250>
 800d5c2:	9b06      	ldr	r3, [sp, #24]
 800d5c4:	2b20      	cmp	r3, #32
 800d5c6:	d104      	bne.n	800d5d2 <__gethex+0x236>
 800d5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ca:	c340      	stmia	r3!, {r6}
 800d5cc:	2600      	movs	r6, #0
 800d5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d0:	9606      	str	r6, [sp, #24]
 800d5d2:	9b08      	ldr	r3, [sp, #32]
 800d5d4:	7818      	ldrb	r0, [r3, #0]
 800d5d6:	f7ff fecb 	bl	800d370 <__hexdig_fun>
 800d5da:	230f      	movs	r3, #15
 800d5dc:	4018      	ands	r0, r3
 800d5de:	9b06      	ldr	r3, [sp, #24]
 800d5e0:	9d08      	ldr	r5, [sp, #32]
 800d5e2:	4098      	lsls	r0, r3
 800d5e4:	3304      	adds	r3, #4
 800d5e6:	4306      	orrs	r6, r0
 800d5e8:	9306      	str	r3, [sp, #24]
 800d5ea:	e7a0      	b.n	800d52e <__gethex+0x192>
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	9a03      	ldr	r2, [sp, #12]
 800d5f0:	1a9d      	subs	r5, r3, r2
 800d5f2:	9b08      	ldr	r3, [sp, #32]
 800d5f4:	195d      	adds	r5, r3, r5
 800d5f6:	9b01      	ldr	r3, [sp, #4]
 800d5f8:	429d      	cmp	r5, r3
 800d5fa:	d3e2      	bcc.n	800d5c2 <__gethex+0x226>
 800d5fc:	0028      	movs	r0, r5
 800d5fe:	9907      	ldr	r1, [sp, #28]
 800d600:	f001 fab0 	bl	800eb64 <strncmp>
 800d604:	2800      	cmp	r0, #0
 800d606:	d1dc      	bne.n	800d5c2 <__gethex+0x226>
 800d608:	e791      	b.n	800d52e <__gethex+0x192>
 800d60a:	9b01      	ldr	r3, [sp, #4]
 800d60c:	2500      	movs	r5, #0
 800d60e:	429e      	cmp	r6, r3
 800d610:	dac3      	bge.n	800d59a <__gethex+0x1fe>
 800d612:	1b9e      	subs	r6, r3, r6
 800d614:	0021      	movs	r1, r4
 800d616:	0032      	movs	r2, r6
 800d618:	9805      	ldr	r0, [sp, #20]
 800d61a:	f000 fce7 	bl	800dfec <__lshift>
 800d61e:	0003      	movs	r3, r0
 800d620:	3314      	adds	r3, #20
 800d622:	0004      	movs	r4, r0
 800d624:	1bbf      	subs	r7, r7, r6
 800d626:	9304      	str	r3, [sp, #16]
 800d628:	e7b7      	b.n	800d59a <__gethex+0x1fe>
 800d62a:	9b02      	ldr	r3, [sp, #8]
 800d62c:	685e      	ldr	r6, [r3, #4]
 800d62e:	42be      	cmp	r6, r7
 800d630:	dd71      	ble.n	800d716 <__gethex+0x37a>
 800d632:	9b01      	ldr	r3, [sp, #4]
 800d634:	1bf6      	subs	r6, r6, r7
 800d636:	42b3      	cmp	r3, r6
 800d638:	dc38      	bgt.n	800d6ac <__gethex+0x310>
 800d63a:	9b02      	ldr	r3, [sp, #8]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d026      	beq.n	800d690 <__gethex+0x2f4>
 800d642:	2b03      	cmp	r3, #3
 800d644:	d028      	beq.n	800d698 <__gethex+0x2fc>
 800d646:	2b01      	cmp	r3, #1
 800d648:	d119      	bne.n	800d67e <__gethex+0x2e2>
 800d64a:	9b01      	ldr	r3, [sp, #4]
 800d64c:	42b3      	cmp	r3, r6
 800d64e:	d116      	bne.n	800d67e <__gethex+0x2e2>
 800d650:	2b01      	cmp	r3, #1
 800d652:	d10d      	bne.n	800d670 <__gethex+0x2d4>
 800d654:	9b02      	ldr	r3, [sp, #8]
 800d656:	2662      	movs	r6, #98	; 0x62
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	9301      	str	r3, [sp, #4]
 800d65c:	9a01      	ldr	r2, [sp, #4]
 800d65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	2301      	movs	r3, #1
 800d664:	9a04      	ldr	r2, [sp, #16]
 800d666:	6123      	str	r3, [r4, #16]
 800d668:	6013      	str	r3, [r2, #0]
 800d66a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d66c:	601c      	str	r4, [r3, #0]
 800d66e:	e72e      	b.n	800d4ce <__gethex+0x132>
 800d670:	9901      	ldr	r1, [sp, #4]
 800d672:	0020      	movs	r0, r4
 800d674:	3901      	subs	r1, #1
 800d676:	f000 fefd 	bl	800e474 <__any_on>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d1ea      	bne.n	800d654 <__gethex+0x2b8>
 800d67e:	0021      	movs	r1, r4
 800d680:	9805      	ldr	r0, [sp, #20]
 800d682:	f000 fa95 	bl	800dbb0 <_Bfree>
 800d686:	2300      	movs	r3, #0
 800d688:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d68a:	2650      	movs	r6, #80	; 0x50
 800d68c:	6013      	str	r3, [r2, #0]
 800d68e:	e71e      	b.n	800d4ce <__gethex+0x132>
 800d690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1f3      	bne.n	800d67e <__gethex+0x2e2>
 800d696:	e7dd      	b.n	800d654 <__gethex+0x2b8>
 800d698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d1da      	bne.n	800d654 <__gethex+0x2b8>
 800d69e:	e7ee      	b.n	800d67e <__gethex+0x2e2>
 800d6a0:	0800f458 	.word	0x0800f458
 800d6a4:	0800f3e0 	.word	0x0800f3e0
 800d6a8:	0800f3f1 	.word	0x0800f3f1
 800d6ac:	1e77      	subs	r7, r6, #1
 800d6ae:	2d00      	cmp	r5, #0
 800d6b0:	d12f      	bne.n	800d712 <__gethex+0x376>
 800d6b2:	2f00      	cmp	r7, #0
 800d6b4:	d004      	beq.n	800d6c0 <__gethex+0x324>
 800d6b6:	0039      	movs	r1, r7
 800d6b8:	0020      	movs	r0, r4
 800d6ba:	f000 fedb 	bl	800e474 <__any_on>
 800d6be:	0005      	movs	r5, r0
 800d6c0:	231f      	movs	r3, #31
 800d6c2:	117a      	asrs	r2, r7, #5
 800d6c4:	401f      	ands	r7, r3
 800d6c6:	3b1e      	subs	r3, #30
 800d6c8:	40bb      	lsls	r3, r7
 800d6ca:	9904      	ldr	r1, [sp, #16]
 800d6cc:	0092      	lsls	r2, r2, #2
 800d6ce:	5852      	ldr	r2, [r2, r1]
 800d6d0:	421a      	tst	r2, r3
 800d6d2:	d001      	beq.n	800d6d8 <__gethex+0x33c>
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	431d      	orrs	r5, r3
 800d6d8:	9b01      	ldr	r3, [sp, #4]
 800d6da:	0031      	movs	r1, r6
 800d6dc:	1b9b      	subs	r3, r3, r6
 800d6de:	2602      	movs	r6, #2
 800d6e0:	0020      	movs	r0, r4
 800d6e2:	9301      	str	r3, [sp, #4]
 800d6e4:	f7ff fdf0 	bl	800d2c8 <rshift>
 800d6e8:	9b02      	ldr	r3, [sp, #8]
 800d6ea:	685f      	ldr	r7, [r3, #4]
 800d6ec:	2d00      	cmp	r5, #0
 800d6ee:	d041      	beq.n	800d774 <__gethex+0x3d8>
 800d6f0:	9b02      	ldr	r3, [sp, #8]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d010      	beq.n	800d71a <__gethex+0x37e>
 800d6f8:	2b03      	cmp	r3, #3
 800d6fa:	d012      	beq.n	800d722 <__gethex+0x386>
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d106      	bne.n	800d70e <__gethex+0x372>
 800d700:	07aa      	lsls	r2, r5, #30
 800d702:	d504      	bpl.n	800d70e <__gethex+0x372>
 800d704:	9a04      	ldr	r2, [sp, #16]
 800d706:	6810      	ldr	r0, [r2, #0]
 800d708:	4305      	orrs	r5, r0
 800d70a:	421d      	tst	r5, r3
 800d70c:	d10c      	bne.n	800d728 <__gethex+0x38c>
 800d70e:	2310      	movs	r3, #16
 800d710:	e02f      	b.n	800d772 <__gethex+0x3d6>
 800d712:	2501      	movs	r5, #1
 800d714:	e7d4      	b.n	800d6c0 <__gethex+0x324>
 800d716:	2601      	movs	r6, #1
 800d718:	e7e8      	b.n	800d6ec <__gethex+0x350>
 800d71a:	2301      	movs	r3, #1
 800d71c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d71e:	1a9b      	subs	r3, r3, r2
 800d720:	9313      	str	r3, [sp, #76]	; 0x4c
 800d722:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d724:	2b00      	cmp	r3, #0
 800d726:	d0f2      	beq.n	800d70e <__gethex+0x372>
 800d728:	6923      	ldr	r3, [r4, #16]
 800d72a:	2000      	movs	r0, #0
 800d72c:	9303      	str	r3, [sp, #12]
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	9304      	str	r3, [sp, #16]
 800d732:	0023      	movs	r3, r4
 800d734:	9a04      	ldr	r2, [sp, #16]
 800d736:	3314      	adds	r3, #20
 800d738:	1899      	adds	r1, r3, r2
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	1c55      	adds	r5, r2, #1
 800d73e:	d01e      	beq.n	800d77e <__gethex+0x3e2>
 800d740:	3201      	adds	r2, #1
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	0023      	movs	r3, r4
 800d746:	3314      	adds	r3, #20
 800d748:	2e02      	cmp	r6, #2
 800d74a:	d140      	bne.n	800d7ce <__gethex+0x432>
 800d74c:	9a02      	ldr	r2, [sp, #8]
 800d74e:	9901      	ldr	r1, [sp, #4]
 800d750:	6812      	ldr	r2, [r2, #0]
 800d752:	3a01      	subs	r2, #1
 800d754:	428a      	cmp	r2, r1
 800d756:	d10b      	bne.n	800d770 <__gethex+0x3d4>
 800d758:	114a      	asrs	r2, r1, #5
 800d75a:	211f      	movs	r1, #31
 800d75c:	9801      	ldr	r0, [sp, #4]
 800d75e:	0092      	lsls	r2, r2, #2
 800d760:	4001      	ands	r1, r0
 800d762:	2001      	movs	r0, #1
 800d764:	0005      	movs	r5, r0
 800d766:	408d      	lsls	r5, r1
 800d768:	58d3      	ldr	r3, [r2, r3]
 800d76a:	422b      	tst	r3, r5
 800d76c:	d000      	beq.n	800d770 <__gethex+0x3d4>
 800d76e:	2601      	movs	r6, #1
 800d770:	2320      	movs	r3, #32
 800d772:	431e      	orrs	r6, r3
 800d774:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d776:	601c      	str	r4, [r3, #0]
 800d778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d77a:	601f      	str	r7, [r3, #0]
 800d77c:	e6a7      	b.n	800d4ce <__gethex+0x132>
 800d77e:	c301      	stmia	r3!, {r0}
 800d780:	4299      	cmp	r1, r3
 800d782:	d8da      	bhi.n	800d73a <__gethex+0x39e>
 800d784:	9b03      	ldr	r3, [sp, #12]
 800d786:	68a2      	ldr	r2, [r4, #8]
 800d788:	4293      	cmp	r3, r2
 800d78a:	db17      	blt.n	800d7bc <__gethex+0x420>
 800d78c:	6863      	ldr	r3, [r4, #4]
 800d78e:	9805      	ldr	r0, [sp, #20]
 800d790:	1c59      	adds	r1, r3, #1
 800d792:	f000 f9c9 	bl	800db28 <_Balloc>
 800d796:	1e05      	subs	r5, r0, #0
 800d798:	d103      	bne.n	800d7a2 <__gethex+0x406>
 800d79a:	0002      	movs	r2, r0
 800d79c:	2184      	movs	r1, #132	; 0x84
 800d79e:	4b1c      	ldr	r3, [pc, #112]	; (800d810 <__gethex+0x474>)
 800d7a0:	e6b8      	b.n	800d514 <__gethex+0x178>
 800d7a2:	0021      	movs	r1, r4
 800d7a4:	6923      	ldr	r3, [r4, #16]
 800d7a6:	310c      	adds	r1, #12
 800d7a8:	1c9a      	adds	r2, r3, #2
 800d7aa:	0092      	lsls	r2, r2, #2
 800d7ac:	300c      	adds	r0, #12
 800d7ae:	f7fc fdb4 	bl	800a31a <memcpy>
 800d7b2:	0021      	movs	r1, r4
 800d7b4:	9805      	ldr	r0, [sp, #20]
 800d7b6:	f000 f9fb 	bl	800dbb0 <_Bfree>
 800d7ba:	002c      	movs	r4, r5
 800d7bc:	6923      	ldr	r3, [r4, #16]
 800d7be:	1c5a      	adds	r2, r3, #1
 800d7c0:	6122      	str	r2, [r4, #16]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	18e3      	adds	r3, r4, r3
 800d7ca:	605a      	str	r2, [r3, #4]
 800d7cc:	e7ba      	b.n	800d744 <__gethex+0x3a8>
 800d7ce:	6922      	ldr	r2, [r4, #16]
 800d7d0:	9903      	ldr	r1, [sp, #12]
 800d7d2:	428a      	cmp	r2, r1
 800d7d4:	dd09      	ble.n	800d7ea <__gethex+0x44e>
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	0020      	movs	r0, r4
 800d7da:	f7ff fd75 	bl	800d2c8 <rshift>
 800d7de:	9b02      	ldr	r3, [sp, #8]
 800d7e0:	3701      	adds	r7, #1
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	42bb      	cmp	r3, r7
 800d7e6:	dac2      	bge.n	800d76e <__gethex+0x3d2>
 800d7e8:	e6dc      	b.n	800d5a4 <__gethex+0x208>
 800d7ea:	221f      	movs	r2, #31
 800d7ec:	9d01      	ldr	r5, [sp, #4]
 800d7ee:	9901      	ldr	r1, [sp, #4]
 800d7f0:	2601      	movs	r6, #1
 800d7f2:	4015      	ands	r5, r2
 800d7f4:	4211      	tst	r1, r2
 800d7f6:	d0bb      	beq.n	800d770 <__gethex+0x3d4>
 800d7f8:	9a04      	ldr	r2, [sp, #16]
 800d7fa:	189b      	adds	r3, r3, r2
 800d7fc:	3b04      	subs	r3, #4
 800d7fe:	6818      	ldr	r0, [r3, #0]
 800d800:	f000 fa8a 	bl	800dd18 <__hi0bits>
 800d804:	2320      	movs	r3, #32
 800d806:	1b5d      	subs	r5, r3, r5
 800d808:	42a8      	cmp	r0, r5
 800d80a:	dbe4      	blt.n	800d7d6 <__gethex+0x43a>
 800d80c:	e7b0      	b.n	800d770 <__gethex+0x3d4>
 800d80e:	46c0      	nop			; (mov r8, r8)
 800d810:	0800f3e0 	.word	0x0800f3e0

0800d814 <L_shift>:
 800d814:	2308      	movs	r3, #8
 800d816:	b570      	push	{r4, r5, r6, lr}
 800d818:	2520      	movs	r5, #32
 800d81a:	1a9a      	subs	r2, r3, r2
 800d81c:	0092      	lsls	r2, r2, #2
 800d81e:	1aad      	subs	r5, r5, r2
 800d820:	6843      	ldr	r3, [r0, #4]
 800d822:	6806      	ldr	r6, [r0, #0]
 800d824:	001c      	movs	r4, r3
 800d826:	40ac      	lsls	r4, r5
 800d828:	40d3      	lsrs	r3, r2
 800d82a:	4334      	orrs	r4, r6
 800d82c:	6004      	str	r4, [r0, #0]
 800d82e:	6043      	str	r3, [r0, #4]
 800d830:	3004      	adds	r0, #4
 800d832:	4288      	cmp	r0, r1
 800d834:	d3f4      	bcc.n	800d820 <L_shift+0xc>
 800d836:	bd70      	pop	{r4, r5, r6, pc}

0800d838 <__match>:
 800d838:	b530      	push	{r4, r5, lr}
 800d83a:	6803      	ldr	r3, [r0, #0]
 800d83c:	780c      	ldrb	r4, [r1, #0]
 800d83e:	3301      	adds	r3, #1
 800d840:	2c00      	cmp	r4, #0
 800d842:	d102      	bne.n	800d84a <__match+0x12>
 800d844:	6003      	str	r3, [r0, #0]
 800d846:	2001      	movs	r0, #1
 800d848:	bd30      	pop	{r4, r5, pc}
 800d84a:	781a      	ldrb	r2, [r3, #0]
 800d84c:	0015      	movs	r5, r2
 800d84e:	3d41      	subs	r5, #65	; 0x41
 800d850:	2d19      	cmp	r5, #25
 800d852:	d800      	bhi.n	800d856 <__match+0x1e>
 800d854:	3220      	adds	r2, #32
 800d856:	3101      	adds	r1, #1
 800d858:	42a2      	cmp	r2, r4
 800d85a:	d0ef      	beq.n	800d83c <__match+0x4>
 800d85c:	2000      	movs	r0, #0
 800d85e:	e7f3      	b.n	800d848 <__match+0x10>

0800d860 <__hexnan>:
 800d860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d862:	680b      	ldr	r3, [r1, #0]
 800d864:	b08b      	sub	sp, #44	; 0x2c
 800d866:	9201      	str	r2, [sp, #4]
 800d868:	9901      	ldr	r1, [sp, #4]
 800d86a:	115a      	asrs	r2, r3, #5
 800d86c:	0092      	lsls	r2, r2, #2
 800d86e:	188a      	adds	r2, r1, r2
 800d870:	9202      	str	r2, [sp, #8]
 800d872:	0019      	movs	r1, r3
 800d874:	221f      	movs	r2, #31
 800d876:	4011      	ands	r1, r2
 800d878:	9008      	str	r0, [sp, #32]
 800d87a:	9106      	str	r1, [sp, #24]
 800d87c:	4213      	tst	r3, r2
 800d87e:	d002      	beq.n	800d886 <__hexnan+0x26>
 800d880:	9b02      	ldr	r3, [sp, #8]
 800d882:	3304      	adds	r3, #4
 800d884:	9302      	str	r3, [sp, #8]
 800d886:	9b02      	ldr	r3, [sp, #8]
 800d888:	2500      	movs	r5, #0
 800d88a:	1f1e      	subs	r6, r3, #4
 800d88c:	0037      	movs	r7, r6
 800d88e:	0034      	movs	r4, r6
 800d890:	9b08      	ldr	r3, [sp, #32]
 800d892:	6035      	str	r5, [r6, #0]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	9507      	str	r5, [sp, #28]
 800d898:	9305      	str	r3, [sp, #20]
 800d89a:	9503      	str	r5, [sp, #12]
 800d89c:	9b05      	ldr	r3, [sp, #20]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d8a2:	9b05      	ldr	r3, [sp, #20]
 800d8a4:	785b      	ldrb	r3, [r3, #1]
 800d8a6:	9304      	str	r3, [sp, #16]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d028      	beq.n	800d8fe <__hexnan+0x9e>
 800d8ac:	9804      	ldr	r0, [sp, #16]
 800d8ae:	f7ff fd5f 	bl	800d370 <__hexdig_fun>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d154      	bne.n	800d960 <__hexnan+0x100>
 800d8b6:	9b04      	ldr	r3, [sp, #16]
 800d8b8:	2b20      	cmp	r3, #32
 800d8ba:	d819      	bhi.n	800d8f0 <__hexnan+0x90>
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	9a07      	ldr	r2, [sp, #28]
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	dd12      	ble.n	800d8ea <__hexnan+0x8a>
 800d8c4:	42bc      	cmp	r4, r7
 800d8c6:	d206      	bcs.n	800d8d6 <__hexnan+0x76>
 800d8c8:	2d07      	cmp	r5, #7
 800d8ca:	dc04      	bgt.n	800d8d6 <__hexnan+0x76>
 800d8cc:	002a      	movs	r2, r5
 800d8ce:	0039      	movs	r1, r7
 800d8d0:	0020      	movs	r0, r4
 800d8d2:	f7ff ff9f 	bl	800d814 <L_shift>
 800d8d6:	9b01      	ldr	r3, [sp, #4]
 800d8d8:	2508      	movs	r5, #8
 800d8da:	429c      	cmp	r4, r3
 800d8dc:	d905      	bls.n	800d8ea <__hexnan+0x8a>
 800d8de:	1f27      	subs	r7, r4, #4
 800d8e0:	2500      	movs	r5, #0
 800d8e2:	003c      	movs	r4, r7
 800d8e4:	9b03      	ldr	r3, [sp, #12]
 800d8e6:	603d      	str	r5, [r7, #0]
 800d8e8:	9307      	str	r3, [sp, #28]
 800d8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ec:	9305      	str	r3, [sp, #20]
 800d8ee:	e7d5      	b.n	800d89c <__hexnan+0x3c>
 800d8f0:	9b04      	ldr	r3, [sp, #16]
 800d8f2:	2b29      	cmp	r3, #41	; 0x29
 800d8f4:	d159      	bne.n	800d9aa <__hexnan+0x14a>
 800d8f6:	9b05      	ldr	r3, [sp, #20]
 800d8f8:	9a08      	ldr	r2, [sp, #32]
 800d8fa:	3302      	adds	r3, #2
 800d8fc:	6013      	str	r3, [r2, #0]
 800d8fe:	9b03      	ldr	r3, [sp, #12]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d052      	beq.n	800d9aa <__hexnan+0x14a>
 800d904:	42bc      	cmp	r4, r7
 800d906:	d206      	bcs.n	800d916 <__hexnan+0xb6>
 800d908:	2d07      	cmp	r5, #7
 800d90a:	dc04      	bgt.n	800d916 <__hexnan+0xb6>
 800d90c:	002a      	movs	r2, r5
 800d90e:	0039      	movs	r1, r7
 800d910:	0020      	movs	r0, r4
 800d912:	f7ff ff7f 	bl	800d814 <L_shift>
 800d916:	9b01      	ldr	r3, [sp, #4]
 800d918:	429c      	cmp	r4, r3
 800d91a:	d935      	bls.n	800d988 <__hexnan+0x128>
 800d91c:	001a      	movs	r2, r3
 800d91e:	0023      	movs	r3, r4
 800d920:	cb02      	ldmia	r3!, {r1}
 800d922:	c202      	stmia	r2!, {r1}
 800d924:	429e      	cmp	r6, r3
 800d926:	d2fb      	bcs.n	800d920 <__hexnan+0xc0>
 800d928:	9b02      	ldr	r3, [sp, #8]
 800d92a:	1c61      	adds	r1, r4, #1
 800d92c:	1eda      	subs	r2, r3, #3
 800d92e:	2304      	movs	r3, #4
 800d930:	4291      	cmp	r1, r2
 800d932:	d805      	bhi.n	800d940 <__hexnan+0xe0>
 800d934:	9b02      	ldr	r3, [sp, #8]
 800d936:	3b04      	subs	r3, #4
 800d938:	1b1b      	subs	r3, r3, r4
 800d93a:	089b      	lsrs	r3, r3, #2
 800d93c:	3301      	adds	r3, #1
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	9a01      	ldr	r2, [sp, #4]
 800d942:	18d3      	adds	r3, r2, r3
 800d944:	2200      	movs	r2, #0
 800d946:	c304      	stmia	r3!, {r2}
 800d948:	429e      	cmp	r6, r3
 800d94a:	d2fc      	bcs.n	800d946 <__hexnan+0xe6>
 800d94c:	6833      	ldr	r3, [r6, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d104      	bne.n	800d95c <__hexnan+0xfc>
 800d952:	9b01      	ldr	r3, [sp, #4]
 800d954:	429e      	cmp	r6, r3
 800d956:	d126      	bne.n	800d9a6 <__hexnan+0x146>
 800d958:	2301      	movs	r3, #1
 800d95a:	6033      	str	r3, [r6, #0]
 800d95c:	2005      	movs	r0, #5
 800d95e:	e025      	b.n	800d9ac <__hexnan+0x14c>
 800d960:	9b03      	ldr	r3, [sp, #12]
 800d962:	3501      	adds	r5, #1
 800d964:	3301      	adds	r3, #1
 800d966:	9303      	str	r3, [sp, #12]
 800d968:	2d08      	cmp	r5, #8
 800d96a:	dd06      	ble.n	800d97a <__hexnan+0x11a>
 800d96c:	9b01      	ldr	r3, [sp, #4]
 800d96e:	429c      	cmp	r4, r3
 800d970:	d9bb      	bls.n	800d8ea <__hexnan+0x8a>
 800d972:	2300      	movs	r3, #0
 800d974:	2501      	movs	r5, #1
 800d976:	3c04      	subs	r4, #4
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	220f      	movs	r2, #15
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	4010      	ands	r0, r2
 800d980:	011b      	lsls	r3, r3, #4
 800d982:	4318      	orrs	r0, r3
 800d984:	6020      	str	r0, [r4, #0]
 800d986:	e7b0      	b.n	800d8ea <__hexnan+0x8a>
 800d988:	9b06      	ldr	r3, [sp, #24]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0de      	beq.n	800d94c <__hexnan+0xec>
 800d98e:	2120      	movs	r1, #32
 800d990:	9a06      	ldr	r2, [sp, #24]
 800d992:	9b02      	ldr	r3, [sp, #8]
 800d994:	1a89      	subs	r1, r1, r2
 800d996:	2201      	movs	r2, #1
 800d998:	4252      	negs	r2, r2
 800d99a:	40ca      	lsrs	r2, r1
 800d99c:	3b04      	subs	r3, #4
 800d99e:	6819      	ldr	r1, [r3, #0]
 800d9a0:	400a      	ands	r2, r1
 800d9a2:	601a      	str	r2, [r3, #0]
 800d9a4:	e7d2      	b.n	800d94c <__hexnan+0xec>
 800d9a6:	3e04      	subs	r6, #4
 800d9a8:	e7d0      	b.n	800d94c <__hexnan+0xec>
 800d9aa:	2004      	movs	r0, #4
 800d9ac:	b00b      	add	sp, #44	; 0x2c
 800d9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9b0 <_localeconv_r>:
 800d9b0:	4800      	ldr	r0, [pc, #0]	; (800d9b4 <_localeconv_r+0x4>)
 800d9b2:	4770      	bx	lr
 800d9b4:	20000194 	.word	0x20000194

0800d9b8 <_lseek_r>:
 800d9b8:	b570      	push	{r4, r5, r6, lr}
 800d9ba:	0004      	movs	r4, r0
 800d9bc:	0008      	movs	r0, r1
 800d9be:	0011      	movs	r1, r2
 800d9c0:	001a      	movs	r2, r3
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	4d05      	ldr	r5, [pc, #20]	; (800d9dc <_lseek_r+0x24>)
 800d9c6:	602b      	str	r3, [r5, #0]
 800d9c8:	f7f5 ff86 	bl	80038d8 <_lseek>
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	d103      	bne.n	800d9d8 <_lseek_r+0x20>
 800d9d0:	682b      	ldr	r3, [r5, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d000      	beq.n	800d9d8 <_lseek_r+0x20>
 800d9d6:	6023      	str	r3, [r4, #0]
 800d9d8:	bd70      	pop	{r4, r5, r6, pc}
 800d9da:	46c0      	nop			; (mov r8, r8)
 800d9dc:	20001d38 	.word	0x20001d38

0800d9e0 <__swhatbuf_r>:
 800d9e0:	b570      	push	{r4, r5, r6, lr}
 800d9e2:	000e      	movs	r6, r1
 800d9e4:	001d      	movs	r5, r3
 800d9e6:	230e      	movs	r3, #14
 800d9e8:	5ec9      	ldrsh	r1, [r1, r3]
 800d9ea:	0014      	movs	r4, r2
 800d9ec:	b096      	sub	sp, #88	; 0x58
 800d9ee:	2900      	cmp	r1, #0
 800d9f0:	da08      	bge.n	800da04 <__swhatbuf_r+0x24>
 800d9f2:	220c      	movs	r2, #12
 800d9f4:	5eb3      	ldrsh	r3, [r6, r2]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	602a      	str	r2, [r5, #0]
 800d9fa:	061b      	lsls	r3, r3, #24
 800d9fc:	d411      	bmi.n	800da22 <__swhatbuf_r+0x42>
 800d9fe:	2380      	movs	r3, #128	; 0x80
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	e00f      	b.n	800da24 <__swhatbuf_r+0x44>
 800da04:	466a      	mov	r2, sp
 800da06:	f001 f8fb 	bl	800ec00 <_fstat_r>
 800da0a:	2800      	cmp	r0, #0
 800da0c:	dbf1      	blt.n	800d9f2 <__swhatbuf_r+0x12>
 800da0e:	23f0      	movs	r3, #240	; 0xf0
 800da10:	9901      	ldr	r1, [sp, #4]
 800da12:	021b      	lsls	r3, r3, #8
 800da14:	4019      	ands	r1, r3
 800da16:	4b05      	ldr	r3, [pc, #20]	; (800da2c <__swhatbuf_r+0x4c>)
 800da18:	18c9      	adds	r1, r1, r3
 800da1a:	424b      	negs	r3, r1
 800da1c:	4159      	adcs	r1, r3
 800da1e:	6029      	str	r1, [r5, #0]
 800da20:	e7ed      	b.n	800d9fe <__swhatbuf_r+0x1e>
 800da22:	2340      	movs	r3, #64	; 0x40
 800da24:	2000      	movs	r0, #0
 800da26:	6023      	str	r3, [r4, #0]
 800da28:	b016      	add	sp, #88	; 0x58
 800da2a:	bd70      	pop	{r4, r5, r6, pc}
 800da2c:	ffffe000 	.word	0xffffe000

0800da30 <__smakebuf_r>:
 800da30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da32:	2602      	movs	r6, #2
 800da34:	898b      	ldrh	r3, [r1, #12]
 800da36:	0005      	movs	r5, r0
 800da38:	000c      	movs	r4, r1
 800da3a:	4233      	tst	r3, r6
 800da3c:	d006      	beq.n	800da4c <__smakebuf_r+0x1c>
 800da3e:	0023      	movs	r3, r4
 800da40:	3347      	adds	r3, #71	; 0x47
 800da42:	6023      	str	r3, [r4, #0]
 800da44:	6123      	str	r3, [r4, #16]
 800da46:	2301      	movs	r3, #1
 800da48:	6163      	str	r3, [r4, #20]
 800da4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800da4c:	466a      	mov	r2, sp
 800da4e:	ab01      	add	r3, sp, #4
 800da50:	f7ff ffc6 	bl	800d9e0 <__swhatbuf_r>
 800da54:	9900      	ldr	r1, [sp, #0]
 800da56:	0007      	movs	r7, r0
 800da58:	0028      	movs	r0, r5
 800da5a:	f7fc fc91 	bl	800a380 <_malloc_r>
 800da5e:	2800      	cmp	r0, #0
 800da60:	d108      	bne.n	800da74 <__smakebuf_r+0x44>
 800da62:	220c      	movs	r2, #12
 800da64:	5ea3      	ldrsh	r3, [r4, r2]
 800da66:	059a      	lsls	r2, r3, #22
 800da68:	d4ef      	bmi.n	800da4a <__smakebuf_r+0x1a>
 800da6a:	2203      	movs	r2, #3
 800da6c:	4393      	bics	r3, r2
 800da6e:	431e      	orrs	r6, r3
 800da70:	81a6      	strh	r6, [r4, #12]
 800da72:	e7e4      	b.n	800da3e <__smakebuf_r+0xe>
 800da74:	4b0f      	ldr	r3, [pc, #60]	; (800dab4 <__smakebuf_r+0x84>)
 800da76:	62ab      	str	r3, [r5, #40]	; 0x28
 800da78:	2380      	movs	r3, #128	; 0x80
 800da7a:	89a2      	ldrh	r2, [r4, #12]
 800da7c:	6020      	str	r0, [r4, #0]
 800da7e:	4313      	orrs	r3, r2
 800da80:	81a3      	strh	r3, [r4, #12]
 800da82:	9b00      	ldr	r3, [sp, #0]
 800da84:	6120      	str	r0, [r4, #16]
 800da86:	6163      	str	r3, [r4, #20]
 800da88:	9b01      	ldr	r3, [sp, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d00d      	beq.n	800daaa <__smakebuf_r+0x7a>
 800da8e:	0028      	movs	r0, r5
 800da90:	230e      	movs	r3, #14
 800da92:	5ee1      	ldrsh	r1, [r4, r3]
 800da94:	f001 f8c6 	bl	800ec24 <_isatty_r>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d006      	beq.n	800daaa <__smakebuf_r+0x7a>
 800da9c:	2203      	movs	r2, #3
 800da9e:	89a3      	ldrh	r3, [r4, #12]
 800daa0:	4393      	bics	r3, r2
 800daa2:	001a      	movs	r2, r3
 800daa4:	2301      	movs	r3, #1
 800daa6:	4313      	orrs	r3, r2
 800daa8:	81a3      	strh	r3, [r4, #12]
 800daaa:	89a0      	ldrh	r0, [r4, #12]
 800daac:	4307      	orrs	r7, r0
 800daae:	81a7      	strh	r7, [r4, #12]
 800dab0:	e7cb      	b.n	800da4a <__smakebuf_r+0x1a>
 800dab2:	46c0      	nop			; (mov r8, r8)
 800dab4:	0800a111 	.word	0x0800a111

0800dab8 <malloc>:
 800dab8:	b510      	push	{r4, lr}
 800daba:	4b03      	ldr	r3, [pc, #12]	; (800dac8 <malloc+0x10>)
 800dabc:	0001      	movs	r1, r0
 800dabe:	6818      	ldr	r0, [r3, #0]
 800dac0:	f7fc fc5e 	bl	800a380 <_malloc_r>
 800dac4:	bd10      	pop	{r4, pc}
 800dac6:	46c0      	nop			; (mov r8, r8)
 800dac8:	2000003c 	.word	0x2000003c

0800dacc <__ascii_mbtowc>:
 800dacc:	b082      	sub	sp, #8
 800dace:	2900      	cmp	r1, #0
 800dad0:	d100      	bne.n	800dad4 <__ascii_mbtowc+0x8>
 800dad2:	a901      	add	r1, sp, #4
 800dad4:	1e10      	subs	r0, r2, #0
 800dad6:	d006      	beq.n	800dae6 <__ascii_mbtowc+0x1a>
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d006      	beq.n	800daea <__ascii_mbtowc+0x1e>
 800dadc:	7813      	ldrb	r3, [r2, #0]
 800dade:	600b      	str	r3, [r1, #0]
 800dae0:	7810      	ldrb	r0, [r2, #0]
 800dae2:	1e43      	subs	r3, r0, #1
 800dae4:	4198      	sbcs	r0, r3
 800dae6:	b002      	add	sp, #8
 800dae8:	4770      	bx	lr
 800daea:	2002      	movs	r0, #2
 800daec:	4240      	negs	r0, r0
 800daee:	e7fa      	b.n	800dae6 <__ascii_mbtowc+0x1a>

0800daf0 <memchr>:
 800daf0:	b2c9      	uxtb	r1, r1
 800daf2:	1882      	adds	r2, r0, r2
 800daf4:	4290      	cmp	r0, r2
 800daf6:	d101      	bne.n	800dafc <memchr+0xc>
 800daf8:	2000      	movs	r0, #0
 800dafa:	4770      	bx	lr
 800dafc:	7803      	ldrb	r3, [r0, #0]
 800dafe:	428b      	cmp	r3, r1
 800db00:	d0fb      	beq.n	800dafa <memchr+0xa>
 800db02:	3001      	adds	r0, #1
 800db04:	e7f6      	b.n	800daf4 <memchr+0x4>
	...

0800db08 <__malloc_lock>:
 800db08:	b510      	push	{r4, lr}
 800db0a:	4802      	ldr	r0, [pc, #8]	; (800db14 <__malloc_lock+0xc>)
 800db0c:	f7fc fc03 	bl	800a316 <__retarget_lock_acquire_recursive>
 800db10:	bd10      	pop	{r4, pc}
 800db12:	46c0      	nop			; (mov r8, r8)
 800db14:	20001d2c 	.word	0x20001d2c

0800db18 <__malloc_unlock>:
 800db18:	b510      	push	{r4, lr}
 800db1a:	4802      	ldr	r0, [pc, #8]	; (800db24 <__malloc_unlock+0xc>)
 800db1c:	f7fc fbfc 	bl	800a318 <__retarget_lock_release_recursive>
 800db20:	bd10      	pop	{r4, pc}
 800db22:	46c0      	nop			; (mov r8, r8)
 800db24:	20001d2c 	.word	0x20001d2c

0800db28 <_Balloc>:
 800db28:	b570      	push	{r4, r5, r6, lr}
 800db2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800db2c:	0006      	movs	r6, r0
 800db2e:	000c      	movs	r4, r1
 800db30:	2d00      	cmp	r5, #0
 800db32:	d10e      	bne.n	800db52 <_Balloc+0x2a>
 800db34:	2010      	movs	r0, #16
 800db36:	f7ff ffbf 	bl	800dab8 <malloc>
 800db3a:	1e02      	subs	r2, r0, #0
 800db3c:	6270      	str	r0, [r6, #36]	; 0x24
 800db3e:	d104      	bne.n	800db4a <_Balloc+0x22>
 800db40:	2166      	movs	r1, #102	; 0x66
 800db42:	4b19      	ldr	r3, [pc, #100]	; (800dba8 <_Balloc+0x80>)
 800db44:	4819      	ldr	r0, [pc, #100]	; (800dbac <_Balloc+0x84>)
 800db46:	f001 f82d 	bl	800eba4 <__assert_func>
 800db4a:	6045      	str	r5, [r0, #4]
 800db4c:	6085      	str	r5, [r0, #8]
 800db4e:	6005      	str	r5, [r0, #0]
 800db50:	60c5      	str	r5, [r0, #12]
 800db52:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800db54:	68eb      	ldr	r3, [r5, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d013      	beq.n	800db82 <_Balloc+0x5a>
 800db5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800db5c:	00a2      	lsls	r2, r4, #2
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	189b      	adds	r3, r3, r2
 800db62:	6818      	ldr	r0, [r3, #0]
 800db64:	2800      	cmp	r0, #0
 800db66:	d118      	bne.n	800db9a <_Balloc+0x72>
 800db68:	2101      	movs	r1, #1
 800db6a:	000d      	movs	r5, r1
 800db6c:	40a5      	lsls	r5, r4
 800db6e:	1d6a      	adds	r2, r5, #5
 800db70:	0030      	movs	r0, r6
 800db72:	0092      	lsls	r2, r2, #2
 800db74:	f000 fca1 	bl	800e4ba <_calloc_r>
 800db78:	2800      	cmp	r0, #0
 800db7a:	d00c      	beq.n	800db96 <_Balloc+0x6e>
 800db7c:	6044      	str	r4, [r0, #4]
 800db7e:	6085      	str	r5, [r0, #8]
 800db80:	e00d      	b.n	800db9e <_Balloc+0x76>
 800db82:	2221      	movs	r2, #33	; 0x21
 800db84:	2104      	movs	r1, #4
 800db86:	0030      	movs	r0, r6
 800db88:	f000 fc97 	bl	800e4ba <_calloc_r>
 800db8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800db8e:	60e8      	str	r0, [r5, #12]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1e1      	bne.n	800db5a <_Balloc+0x32>
 800db96:	2000      	movs	r0, #0
 800db98:	bd70      	pop	{r4, r5, r6, pc}
 800db9a:	6802      	ldr	r2, [r0, #0]
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	2300      	movs	r3, #0
 800dba0:	6103      	str	r3, [r0, #16]
 800dba2:	60c3      	str	r3, [r0, #12]
 800dba4:	e7f8      	b.n	800db98 <_Balloc+0x70>
 800dba6:	46c0      	nop			; (mov r8, r8)
 800dba8:	0800f36e 	.word	0x0800f36e
 800dbac:	0800f46c 	.word	0x0800f46c

0800dbb0 <_Bfree>:
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dbb4:	0005      	movs	r5, r0
 800dbb6:	000c      	movs	r4, r1
 800dbb8:	2e00      	cmp	r6, #0
 800dbba:	d10e      	bne.n	800dbda <_Bfree+0x2a>
 800dbbc:	2010      	movs	r0, #16
 800dbbe:	f7ff ff7b 	bl	800dab8 <malloc>
 800dbc2:	1e02      	subs	r2, r0, #0
 800dbc4:	6268      	str	r0, [r5, #36]	; 0x24
 800dbc6:	d104      	bne.n	800dbd2 <_Bfree+0x22>
 800dbc8:	218a      	movs	r1, #138	; 0x8a
 800dbca:	4b09      	ldr	r3, [pc, #36]	; (800dbf0 <_Bfree+0x40>)
 800dbcc:	4809      	ldr	r0, [pc, #36]	; (800dbf4 <_Bfree+0x44>)
 800dbce:	f000 ffe9 	bl	800eba4 <__assert_func>
 800dbd2:	6046      	str	r6, [r0, #4]
 800dbd4:	6086      	str	r6, [r0, #8]
 800dbd6:	6006      	str	r6, [r0, #0]
 800dbd8:	60c6      	str	r6, [r0, #12]
 800dbda:	2c00      	cmp	r4, #0
 800dbdc:	d007      	beq.n	800dbee <_Bfree+0x3e>
 800dbde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dbe0:	6862      	ldr	r2, [r4, #4]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	0092      	lsls	r2, r2, #2
 800dbe6:	189b      	adds	r3, r3, r2
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	6022      	str	r2, [r4, #0]
 800dbec:	601c      	str	r4, [r3, #0]
 800dbee:	bd70      	pop	{r4, r5, r6, pc}
 800dbf0:	0800f36e 	.word	0x0800f36e
 800dbf4:	0800f46c 	.word	0x0800f46c

0800dbf8 <__multadd>:
 800dbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbfa:	000e      	movs	r6, r1
 800dbfc:	9001      	str	r0, [sp, #4]
 800dbfe:	000c      	movs	r4, r1
 800dc00:	001d      	movs	r5, r3
 800dc02:	2000      	movs	r0, #0
 800dc04:	690f      	ldr	r7, [r1, #16]
 800dc06:	3614      	adds	r6, #20
 800dc08:	6833      	ldr	r3, [r6, #0]
 800dc0a:	3001      	adds	r0, #1
 800dc0c:	b299      	uxth	r1, r3
 800dc0e:	4351      	muls	r1, r2
 800dc10:	0c1b      	lsrs	r3, r3, #16
 800dc12:	4353      	muls	r3, r2
 800dc14:	1949      	adds	r1, r1, r5
 800dc16:	0c0d      	lsrs	r5, r1, #16
 800dc18:	195b      	adds	r3, r3, r5
 800dc1a:	0c1d      	lsrs	r5, r3, #16
 800dc1c:	b289      	uxth	r1, r1
 800dc1e:	041b      	lsls	r3, r3, #16
 800dc20:	185b      	adds	r3, r3, r1
 800dc22:	c608      	stmia	r6!, {r3}
 800dc24:	4287      	cmp	r7, r0
 800dc26:	dcef      	bgt.n	800dc08 <__multadd+0x10>
 800dc28:	2d00      	cmp	r5, #0
 800dc2a:	d022      	beq.n	800dc72 <__multadd+0x7a>
 800dc2c:	68a3      	ldr	r3, [r4, #8]
 800dc2e:	42bb      	cmp	r3, r7
 800dc30:	dc19      	bgt.n	800dc66 <__multadd+0x6e>
 800dc32:	6863      	ldr	r3, [r4, #4]
 800dc34:	9801      	ldr	r0, [sp, #4]
 800dc36:	1c59      	adds	r1, r3, #1
 800dc38:	f7ff ff76 	bl	800db28 <_Balloc>
 800dc3c:	1e06      	subs	r6, r0, #0
 800dc3e:	d105      	bne.n	800dc4c <__multadd+0x54>
 800dc40:	0002      	movs	r2, r0
 800dc42:	21b5      	movs	r1, #181	; 0xb5
 800dc44:	4b0c      	ldr	r3, [pc, #48]	; (800dc78 <__multadd+0x80>)
 800dc46:	480d      	ldr	r0, [pc, #52]	; (800dc7c <__multadd+0x84>)
 800dc48:	f000 ffac 	bl	800eba4 <__assert_func>
 800dc4c:	0021      	movs	r1, r4
 800dc4e:	6923      	ldr	r3, [r4, #16]
 800dc50:	310c      	adds	r1, #12
 800dc52:	1c9a      	adds	r2, r3, #2
 800dc54:	0092      	lsls	r2, r2, #2
 800dc56:	300c      	adds	r0, #12
 800dc58:	f7fc fb5f 	bl	800a31a <memcpy>
 800dc5c:	0021      	movs	r1, r4
 800dc5e:	9801      	ldr	r0, [sp, #4]
 800dc60:	f7ff ffa6 	bl	800dbb0 <_Bfree>
 800dc64:	0034      	movs	r4, r6
 800dc66:	1d3b      	adds	r3, r7, #4
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	18e3      	adds	r3, r4, r3
 800dc6c:	605d      	str	r5, [r3, #4]
 800dc6e:	1c7b      	adds	r3, r7, #1
 800dc70:	6123      	str	r3, [r4, #16]
 800dc72:	0020      	movs	r0, r4
 800dc74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc76:	46c0      	nop			; (mov r8, r8)
 800dc78:	0800f3e0 	.word	0x0800f3e0
 800dc7c:	0800f46c 	.word	0x0800f46c

0800dc80 <__s2b>:
 800dc80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc82:	0006      	movs	r6, r0
 800dc84:	0018      	movs	r0, r3
 800dc86:	000c      	movs	r4, r1
 800dc88:	3008      	adds	r0, #8
 800dc8a:	2109      	movs	r1, #9
 800dc8c:	9301      	str	r3, [sp, #4]
 800dc8e:	0015      	movs	r5, r2
 800dc90:	f7f2 fae0 	bl	8000254 <__divsi3>
 800dc94:	2301      	movs	r3, #1
 800dc96:	2100      	movs	r1, #0
 800dc98:	4283      	cmp	r3, r0
 800dc9a:	db0a      	blt.n	800dcb2 <__s2b+0x32>
 800dc9c:	0030      	movs	r0, r6
 800dc9e:	f7ff ff43 	bl	800db28 <_Balloc>
 800dca2:	1e01      	subs	r1, r0, #0
 800dca4:	d108      	bne.n	800dcb8 <__s2b+0x38>
 800dca6:	0002      	movs	r2, r0
 800dca8:	4b19      	ldr	r3, [pc, #100]	; (800dd10 <__s2b+0x90>)
 800dcaa:	481a      	ldr	r0, [pc, #104]	; (800dd14 <__s2b+0x94>)
 800dcac:	31ce      	adds	r1, #206	; 0xce
 800dcae:	f000 ff79 	bl	800eba4 <__assert_func>
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	3101      	adds	r1, #1
 800dcb6:	e7ef      	b.n	800dc98 <__s2b+0x18>
 800dcb8:	9b08      	ldr	r3, [sp, #32]
 800dcba:	6143      	str	r3, [r0, #20]
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	6103      	str	r3, [r0, #16]
 800dcc0:	2d09      	cmp	r5, #9
 800dcc2:	dd18      	ble.n	800dcf6 <__s2b+0x76>
 800dcc4:	0023      	movs	r3, r4
 800dcc6:	3309      	adds	r3, #9
 800dcc8:	001f      	movs	r7, r3
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	1964      	adds	r4, r4, r5
 800dcce:	783b      	ldrb	r3, [r7, #0]
 800dcd0:	220a      	movs	r2, #10
 800dcd2:	0030      	movs	r0, r6
 800dcd4:	3b30      	subs	r3, #48	; 0x30
 800dcd6:	f7ff ff8f 	bl	800dbf8 <__multadd>
 800dcda:	3701      	adds	r7, #1
 800dcdc:	0001      	movs	r1, r0
 800dcde:	42a7      	cmp	r7, r4
 800dce0:	d1f5      	bne.n	800dcce <__s2b+0x4e>
 800dce2:	002c      	movs	r4, r5
 800dce4:	9b00      	ldr	r3, [sp, #0]
 800dce6:	3c08      	subs	r4, #8
 800dce8:	191c      	adds	r4, r3, r4
 800dcea:	002f      	movs	r7, r5
 800dcec:	9b01      	ldr	r3, [sp, #4]
 800dcee:	429f      	cmp	r7, r3
 800dcf0:	db04      	blt.n	800dcfc <__s2b+0x7c>
 800dcf2:	0008      	movs	r0, r1
 800dcf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dcf6:	2509      	movs	r5, #9
 800dcf8:	340a      	adds	r4, #10
 800dcfa:	e7f6      	b.n	800dcea <__s2b+0x6a>
 800dcfc:	1b63      	subs	r3, r4, r5
 800dcfe:	5ddb      	ldrb	r3, [r3, r7]
 800dd00:	220a      	movs	r2, #10
 800dd02:	0030      	movs	r0, r6
 800dd04:	3b30      	subs	r3, #48	; 0x30
 800dd06:	f7ff ff77 	bl	800dbf8 <__multadd>
 800dd0a:	3701      	adds	r7, #1
 800dd0c:	0001      	movs	r1, r0
 800dd0e:	e7ed      	b.n	800dcec <__s2b+0x6c>
 800dd10:	0800f3e0 	.word	0x0800f3e0
 800dd14:	0800f46c 	.word	0x0800f46c

0800dd18 <__hi0bits>:
 800dd18:	0003      	movs	r3, r0
 800dd1a:	0c02      	lsrs	r2, r0, #16
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	4282      	cmp	r2, r0
 800dd20:	d101      	bne.n	800dd26 <__hi0bits+0xe>
 800dd22:	041b      	lsls	r3, r3, #16
 800dd24:	3010      	adds	r0, #16
 800dd26:	0e1a      	lsrs	r2, r3, #24
 800dd28:	d101      	bne.n	800dd2e <__hi0bits+0x16>
 800dd2a:	3008      	adds	r0, #8
 800dd2c:	021b      	lsls	r3, r3, #8
 800dd2e:	0f1a      	lsrs	r2, r3, #28
 800dd30:	d101      	bne.n	800dd36 <__hi0bits+0x1e>
 800dd32:	3004      	adds	r0, #4
 800dd34:	011b      	lsls	r3, r3, #4
 800dd36:	0f9a      	lsrs	r2, r3, #30
 800dd38:	d101      	bne.n	800dd3e <__hi0bits+0x26>
 800dd3a:	3002      	adds	r0, #2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	db03      	blt.n	800dd4a <__hi0bits+0x32>
 800dd42:	3001      	adds	r0, #1
 800dd44:	005b      	lsls	r3, r3, #1
 800dd46:	d400      	bmi.n	800dd4a <__hi0bits+0x32>
 800dd48:	2020      	movs	r0, #32
 800dd4a:	4770      	bx	lr

0800dd4c <__lo0bits>:
 800dd4c:	6803      	ldr	r3, [r0, #0]
 800dd4e:	0002      	movs	r2, r0
 800dd50:	2107      	movs	r1, #7
 800dd52:	0018      	movs	r0, r3
 800dd54:	4008      	ands	r0, r1
 800dd56:	420b      	tst	r3, r1
 800dd58:	d00d      	beq.n	800dd76 <__lo0bits+0x2a>
 800dd5a:	3906      	subs	r1, #6
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	420b      	tst	r3, r1
 800dd60:	d105      	bne.n	800dd6e <__lo0bits+0x22>
 800dd62:	3002      	adds	r0, #2
 800dd64:	4203      	tst	r3, r0
 800dd66:	d003      	beq.n	800dd70 <__lo0bits+0x24>
 800dd68:	40cb      	lsrs	r3, r1
 800dd6a:	0008      	movs	r0, r1
 800dd6c:	6013      	str	r3, [r2, #0]
 800dd6e:	4770      	bx	lr
 800dd70:	089b      	lsrs	r3, r3, #2
 800dd72:	6013      	str	r3, [r2, #0]
 800dd74:	e7fb      	b.n	800dd6e <__lo0bits+0x22>
 800dd76:	b299      	uxth	r1, r3
 800dd78:	2900      	cmp	r1, #0
 800dd7a:	d101      	bne.n	800dd80 <__lo0bits+0x34>
 800dd7c:	2010      	movs	r0, #16
 800dd7e:	0c1b      	lsrs	r3, r3, #16
 800dd80:	b2d9      	uxtb	r1, r3
 800dd82:	2900      	cmp	r1, #0
 800dd84:	d101      	bne.n	800dd8a <__lo0bits+0x3e>
 800dd86:	3008      	adds	r0, #8
 800dd88:	0a1b      	lsrs	r3, r3, #8
 800dd8a:	0719      	lsls	r1, r3, #28
 800dd8c:	d101      	bne.n	800dd92 <__lo0bits+0x46>
 800dd8e:	3004      	adds	r0, #4
 800dd90:	091b      	lsrs	r3, r3, #4
 800dd92:	0799      	lsls	r1, r3, #30
 800dd94:	d101      	bne.n	800dd9a <__lo0bits+0x4e>
 800dd96:	3002      	adds	r0, #2
 800dd98:	089b      	lsrs	r3, r3, #2
 800dd9a:	07d9      	lsls	r1, r3, #31
 800dd9c:	d4e9      	bmi.n	800dd72 <__lo0bits+0x26>
 800dd9e:	3001      	adds	r0, #1
 800dda0:	085b      	lsrs	r3, r3, #1
 800dda2:	d1e6      	bne.n	800dd72 <__lo0bits+0x26>
 800dda4:	2020      	movs	r0, #32
 800dda6:	e7e2      	b.n	800dd6e <__lo0bits+0x22>

0800dda8 <__i2b>:
 800dda8:	b510      	push	{r4, lr}
 800ddaa:	000c      	movs	r4, r1
 800ddac:	2101      	movs	r1, #1
 800ddae:	f7ff febb 	bl	800db28 <_Balloc>
 800ddb2:	2800      	cmp	r0, #0
 800ddb4:	d106      	bne.n	800ddc4 <__i2b+0x1c>
 800ddb6:	21a0      	movs	r1, #160	; 0xa0
 800ddb8:	0002      	movs	r2, r0
 800ddba:	4b04      	ldr	r3, [pc, #16]	; (800ddcc <__i2b+0x24>)
 800ddbc:	4804      	ldr	r0, [pc, #16]	; (800ddd0 <__i2b+0x28>)
 800ddbe:	0049      	lsls	r1, r1, #1
 800ddc0:	f000 fef0 	bl	800eba4 <__assert_func>
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	6144      	str	r4, [r0, #20]
 800ddc8:	6103      	str	r3, [r0, #16]
 800ddca:	bd10      	pop	{r4, pc}
 800ddcc:	0800f3e0 	.word	0x0800f3e0
 800ddd0:	0800f46c 	.word	0x0800f46c

0800ddd4 <__multiply>:
 800ddd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddd6:	690b      	ldr	r3, [r1, #16]
 800ddd8:	0014      	movs	r4, r2
 800ddda:	6912      	ldr	r2, [r2, #16]
 800dddc:	000d      	movs	r5, r1
 800ddde:	b089      	sub	sp, #36	; 0x24
 800dde0:	4293      	cmp	r3, r2
 800dde2:	da01      	bge.n	800dde8 <__multiply+0x14>
 800dde4:	0025      	movs	r5, r4
 800dde6:	000c      	movs	r4, r1
 800dde8:	692f      	ldr	r7, [r5, #16]
 800ddea:	6926      	ldr	r6, [r4, #16]
 800ddec:	6869      	ldr	r1, [r5, #4]
 800ddee:	19bb      	adds	r3, r7, r6
 800ddf0:	9302      	str	r3, [sp, #8]
 800ddf2:	68ab      	ldr	r3, [r5, #8]
 800ddf4:	19ba      	adds	r2, r7, r6
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	da00      	bge.n	800ddfc <__multiply+0x28>
 800ddfa:	3101      	adds	r1, #1
 800ddfc:	f7ff fe94 	bl	800db28 <_Balloc>
 800de00:	9001      	str	r0, [sp, #4]
 800de02:	2800      	cmp	r0, #0
 800de04:	d106      	bne.n	800de14 <__multiply+0x40>
 800de06:	215e      	movs	r1, #94	; 0x5e
 800de08:	0002      	movs	r2, r0
 800de0a:	4b48      	ldr	r3, [pc, #288]	; (800df2c <__multiply+0x158>)
 800de0c:	4848      	ldr	r0, [pc, #288]	; (800df30 <__multiply+0x15c>)
 800de0e:	31ff      	adds	r1, #255	; 0xff
 800de10:	f000 fec8 	bl	800eba4 <__assert_func>
 800de14:	9b01      	ldr	r3, [sp, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	3314      	adds	r3, #20
 800de1a:	469c      	mov	ip, r3
 800de1c:	19bb      	adds	r3, r7, r6
 800de1e:	009b      	lsls	r3, r3, #2
 800de20:	4463      	add	r3, ip
 800de22:	9303      	str	r3, [sp, #12]
 800de24:	4663      	mov	r3, ip
 800de26:	9903      	ldr	r1, [sp, #12]
 800de28:	428b      	cmp	r3, r1
 800de2a:	d32c      	bcc.n	800de86 <__multiply+0xb2>
 800de2c:	002b      	movs	r3, r5
 800de2e:	0022      	movs	r2, r4
 800de30:	3314      	adds	r3, #20
 800de32:	00bf      	lsls	r7, r7, #2
 800de34:	3214      	adds	r2, #20
 800de36:	9306      	str	r3, [sp, #24]
 800de38:	00b6      	lsls	r6, r6, #2
 800de3a:	19db      	adds	r3, r3, r7
 800de3c:	9304      	str	r3, [sp, #16]
 800de3e:	1993      	adds	r3, r2, r6
 800de40:	9307      	str	r3, [sp, #28]
 800de42:	2304      	movs	r3, #4
 800de44:	9305      	str	r3, [sp, #20]
 800de46:	002b      	movs	r3, r5
 800de48:	9904      	ldr	r1, [sp, #16]
 800de4a:	3315      	adds	r3, #21
 800de4c:	9200      	str	r2, [sp, #0]
 800de4e:	4299      	cmp	r1, r3
 800de50:	d305      	bcc.n	800de5e <__multiply+0x8a>
 800de52:	1b4b      	subs	r3, r1, r5
 800de54:	3b15      	subs	r3, #21
 800de56:	089b      	lsrs	r3, r3, #2
 800de58:	3301      	adds	r3, #1
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	9305      	str	r3, [sp, #20]
 800de5e:	9b07      	ldr	r3, [sp, #28]
 800de60:	9a00      	ldr	r2, [sp, #0]
 800de62:	429a      	cmp	r2, r3
 800de64:	d311      	bcc.n	800de8a <__multiply+0xb6>
 800de66:	9b02      	ldr	r3, [sp, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	dd06      	ble.n	800de7a <__multiply+0xa6>
 800de6c:	9b03      	ldr	r3, [sp, #12]
 800de6e:	3b04      	subs	r3, #4
 800de70:	9303      	str	r3, [sp, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d053      	beq.n	800df22 <__multiply+0x14e>
 800de7a:	9b01      	ldr	r3, [sp, #4]
 800de7c:	9a02      	ldr	r2, [sp, #8]
 800de7e:	0018      	movs	r0, r3
 800de80:	611a      	str	r2, [r3, #16]
 800de82:	b009      	add	sp, #36	; 0x24
 800de84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de86:	c304      	stmia	r3!, {r2}
 800de88:	e7cd      	b.n	800de26 <__multiply+0x52>
 800de8a:	9b00      	ldr	r3, [sp, #0]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	b298      	uxth	r0, r3
 800de90:	2800      	cmp	r0, #0
 800de92:	d01b      	beq.n	800decc <__multiply+0xf8>
 800de94:	4667      	mov	r7, ip
 800de96:	2400      	movs	r4, #0
 800de98:	9e06      	ldr	r6, [sp, #24]
 800de9a:	ce02      	ldmia	r6!, {r1}
 800de9c:	683a      	ldr	r2, [r7, #0]
 800de9e:	b28b      	uxth	r3, r1
 800dea0:	4343      	muls	r3, r0
 800dea2:	b292      	uxth	r2, r2
 800dea4:	189b      	adds	r3, r3, r2
 800dea6:	191b      	adds	r3, r3, r4
 800dea8:	0c0c      	lsrs	r4, r1, #16
 800deaa:	4344      	muls	r4, r0
 800deac:	683a      	ldr	r2, [r7, #0]
 800deae:	0c11      	lsrs	r1, r2, #16
 800deb0:	1861      	adds	r1, r4, r1
 800deb2:	0c1c      	lsrs	r4, r3, #16
 800deb4:	1909      	adds	r1, r1, r4
 800deb6:	0c0c      	lsrs	r4, r1, #16
 800deb8:	b29b      	uxth	r3, r3
 800deba:	0409      	lsls	r1, r1, #16
 800debc:	430b      	orrs	r3, r1
 800debe:	c708      	stmia	r7!, {r3}
 800dec0:	9b04      	ldr	r3, [sp, #16]
 800dec2:	42b3      	cmp	r3, r6
 800dec4:	d8e9      	bhi.n	800de9a <__multiply+0xc6>
 800dec6:	4663      	mov	r3, ip
 800dec8:	9a05      	ldr	r2, [sp, #20]
 800deca:	509c      	str	r4, [r3, r2]
 800decc:	9b00      	ldr	r3, [sp, #0]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	0c1e      	lsrs	r6, r3, #16
 800ded2:	d020      	beq.n	800df16 <__multiply+0x142>
 800ded4:	4663      	mov	r3, ip
 800ded6:	002c      	movs	r4, r5
 800ded8:	4660      	mov	r0, ip
 800deda:	2700      	movs	r7, #0
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	3414      	adds	r4, #20
 800dee0:	6822      	ldr	r2, [r4, #0]
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	b291      	uxth	r1, r2
 800dee6:	4371      	muls	r1, r6
 800dee8:	6802      	ldr	r2, [r0, #0]
 800deea:	0c12      	lsrs	r2, r2, #16
 800deec:	1889      	adds	r1, r1, r2
 800deee:	19cf      	adds	r7, r1, r7
 800def0:	0439      	lsls	r1, r7, #16
 800def2:	430b      	orrs	r3, r1
 800def4:	6003      	str	r3, [r0, #0]
 800def6:	cc02      	ldmia	r4!, {r1}
 800def8:	6843      	ldr	r3, [r0, #4]
 800defa:	0c09      	lsrs	r1, r1, #16
 800defc:	4371      	muls	r1, r6
 800defe:	b29b      	uxth	r3, r3
 800df00:	0c3f      	lsrs	r7, r7, #16
 800df02:	18cb      	adds	r3, r1, r3
 800df04:	9a04      	ldr	r2, [sp, #16]
 800df06:	19db      	adds	r3, r3, r7
 800df08:	0c1f      	lsrs	r7, r3, #16
 800df0a:	3004      	adds	r0, #4
 800df0c:	42a2      	cmp	r2, r4
 800df0e:	d8e7      	bhi.n	800dee0 <__multiply+0x10c>
 800df10:	4662      	mov	r2, ip
 800df12:	9905      	ldr	r1, [sp, #20]
 800df14:	5053      	str	r3, [r2, r1]
 800df16:	9b00      	ldr	r3, [sp, #0]
 800df18:	3304      	adds	r3, #4
 800df1a:	9300      	str	r3, [sp, #0]
 800df1c:	2304      	movs	r3, #4
 800df1e:	449c      	add	ip, r3
 800df20:	e79d      	b.n	800de5e <__multiply+0x8a>
 800df22:	9b02      	ldr	r3, [sp, #8]
 800df24:	3b01      	subs	r3, #1
 800df26:	9302      	str	r3, [sp, #8]
 800df28:	e79d      	b.n	800de66 <__multiply+0x92>
 800df2a:	46c0      	nop			; (mov r8, r8)
 800df2c:	0800f3e0 	.word	0x0800f3e0
 800df30:	0800f46c 	.word	0x0800f46c

0800df34 <__pow5mult>:
 800df34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df36:	2303      	movs	r3, #3
 800df38:	0015      	movs	r5, r2
 800df3a:	0007      	movs	r7, r0
 800df3c:	000e      	movs	r6, r1
 800df3e:	401a      	ands	r2, r3
 800df40:	421d      	tst	r5, r3
 800df42:	d008      	beq.n	800df56 <__pow5mult+0x22>
 800df44:	4925      	ldr	r1, [pc, #148]	; (800dfdc <__pow5mult+0xa8>)
 800df46:	3a01      	subs	r2, #1
 800df48:	0092      	lsls	r2, r2, #2
 800df4a:	5852      	ldr	r2, [r2, r1]
 800df4c:	2300      	movs	r3, #0
 800df4e:	0031      	movs	r1, r6
 800df50:	f7ff fe52 	bl	800dbf8 <__multadd>
 800df54:	0006      	movs	r6, r0
 800df56:	10ad      	asrs	r5, r5, #2
 800df58:	d03d      	beq.n	800dfd6 <__pow5mult+0xa2>
 800df5a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800df5c:	2c00      	cmp	r4, #0
 800df5e:	d10f      	bne.n	800df80 <__pow5mult+0x4c>
 800df60:	2010      	movs	r0, #16
 800df62:	f7ff fda9 	bl	800dab8 <malloc>
 800df66:	1e02      	subs	r2, r0, #0
 800df68:	6278      	str	r0, [r7, #36]	; 0x24
 800df6a:	d105      	bne.n	800df78 <__pow5mult+0x44>
 800df6c:	21d7      	movs	r1, #215	; 0xd7
 800df6e:	4b1c      	ldr	r3, [pc, #112]	; (800dfe0 <__pow5mult+0xac>)
 800df70:	481c      	ldr	r0, [pc, #112]	; (800dfe4 <__pow5mult+0xb0>)
 800df72:	0049      	lsls	r1, r1, #1
 800df74:	f000 fe16 	bl	800eba4 <__assert_func>
 800df78:	6044      	str	r4, [r0, #4]
 800df7a:	6084      	str	r4, [r0, #8]
 800df7c:	6004      	str	r4, [r0, #0]
 800df7e:	60c4      	str	r4, [r0, #12]
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	689c      	ldr	r4, [r3, #8]
 800df84:	9301      	str	r3, [sp, #4]
 800df86:	2c00      	cmp	r4, #0
 800df88:	d108      	bne.n	800df9c <__pow5mult+0x68>
 800df8a:	0038      	movs	r0, r7
 800df8c:	4916      	ldr	r1, [pc, #88]	; (800dfe8 <__pow5mult+0xb4>)
 800df8e:	f7ff ff0b 	bl	800dda8 <__i2b>
 800df92:	9b01      	ldr	r3, [sp, #4]
 800df94:	0004      	movs	r4, r0
 800df96:	6098      	str	r0, [r3, #8]
 800df98:	2300      	movs	r3, #0
 800df9a:	6003      	str	r3, [r0, #0]
 800df9c:	2301      	movs	r3, #1
 800df9e:	421d      	tst	r5, r3
 800dfa0:	d00a      	beq.n	800dfb8 <__pow5mult+0x84>
 800dfa2:	0031      	movs	r1, r6
 800dfa4:	0022      	movs	r2, r4
 800dfa6:	0038      	movs	r0, r7
 800dfa8:	f7ff ff14 	bl	800ddd4 <__multiply>
 800dfac:	0031      	movs	r1, r6
 800dfae:	9001      	str	r0, [sp, #4]
 800dfb0:	0038      	movs	r0, r7
 800dfb2:	f7ff fdfd 	bl	800dbb0 <_Bfree>
 800dfb6:	9e01      	ldr	r6, [sp, #4]
 800dfb8:	106d      	asrs	r5, r5, #1
 800dfba:	d00c      	beq.n	800dfd6 <__pow5mult+0xa2>
 800dfbc:	6820      	ldr	r0, [r4, #0]
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d107      	bne.n	800dfd2 <__pow5mult+0x9e>
 800dfc2:	0022      	movs	r2, r4
 800dfc4:	0021      	movs	r1, r4
 800dfc6:	0038      	movs	r0, r7
 800dfc8:	f7ff ff04 	bl	800ddd4 <__multiply>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	6020      	str	r0, [r4, #0]
 800dfd0:	6003      	str	r3, [r0, #0]
 800dfd2:	0004      	movs	r4, r0
 800dfd4:	e7e2      	b.n	800df9c <__pow5mult+0x68>
 800dfd6:	0030      	movs	r0, r6
 800dfd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dfda:	46c0      	nop			; (mov r8, r8)
 800dfdc:	0800f5b8 	.word	0x0800f5b8
 800dfe0:	0800f36e 	.word	0x0800f36e
 800dfe4:	0800f46c 	.word	0x0800f46c
 800dfe8:	00000271 	.word	0x00000271

0800dfec <__lshift>:
 800dfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfee:	000c      	movs	r4, r1
 800dff0:	0017      	movs	r7, r2
 800dff2:	6923      	ldr	r3, [r4, #16]
 800dff4:	1155      	asrs	r5, r2, #5
 800dff6:	b087      	sub	sp, #28
 800dff8:	18eb      	adds	r3, r5, r3
 800dffa:	9302      	str	r3, [sp, #8]
 800dffc:	3301      	adds	r3, #1
 800dffe:	9301      	str	r3, [sp, #4]
 800e000:	6849      	ldr	r1, [r1, #4]
 800e002:	68a3      	ldr	r3, [r4, #8]
 800e004:	9004      	str	r0, [sp, #16]
 800e006:	9a01      	ldr	r2, [sp, #4]
 800e008:	4293      	cmp	r3, r2
 800e00a:	db10      	blt.n	800e02e <__lshift+0x42>
 800e00c:	9804      	ldr	r0, [sp, #16]
 800e00e:	f7ff fd8b 	bl	800db28 <_Balloc>
 800e012:	2300      	movs	r3, #0
 800e014:	0002      	movs	r2, r0
 800e016:	0006      	movs	r6, r0
 800e018:	0019      	movs	r1, r3
 800e01a:	3214      	adds	r2, #20
 800e01c:	4298      	cmp	r0, r3
 800e01e:	d10c      	bne.n	800e03a <__lshift+0x4e>
 800e020:	21da      	movs	r1, #218	; 0xda
 800e022:	0002      	movs	r2, r0
 800e024:	4b26      	ldr	r3, [pc, #152]	; (800e0c0 <__lshift+0xd4>)
 800e026:	4827      	ldr	r0, [pc, #156]	; (800e0c4 <__lshift+0xd8>)
 800e028:	31ff      	adds	r1, #255	; 0xff
 800e02a:	f000 fdbb 	bl	800eba4 <__assert_func>
 800e02e:	3101      	adds	r1, #1
 800e030:	005b      	lsls	r3, r3, #1
 800e032:	e7e8      	b.n	800e006 <__lshift+0x1a>
 800e034:	0098      	lsls	r0, r3, #2
 800e036:	5011      	str	r1, [r2, r0]
 800e038:	3301      	adds	r3, #1
 800e03a:	42ab      	cmp	r3, r5
 800e03c:	dbfa      	blt.n	800e034 <__lshift+0x48>
 800e03e:	43eb      	mvns	r3, r5
 800e040:	17db      	asrs	r3, r3, #31
 800e042:	401d      	ands	r5, r3
 800e044:	211f      	movs	r1, #31
 800e046:	0023      	movs	r3, r4
 800e048:	0038      	movs	r0, r7
 800e04a:	00ad      	lsls	r5, r5, #2
 800e04c:	1955      	adds	r5, r2, r5
 800e04e:	6922      	ldr	r2, [r4, #16]
 800e050:	3314      	adds	r3, #20
 800e052:	0092      	lsls	r2, r2, #2
 800e054:	4008      	ands	r0, r1
 800e056:	4684      	mov	ip, r0
 800e058:	189a      	adds	r2, r3, r2
 800e05a:	420f      	tst	r7, r1
 800e05c:	d02a      	beq.n	800e0b4 <__lshift+0xc8>
 800e05e:	3101      	adds	r1, #1
 800e060:	1a09      	subs	r1, r1, r0
 800e062:	9105      	str	r1, [sp, #20]
 800e064:	2100      	movs	r1, #0
 800e066:	9503      	str	r5, [sp, #12]
 800e068:	4667      	mov	r7, ip
 800e06a:	6818      	ldr	r0, [r3, #0]
 800e06c:	40b8      	lsls	r0, r7
 800e06e:	4301      	orrs	r1, r0
 800e070:	9803      	ldr	r0, [sp, #12]
 800e072:	c002      	stmia	r0!, {r1}
 800e074:	cb02      	ldmia	r3!, {r1}
 800e076:	9003      	str	r0, [sp, #12]
 800e078:	9805      	ldr	r0, [sp, #20]
 800e07a:	40c1      	lsrs	r1, r0
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d8f3      	bhi.n	800e068 <__lshift+0x7c>
 800e080:	0020      	movs	r0, r4
 800e082:	3015      	adds	r0, #21
 800e084:	2304      	movs	r3, #4
 800e086:	4282      	cmp	r2, r0
 800e088:	d304      	bcc.n	800e094 <__lshift+0xa8>
 800e08a:	1b13      	subs	r3, r2, r4
 800e08c:	3b15      	subs	r3, #21
 800e08e:	089b      	lsrs	r3, r3, #2
 800e090:	3301      	adds	r3, #1
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	50e9      	str	r1, [r5, r3]
 800e096:	2900      	cmp	r1, #0
 800e098:	d002      	beq.n	800e0a0 <__lshift+0xb4>
 800e09a:	9b02      	ldr	r3, [sp, #8]
 800e09c:	3302      	adds	r3, #2
 800e09e:	9301      	str	r3, [sp, #4]
 800e0a0:	9b01      	ldr	r3, [sp, #4]
 800e0a2:	9804      	ldr	r0, [sp, #16]
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	0021      	movs	r1, r4
 800e0a8:	6133      	str	r3, [r6, #16]
 800e0aa:	f7ff fd81 	bl	800dbb0 <_Bfree>
 800e0ae:	0030      	movs	r0, r6
 800e0b0:	b007      	add	sp, #28
 800e0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0b4:	cb02      	ldmia	r3!, {r1}
 800e0b6:	c502      	stmia	r5!, {r1}
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d8fb      	bhi.n	800e0b4 <__lshift+0xc8>
 800e0bc:	e7f0      	b.n	800e0a0 <__lshift+0xb4>
 800e0be:	46c0      	nop			; (mov r8, r8)
 800e0c0:	0800f3e0 	.word	0x0800f3e0
 800e0c4:	0800f46c 	.word	0x0800f46c

0800e0c8 <__mcmp>:
 800e0c8:	6902      	ldr	r2, [r0, #16]
 800e0ca:	690b      	ldr	r3, [r1, #16]
 800e0cc:	b530      	push	{r4, r5, lr}
 800e0ce:	0004      	movs	r4, r0
 800e0d0:	1ad0      	subs	r0, r2, r3
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d10d      	bne.n	800e0f2 <__mcmp+0x2a>
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	3414      	adds	r4, #20
 800e0da:	3114      	adds	r1, #20
 800e0dc:	18e2      	adds	r2, r4, r3
 800e0de:	18c9      	adds	r1, r1, r3
 800e0e0:	3a04      	subs	r2, #4
 800e0e2:	3904      	subs	r1, #4
 800e0e4:	6815      	ldr	r5, [r2, #0]
 800e0e6:	680b      	ldr	r3, [r1, #0]
 800e0e8:	429d      	cmp	r5, r3
 800e0ea:	d003      	beq.n	800e0f4 <__mcmp+0x2c>
 800e0ec:	2001      	movs	r0, #1
 800e0ee:	429d      	cmp	r5, r3
 800e0f0:	d303      	bcc.n	800e0fa <__mcmp+0x32>
 800e0f2:	bd30      	pop	{r4, r5, pc}
 800e0f4:	4294      	cmp	r4, r2
 800e0f6:	d3f3      	bcc.n	800e0e0 <__mcmp+0x18>
 800e0f8:	e7fb      	b.n	800e0f2 <__mcmp+0x2a>
 800e0fa:	4240      	negs	r0, r0
 800e0fc:	e7f9      	b.n	800e0f2 <__mcmp+0x2a>
	...

0800e100 <__mdiff>:
 800e100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e102:	000e      	movs	r6, r1
 800e104:	0007      	movs	r7, r0
 800e106:	0011      	movs	r1, r2
 800e108:	0030      	movs	r0, r6
 800e10a:	b087      	sub	sp, #28
 800e10c:	0014      	movs	r4, r2
 800e10e:	f7ff ffdb 	bl	800e0c8 <__mcmp>
 800e112:	1e05      	subs	r5, r0, #0
 800e114:	d110      	bne.n	800e138 <__mdiff+0x38>
 800e116:	0001      	movs	r1, r0
 800e118:	0038      	movs	r0, r7
 800e11a:	f7ff fd05 	bl	800db28 <_Balloc>
 800e11e:	1e02      	subs	r2, r0, #0
 800e120:	d104      	bne.n	800e12c <__mdiff+0x2c>
 800e122:	4b40      	ldr	r3, [pc, #256]	; (800e224 <__mdiff+0x124>)
 800e124:	4940      	ldr	r1, [pc, #256]	; (800e228 <__mdiff+0x128>)
 800e126:	4841      	ldr	r0, [pc, #260]	; (800e22c <__mdiff+0x12c>)
 800e128:	f000 fd3c 	bl	800eba4 <__assert_func>
 800e12c:	2301      	movs	r3, #1
 800e12e:	6145      	str	r5, [r0, #20]
 800e130:	6103      	str	r3, [r0, #16]
 800e132:	0010      	movs	r0, r2
 800e134:	b007      	add	sp, #28
 800e136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e138:	2301      	movs	r3, #1
 800e13a:	9301      	str	r3, [sp, #4]
 800e13c:	2800      	cmp	r0, #0
 800e13e:	db04      	blt.n	800e14a <__mdiff+0x4a>
 800e140:	0023      	movs	r3, r4
 800e142:	0034      	movs	r4, r6
 800e144:	001e      	movs	r6, r3
 800e146:	2300      	movs	r3, #0
 800e148:	9301      	str	r3, [sp, #4]
 800e14a:	0038      	movs	r0, r7
 800e14c:	6861      	ldr	r1, [r4, #4]
 800e14e:	f7ff fceb 	bl	800db28 <_Balloc>
 800e152:	1e02      	subs	r2, r0, #0
 800e154:	d103      	bne.n	800e15e <__mdiff+0x5e>
 800e156:	2190      	movs	r1, #144	; 0x90
 800e158:	4b32      	ldr	r3, [pc, #200]	; (800e224 <__mdiff+0x124>)
 800e15a:	0089      	lsls	r1, r1, #2
 800e15c:	e7e3      	b.n	800e126 <__mdiff+0x26>
 800e15e:	9b01      	ldr	r3, [sp, #4]
 800e160:	2700      	movs	r7, #0
 800e162:	60c3      	str	r3, [r0, #12]
 800e164:	6920      	ldr	r0, [r4, #16]
 800e166:	3414      	adds	r4, #20
 800e168:	9401      	str	r4, [sp, #4]
 800e16a:	9b01      	ldr	r3, [sp, #4]
 800e16c:	0084      	lsls	r4, r0, #2
 800e16e:	191b      	adds	r3, r3, r4
 800e170:	0034      	movs	r4, r6
 800e172:	9302      	str	r3, [sp, #8]
 800e174:	6933      	ldr	r3, [r6, #16]
 800e176:	3414      	adds	r4, #20
 800e178:	0099      	lsls	r1, r3, #2
 800e17a:	1863      	adds	r3, r4, r1
 800e17c:	9303      	str	r3, [sp, #12]
 800e17e:	0013      	movs	r3, r2
 800e180:	3314      	adds	r3, #20
 800e182:	469c      	mov	ip, r3
 800e184:	9305      	str	r3, [sp, #20]
 800e186:	9b01      	ldr	r3, [sp, #4]
 800e188:	9304      	str	r3, [sp, #16]
 800e18a:	9b04      	ldr	r3, [sp, #16]
 800e18c:	cc02      	ldmia	r4!, {r1}
 800e18e:	cb20      	ldmia	r3!, {r5}
 800e190:	9304      	str	r3, [sp, #16]
 800e192:	b2ab      	uxth	r3, r5
 800e194:	19df      	adds	r7, r3, r7
 800e196:	b28b      	uxth	r3, r1
 800e198:	1afb      	subs	r3, r7, r3
 800e19a:	0c09      	lsrs	r1, r1, #16
 800e19c:	0c2d      	lsrs	r5, r5, #16
 800e19e:	1a6d      	subs	r5, r5, r1
 800e1a0:	1419      	asrs	r1, r3, #16
 800e1a2:	186d      	adds	r5, r5, r1
 800e1a4:	4661      	mov	r1, ip
 800e1a6:	142f      	asrs	r7, r5, #16
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	042d      	lsls	r5, r5, #16
 800e1ac:	432b      	orrs	r3, r5
 800e1ae:	c108      	stmia	r1!, {r3}
 800e1b0:	9b03      	ldr	r3, [sp, #12]
 800e1b2:	468c      	mov	ip, r1
 800e1b4:	42a3      	cmp	r3, r4
 800e1b6:	d8e8      	bhi.n	800e18a <__mdiff+0x8a>
 800e1b8:	0031      	movs	r1, r6
 800e1ba:	9c03      	ldr	r4, [sp, #12]
 800e1bc:	3115      	adds	r1, #21
 800e1be:	2304      	movs	r3, #4
 800e1c0:	428c      	cmp	r4, r1
 800e1c2:	d304      	bcc.n	800e1ce <__mdiff+0xce>
 800e1c4:	1ba3      	subs	r3, r4, r6
 800e1c6:	3b15      	subs	r3, #21
 800e1c8:	089b      	lsrs	r3, r3, #2
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	9901      	ldr	r1, [sp, #4]
 800e1d0:	18cc      	adds	r4, r1, r3
 800e1d2:	9905      	ldr	r1, [sp, #20]
 800e1d4:	0026      	movs	r6, r4
 800e1d6:	18cb      	adds	r3, r1, r3
 800e1d8:	469c      	mov	ip, r3
 800e1da:	9902      	ldr	r1, [sp, #8]
 800e1dc:	428e      	cmp	r6, r1
 800e1de:	d310      	bcc.n	800e202 <__mdiff+0x102>
 800e1e0:	9e02      	ldr	r6, [sp, #8]
 800e1e2:	1ee1      	subs	r1, r4, #3
 800e1e4:	2500      	movs	r5, #0
 800e1e6:	428e      	cmp	r6, r1
 800e1e8:	d304      	bcc.n	800e1f4 <__mdiff+0xf4>
 800e1ea:	0031      	movs	r1, r6
 800e1ec:	3103      	adds	r1, #3
 800e1ee:	1b0c      	subs	r4, r1, r4
 800e1f0:	08a4      	lsrs	r4, r4, #2
 800e1f2:	00a5      	lsls	r5, r4, #2
 800e1f4:	195b      	adds	r3, r3, r5
 800e1f6:	3b04      	subs	r3, #4
 800e1f8:	6819      	ldr	r1, [r3, #0]
 800e1fa:	2900      	cmp	r1, #0
 800e1fc:	d00f      	beq.n	800e21e <__mdiff+0x11e>
 800e1fe:	6110      	str	r0, [r2, #16]
 800e200:	e797      	b.n	800e132 <__mdiff+0x32>
 800e202:	ce02      	ldmia	r6!, {r1}
 800e204:	b28d      	uxth	r5, r1
 800e206:	19ed      	adds	r5, r5, r7
 800e208:	0c0f      	lsrs	r7, r1, #16
 800e20a:	1429      	asrs	r1, r5, #16
 800e20c:	1879      	adds	r1, r7, r1
 800e20e:	140f      	asrs	r7, r1, #16
 800e210:	b2ad      	uxth	r5, r5
 800e212:	0409      	lsls	r1, r1, #16
 800e214:	430d      	orrs	r5, r1
 800e216:	4661      	mov	r1, ip
 800e218:	c120      	stmia	r1!, {r5}
 800e21a:	468c      	mov	ip, r1
 800e21c:	e7dd      	b.n	800e1da <__mdiff+0xda>
 800e21e:	3801      	subs	r0, #1
 800e220:	e7e9      	b.n	800e1f6 <__mdiff+0xf6>
 800e222:	46c0      	nop			; (mov r8, r8)
 800e224:	0800f3e0 	.word	0x0800f3e0
 800e228:	00000232 	.word	0x00000232
 800e22c:	0800f46c 	.word	0x0800f46c

0800e230 <__ulp>:
 800e230:	4b0f      	ldr	r3, [pc, #60]	; (800e270 <__ulp+0x40>)
 800e232:	4019      	ands	r1, r3
 800e234:	4b0f      	ldr	r3, [pc, #60]	; (800e274 <__ulp+0x44>)
 800e236:	18c9      	adds	r1, r1, r3
 800e238:	2900      	cmp	r1, #0
 800e23a:	dd04      	ble.n	800e246 <__ulp+0x16>
 800e23c:	2200      	movs	r2, #0
 800e23e:	000b      	movs	r3, r1
 800e240:	0010      	movs	r0, r2
 800e242:	0019      	movs	r1, r3
 800e244:	4770      	bx	lr
 800e246:	4249      	negs	r1, r1
 800e248:	2200      	movs	r2, #0
 800e24a:	2300      	movs	r3, #0
 800e24c:	1509      	asrs	r1, r1, #20
 800e24e:	2913      	cmp	r1, #19
 800e250:	dc04      	bgt.n	800e25c <__ulp+0x2c>
 800e252:	2080      	movs	r0, #128	; 0x80
 800e254:	0300      	lsls	r0, r0, #12
 800e256:	4108      	asrs	r0, r1
 800e258:	0003      	movs	r3, r0
 800e25a:	e7f1      	b.n	800e240 <__ulp+0x10>
 800e25c:	3914      	subs	r1, #20
 800e25e:	2001      	movs	r0, #1
 800e260:	291e      	cmp	r1, #30
 800e262:	dc02      	bgt.n	800e26a <__ulp+0x3a>
 800e264:	2080      	movs	r0, #128	; 0x80
 800e266:	0600      	lsls	r0, r0, #24
 800e268:	40c8      	lsrs	r0, r1
 800e26a:	0002      	movs	r2, r0
 800e26c:	e7e8      	b.n	800e240 <__ulp+0x10>
 800e26e:	46c0      	nop			; (mov r8, r8)
 800e270:	7ff00000 	.word	0x7ff00000
 800e274:	fcc00000 	.word	0xfcc00000

0800e278 <__b2d>:
 800e278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e27a:	0006      	movs	r6, r0
 800e27c:	6903      	ldr	r3, [r0, #16]
 800e27e:	3614      	adds	r6, #20
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	18f3      	adds	r3, r6, r3
 800e284:	1f1d      	subs	r5, r3, #4
 800e286:	682c      	ldr	r4, [r5, #0]
 800e288:	000f      	movs	r7, r1
 800e28a:	0020      	movs	r0, r4
 800e28c:	9301      	str	r3, [sp, #4]
 800e28e:	f7ff fd43 	bl	800dd18 <__hi0bits>
 800e292:	2320      	movs	r3, #32
 800e294:	1a1b      	subs	r3, r3, r0
 800e296:	491f      	ldr	r1, [pc, #124]	; (800e314 <__b2d+0x9c>)
 800e298:	603b      	str	r3, [r7, #0]
 800e29a:	280a      	cmp	r0, #10
 800e29c:	dc16      	bgt.n	800e2cc <__b2d+0x54>
 800e29e:	230b      	movs	r3, #11
 800e2a0:	0027      	movs	r7, r4
 800e2a2:	1a1b      	subs	r3, r3, r0
 800e2a4:	40df      	lsrs	r7, r3
 800e2a6:	4339      	orrs	r1, r7
 800e2a8:	469c      	mov	ip, r3
 800e2aa:	000b      	movs	r3, r1
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	42ae      	cmp	r6, r5
 800e2b0:	d202      	bcs.n	800e2b8 <__b2d+0x40>
 800e2b2:	9901      	ldr	r1, [sp, #4]
 800e2b4:	3908      	subs	r1, #8
 800e2b6:	6809      	ldr	r1, [r1, #0]
 800e2b8:	3015      	adds	r0, #21
 800e2ba:	4084      	lsls	r4, r0
 800e2bc:	4660      	mov	r0, ip
 800e2be:	40c1      	lsrs	r1, r0
 800e2c0:	430c      	orrs	r4, r1
 800e2c2:	0022      	movs	r2, r4
 800e2c4:	0010      	movs	r0, r2
 800e2c6:	0019      	movs	r1, r3
 800e2c8:	b003      	add	sp, #12
 800e2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2cc:	2700      	movs	r7, #0
 800e2ce:	42ae      	cmp	r6, r5
 800e2d0:	d202      	bcs.n	800e2d8 <__b2d+0x60>
 800e2d2:	9d01      	ldr	r5, [sp, #4]
 800e2d4:	3d08      	subs	r5, #8
 800e2d6:	682f      	ldr	r7, [r5, #0]
 800e2d8:	230b      	movs	r3, #11
 800e2da:	425b      	negs	r3, r3
 800e2dc:	469c      	mov	ip, r3
 800e2de:	4484      	add	ip, r0
 800e2e0:	280b      	cmp	r0, #11
 800e2e2:	d013      	beq.n	800e30c <__b2d+0x94>
 800e2e4:	4663      	mov	r3, ip
 800e2e6:	2020      	movs	r0, #32
 800e2e8:	409c      	lsls	r4, r3
 800e2ea:	1ac0      	subs	r0, r0, r3
 800e2ec:	003b      	movs	r3, r7
 800e2ee:	40c3      	lsrs	r3, r0
 800e2f0:	431c      	orrs	r4, r3
 800e2f2:	4321      	orrs	r1, r4
 800e2f4:	000b      	movs	r3, r1
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	42b5      	cmp	r5, r6
 800e2fa:	d901      	bls.n	800e300 <__b2d+0x88>
 800e2fc:	3d04      	subs	r5, #4
 800e2fe:	6829      	ldr	r1, [r5, #0]
 800e300:	4664      	mov	r4, ip
 800e302:	40c1      	lsrs	r1, r0
 800e304:	40a7      	lsls	r7, r4
 800e306:	430f      	orrs	r7, r1
 800e308:	003a      	movs	r2, r7
 800e30a:	e7db      	b.n	800e2c4 <__b2d+0x4c>
 800e30c:	4321      	orrs	r1, r4
 800e30e:	000b      	movs	r3, r1
 800e310:	e7fa      	b.n	800e308 <__b2d+0x90>
 800e312:	46c0      	nop			; (mov r8, r8)
 800e314:	3ff00000 	.word	0x3ff00000

0800e318 <__d2b>:
 800e318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e31a:	2101      	movs	r1, #1
 800e31c:	0014      	movs	r4, r2
 800e31e:	001e      	movs	r6, r3
 800e320:	9f08      	ldr	r7, [sp, #32]
 800e322:	f7ff fc01 	bl	800db28 <_Balloc>
 800e326:	1e05      	subs	r5, r0, #0
 800e328:	d105      	bne.n	800e336 <__d2b+0x1e>
 800e32a:	0002      	movs	r2, r0
 800e32c:	4b26      	ldr	r3, [pc, #152]	; (800e3c8 <__d2b+0xb0>)
 800e32e:	4927      	ldr	r1, [pc, #156]	; (800e3cc <__d2b+0xb4>)
 800e330:	4827      	ldr	r0, [pc, #156]	; (800e3d0 <__d2b+0xb8>)
 800e332:	f000 fc37 	bl	800eba4 <__assert_func>
 800e336:	0333      	lsls	r3, r6, #12
 800e338:	0076      	lsls	r6, r6, #1
 800e33a:	0b1b      	lsrs	r3, r3, #12
 800e33c:	0d76      	lsrs	r6, r6, #21
 800e33e:	d124      	bne.n	800e38a <__d2b+0x72>
 800e340:	9301      	str	r3, [sp, #4]
 800e342:	2c00      	cmp	r4, #0
 800e344:	d027      	beq.n	800e396 <__d2b+0x7e>
 800e346:	4668      	mov	r0, sp
 800e348:	9400      	str	r4, [sp, #0]
 800e34a:	f7ff fcff 	bl	800dd4c <__lo0bits>
 800e34e:	9c00      	ldr	r4, [sp, #0]
 800e350:	2800      	cmp	r0, #0
 800e352:	d01e      	beq.n	800e392 <__d2b+0x7a>
 800e354:	9b01      	ldr	r3, [sp, #4]
 800e356:	2120      	movs	r1, #32
 800e358:	001a      	movs	r2, r3
 800e35a:	1a09      	subs	r1, r1, r0
 800e35c:	408a      	lsls	r2, r1
 800e35e:	40c3      	lsrs	r3, r0
 800e360:	4322      	orrs	r2, r4
 800e362:	616a      	str	r2, [r5, #20]
 800e364:	9301      	str	r3, [sp, #4]
 800e366:	9c01      	ldr	r4, [sp, #4]
 800e368:	61ac      	str	r4, [r5, #24]
 800e36a:	1e63      	subs	r3, r4, #1
 800e36c:	419c      	sbcs	r4, r3
 800e36e:	3401      	adds	r4, #1
 800e370:	612c      	str	r4, [r5, #16]
 800e372:	2e00      	cmp	r6, #0
 800e374:	d018      	beq.n	800e3a8 <__d2b+0x90>
 800e376:	4b17      	ldr	r3, [pc, #92]	; (800e3d4 <__d2b+0xbc>)
 800e378:	18f6      	adds	r6, r6, r3
 800e37a:	2335      	movs	r3, #53	; 0x35
 800e37c:	1836      	adds	r6, r6, r0
 800e37e:	1a18      	subs	r0, r3, r0
 800e380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e382:	603e      	str	r6, [r7, #0]
 800e384:	6018      	str	r0, [r3, #0]
 800e386:	0028      	movs	r0, r5
 800e388:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e38a:	2280      	movs	r2, #128	; 0x80
 800e38c:	0352      	lsls	r2, r2, #13
 800e38e:	4313      	orrs	r3, r2
 800e390:	e7d6      	b.n	800e340 <__d2b+0x28>
 800e392:	616c      	str	r4, [r5, #20]
 800e394:	e7e7      	b.n	800e366 <__d2b+0x4e>
 800e396:	a801      	add	r0, sp, #4
 800e398:	f7ff fcd8 	bl	800dd4c <__lo0bits>
 800e39c:	2401      	movs	r4, #1
 800e39e:	9b01      	ldr	r3, [sp, #4]
 800e3a0:	612c      	str	r4, [r5, #16]
 800e3a2:	616b      	str	r3, [r5, #20]
 800e3a4:	3020      	adds	r0, #32
 800e3a6:	e7e4      	b.n	800e372 <__d2b+0x5a>
 800e3a8:	4b0b      	ldr	r3, [pc, #44]	; (800e3d8 <__d2b+0xc0>)
 800e3aa:	18c0      	adds	r0, r0, r3
 800e3ac:	4b0b      	ldr	r3, [pc, #44]	; (800e3dc <__d2b+0xc4>)
 800e3ae:	6038      	str	r0, [r7, #0]
 800e3b0:	18e3      	adds	r3, r4, r3
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	18eb      	adds	r3, r5, r3
 800e3b6:	6958      	ldr	r0, [r3, #20]
 800e3b8:	f7ff fcae 	bl	800dd18 <__hi0bits>
 800e3bc:	0164      	lsls	r4, r4, #5
 800e3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3c0:	1a24      	subs	r4, r4, r0
 800e3c2:	601c      	str	r4, [r3, #0]
 800e3c4:	e7df      	b.n	800e386 <__d2b+0x6e>
 800e3c6:	46c0      	nop			; (mov r8, r8)
 800e3c8:	0800f3e0 	.word	0x0800f3e0
 800e3cc:	0000030a 	.word	0x0000030a
 800e3d0:	0800f46c 	.word	0x0800f46c
 800e3d4:	fffffbcd 	.word	0xfffffbcd
 800e3d8:	fffffbce 	.word	0xfffffbce
 800e3dc:	3fffffff 	.word	0x3fffffff

0800e3e0 <__ratio>:
 800e3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3e2:	b087      	sub	sp, #28
 800e3e4:	000f      	movs	r7, r1
 800e3e6:	a904      	add	r1, sp, #16
 800e3e8:	0006      	movs	r6, r0
 800e3ea:	f7ff ff45 	bl	800e278 <__b2d>
 800e3ee:	9000      	str	r0, [sp, #0]
 800e3f0:	9101      	str	r1, [sp, #4]
 800e3f2:	9c00      	ldr	r4, [sp, #0]
 800e3f4:	9d01      	ldr	r5, [sp, #4]
 800e3f6:	0038      	movs	r0, r7
 800e3f8:	a905      	add	r1, sp, #20
 800e3fa:	f7ff ff3d 	bl	800e278 <__b2d>
 800e3fe:	9002      	str	r0, [sp, #8]
 800e400:	9103      	str	r1, [sp, #12]
 800e402:	9a02      	ldr	r2, [sp, #8]
 800e404:	9b03      	ldr	r3, [sp, #12]
 800e406:	6931      	ldr	r1, [r6, #16]
 800e408:	6938      	ldr	r0, [r7, #16]
 800e40a:	9e05      	ldr	r6, [sp, #20]
 800e40c:	1a08      	subs	r0, r1, r0
 800e40e:	9904      	ldr	r1, [sp, #16]
 800e410:	0140      	lsls	r0, r0, #5
 800e412:	1b89      	subs	r1, r1, r6
 800e414:	1841      	adds	r1, r0, r1
 800e416:	0508      	lsls	r0, r1, #20
 800e418:	2900      	cmp	r1, #0
 800e41a:	dd07      	ble.n	800e42c <__ratio+0x4c>
 800e41c:	9901      	ldr	r1, [sp, #4]
 800e41e:	1845      	adds	r5, r0, r1
 800e420:	0020      	movs	r0, r4
 800e422:	0029      	movs	r1, r5
 800e424:	f7f3 fa62 	bl	80018ec <__aeabi_ddiv>
 800e428:	b007      	add	sp, #28
 800e42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e42c:	9903      	ldr	r1, [sp, #12]
 800e42e:	1a0b      	subs	r3, r1, r0
 800e430:	e7f6      	b.n	800e420 <__ratio+0x40>

0800e432 <__copybits>:
 800e432:	b570      	push	{r4, r5, r6, lr}
 800e434:	0014      	movs	r4, r2
 800e436:	0005      	movs	r5, r0
 800e438:	3901      	subs	r1, #1
 800e43a:	6913      	ldr	r3, [r2, #16]
 800e43c:	1149      	asrs	r1, r1, #5
 800e43e:	3101      	adds	r1, #1
 800e440:	0089      	lsls	r1, r1, #2
 800e442:	3414      	adds	r4, #20
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	1841      	adds	r1, r0, r1
 800e448:	18e3      	adds	r3, r4, r3
 800e44a:	42a3      	cmp	r3, r4
 800e44c:	d80d      	bhi.n	800e46a <__copybits+0x38>
 800e44e:	0014      	movs	r4, r2
 800e450:	3411      	adds	r4, #17
 800e452:	2500      	movs	r5, #0
 800e454:	429c      	cmp	r4, r3
 800e456:	d803      	bhi.n	800e460 <__copybits+0x2e>
 800e458:	1a9b      	subs	r3, r3, r2
 800e45a:	3b11      	subs	r3, #17
 800e45c:	089b      	lsrs	r3, r3, #2
 800e45e:	009d      	lsls	r5, r3, #2
 800e460:	2300      	movs	r3, #0
 800e462:	1940      	adds	r0, r0, r5
 800e464:	4281      	cmp	r1, r0
 800e466:	d803      	bhi.n	800e470 <__copybits+0x3e>
 800e468:	bd70      	pop	{r4, r5, r6, pc}
 800e46a:	cc40      	ldmia	r4!, {r6}
 800e46c:	c540      	stmia	r5!, {r6}
 800e46e:	e7ec      	b.n	800e44a <__copybits+0x18>
 800e470:	c008      	stmia	r0!, {r3}
 800e472:	e7f7      	b.n	800e464 <__copybits+0x32>

0800e474 <__any_on>:
 800e474:	0002      	movs	r2, r0
 800e476:	6900      	ldr	r0, [r0, #16]
 800e478:	b510      	push	{r4, lr}
 800e47a:	3214      	adds	r2, #20
 800e47c:	114b      	asrs	r3, r1, #5
 800e47e:	4298      	cmp	r0, r3
 800e480:	db13      	blt.n	800e4aa <__any_on+0x36>
 800e482:	dd0c      	ble.n	800e49e <__any_on+0x2a>
 800e484:	241f      	movs	r4, #31
 800e486:	0008      	movs	r0, r1
 800e488:	4020      	ands	r0, r4
 800e48a:	4221      	tst	r1, r4
 800e48c:	d007      	beq.n	800e49e <__any_on+0x2a>
 800e48e:	0099      	lsls	r1, r3, #2
 800e490:	588c      	ldr	r4, [r1, r2]
 800e492:	0021      	movs	r1, r4
 800e494:	40c1      	lsrs	r1, r0
 800e496:	4081      	lsls	r1, r0
 800e498:	2001      	movs	r0, #1
 800e49a:	428c      	cmp	r4, r1
 800e49c:	d104      	bne.n	800e4a8 <__any_on+0x34>
 800e49e:	009b      	lsls	r3, r3, #2
 800e4a0:	18d3      	adds	r3, r2, r3
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d803      	bhi.n	800e4ae <__any_on+0x3a>
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	bd10      	pop	{r4, pc}
 800e4aa:	0003      	movs	r3, r0
 800e4ac:	e7f7      	b.n	800e49e <__any_on+0x2a>
 800e4ae:	3b04      	subs	r3, #4
 800e4b0:	6819      	ldr	r1, [r3, #0]
 800e4b2:	2900      	cmp	r1, #0
 800e4b4:	d0f5      	beq.n	800e4a2 <__any_on+0x2e>
 800e4b6:	2001      	movs	r0, #1
 800e4b8:	e7f6      	b.n	800e4a8 <__any_on+0x34>

0800e4ba <_calloc_r>:
 800e4ba:	b570      	push	{r4, r5, r6, lr}
 800e4bc:	0c13      	lsrs	r3, r2, #16
 800e4be:	0c0d      	lsrs	r5, r1, #16
 800e4c0:	d11e      	bne.n	800e500 <_calloc_r+0x46>
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d10c      	bne.n	800e4e0 <_calloc_r+0x26>
 800e4c6:	b289      	uxth	r1, r1
 800e4c8:	b294      	uxth	r4, r2
 800e4ca:	434c      	muls	r4, r1
 800e4cc:	0021      	movs	r1, r4
 800e4ce:	f7fb ff57 	bl	800a380 <_malloc_r>
 800e4d2:	1e05      	subs	r5, r0, #0
 800e4d4:	d01b      	beq.n	800e50e <_calloc_r+0x54>
 800e4d6:	0022      	movs	r2, r4
 800e4d8:	2100      	movs	r1, #0
 800e4da:	f7fb ff27 	bl	800a32c <memset>
 800e4de:	e016      	b.n	800e50e <_calloc_r+0x54>
 800e4e0:	1c1d      	adds	r5, r3, #0
 800e4e2:	1c0b      	adds	r3, r1, #0
 800e4e4:	b292      	uxth	r2, r2
 800e4e6:	b289      	uxth	r1, r1
 800e4e8:	b29c      	uxth	r4, r3
 800e4ea:	4351      	muls	r1, r2
 800e4ec:	b2ab      	uxth	r3, r5
 800e4ee:	4363      	muls	r3, r4
 800e4f0:	0c0c      	lsrs	r4, r1, #16
 800e4f2:	191c      	adds	r4, r3, r4
 800e4f4:	0c22      	lsrs	r2, r4, #16
 800e4f6:	d107      	bne.n	800e508 <_calloc_r+0x4e>
 800e4f8:	0424      	lsls	r4, r4, #16
 800e4fa:	b289      	uxth	r1, r1
 800e4fc:	430c      	orrs	r4, r1
 800e4fe:	e7e5      	b.n	800e4cc <_calloc_r+0x12>
 800e500:	2b00      	cmp	r3, #0
 800e502:	d101      	bne.n	800e508 <_calloc_r+0x4e>
 800e504:	1c13      	adds	r3, r2, #0
 800e506:	e7ed      	b.n	800e4e4 <_calloc_r+0x2a>
 800e508:	230c      	movs	r3, #12
 800e50a:	2500      	movs	r5, #0
 800e50c:	6003      	str	r3, [r0, #0]
 800e50e:	0028      	movs	r0, r5
 800e510:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e514 <_free_r>:
 800e514:	b570      	push	{r4, r5, r6, lr}
 800e516:	0005      	movs	r5, r0
 800e518:	2900      	cmp	r1, #0
 800e51a:	d010      	beq.n	800e53e <_free_r+0x2a>
 800e51c:	1f0c      	subs	r4, r1, #4
 800e51e:	6823      	ldr	r3, [r4, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	da00      	bge.n	800e526 <_free_r+0x12>
 800e524:	18e4      	adds	r4, r4, r3
 800e526:	0028      	movs	r0, r5
 800e528:	f7ff faee 	bl	800db08 <__malloc_lock>
 800e52c:	4a1d      	ldr	r2, [pc, #116]	; (800e5a4 <_free_r+0x90>)
 800e52e:	6813      	ldr	r3, [r2, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d105      	bne.n	800e540 <_free_r+0x2c>
 800e534:	6063      	str	r3, [r4, #4]
 800e536:	6014      	str	r4, [r2, #0]
 800e538:	0028      	movs	r0, r5
 800e53a:	f7ff faed 	bl	800db18 <__malloc_unlock>
 800e53e:	bd70      	pop	{r4, r5, r6, pc}
 800e540:	42a3      	cmp	r3, r4
 800e542:	d908      	bls.n	800e556 <_free_r+0x42>
 800e544:	6821      	ldr	r1, [r4, #0]
 800e546:	1860      	adds	r0, r4, r1
 800e548:	4283      	cmp	r3, r0
 800e54a:	d1f3      	bne.n	800e534 <_free_r+0x20>
 800e54c:	6818      	ldr	r0, [r3, #0]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	1841      	adds	r1, r0, r1
 800e552:	6021      	str	r1, [r4, #0]
 800e554:	e7ee      	b.n	800e534 <_free_r+0x20>
 800e556:	001a      	movs	r2, r3
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d001      	beq.n	800e562 <_free_r+0x4e>
 800e55e:	42a3      	cmp	r3, r4
 800e560:	d9f9      	bls.n	800e556 <_free_r+0x42>
 800e562:	6811      	ldr	r1, [r2, #0]
 800e564:	1850      	adds	r0, r2, r1
 800e566:	42a0      	cmp	r0, r4
 800e568:	d10b      	bne.n	800e582 <_free_r+0x6e>
 800e56a:	6820      	ldr	r0, [r4, #0]
 800e56c:	1809      	adds	r1, r1, r0
 800e56e:	1850      	adds	r0, r2, r1
 800e570:	6011      	str	r1, [r2, #0]
 800e572:	4283      	cmp	r3, r0
 800e574:	d1e0      	bne.n	800e538 <_free_r+0x24>
 800e576:	6818      	ldr	r0, [r3, #0]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	1841      	adds	r1, r0, r1
 800e57c:	6011      	str	r1, [r2, #0]
 800e57e:	6053      	str	r3, [r2, #4]
 800e580:	e7da      	b.n	800e538 <_free_r+0x24>
 800e582:	42a0      	cmp	r0, r4
 800e584:	d902      	bls.n	800e58c <_free_r+0x78>
 800e586:	230c      	movs	r3, #12
 800e588:	602b      	str	r3, [r5, #0]
 800e58a:	e7d5      	b.n	800e538 <_free_r+0x24>
 800e58c:	6821      	ldr	r1, [r4, #0]
 800e58e:	1860      	adds	r0, r4, r1
 800e590:	4283      	cmp	r3, r0
 800e592:	d103      	bne.n	800e59c <_free_r+0x88>
 800e594:	6818      	ldr	r0, [r3, #0]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	1841      	adds	r1, r0, r1
 800e59a:	6021      	str	r1, [r4, #0]
 800e59c:	6063      	str	r3, [r4, #4]
 800e59e:	6054      	str	r4, [r2, #4]
 800e5a0:	e7ca      	b.n	800e538 <_free_r+0x24>
 800e5a2:	46c0      	nop			; (mov r8, r8)
 800e5a4:	20001d30 	.word	0x20001d30

0800e5a8 <__ssputs_r>:
 800e5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5aa:	688e      	ldr	r6, [r1, #8]
 800e5ac:	b085      	sub	sp, #20
 800e5ae:	0007      	movs	r7, r0
 800e5b0:	000c      	movs	r4, r1
 800e5b2:	9203      	str	r2, [sp, #12]
 800e5b4:	9301      	str	r3, [sp, #4]
 800e5b6:	429e      	cmp	r6, r3
 800e5b8:	d83c      	bhi.n	800e634 <__ssputs_r+0x8c>
 800e5ba:	2390      	movs	r3, #144	; 0x90
 800e5bc:	898a      	ldrh	r2, [r1, #12]
 800e5be:	00db      	lsls	r3, r3, #3
 800e5c0:	421a      	tst	r2, r3
 800e5c2:	d034      	beq.n	800e62e <__ssputs_r+0x86>
 800e5c4:	6909      	ldr	r1, [r1, #16]
 800e5c6:	6823      	ldr	r3, [r4, #0]
 800e5c8:	6960      	ldr	r0, [r4, #20]
 800e5ca:	1a5b      	subs	r3, r3, r1
 800e5cc:	9302      	str	r3, [sp, #8]
 800e5ce:	2303      	movs	r3, #3
 800e5d0:	4343      	muls	r3, r0
 800e5d2:	0fdd      	lsrs	r5, r3, #31
 800e5d4:	18ed      	adds	r5, r5, r3
 800e5d6:	9b01      	ldr	r3, [sp, #4]
 800e5d8:	9802      	ldr	r0, [sp, #8]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	181b      	adds	r3, r3, r0
 800e5de:	106d      	asrs	r5, r5, #1
 800e5e0:	42ab      	cmp	r3, r5
 800e5e2:	d900      	bls.n	800e5e6 <__ssputs_r+0x3e>
 800e5e4:	001d      	movs	r5, r3
 800e5e6:	0553      	lsls	r3, r2, #21
 800e5e8:	d532      	bpl.n	800e650 <__ssputs_r+0xa8>
 800e5ea:	0029      	movs	r1, r5
 800e5ec:	0038      	movs	r0, r7
 800e5ee:	f7fb fec7 	bl	800a380 <_malloc_r>
 800e5f2:	1e06      	subs	r6, r0, #0
 800e5f4:	d109      	bne.n	800e60a <__ssputs_r+0x62>
 800e5f6:	230c      	movs	r3, #12
 800e5f8:	603b      	str	r3, [r7, #0]
 800e5fa:	2340      	movs	r3, #64	; 0x40
 800e5fc:	2001      	movs	r0, #1
 800e5fe:	89a2      	ldrh	r2, [r4, #12]
 800e600:	4240      	negs	r0, r0
 800e602:	4313      	orrs	r3, r2
 800e604:	81a3      	strh	r3, [r4, #12]
 800e606:	b005      	add	sp, #20
 800e608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e60a:	9a02      	ldr	r2, [sp, #8]
 800e60c:	6921      	ldr	r1, [r4, #16]
 800e60e:	f7fb fe84 	bl	800a31a <memcpy>
 800e612:	89a3      	ldrh	r3, [r4, #12]
 800e614:	4a14      	ldr	r2, [pc, #80]	; (800e668 <__ssputs_r+0xc0>)
 800e616:	401a      	ands	r2, r3
 800e618:	2380      	movs	r3, #128	; 0x80
 800e61a:	4313      	orrs	r3, r2
 800e61c:	81a3      	strh	r3, [r4, #12]
 800e61e:	9b02      	ldr	r3, [sp, #8]
 800e620:	6126      	str	r6, [r4, #16]
 800e622:	18f6      	adds	r6, r6, r3
 800e624:	6026      	str	r6, [r4, #0]
 800e626:	6165      	str	r5, [r4, #20]
 800e628:	9e01      	ldr	r6, [sp, #4]
 800e62a:	1aed      	subs	r5, r5, r3
 800e62c:	60a5      	str	r5, [r4, #8]
 800e62e:	9b01      	ldr	r3, [sp, #4]
 800e630:	429e      	cmp	r6, r3
 800e632:	d900      	bls.n	800e636 <__ssputs_r+0x8e>
 800e634:	9e01      	ldr	r6, [sp, #4]
 800e636:	0032      	movs	r2, r6
 800e638:	9903      	ldr	r1, [sp, #12]
 800e63a:	6820      	ldr	r0, [r4, #0]
 800e63c:	f000 fb04 	bl	800ec48 <memmove>
 800e640:	68a3      	ldr	r3, [r4, #8]
 800e642:	2000      	movs	r0, #0
 800e644:	1b9b      	subs	r3, r3, r6
 800e646:	60a3      	str	r3, [r4, #8]
 800e648:	6823      	ldr	r3, [r4, #0]
 800e64a:	199e      	adds	r6, r3, r6
 800e64c:	6026      	str	r6, [r4, #0]
 800e64e:	e7da      	b.n	800e606 <__ssputs_r+0x5e>
 800e650:	002a      	movs	r2, r5
 800e652:	0038      	movs	r0, r7
 800e654:	f000 fb0b 	bl	800ec6e <_realloc_r>
 800e658:	1e06      	subs	r6, r0, #0
 800e65a:	d1e0      	bne.n	800e61e <__ssputs_r+0x76>
 800e65c:	0038      	movs	r0, r7
 800e65e:	6921      	ldr	r1, [r4, #16]
 800e660:	f7ff ff58 	bl	800e514 <_free_r>
 800e664:	e7c7      	b.n	800e5f6 <__ssputs_r+0x4e>
 800e666:	46c0      	nop			; (mov r8, r8)
 800e668:	fffffb7f 	.word	0xfffffb7f

0800e66c <_svfiprintf_r>:
 800e66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e66e:	b0a1      	sub	sp, #132	; 0x84
 800e670:	9003      	str	r0, [sp, #12]
 800e672:	001d      	movs	r5, r3
 800e674:	898b      	ldrh	r3, [r1, #12]
 800e676:	000f      	movs	r7, r1
 800e678:	0016      	movs	r6, r2
 800e67a:	061b      	lsls	r3, r3, #24
 800e67c:	d511      	bpl.n	800e6a2 <_svfiprintf_r+0x36>
 800e67e:	690b      	ldr	r3, [r1, #16]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d10e      	bne.n	800e6a2 <_svfiprintf_r+0x36>
 800e684:	2140      	movs	r1, #64	; 0x40
 800e686:	f7fb fe7b 	bl	800a380 <_malloc_r>
 800e68a:	6038      	str	r0, [r7, #0]
 800e68c:	6138      	str	r0, [r7, #16]
 800e68e:	2800      	cmp	r0, #0
 800e690:	d105      	bne.n	800e69e <_svfiprintf_r+0x32>
 800e692:	230c      	movs	r3, #12
 800e694:	9a03      	ldr	r2, [sp, #12]
 800e696:	3801      	subs	r0, #1
 800e698:	6013      	str	r3, [r2, #0]
 800e69a:	b021      	add	sp, #132	; 0x84
 800e69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e69e:	2340      	movs	r3, #64	; 0x40
 800e6a0:	617b      	str	r3, [r7, #20]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	ac08      	add	r4, sp, #32
 800e6a6:	6163      	str	r3, [r4, #20]
 800e6a8:	3320      	adds	r3, #32
 800e6aa:	7663      	strb	r3, [r4, #25]
 800e6ac:	3310      	adds	r3, #16
 800e6ae:	76a3      	strb	r3, [r4, #26]
 800e6b0:	9507      	str	r5, [sp, #28]
 800e6b2:	0035      	movs	r5, r6
 800e6b4:	782b      	ldrb	r3, [r5, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d001      	beq.n	800e6be <_svfiprintf_r+0x52>
 800e6ba:	2b25      	cmp	r3, #37	; 0x25
 800e6bc:	d147      	bne.n	800e74e <_svfiprintf_r+0xe2>
 800e6be:	1bab      	subs	r3, r5, r6
 800e6c0:	9305      	str	r3, [sp, #20]
 800e6c2:	42b5      	cmp	r5, r6
 800e6c4:	d00c      	beq.n	800e6e0 <_svfiprintf_r+0x74>
 800e6c6:	0032      	movs	r2, r6
 800e6c8:	0039      	movs	r1, r7
 800e6ca:	9803      	ldr	r0, [sp, #12]
 800e6cc:	f7ff ff6c 	bl	800e5a8 <__ssputs_r>
 800e6d0:	1c43      	adds	r3, r0, #1
 800e6d2:	d100      	bne.n	800e6d6 <_svfiprintf_r+0x6a>
 800e6d4:	e0ae      	b.n	800e834 <_svfiprintf_r+0x1c8>
 800e6d6:	6962      	ldr	r2, [r4, #20]
 800e6d8:	9b05      	ldr	r3, [sp, #20]
 800e6da:	4694      	mov	ip, r2
 800e6dc:	4463      	add	r3, ip
 800e6de:	6163      	str	r3, [r4, #20]
 800e6e0:	782b      	ldrb	r3, [r5, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d100      	bne.n	800e6e8 <_svfiprintf_r+0x7c>
 800e6e6:	e0a5      	b.n	800e834 <_svfiprintf_r+0x1c8>
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	4252      	negs	r2, r2
 800e6ee:	6062      	str	r2, [r4, #4]
 800e6f0:	a904      	add	r1, sp, #16
 800e6f2:	3254      	adds	r2, #84	; 0x54
 800e6f4:	1852      	adds	r2, r2, r1
 800e6f6:	1c6e      	adds	r6, r5, #1
 800e6f8:	6023      	str	r3, [r4, #0]
 800e6fa:	60e3      	str	r3, [r4, #12]
 800e6fc:	60a3      	str	r3, [r4, #8]
 800e6fe:	7013      	strb	r3, [r2, #0]
 800e700:	65a3      	str	r3, [r4, #88]	; 0x58
 800e702:	2205      	movs	r2, #5
 800e704:	7831      	ldrb	r1, [r6, #0]
 800e706:	4854      	ldr	r0, [pc, #336]	; (800e858 <_svfiprintf_r+0x1ec>)
 800e708:	f7ff f9f2 	bl	800daf0 <memchr>
 800e70c:	1c75      	adds	r5, r6, #1
 800e70e:	2800      	cmp	r0, #0
 800e710:	d11f      	bne.n	800e752 <_svfiprintf_r+0xe6>
 800e712:	6822      	ldr	r2, [r4, #0]
 800e714:	06d3      	lsls	r3, r2, #27
 800e716:	d504      	bpl.n	800e722 <_svfiprintf_r+0xb6>
 800e718:	2353      	movs	r3, #83	; 0x53
 800e71a:	a904      	add	r1, sp, #16
 800e71c:	185b      	adds	r3, r3, r1
 800e71e:	2120      	movs	r1, #32
 800e720:	7019      	strb	r1, [r3, #0]
 800e722:	0713      	lsls	r3, r2, #28
 800e724:	d504      	bpl.n	800e730 <_svfiprintf_r+0xc4>
 800e726:	2353      	movs	r3, #83	; 0x53
 800e728:	a904      	add	r1, sp, #16
 800e72a:	185b      	adds	r3, r3, r1
 800e72c:	212b      	movs	r1, #43	; 0x2b
 800e72e:	7019      	strb	r1, [r3, #0]
 800e730:	7833      	ldrb	r3, [r6, #0]
 800e732:	2b2a      	cmp	r3, #42	; 0x2a
 800e734:	d016      	beq.n	800e764 <_svfiprintf_r+0xf8>
 800e736:	0035      	movs	r5, r6
 800e738:	2100      	movs	r1, #0
 800e73a:	200a      	movs	r0, #10
 800e73c:	68e3      	ldr	r3, [r4, #12]
 800e73e:	782a      	ldrb	r2, [r5, #0]
 800e740:	1c6e      	adds	r6, r5, #1
 800e742:	3a30      	subs	r2, #48	; 0x30
 800e744:	2a09      	cmp	r2, #9
 800e746:	d94e      	bls.n	800e7e6 <_svfiprintf_r+0x17a>
 800e748:	2900      	cmp	r1, #0
 800e74a:	d111      	bne.n	800e770 <_svfiprintf_r+0x104>
 800e74c:	e017      	b.n	800e77e <_svfiprintf_r+0x112>
 800e74e:	3501      	adds	r5, #1
 800e750:	e7b0      	b.n	800e6b4 <_svfiprintf_r+0x48>
 800e752:	4b41      	ldr	r3, [pc, #260]	; (800e858 <_svfiprintf_r+0x1ec>)
 800e754:	6822      	ldr	r2, [r4, #0]
 800e756:	1ac0      	subs	r0, r0, r3
 800e758:	2301      	movs	r3, #1
 800e75a:	4083      	lsls	r3, r0
 800e75c:	4313      	orrs	r3, r2
 800e75e:	002e      	movs	r6, r5
 800e760:	6023      	str	r3, [r4, #0]
 800e762:	e7ce      	b.n	800e702 <_svfiprintf_r+0x96>
 800e764:	9b07      	ldr	r3, [sp, #28]
 800e766:	1d19      	adds	r1, r3, #4
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	9107      	str	r1, [sp, #28]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	db01      	blt.n	800e774 <_svfiprintf_r+0x108>
 800e770:	930b      	str	r3, [sp, #44]	; 0x2c
 800e772:	e004      	b.n	800e77e <_svfiprintf_r+0x112>
 800e774:	425b      	negs	r3, r3
 800e776:	60e3      	str	r3, [r4, #12]
 800e778:	2302      	movs	r3, #2
 800e77a:	4313      	orrs	r3, r2
 800e77c:	6023      	str	r3, [r4, #0]
 800e77e:	782b      	ldrb	r3, [r5, #0]
 800e780:	2b2e      	cmp	r3, #46	; 0x2e
 800e782:	d10a      	bne.n	800e79a <_svfiprintf_r+0x12e>
 800e784:	786b      	ldrb	r3, [r5, #1]
 800e786:	2b2a      	cmp	r3, #42	; 0x2a
 800e788:	d135      	bne.n	800e7f6 <_svfiprintf_r+0x18a>
 800e78a:	9b07      	ldr	r3, [sp, #28]
 800e78c:	3502      	adds	r5, #2
 800e78e:	1d1a      	adds	r2, r3, #4
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	9207      	str	r2, [sp, #28]
 800e794:	2b00      	cmp	r3, #0
 800e796:	db2b      	blt.n	800e7f0 <_svfiprintf_r+0x184>
 800e798:	9309      	str	r3, [sp, #36]	; 0x24
 800e79a:	4e30      	ldr	r6, [pc, #192]	; (800e85c <_svfiprintf_r+0x1f0>)
 800e79c:	2203      	movs	r2, #3
 800e79e:	0030      	movs	r0, r6
 800e7a0:	7829      	ldrb	r1, [r5, #0]
 800e7a2:	f7ff f9a5 	bl	800daf0 <memchr>
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	d006      	beq.n	800e7b8 <_svfiprintf_r+0x14c>
 800e7aa:	2340      	movs	r3, #64	; 0x40
 800e7ac:	1b80      	subs	r0, r0, r6
 800e7ae:	4083      	lsls	r3, r0
 800e7b0:	6822      	ldr	r2, [r4, #0]
 800e7b2:	3501      	adds	r5, #1
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	6023      	str	r3, [r4, #0]
 800e7b8:	7829      	ldrb	r1, [r5, #0]
 800e7ba:	2206      	movs	r2, #6
 800e7bc:	4828      	ldr	r0, [pc, #160]	; (800e860 <_svfiprintf_r+0x1f4>)
 800e7be:	1c6e      	adds	r6, r5, #1
 800e7c0:	7621      	strb	r1, [r4, #24]
 800e7c2:	f7ff f995 	bl	800daf0 <memchr>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d03c      	beq.n	800e844 <_svfiprintf_r+0x1d8>
 800e7ca:	4b26      	ldr	r3, [pc, #152]	; (800e864 <_svfiprintf_r+0x1f8>)
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d125      	bne.n	800e81c <_svfiprintf_r+0x1b0>
 800e7d0:	2207      	movs	r2, #7
 800e7d2:	9b07      	ldr	r3, [sp, #28]
 800e7d4:	3307      	adds	r3, #7
 800e7d6:	4393      	bics	r3, r2
 800e7d8:	3308      	adds	r3, #8
 800e7da:	9307      	str	r3, [sp, #28]
 800e7dc:	6963      	ldr	r3, [r4, #20]
 800e7de:	9a04      	ldr	r2, [sp, #16]
 800e7e0:	189b      	adds	r3, r3, r2
 800e7e2:	6163      	str	r3, [r4, #20]
 800e7e4:	e765      	b.n	800e6b2 <_svfiprintf_r+0x46>
 800e7e6:	4343      	muls	r3, r0
 800e7e8:	0035      	movs	r5, r6
 800e7ea:	2101      	movs	r1, #1
 800e7ec:	189b      	adds	r3, r3, r2
 800e7ee:	e7a6      	b.n	800e73e <_svfiprintf_r+0xd2>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	425b      	negs	r3, r3
 800e7f4:	e7d0      	b.n	800e798 <_svfiprintf_r+0x12c>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	200a      	movs	r0, #10
 800e7fa:	001a      	movs	r2, r3
 800e7fc:	3501      	adds	r5, #1
 800e7fe:	6063      	str	r3, [r4, #4]
 800e800:	7829      	ldrb	r1, [r5, #0]
 800e802:	1c6e      	adds	r6, r5, #1
 800e804:	3930      	subs	r1, #48	; 0x30
 800e806:	2909      	cmp	r1, #9
 800e808:	d903      	bls.n	800e812 <_svfiprintf_r+0x1a6>
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d0c5      	beq.n	800e79a <_svfiprintf_r+0x12e>
 800e80e:	9209      	str	r2, [sp, #36]	; 0x24
 800e810:	e7c3      	b.n	800e79a <_svfiprintf_r+0x12e>
 800e812:	4342      	muls	r2, r0
 800e814:	0035      	movs	r5, r6
 800e816:	2301      	movs	r3, #1
 800e818:	1852      	adds	r2, r2, r1
 800e81a:	e7f1      	b.n	800e800 <_svfiprintf_r+0x194>
 800e81c:	ab07      	add	r3, sp, #28
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	003a      	movs	r2, r7
 800e822:	0021      	movs	r1, r4
 800e824:	4b10      	ldr	r3, [pc, #64]	; (800e868 <_svfiprintf_r+0x1fc>)
 800e826:	9803      	ldr	r0, [sp, #12]
 800e828:	f7fb feca 	bl	800a5c0 <_printf_float>
 800e82c:	9004      	str	r0, [sp, #16]
 800e82e:	9b04      	ldr	r3, [sp, #16]
 800e830:	3301      	adds	r3, #1
 800e832:	d1d3      	bne.n	800e7dc <_svfiprintf_r+0x170>
 800e834:	89bb      	ldrh	r3, [r7, #12]
 800e836:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e838:	065b      	lsls	r3, r3, #25
 800e83a:	d400      	bmi.n	800e83e <_svfiprintf_r+0x1d2>
 800e83c:	e72d      	b.n	800e69a <_svfiprintf_r+0x2e>
 800e83e:	2001      	movs	r0, #1
 800e840:	4240      	negs	r0, r0
 800e842:	e72a      	b.n	800e69a <_svfiprintf_r+0x2e>
 800e844:	ab07      	add	r3, sp, #28
 800e846:	9300      	str	r3, [sp, #0]
 800e848:	003a      	movs	r2, r7
 800e84a:	0021      	movs	r1, r4
 800e84c:	4b06      	ldr	r3, [pc, #24]	; (800e868 <_svfiprintf_r+0x1fc>)
 800e84e:	9803      	ldr	r0, [sp, #12]
 800e850:	f7fc f968 	bl	800ab24 <_printf_i>
 800e854:	e7ea      	b.n	800e82c <_svfiprintf_r+0x1c0>
 800e856:	46c0      	nop			; (mov r8, r8)
 800e858:	0800f5c4 	.word	0x0800f5c4
 800e85c:	0800f5ca 	.word	0x0800f5ca
 800e860:	0800f5ce 	.word	0x0800f5ce
 800e864:	0800a5c1 	.word	0x0800a5c1
 800e868:	0800e5a9 	.word	0x0800e5a9

0800e86c <__sfputc_r>:
 800e86c:	6893      	ldr	r3, [r2, #8]
 800e86e:	b510      	push	{r4, lr}
 800e870:	3b01      	subs	r3, #1
 800e872:	6093      	str	r3, [r2, #8]
 800e874:	2b00      	cmp	r3, #0
 800e876:	da04      	bge.n	800e882 <__sfputc_r+0x16>
 800e878:	6994      	ldr	r4, [r2, #24]
 800e87a:	42a3      	cmp	r3, r4
 800e87c:	db07      	blt.n	800e88e <__sfputc_r+0x22>
 800e87e:	290a      	cmp	r1, #10
 800e880:	d005      	beq.n	800e88e <__sfputc_r+0x22>
 800e882:	6813      	ldr	r3, [r2, #0]
 800e884:	1c58      	adds	r0, r3, #1
 800e886:	6010      	str	r0, [r2, #0]
 800e888:	7019      	strb	r1, [r3, #0]
 800e88a:	0008      	movs	r0, r1
 800e88c:	bd10      	pop	{r4, pc}
 800e88e:	f7fd fcb5 	bl	800c1fc <__swbuf_r>
 800e892:	0001      	movs	r1, r0
 800e894:	e7f9      	b.n	800e88a <__sfputc_r+0x1e>

0800e896 <__sfputs_r>:
 800e896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e898:	0006      	movs	r6, r0
 800e89a:	000f      	movs	r7, r1
 800e89c:	0014      	movs	r4, r2
 800e89e:	18d5      	adds	r5, r2, r3
 800e8a0:	42ac      	cmp	r4, r5
 800e8a2:	d101      	bne.n	800e8a8 <__sfputs_r+0x12>
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	e007      	b.n	800e8b8 <__sfputs_r+0x22>
 800e8a8:	7821      	ldrb	r1, [r4, #0]
 800e8aa:	003a      	movs	r2, r7
 800e8ac:	0030      	movs	r0, r6
 800e8ae:	f7ff ffdd 	bl	800e86c <__sfputc_r>
 800e8b2:	3401      	adds	r4, #1
 800e8b4:	1c43      	adds	r3, r0, #1
 800e8b6:	d1f3      	bne.n	800e8a0 <__sfputs_r+0xa>
 800e8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8bc <_vfiprintf_r>:
 800e8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8be:	b0a1      	sub	sp, #132	; 0x84
 800e8c0:	0006      	movs	r6, r0
 800e8c2:	000c      	movs	r4, r1
 800e8c4:	001f      	movs	r7, r3
 800e8c6:	9203      	str	r2, [sp, #12]
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d004      	beq.n	800e8d6 <_vfiprintf_r+0x1a>
 800e8cc:	6983      	ldr	r3, [r0, #24]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d101      	bne.n	800e8d6 <_vfiprintf_r+0x1a>
 800e8d2:	f7fb fc5b 	bl	800a18c <__sinit>
 800e8d6:	4b8e      	ldr	r3, [pc, #568]	; (800eb10 <_vfiprintf_r+0x254>)
 800e8d8:	429c      	cmp	r4, r3
 800e8da:	d11c      	bne.n	800e916 <_vfiprintf_r+0x5a>
 800e8dc:	6874      	ldr	r4, [r6, #4]
 800e8de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8e0:	07db      	lsls	r3, r3, #31
 800e8e2:	d405      	bmi.n	800e8f0 <_vfiprintf_r+0x34>
 800e8e4:	89a3      	ldrh	r3, [r4, #12]
 800e8e6:	059b      	lsls	r3, r3, #22
 800e8e8:	d402      	bmi.n	800e8f0 <_vfiprintf_r+0x34>
 800e8ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8ec:	f7fb fd13 	bl	800a316 <__retarget_lock_acquire_recursive>
 800e8f0:	89a3      	ldrh	r3, [r4, #12]
 800e8f2:	071b      	lsls	r3, r3, #28
 800e8f4:	d502      	bpl.n	800e8fc <_vfiprintf_r+0x40>
 800e8f6:	6923      	ldr	r3, [r4, #16]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d11d      	bne.n	800e938 <_vfiprintf_r+0x7c>
 800e8fc:	0021      	movs	r1, r4
 800e8fe:	0030      	movs	r0, r6
 800e900:	f7fd fce6 	bl	800c2d0 <__swsetup_r>
 800e904:	2800      	cmp	r0, #0
 800e906:	d017      	beq.n	800e938 <_vfiprintf_r+0x7c>
 800e908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e90a:	07db      	lsls	r3, r3, #31
 800e90c:	d50d      	bpl.n	800e92a <_vfiprintf_r+0x6e>
 800e90e:	2001      	movs	r0, #1
 800e910:	4240      	negs	r0, r0
 800e912:	b021      	add	sp, #132	; 0x84
 800e914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e916:	4b7f      	ldr	r3, [pc, #508]	; (800eb14 <_vfiprintf_r+0x258>)
 800e918:	429c      	cmp	r4, r3
 800e91a:	d101      	bne.n	800e920 <_vfiprintf_r+0x64>
 800e91c:	68b4      	ldr	r4, [r6, #8]
 800e91e:	e7de      	b.n	800e8de <_vfiprintf_r+0x22>
 800e920:	4b7d      	ldr	r3, [pc, #500]	; (800eb18 <_vfiprintf_r+0x25c>)
 800e922:	429c      	cmp	r4, r3
 800e924:	d1db      	bne.n	800e8de <_vfiprintf_r+0x22>
 800e926:	68f4      	ldr	r4, [r6, #12]
 800e928:	e7d9      	b.n	800e8de <_vfiprintf_r+0x22>
 800e92a:	89a3      	ldrh	r3, [r4, #12]
 800e92c:	059b      	lsls	r3, r3, #22
 800e92e:	d4ee      	bmi.n	800e90e <_vfiprintf_r+0x52>
 800e930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e932:	f7fb fcf1 	bl	800a318 <__retarget_lock_release_recursive>
 800e936:	e7ea      	b.n	800e90e <_vfiprintf_r+0x52>
 800e938:	2300      	movs	r3, #0
 800e93a:	ad08      	add	r5, sp, #32
 800e93c:	616b      	str	r3, [r5, #20]
 800e93e:	3320      	adds	r3, #32
 800e940:	766b      	strb	r3, [r5, #25]
 800e942:	3310      	adds	r3, #16
 800e944:	76ab      	strb	r3, [r5, #26]
 800e946:	9707      	str	r7, [sp, #28]
 800e948:	9f03      	ldr	r7, [sp, #12]
 800e94a:	783b      	ldrb	r3, [r7, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d001      	beq.n	800e954 <_vfiprintf_r+0x98>
 800e950:	2b25      	cmp	r3, #37	; 0x25
 800e952:	d14e      	bne.n	800e9f2 <_vfiprintf_r+0x136>
 800e954:	9b03      	ldr	r3, [sp, #12]
 800e956:	1afb      	subs	r3, r7, r3
 800e958:	9305      	str	r3, [sp, #20]
 800e95a:	9b03      	ldr	r3, [sp, #12]
 800e95c:	429f      	cmp	r7, r3
 800e95e:	d00d      	beq.n	800e97c <_vfiprintf_r+0xc0>
 800e960:	9b05      	ldr	r3, [sp, #20]
 800e962:	0021      	movs	r1, r4
 800e964:	0030      	movs	r0, r6
 800e966:	9a03      	ldr	r2, [sp, #12]
 800e968:	f7ff ff95 	bl	800e896 <__sfputs_r>
 800e96c:	1c43      	adds	r3, r0, #1
 800e96e:	d100      	bne.n	800e972 <_vfiprintf_r+0xb6>
 800e970:	e0b5      	b.n	800eade <_vfiprintf_r+0x222>
 800e972:	696a      	ldr	r2, [r5, #20]
 800e974:	9b05      	ldr	r3, [sp, #20]
 800e976:	4694      	mov	ip, r2
 800e978:	4463      	add	r3, ip
 800e97a:	616b      	str	r3, [r5, #20]
 800e97c:	783b      	ldrb	r3, [r7, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d100      	bne.n	800e984 <_vfiprintf_r+0xc8>
 800e982:	e0ac      	b.n	800eade <_vfiprintf_r+0x222>
 800e984:	2201      	movs	r2, #1
 800e986:	1c7b      	adds	r3, r7, #1
 800e988:	9303      	str	r3, [sp, #12]
 800e98a:	2300      	movs	r3, #0
 800e98c:	4252      	negs	r2, r2
 800e98e:	606a      	str	r2, [r5, #4]
 800e990:	a904      	add	r1, sp, #16
 800e992:	3254      	adds	r2, #84	; 0x54
 800e994:	1852      	adds	r2, r2, r1
 800e996:	602b      	str	r3, [r5, #0]
 800e998:	60eb      	str	r3, [r5, #12]
 800e99a:	60ab      	str	r3, [r5, #8]
 800e99c:	7013      	strb	r3, [r2, #0]
 800e99e:	65ab      	str	r3, [r5, #88]	; 0x58
 800e9a0:	9b03      	ldr	r3, [sp, #12]
 800e9a2:	2205      	movs	r2, #5
 800e9a4:	7819      	ldrb	r1, [r3, #0]
 800e9a6:	485d      	ldr	r0, [pc, #372]	; (800eb1c <_vfiprintf_r+0x260>)
 800e9a8:	f7ff f8a2 	bl	800daf0 <memchr>
 800e9ac:	9b03      	ldr	r3, [sp, #12]
 800e9ae:	1c5f      	adds	r7, r3, #1
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	d120      	bne.n	800e9f6 <_vfiprintf_r+0x13a>
 800e9b4:	682a      	ldr	r2, [r5, #0]
 800e9b6:	06d3      	lsls	r3, r2, #27
 800e9b8:	d504      	bpl.n	800e9c4 <_vfiprintf_r+0x108>
 800e9ba:	2353      	movs	r3, #83	; 0x53
 800e9bc:	a904      	add	r1, sp, #16
 800e9be:	185b      	adds	r3, r3, r1
 800e9c0:	2120      	movs	r1, #32
 800e9c2:	7019      	strb	r1, [r3, #0]
 800e9c4:	0713      	lsls	r3, r2, #28
 800e9c6:	d504      	bpl.n	800e9d2 <_vfiprintf_r+0x116>
 800e9c8:	2353      	movs	r3, #83	; 0x53
 800e9ca:	a904      	add	r1, sp, #16
 800e9cc:	185b      	adds	r3, r3, r1
 800e9ce:	212b      	movs	r1, #43	; 0x2b
 800e9d0:	7019      	strb	r1, [r3, #0]
 800e9d2:	9b03      	ldr	r3, [sp, #12]
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	2b2a      	cmp	r3, #42	; 0x2a
 800e9d8:	d016      	beq.n	800ea08 <_vfiprintf_r+0x14c>
 800e9da:	2100      	movs	r1, #0
 800e9dc:	68eb      	ldr	r3, [r5, #12]
 800e9de:	9f03      	ldr	r7, [sp, #12]
 800e9e0:	783a      	ldrb	r2, [r7, #0]
 800e9e2:	1c78      	adds	r0, r7, #1
 800e9e4:	3a30      	subs	r2, #48	; 0x30
 800e9e6:	4684      	mov	ip, r0
 800e9e8:	2a09      	cmp	r2, #9
 800e9ea:	d94f      	bls.n	800ea8c <_vfiprintf_r+0x1d0>
 800e9ec:	2900      	cmp	r1, #0
 800e9ee:	d111      	bne.n	800ea14 <_vfiprintf_r+0x158>
 800e9f0:	e017      	b.n	800ea22 <_vfiprintf_r+0x166>
 800e9f2:	3701      	adds	r7, #1
 800e9f4:	e7a9      	b.n	800e94a <_vfiprintf_r+0x8e>
 800e9f6:	4b49      	ldr	r3, [pc, #292]	; (800eb1c <_vfiprintf_r+0x260>)
 800e9f8:	682a      	ldr	r2, [r5, #0]
 800e9fa:	1ac0      	subs	r0, r0, r3
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	4083      	lsls	r3, r0
 800ea00:	4313      	orrs	r3, r2
 800ea02:	602b      	str	r3, [r5, #0]
 800ea04:	9703      	str	r7, [sp, #12]
 800ea06:	e7cb      	b.n	800e9a0 <_vfiprintf_r+0xe4>
 800ea08:	9b07      	ldr	r3, [sp, #28]
 800ea0a:	1d19      	adds	r1, r3, #4
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	9107      	str	r1, [sp, #28]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	db01      	blt.n	800ea18 <_vfiprintf_r+0x15c>
 800ea14:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea16:	e004      	b.n	800ea22 <_vfiprintf_r+0x166>
 800ea18:	425b      	negs	r3, r3
 800ea1a:	60eb      	str	r3, [r5, #12]
 800ea1c:	2302      	movs	r3, #2
 800ea1e:	4313      	orrs	r3, r2
 800ea20:	602b      	str	r3, [r5, #0]
 800ea22:	783b      	ldrb	r3, [r7, #0]
 800ea24:	2b2e      	cmp	r3, #46	; 0x2e
 800ea26:	d10a      	bne.n	800ea3e <_vfiprintf_r+0x182>
 800ea28:	787b      	ldrb	r3, [r7, #1]
 800ea2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea2c:	d137      	bne.n	800ea9e <_vfiprintf_r+0x1e2>
 800ea2e:	9b07      	ldr	r3, [sp, #28]
 800ea30:	3702      	adds	r7, #2
 800ea32:	1d1a      	adds	r2, r3, #4
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	9207      	str	r2, [sp, #28]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	db2d      	blt.n	800ea98 <_vfiprintf_r+0x1dc>
 800ea3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea3e:	2203      	movs	r2, #3
 800ea40:	7839      	ldrb	r1, [r7, #0]
 800ea42:	4837      	ldr	r0, [pc, #220]	; (800eb20 <_vfiprintf_r+0x264>)
 800ea44:	f7ff f854 	bl	800daf0 <memchr>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d007      	beq.n	800ea5c <_vfiprintf_r+0x1a0>
 800ea4c:	4b34      	ldr	r3, [pc, #208]	; (800eb20 <_vfiprintf_r+0x264>)
 800ea4e:	682a      	ldr	r2, [r5, #0]
 800ea50:	1ac0      	subs	r0, r0, r3
 800ea52:	2340      	movs	r3, #64	; 0x40
 800ea54:	4083      	lsls	r3, r0
 800ea56:	4313      	orrs	r3, r2
 800ea58:	3701      	adds	r7, #1
 800ea5a:	602b      	str	r3, [r5, #0]
 800ea5c:	7839      	ldrb	r1, [r7, #0]
 800ea5e:	1c7b      	adds	r3, r7, #1
 800ea60:	2206      	movs	r2, #6
 800ea62:	4830      	ldr	r0, [pc, #192]	; (800eb24 <_vfiprintf_r+0x268>)
 800ea64:	9303      	str	r3, [sp, #12]
 800ea66:	7629      	strb	r1, [r5, #24]
 800ea68:	f7ff f842 	bl	800daf0 <memchr>
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d045      	beq.n	800eafc <_vfiprintf_r+0x240>
 800ea70:	4b2d      	ldr	r3, [pc, #180]	; (800eb28 <_vfiprintf_r+0x26c>)
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d127      	bne.n	800eac6 <_vfiprintf_r+0x20a>
 800ea76:	2207      	movs	r2, #7
 800ea78:	9b07      	ldr	r3, [sp, #28]
 800ea7a:	3307      	adds	r3, #7
 800ea7c:	4393      	bics	r3, r2
 800ea7e:	3308      	adds	r3, #8
 800ea80:	9307      	str	r3, [sp, #28]
 800ea82:	696b      	ldr	r3, [r5, #20]
 800ea84:	9a04      	ldr	r2, [sp, #16]
 800ea86:	189b      	adds	r3, r3, r2
 800ea88:	616b      	str	r3, [r5, #20]
 800ea8a:	e75d      	b.n	800e948 <_vfiprintf_r+0x8c>
 800ea8c:	210a      	movs	r1, #10
 800ea8e:	434b      	muls	r3, r1
 800ea90:	4667      	mov	r7, ip
 800ea92:	189b      	adds	r3, r3, r2
 800ea94:	3909      	subs	r1, #9
 800ea96:	e7a3      	b.n	800e9e0 <_vfiprintf_r+0x124>
 800ea98:	2301      	movs	r3, #1
 800ea9a:	425b      	negs	r3, r3
 800ea9c:	e7ce      	b.n	800ea3c <_vfiprintf_r+0x180>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	001a      	movs	r2, r3
 800eaa2:	3701      	adds	r7, #1
 800eaa4:	606b      	str	r3, [r5, #4]
 800eaa6:	7839      	ldrb	r1, [r7, #0]
 800eaa8:	1c78      	adds	r0, r7, #1
 800eaaa:	3930      	subs	r1, #48	; 0x30
 800eaac:	4684      	mov	ip, r0
 800eaae:	2909      	cmp	r1, #9
 800eab0:	d903      	bls.n	800eaba <_vfiprintf_r+0x1fe>
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d0c3      	beq.n	800ea3e <_vfiprintf_r+0x182>
 800eab6:	9209      	str	r2, [sp, #36]	; 0x24
 800eab8:	e7c1      	b.n	800ea3e <_vfiprintf_r+0x182>
 800eaba:	230a      	movs	r3, #10
 800eabc:	435a      	muls	r2, r3
 800eabe:	4667      	mov	r7, ip
 800eac0:	1852      	adds	r2, r2, r1
 800eac2:	3b09      	subs	r3, #9
 800eac4:	e7ef      	b.n	800eaa6 <_vfiprintf_r+0x1ea>
 800eac6:	ab07      	add	r3, sp, #28
 800eac8:	9300      	str	r3, [sp, #0]
 800eaca:	0022      	movs	r2, r4
 800eacc:	0029      	movs	r1, r5
 800eace:	0030      	movs	r0, r6
 800ead0:	4b16      	ldr	r3, [pc, #88]	; (800eb2c <_vfiprintf_r+0x270>)
 800ead2:	f7fb fd75 	bl	800a5c0 <_printf_float>
 800ead6:	9004      	str	r0, [sp, #16]
 800ead8:	9b04      	ldr	r3, [sp, #16]
 800eada:	3301      	adds	r3, #1
 800eadc:	d1d1      	bne.n	800ea82 <_vfiprintf_r+0x1c6>
 800eade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eae0:	07db      	lsls	r3, r3, #31
 800eae2:	d405      	bmi.n	800eaf0 <_vfiprintf_r+0x234>
 800eae4:	89a3      	ldrh	r3, [r4, #12]
 800eae6:	059b      	lsls	r3, r3, #22
 800eae8:	d402      	bmi.n	800eaf0 <_vfiprintf_r+0x234>
 800eaea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaec:	f7fb fc14 	bl	800a318 <__retarget_lock_release_recursive>
 800eaf0:	89a3      	ldrh	r3, [r4, #12]
 800eaf2:	065b      	lsls	r3, r3, #25
 800eaf4:	d500      	bpl.n	800eaf8 <_vfiprintf_r+0x23c>
 800eaf6:	e70a      	b.n	800e90e <_vfiprintf_r+0x52>
 800eaf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eafa:	e70a      	b.n	800e912 <_vfiprintf_r+0x56>
 800eafc:	ab07      	add	r3, sp, #28
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	0022      	movs	r2, r4
 800eb02:	0029      	movs	r1, r5
 800eb04:	0030      	movs	r0, r6
 800eb06:	4b09      	ldr	r3, [pc, #36]	; (800eb2c <_vfiprintf_r+0x270>)
 800eb08:	f7fc f80c 	bl	800ab24 <_printf_i>
 800eb0c:	e7e3      	b.n	800ead6 <_vfiprintf_r+0x21a>
 800eb0e:	46c0      	nop			; (mov r8, r8)
 800eb10:	0800f190 	.word	0x0800f190
 800eb14:	0800f1b0 	.word	0x0800f1b0
 800eb18:	0800f170 	.word	0x0800f170
 800eb1c:	0800f5c4 	.word	0x0800f5c4
 800eb20:	0800f5ca 	.word	0x0800f5ca
 800eb24:	0800f5ce 	.word	0x0800f5ce
 800eb28:	0800a5c1 	.word	0x0800a5c1
 800eb2c:	0800e897 	.word	0x0800e897

0800eb30 <_read_r>:
 800eb30:	b570      	push	{r4, r5, r6, lr}
 800eb32:	0004      	movs	r4, r0
 800eb34:	0008      	movs	r0, r1
 800eb36:	0011      	movs	r1, r2
 800eb38:	001a      	movs	r2, r3
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	4d05      	ldr	r5, [pc, #20]	; (800eb54 <_read_r+0x24>)
 800eb3e:	602b      	str	r3, [r5, #0]
 800eb40:	f7f4 fe70 	bl	8003824 <_read>
 800eb44:	1c43      	adds	r3, r0, #1
 800eb46:	d103      	bne.n	800eb50 <_read_r+0x20>
 800eb48:	682b      	ldr	r3, [r5, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d000      	beq.n	800eb50 <_read_r+0x20>
 800eb4e:	6023      	str	r3, [r4, #0]
 800eb50:	bd70      	pop	{r4, r5, r6, pc}
 800eb52:	46c0      	nop			; (mov r8, r8)
 800eb54:	20001d38 	.word	0x20001d38

0800eb58 <nan>:
 800eb58:	2000      	movs	r0, #0
 800eb5a:	4901      	ldr	r1, [pc, #4]	; (800eb60 <nan+0x8>)
 800eb5c:	4770      	bx	lr
 800eb5e:	46c0      	nop			; (mov r8, r8)
 800eb60:	7ff80000 	.word	0x7ff80000

0800eb64 <strncmp>:
 800eb64:	b530      	push	{r4, r5, lr}
 800eb66:	0005      	movs	r5, r0
 800eb68:	1e10      	subs	r0, r2, #0
 800eb6a:	d008      	beq.n	800eb7e <strncmp+0x1a>
 800eb6c:	2400      	movs	r4, #0
 800eb6e:	3a01      	subs	r2, #1
 800eb70:	5d2b      	ldrb	r3, [r5, r4]
 800eb72:	5d08      	ldrb	r0, [r1, r4]
 800eb74:	4283      	cmp	r3, r0
 800eb76:	d101      	bne.n	800eb7c <strncmp+0x18>
 800eb78:	4294      	cmp	r4, r2
 800eb7a:	d101      	bne.n	800eb80 <strncmp+0x1c>
 800eb7c:	1a18      	subs	r0, r3, r0
 800eb7e:	bd30      	pop	{r4, r5, pc}
 800eb80:	3401      	adds	r4, #1
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d1f4      	bne.n	800eb70 <strncmp+0xc>
 800eb86:	e7f9      	b.n	800eb7c <strncmp+0x18>

0800eb88 <__ascii_wctomb>:
 800eb88:	0003      	movs	r3, r0
 800eb8a:	1e08      	subs	r0, r1, #0
 800eb8c:	d005      	beq.n	800eb9a <__ascii_wctomb+0x12>
 800eb8e:	2aff      	cmp	r2, #255	; 0xff
 800eb90:	d904      	bls.n	800eb9c <__ascii_wctomb+0x14>
 800eb92:	228a      	movs	r2, #138	; 0x8a
 800eb94:	2001      	movs	r0, #1
 800eb96:	601a      	str	r2, [r3, #0]
 800eb98:	4240      	negs	r0, r0
 800eb9a:	4770      	bx	lr
 800eb9c:	2001      	movs	r0, #1
 800eb9e:	700a      	strb	r2, [r1, #0]
 800eba0:	e7fb      	b.n	800eb9a <__ascii_wctomb+0x12>
	...

0800eba4 <__assert_func>:
 800eba4:	b530      	push	{r4, r5, lr}
 800eba6:	0014      	movs	r4, r2
 800eba8:	001a      	movs	r2, r3
 800ebaa:	4b09      	ldr	r3, [pc, #36]	; (800ebd0 <__assert_func+0x2c>)
 800ebac:	0005      	movs	r5, r0
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	b085      	sub	sp, #20
 800ebb2:	68d8      	ldr	r0, [r3, #12]
 800ebb4:	4b07      	ldr	r3, [pc, #28]	; (800ebd4 <__assert_func+0x30>)
 800ebb6:	2c00      	cmp	r4, #0
 800ebb8:	d101      	bne.n	800ebbe <__assert_func+0x1a>
 800ebba:	4b07      	ldr	r3, [pc, #28]	; (800ebd8 <__assert_func+0x34>)
 800ebbc:	001c      	movs	r4, r3
 800ebbe:	9301      	str	r3, [sp, #4]
 800ebc0:	9100      	str	r1, [sp, #0]
 800ebc2:	002b      	movs	r3, r5
 800ebc4:	4905      	ldr	r1, [pc, #20]	; (800ebdc <__assert_func+0x38>)
 800ebc6:	9402      	str	r4, [sp, #8]
 800ebc8:	f000 f80a 	bl	800ebe0 <fiprintf>
 800ebcc:	f000 f87e 	bl	800eccc <abort>
 800ebd0:	2000003c 	.word	0x2000003c
 800ebd4:	0800f5d5 	.word	0x0800f5d5
 800ebd8:	0800f610 	.word	0x0800f610
 800ebdc:	0800f5e2 	.word	0x0800f5e2

0800ebe0 <fiprintf>:
 800ebe0:	b40e      	push	{r1, r2, r3}
 800ebe2:	b503      	push	{r0, r1, lr}
 800ebe4:	0001      	movs	r1, r0
 800ebe6:	ab03      	add	r3, sp, #12
 800ebe8:	4804      	ldr	r0, [pc, #16]	; (800ebfc <fiprintf+0x1c>)
 800ebea:	cb04      	ldmia	r3!, {r2}
 800ebec:	6800      	ldr	r0, [r0, #0]
 800ebee:	9301      	str	r3, [sp, #4]
 800ebf0:	f7ff fe64 	bl	800e8bc <_vfiprintf_r>
 800ebf4:	b002      	add	sp, #8
 800ebf6:	bc08      	pop	{r3}
 800ebf8:	b003      	add	sp, #12
 800ebfa:	4718      	bx	r3
 800ebfc:	2000003c 	.word	0x2000003c

0800ec00 <_fstat_r>:
 800ec00:	2300      	movs	r3, #0
 800ec02:	b570      	push	{r4, r5, r6, lr}
 800ec04:	4d06      	ldr	r5, [pc, #24]	; (800ec20 <_fstat_r+0x20>)
 800ec06:	0004      	movs	r4, r0
 800ec08:	0008      	movs	r0, r1
 800ec0a:	0011      	movs	r1, r2
 800ec0c:	602b      	str	r3, [r5, #0]
 800ec0e:	f7f4 fe4c 	bl	80038aa <_fstat>
 800ec12:	1c43      	adds	r3, r0, #1
 800ec14:	d103      	bne.n	800ec1e <_fstat_r+0x1e>
 800ec16:	682b      	ldr	r3, [r5, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d000      	beq.n	800ec1e <_fstat_r+0x1e>
 800ec1c:	6023      	str	r3, [r4, #0]
 800ec1e:	bd70      	pop	{r4, r5, r6, pc}
 800ec20:	20001d38 	.word	0x20001d38

0800ec24 <_isatty_r>:
 800ec24:	2300      	movs	r3, #0
 800ec26:	b570      	push	{r4, r5, r6, lr}
 800ec28:	4d06      	ldr	r5, [pc, #24]	; (800ec44 <_isatty_r+0x20>)
 800ec2a:	0004      	movs	r4, r0
 800ec2c:	0008      	movs	r0, r1
 800ec2e:	602b      	str	r3, [r5, #0]
 800ec30:	f7f4 fe49 	bl	80038c6 <_isatty>
 800ec34:	1c43      	adds	r3, r0, #1
 800ec36:	d103      	bne.n	800ec40 <_isatty_r+0x1c>
 800ec38:	682b      	ldr	r3, [r5, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d000      	beq.n	800ec40 <_isatty_r+0x1c>
 800ec3e:	6023      	str	r3, [r4, #0]
 800ec40:	bd70      	pop	{r4, r5, r6, pc}
 800ec42:	46c0      	nop			; (mov r8, r8)
 800ec44:	20001d38 	.word	0x20001d38

0800ec48 <memmove>:
 800ec48:	b510      	push	{r4, lr}
 800ec4a:	4288      	cmp	r0, r1
 800ec4c:	d902      	bls.n	800ec54 <memmove+0xc>
 800ec4e:	188b      	adds	r3, r1, r2
 800ec50:	4298      	cmp	r0, r3
 800ec52:	d303      	bcc.n	800ec5c <memmove+0x14>
 800ec54:	2300      	movs	r3, #0
 800ec56:	e007      	b.n	800ec68 <memmove+0x20>
 800ec58:	5c8b      	ldrb	r3, [r1, r2]
 800ec5a:	5483      	strb	r3, [r0, r2]
 800ec5c:	3a01      	subs	r2, #1
 800ec5e:	d2fb      	bcs.n	800ec58 <memmove+0x10>
 800ec60:	bd10      	pop	{r4, pc}
 800ec62:	5ccc      	ldrb	r4, [r1, r3]
 800ec64:	54c4      	strb	r4, [r0, r3]
 800ec66:	3301      	adds	r3, #1
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d1fa      	bne.n	800ec62 <memmove+0x1a>
 800ec6c:	e7f8      	b.n	800ec60 <memmove+0x18>

0800ec6e <_realloc_r>:
 800ec6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec70:	0007      	movs	r7, r0
 800ec72:	000e      	movs	r6, r1
 800ec74:	0014      	movs	r4, r2
 800ec76:	2900      	cmp	r1, #0
 800ec78:	d105      	bne.n	800ec86 <_realloc_r+0x18>
 800ec7a:	0011      	movs	r1, r2
 800ec7c:	f7fb fb80 	bl	800a380 <_malloc_r>
 800ec80:	0005      	movs	r5, r0
 800ec82:	0028      	movs	r0, r5
 800ec84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ec86:	2a00      	cmp	r2, #0
 800ec88:	d103      	bne.n	800ec92 <_realloc_r+0x24>
 800ec8a:	f7ff fc43 	bl	800e514 <_free_r>
 800ec8e:	0025      	movs	r5, r4
 800ec90:	e7f7      	b.n	800ec82 <_realloc_r+0x14>
 800ec92:	f000 f822 	bl	800ecda <_malloc_usable_size_r>
 800ec96:	9001      	str	r0, [sp, #4]
 800ec98:	4284      	cmp	r4, r0
 800ec9a:	d803      	bhi.n	800eca4 <_realloc_r+0x36>
 800ec9c:	0035      	movs	r5, r6
 800ec9e:	0843      	lsrs	r3, r0, #1
 800eca0:	42a3      	cmp	r3, r4
 800eca2:	d3ee      	bcc.n	800ec82 <_realloc_r+0x14>
 800eca4:	0021      	movs	r1, r4
 800eca6:	0038      	movs	r0, r7
 800eca8:	f7fb fb6a 	bl	800a380 <_malloc_r>
 800ecac:	1e05      	subs	r5, r0, #0
 800ecae:	d0e8      	beq.n	800ec82 <_realloc_r+0x14>
 800ecb0:	9b01      	ldr	r3, [sp, #4]
 800ecb2:	0022      	movs	r2, r4
 800ecb4:	429c      	cmp	r4, r3
 800ecb6:	d900      	bls.n	800ecba <_realloc_r+0x4c>
 800ecb8:	001a      	movs	r2, r3
 800ecba:	0031      	movs	r1, r6
 800ecbc:	0028      	movs	r0, r5
 800ecbe:	f7fb fb2c 	bl	800a31a <memcpy>
 800ecc2:	0031      	movs	r1, r6
 800ecc4:	0038      	movs	r0, r7
 800ecc6:	f7ff fc25 	bl	800e514 <_free_r>
 800ecca:	e7da      	b.n	800ec82 <_realloc_r+0x14>

0800eccc <abort>:
 800eccc:	2006      	movs	r0, #6
 800ecce:	b510      	push	{r4, lr}
 800ecd0:	f000 f836 	bl	800ed40 <raise>
 800ecd4:	2001      	movs	r0, #1
 800ecd6:	f7f4 fd99 	bl	800380c <_exit>

0800ecda <_malloc_usable_size_r>:
 800ecda:	1f0b      	subs	r3, r1, #4
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	1f18      	subs	r0, r3, #4
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	da01      	bge.n	800ece8 <_malloc_usable_size_r+0xe>
 800ece4:	580b      	ldr	r3, [r1, r0]
 800ece6:	18c0      	adds	r0, r0, r3
 800ece8:	4770      	bx	lr

0800ecea <_raise_r>:
 800ecea:	b570      	push	{r4, r5, r6, lr}
 800ecec:	0004      	movs	r4, r0
 800ecee:	000d      	movs	r5, r1
 800ecf0:	291f      	cmp	r1, #31
 800ecf2:	d904      	bls.n	800ecfe <_raise_r+0x14>
 800ecf4:	2316      	movs	r3, #22
 800ecf6:	6003      	str	r3, [r0, #0]
 800ecf8:	2001      	movs	r0, #1
 800ecfa:	4240      	negs	r0, r0
 800ecfc:	bd70      	pop	{r4, r5, r6, pc}
 800ecfe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d004      	beq.n	800ed0e <_raise_r+0x24>
 800ed04:	008a      	lsls	r2, r1, #2
 800ed06:	189b      	adds	r3, r3, r2
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	2a00      	cmp	r2, #0
 800ed0c:	d108      	bne.n	800ed20 <_raise_r+0x36>
 800ed0e:	0020      	movs	r0, r4
 800ed10:	f000 f832 	bl	800ed78 <_getpid_r>
 800ed14:	002a      	movs	r2, r5
 800ed16:	0001      	movs	r1, r0
 800ed18:	0020      	movs	r0, r4
 800ed1a:	f000 f81b 	bl	800ed54 <_kill_r>
 800ed1e:	e7ed      	b.n	800ecfc <_raise_r+0x12>
 800ed20:	2000      	movs	r0, #0
 800ed22:	2a01      	cmp	r2, #1
 800ed24:	d0ea      	beq.n	800ecfc <_raise_r+0x12>
 800ed26:	1c51      	adds	r1, r2, #1
 800ed28:	d103      	bne.n	800ed32 <_raise_r+0x48>
 800ed2a:	2316      	movs	r3, #22
 800ed2c:	3001      	adds	r0, #1
 800ed2e:	6023      	str	r3, [r4, #0]
 800ed30:	e7e4      	b.n	800ecfc <_raise_r+0x12>
 800ed32:	2400      	movs	r4, #0
 800ed34:	0028      	movs	r0, r5
 800ed36:	601c      	str	r4, [r3, #0]
 800ed38:	4790      	blx	r2
 800ed3a:	0020      	movs	r0, r4
 800ed3c:	e7de      	b.n	800ecfc <_raise_r+0x12>
	...

0800ed40 <raise>:
 800ed40:	b510      	push	{r4, lr}
 800ed42:	4b03      	ldr	r3, [pc, #12]	; (800ed50 <raise+0x10>)
 800ed44:	0001      	movs	r1, r0
 800ed46:	6818      	ldr	r0, [r3, #0]
 800ed48:	f7ff ffcf 	bl	800ecea <_raise_r>
 800ed4c:	bd10      	pop	{r4, pc}
 800ed4e:	46c0      	nop			; (mov r8, r8)
 800ed50:	2000003c 	.word	0x2000003c

0800ed54 <_kill_r>:
 800ed54:	2300      	movs	r3, #0
 800ed56:	b570      	push	{r4, r5, r6, lr}
 800ed58:	4d06      	ldr	r5, [pc, #24]	; (800ed74 <_kill_r+0x20>)
 800ed5a:	0004      	movs	r4, r0
 800ed5c:	0008      	movs	r0, r1
 800ed5e:	0011      	movs	r1, r2
 800ed60:	602b      	str	r3, [r5, #0]
 800ed62:	f7f4 fd43 	bl	80037ec <_kill>
 800ed66:	1c43      	adds	r3, r0, #1
 800ed68:	d103      	bne.n	800ed72 <_kill_r+0x1e>
 800ed6a:	682b      	ldr	r3, [r5, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d000      	beq.n	800ed72 <_kill_r+0x1e>
 800ed70:	6023      	str	r3, [r4, #0]
 800ed72:	bd70      	pop	{r4, r5, r6, pc}
 800ed74:	20001d38 	.word	0x20001d38

0800ed78 <_getpid_r>:
 800ed78:	b510      	push	{r4, lr}
 800ed7a:	f7f4 fd31 	bl	80037e0 <_getpid>
 800ed7e:	bd10      	pop	{r4, pc}

0800ed80 <_init>:
 800ed80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed82:	46c0      	nop			; (mov r8, r8)
 800ed84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed86:	bc08      	pop	{r3}
 800ed88:	469e      	mov	lr, r3
 800ed8a:	4770      	bx	lr

0800ed8c <_fini>:
 800ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8e:	46c0      	nop			; (mov r8, r8)
 800ed90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed92:	bc08      	pop	{r3}
 800ed94:	469e      	mov	lr, r3
 800ed96:	4770      	bx	lr
